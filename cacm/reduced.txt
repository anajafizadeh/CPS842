.I 1
.T
Preliminary Report-International Algebraic Language
.B
CACM December, 1958
.A
Perlis, A. J.
Samelson,K.
.N
CA581203 JB March 22, 1978 8:28 PM
.X
100 5 1
123 5 1
164 5 1
1 5 1
1 5 1
1 5 1
205 5 1
210 5 1
214 5 1
1982 5 1
398 5 1
642 5 1
669 5 1
1 6 1
1 6 1
1 6 1
1 6 1
1 6 1
1 6 1
1 6 1
1 6 1
1 6 1
1 6 1
165 6 1
196 6 1
196 6 1
1273 6 1
1883 6 1
324 6 1
43 6 1
53 6 1
91 6 1
410 6 1
3184 6 1
.I 2
.T
Extraction Roots Repeated Subtractions Digital Computers
.B
CACM December, 1958
.A
Sugai, I.
.N
CA581202 JB March 22, 1978 8:29 PM
.X
2 5 2
2 5 2
2 5 2
.I 3
.T
Techniques Department Matrix Program Schemes
.B
CACM December, 1958
.A
Friedman, M. D.
.N
CA581201 JB March 22, 1978 8:30 PM
.X
3 5 3
3 5 3
3 5 3
.I 4
.T
Glossary Computer Engineering Programming Terminology
.B
CACM November, 1958
.N
CA581103 JB March 22, 1978 8:32 PM
.X
4 5 4
4 5 4
4 5 4
.I 5
.T
Two Square-Root Approximations
.B
CACM November, 1958
.A
Wadey, W. G.
.N
CA581102 JB March 22, 1978 8:33 PM
.X
5 5 5
5 5 5
5 5 5
.I 6
.T
Use Computers Inspection Procedures
.B
CACM November, 1958
.A
Muller, M. E.
.N
CA581101 JB March 22, 1978 8:33 PM
.X
6 5 6
6 5 6
6 5 6
477 5 6
6 6 6
.I 7
.T
Glossary Computer Engineering Programming Terminology
.B
CACM October, 1958
.N
CA581003 JB March 22, 1978 8:35 PM
.X
7 5 7
7 5 7
7 5 7
.I 8
.T
Equivalence Transformation Program Schemes
.B
CACM October, 1958
.A
Friedman, M. D.
.N
CA581002 JB March 22, 1978 8:36 PM
.X
8 5 8
8 5 8
8 5 8
.I 9
.T
Proposal UNCOL
.B
CACM October, 1958
.A
Conway, M. E.
.N
CA581001 JB March 22, 1978 8:37 PM
.X
9 5 9
9 5 9
9 5 9
.I 10
.T
Glossary Computer Engineering Programming Terminology
.B
CACM September, 1958
.N
CA580903 JB March 22, 1978 8:39 PM
.X
10 5 10
10 5 10
10 5 10
.I 11
.T
Problem Programming Communication
Changing Machines Proposed Solution-Part 2
.B
CACM September, 1958
.A
Strong, J.
Wegstein, J.
Tritter, A.
Olsztyn, J.
Mock, O.
Steel, T.
.N
CA580902 JB March 22, 1978 8:41 PM
.X
1781 5 11
1988 5 11
11 5 11
11 5 11
11 5 11
123 6 11
196 6 11
919 6 11
990 6 11
1007 6 11
1046 6 11
1131 6 11
1139 6 11
1140 6 11
1149 6 11
1198 6 11
1215 6 11
1223 6 11
1265 6 11
1303 6 11
1323 6 11
1358 6 11
1366 6 11
1421 6 11
1460 6 11
1462 6 11
1463 6 11
1467 6 11
1468 6 11
1477 6 11
1491 6 11
1496 6 11
1496 6 11
1531 6 11
1535 6 11
1565 6 11
1601 6 11
1602 6 11
1613 6 11
1614 6 11
1626 6 11
1641 6 11
1787 6 11
1788 6 11
205 6 11
224 6 11
249 6 11
288 6 11
316 6 11
381 6 11
381 6 11
398 6 11
11 6 11
11 6 11
14 6 11
404 6 11
410 6 11
463 6 11
464 6 11
483 6 11
3184 6 11
3188 6 11
584 6 11
600 6 11
680 6 11
691 6 11
763 6 11
799 6 11
.I 12
.T
Error Estimation Runge-Kutta Procedures
.B
CACM September, 1958
.A
Call, D. H.
Reeves, R. F.
.N
CA580901 JB March 22, 1978 8:56 PM
.X
12 5 12
12 5 12
12 5 12
.I 13
.T
Glossary Computer Engineering Programming Terminology
.B
CACM August, 1958
.N
CA580805 JB March 22, 1978 8:57 PM
.X
13 5 13
13 5 13
13 5 13
.I 14
.T
Problem Programming Communication
Changing Machines Proposed Solution (Part 1)
.B
CACM August, 1958
.A
Strong, J.
Wegstein, J.
Tritter, A.
Olsztyn, J.
Mock, O.
Steel, T.
.N
CA580804 JB March 22, 1978 9:02 PM
.X
1159 5 14
1988 5 14
381 5 14
14 5 14
14 5 14
14 5 14
1496 6 14
381 6 14
11 6 14
14 6 14
14 6 14
14 6 14
.I 15
.T
Recursive Curve Fitting Technique
.B
CACM August, 1958
.A
Giblin, J.
.N
CA580803 JB March 22, 1978 9:02 PM
.X
15 5 15
15 5 15
15 5 15
75 5 15
15 6 15
94 6 15
.I 16
.T
Secant Modification Newton's Method
.B
CACM August, 1958
.A
Jeeves, T. A.
.N
CA580802 JB March 22, 1978 9:03 PM
.X
16 5 16
16 5 16
16 5 16
39 5 16
16 6 16
.I 17
.T
Programming Arithmetic Operations
.B
CACM August, 1958
.A
Ershov, A. P.
.N
CA580801 JB March 22, 1978 9:04 PM
.X
1134 5 17
17 5 17
17 5 17
17 5 17
83 5 17
17 6 17
17 6 17
77 6 17
408 6 17
.I 18
.T
Simple Automatic Coding Systems
.B
CACM July, 1958
.A
Adams, E. S.
Schlesinger, S. I.
.N
CA580701 JB March 22, 1978 9:06 PM
.X
18 5 18
18 5 18
18 5 18
.I 19
.T
Glossary Computer Engineering Programming Terminology
.B
CACM June, 1958
.N
CA580603 JB March 22, 1978 9:07 PM
.X
19 5 19
19 5 19
19 5 19
.I 20
.T
Accelerating Convergence Iterative Processes
.W
technique discussed which, applied
iterative procedure solution
equation, accelerates rate convergence if
iteration converges induces convergence if
iteration diverges. illustrative example given.
.B
CACM June, 1958
.A
Wegstein, J. H.
.N
CA580602 JB March 22, 1978 9:09 PM
.X
20 5 20
20 5 20
20 5 20
.I 21
.T
Algebraic Formulation Flow Diagrams
.B
CACM June, 1958
.A
Voorhees, E. A.
.N
CA580601 JB March 22, 1978 9:10 PM
.X
21 5 21
21 5 21
21 5 21
679 5 21
21 6 21
407 6 21
3184 6 21
.I 22
.T
Unusual Applications Department--Automatic
Implementation Computer Logic
.B
CACM May, 1958
.A
Morris, E. F.
Wohr, T. E.
.N
CA580506 JB March 22, 1978 9:11 PM
.X
22 5 22
22 5 22
22 5 22
.I 23
.T
Binary Truth-Function Operations
Decimal Computer Extract Command
.B
CACM May, 1958
.A
Kautz, W. H.
.N
CA580505 JB March 22, 1978 9:12 PM
.X
23 5 23
23 5 23
23 5 23
.I 24
.T
Improved Decimal Redundancy Check
.B
CACM May, 1958
.A
Sisson, R. L.
.N
CA580504 JB March 22, 1978 9:13 PM
.X
24 5 24
24 5 24
24 5 24
.I 25
.T
General Purpose Programming Systems
.B
CACM May, 1958
.A
Holt, A. W.
.N
CA580503 JB March 22, 1978 9:14 PM
.X
25 5 25
25 5 25
25 5 25
.I 26
.T
Subroutine Method Calculating Logarithms
.B
CACM May, 1958
.A
Bemer, R. W.
.N
CA580502 JB March 22, 1978 9:16 PM
.X
26 5 26
26 5 26
26 5 26
848 5 26
26 6 26
35 6 26
.I 27
.T
Note Empirical Bounds Generating Bessel Functions
.B
CACM May, 1958
.A
Randels, J. B.
Reeves, R. F.
.N
CA580501 JB March 22, 1978 9:17 PM
.X
27 5 27
27 5 27
27 5 27
.I 28
.T
Request Methods Programs
.B
CACM April, 1958
.A
Corley, H. P. T.
.N
CA580402 JB March 22, 1978 9:18 PM
.X
28 5 28
28 5 28
28 5 28
.I 29
.T
Need Algorithm
.B
CACM April, 1958
.A
Selden, W.
.N
CA580401 JB March 22, 1978 9:19 PM
.X
29 5 29
29 5 29
29 5 29
.I 30
.T
Algorithm Analyzing Logical Statements
Produce Truth Function Table
.B
CACM March, 1958
.A
Wolpe, H.
.N
CA580302 JB March 22, 1978 9:20 PM
.X
30 5 30
30 5 30
30 5 30
.I 31
.T
IBM 704 Code-Nundrums
.B
CACM March, 1958
.A
Grumette, M.
.N
CA580301 JB March 22, 1978 9:21 PM
.X
31 5 31
31 5 31
31 5 31
.I 32
.T
Variable-Width Tables Binary-Search Facility
.B
CACM February, 1958
.A
Halpern, M.
.N
CA580201 JB March 22, 1978 9:22 PM
.X
32 5 32
32 5 32
32 5 32
.I 33
.T
Programmed Binary Counter IBM Type 650 Calculator
.B
CACM January, 1958
.A
Kenny, B. C.
Hunter, J. A.
.N
CA580103 JB March 22, 1978 9:25 PM
.X
33 5 33
33 5 33
33 5 33
.I 34
.T
Tables Automatic Computation
.B
CACM January, 1958
.A
Wilf, H. S.
.N
CA580102 JB March 22, 1978 9:26 PM
.X
34 5 34
34 5 34
34 5 34
.I 35
.T
Machine Method Square-Root Computation
.B
CACM January, 1958
.A
Bemer, R. W.
.N
CA580101 JB March 22, 1978 9:27 PM
.X
35 5 35
35 5 35
35 5 35
848 5 35
26 6 35
35 6 35
.I 36
.T
Queue Network Simulator IBM 650 Burroughs 220
.B
CACM December, 1959
.A
Conway, R. W.
Johnson, B. M.
Maxwell, W. L.
.N
CA591206 JB March 22, 1978 3:35 PM
.X
36 5 36
36 5 36
36 5 36
.I 37
.T
Impact Computer Developments
.B
CACM December, 1959
.A
Humphrey, S. M.
.N
CA591205 JB March 22, 1978 3:36 PM
.X
37 5 37
37 5 37
37 5 37
.I 38
.T
Proposed Interpretation ALGOL
.B
CACM December, 1959
.A
Irons, E. T.
Acton, F. S.
.N
CA591204 JB March 22, 1978 3:37 PM
.X
38 5 38
38 5 38
38 5 38
.I 39
.T
Secant Method Simultaneous Nonlinear Equations
.W
procedure simultaneous solution
system not-necessarily-linear equations,
generalization secant method
single function one variable, given.
.B
CACM December, 1959
.A
Wolfe, P.
.N
CA591203 JB March 22, 1978 3:39 PM
.X
39 4 39
16 5 39
39 5 39
39 5 39
39 5 39
.I 40
.T
Fingers Fists? (The Choice Decimal Binary Representation)
.W
binary number system offers many advantages
over decimal representation high-performance,
general-purpose computer. greater simplicity
binary arithmetic unit greater compactness
binary numbers both contribute directly arithmetic
speed. Less obvious perhaps more important
way binary addressing instruction formats can
increase overall performance. Binary addresses
also essential certain powerful operations which
not practical decimal instruction formats.
other hand, decimal numbers essential
communicating between man computer.
applications requiring processing large volume
inherently decimal input output data,
time decimal-binary conversion needed purely
binary computer may significant. slower
decimal adder may take less time than fast binary adder
doing addition two conversions. careful
review significance decimal binary addressing
both binary decimal data arithmetic,
supplemented efficient conversion instructions.
.B
CACM December, 1959
.A
Buchholz, W.
.N
CA591202 JB March 22, 1978 3:47 PM
.X
40 5 40
40 5 40
40 5 40
.I 41
.T
Some Notes Computer Research Eastern Europe
.B
CACM December, 1959
.A
Nadler, M.
.N
CA591201 JB March 22, 1978 3:48 PM
.X
41 4 41
41 5 41
41 5 41
41 5 41
67 5 41
.I 42
.T
New Method Computation Square Roots Without Using Division
.B
CACM November, 1959
.A
Sarafyan, D.
.N
CA591106 JB March 22, 1978 3:50 PM
.X
42 5 42
42 5 42
42 5 42
.I 43
.T
Technique Handling Macro Instructions
.B
CACM November, 1959
.A
Greenwald, I. D.
.N
CA591105 JB March 22, 1978 3:51 PM
.X
205 5 43
43 5 43
43 5 43
43 5 43
1 6 43
43 6 43
.I 44
.T
RUNCIBLE-Algebraic Translation Limited Computer
.B
CACM November, 1959
.A
Knuth, D. E.
.N
CA591104 JB March 22, 1978 3:52 PM
.X
1134 4 44
1141 4 44
364 4 44
405 4 44
438 4 44
561 4 44
44 4 44
222 5 44
364 5 44
44 5 44
44 5 44
44 5 44
77 5 44
100 6 44
224 6 44
44 6 44
44 6 44
77 6 44
82 6 44
98 6 44
.I 45
.T
Flow Outlining-A Substitute Flow Charting
.B
CACM November, 1959
.A
Gant, W. T.
.N
CA591103 JB March 22, 1978 3:53 PM
.X
45 5 45
45 5 45
45 5 45
728 5 45
920 6 45
45 6 45
.I 46
.T
Multiprogramming STRETCH: Feasibility Considerations
.W
tendency towards increased parallelism
computers noted. Exploitation parallelism
presents number new problems machine design
programming systems. Minimum requirements
successful concurrent execution several independent
problem programs discussed. These requirements
met STRETCH system carefully balanced
combination built-in programmed logic.
Techniques described which place burden
programmed logic system programs (supervisory
program compiler) rather than problem programs.
.B
CACM November, 1959
.A
Codd, E. F.
Lowry, E. S.
McDonough, E.
Scalzi, C. A.
.N
CA591102 JB March 22, 1978 3:57 PM
.X
168 5 46
491 5 46
46 5 46
46 5 46
46 5 46
168 6 46
185 6 46
196 6 46
46 6 46
46 6 46
.I 47
.T
Russian Visit U.S. Computers
.B
CACM November, 1959
.A
Zaitzeff, E. M.
Astrahan, M. M.
.N
CA591101 JB March 22, 1978 3:59 PM
.X
47 5 47
47 5 47
47 5 47
.I 48
.T
Shift-Register Code Indexing Applications
.W
communication use shift-register
code n = 10 described calling
64 wireless telemetering stations fixed cyclical order.
high degree redundancy used, permitting
single-error correcting code ("minimum-distance-three"
code) 64 10-bit code words employed
station identification code. Embedding
shift-register code period 1023 permits
code employed without punctuation, each
telemetering station receivers simply putting
received ones zeros into shift register. Each
time given code combination arises identifying
particular station (barring tuitous error combinations
very low probability) has been called.
communication describes properties application
code some detail finding
particular example employed URAL,
Soviet-built drum computer donated Indian
Statistical Institute United Nations
Technical Aid Administration (UNTAA).
.B
CACM October, 1959
.A
Nadler, M.
Sengupta, A.
.N
CA591011 JB March 22, 1978 4:07 PM
.X
48 5 48
48 5 48
48 5 48
.I 49
.T
Scientific Business Applications (Oracle Curve Plotter)
.B
CACM October, 1959
.A
Fike, C. T.
.N
CA591010 JB March 22, 1978 4:08 PM
.X
49 5 49
49 5 49
49 5 49
.I 50
.T
Statistical Programs IBM 650-Part II
.B
CACM October, 1959
.A
Hamblen, J. W.
.N
CA591009 JB March 22, 1978 4:09 PM
.X
50 5 50
50 5 50
50 5 50
.I 51
.T
Construction Micro-Flowcharts
.B
CACM October, 1959
.A
Gorn, S.
Ingerman, P. Z.
Crozier, J. B.
.N
CA591008 JB March 22, 1978 4:10 PM
.X
249 5 51
51 5 51
51 5 51
51 5 51
196 6 51
303 6 51
51 6 51
.I 52
.T
Efficient Method Generating Uniformly Distributed
Points Surface n-Dimensional
Sphere (Corrigendum)
.B
CACM October, 1959
.A
Cook, J. M.
.N
CA591007 JB March 22, 1978 4:12 PM
.X
52 5 52
52 5 52
52 5 52
.I 53
.T
Recommendations SHARE ALGOL Committee
.B
CACM October, 1959
.N
CA591006 JB March 22, 1978 4:13 PM
.X
214 5 53
53 5 53
53 5 53
53 5 53
1 6 53
53 6 53
91 6 53
.I 54
.T
SALE, Simple Algebraic Language Engineers
.B
CACM October, 1959
.A
Brittenham, W. R.
Clark, K.
Kuss, G.
Thompson, H.
Smith, A. O.
.N
CA591005 JB March 22, 1978 4:14 PM
.X
405 4 54
54 4 54
54 5 54
54 5 54
54 5 54
93 5 54
.I 55
.T
Algebraic Translator
.B
CACM October, 1959
.A
Kaner, H.
.N
CA591004 JB March 22, 1978 4:15 PM
.X
405 5 55
55 5 55
55 5 55
55 5 55
224 6 55
55 6 55
77 6 55
93 6 55
.I 56
.T
Proposed Standard Flow Chart Symbols
.B
CACM October, 1959
.N
CA591003 JB March 22, 1978 4:16 PM
.X
56 5 56
56 5 56
56 5 56
.I 57
.T
J.E.I.D.A. Its Computer Center
.B
CACM October, 1959
.N
CA591002 JB March 22, 1978 4:17 PM
.X
57 5 57
57 5 57
57 5 57
.I 58
.T
LEM-1, Small Size General Purpose Digital
Computer Using Magnetic (Ferrite) Elements
.W
paper examines some questions
development construction general purpose
digital computer using contactless magnetic (ferrite)
capacitive "DEZU" (long duration capacitive
memory) elements, developed Laboratory Electrical
Modeling VINITYI SSSR, under supervision
Professor L.I. Gutenmacher.
.B
CACM October, 1959
.A
Machmudov, U. A.
.N
CA591001 JB March 22, 1978 4:21 PM
.X
215 5 58
58 5 58
58 5 58
58 5 58
58 6 58
.I 59
.T
Survey Progress Trend Development
Use Automatic Data Processing Business
Management control Systems Federal
Government, December 1957-III
.B
CACM September, 1959
.N
CA590910 JB March 22, 1978 4:41 PM
.X
59 5 59
59 5 59
59 5 59
.I 60
.T
Alpha Vector Transformation System Linear Constraints
.B
CACM September, 1959
.A
Wersan, S. J.
.N
CA590909 JB March 22, 1978 4:42 PM
.X
60 5 60
60 5 60
60 5 60
.I 61
.T
IBM 709 Tape Matrix Compiler
.B
CACM September, 1959
.A
Hornick, S. D.
.N
CA590908JB March 22, 1978 4:43 PM
.X
61 5 61
61 5 61
61 5 61
.I 62
.T
Multi-Dimensional Least-Squares Polynomial Curve Fitting
.B
CACM September, 1959
.A
Lesh, F. H.
.N
CA590907 JB March 22, 1978 4:44 PM
.X
62 5 62
62 5 62
62 5 62
.I 63
.T
Octal Diagrams Binary Conception
Their Applicability Computer Design Logic
.W
paper dates back genesis binary
conception circa 5000 years ago, octal diagrams
4800 years ago, derived Chinese ancients.
analyzes applicability binary trinities
octal diagrams modern electronic-digital-computer design logic.
.B
CACM September, 1959
.A
Li, S. T.
.N
CA590906 JB March 22, 1978 4:47 PM
.X
63 5 63
63 5 63
63 5 63
.I 64
.T
Remarks ALGOL Symbol Manipulation
.B
CACM September, 1959
.A
Green, J.
.N
CA590905 JB March 22, 1978 4:47 PM
.X
206 5 64
207 5 64
64 5 64
64 5 64
64 5 64
64 6 64
64 6 64
.I 65
.T
ALGOL Sub-Committee Report - Extensions
.B
CACM September, 1959
.A
Dijkstra, E. W.
Heise, W.
Perlis, J. A.
Samelson, K.
.N
CA590904 JB March 22, 1978 4:49 PM
.X
65 5 65
65 5 65
65 5 65
.I 66
.T
Proposal Generalized Card Code 256 Characters
.B
CACM September, 1959
.A
Bemer, R. W.
.N
CA590903 JB March 22, 1978 4:50 PM
.X
66 5 66
66 5 66
66 5 66
.I 67
.T
Central-European Computers
.B
CACM September, 1959
.A
Blachman, N. M.
.N
CA590902 JB March 22, 1978 4:52 PM
.X
67 4 67
41 5 67
67 5 67
67 5 67
67 5 67
79 5 67
67 6 67
.I 68
.T
Role University Computers,
Data Processing Related Fields
.W
study made university programs
United States fields computers, data
processing, operations research, other closely related
fields. University policies, organization,
administration, faculties, students, researches, curricula,
equipment, financing were investigated.
integrated university program recommended reflecting
conviction many present activities
related computers develop into disciplines
such legitimate province university
scholar. Details recommended Graduate
School "Computer Sciences" given.
.B
CACM September, 1959
.A
Fein, L.
.N
CA590901 JB March 22, 1978 6:05 PM
.X
1205 5 68
68 5 68
68 5 68
68 5 68
1100 6 68
1104 6 68
1107 6 68
68 6 68
.I 69
.T
Statistical Programs IBM 650-Part
.W
collection given brief descriptions
statistical programs now use university
computing centers which have IBM 650's.
.B
CACM August, 1959
.A
Hamblen, J. W.
.N
CA590804 JB March 22, 1978 6:07 PM
.X
69 5 69
69 5 69
69 5 69
.I 70
.T
Construction Set Test Matrices
.W
paper develops equations properties
set test matrices which useful
determination accuracy routines
finding inverse, determinant and/or eigenvalues
matrix.
.B
CACM August, 1959
.A
Aegerter, M. J.
.N
CA590803 JB March 22, 1978 6:09 PM
.X
70 5 70
70 5 70
70 5 70
.I 71
.T
Proposal Feasible Programming System
.W
paper proposes designing programming
facility (itself involving digital computer
program) which assist preparation large-scale
real-time programs. facility
capable preparing programs any variety
machines having characteristics similar those
facility's computer. One basic assumptions
there enough random-access
storage available avoid necessity segmenting
constructed program any fashion other than
trivial one. While assumption somewhat unrealistic,
intended provide opportunity
concentrate other aspects program construction.
programming system should stress
discovery source program statements many errors
possible, before attempting construct
object program. Among computer characteristics
which advocated program interrupt scheme,
large set characters, indirect addressing.
.B
CACM August, 1959
.A
Bagley, P. R.
.N
CA590802 JB March 22, 1978 6:16 PM
.X
71 5 71
71 5 71
71 5 71
.I 72
.T
Educational Program Computing
.B
CACM August, 1959
.A
Hollingsworth, J.
.N
CA590801 JB March 22, 1978 6:18 PM
.X
72 5 72
72 5 72
72 5 72
.I 73
.T
Real Time Data Assimilator
.B
CACM July, 1959
.A
Gschwind, H. W.
.N
CA590705 JB March 22, 1978 6:19 PM
.X
73 5 73
73 5 73
73 5 73
.I 74
.T
High-Speed Sorting Procedure
.B
CACM July, 1959
.A
Shell, D. L.
.N
CA590704 JB March 22, 1978 6:20 PM
.X
1919 5 74
74 5 74
74 5 74
74 5 74
852 5 74
864 5 74
865 5 74
864 6 74
1175 6 74
232 6 74
232 6 74
308 6 74
309 6 74
309 6 74
74 6 74
74 6 74
74 6 74
74 6 74
3187 6 74
.I 75
.T
Parameter Estimation Simple Nonlinear Models
.B
CACM July, 1959
.A
Chow, W. M.
.N
CA590703 JB March 22, 1978 6:22 PM
.X
75 4 75
75 4 75
15 5 75
75 5 75
75 5 75
75 5 75
94 5 75
.I 76
.T
Binary Conversion, Fixed Decimal Precision, Decimal Fraction
.B
CACM July, 1959
.A
Taranto, D.
.N
CA590702 JB March 22, 1978 6:23 PM
.X
76 5 76
76 5 76
76 5 76
.I 77
.T
GAT Construction Translators
.B
CACM July, 1959
.A
Arden, B.
Graham, R.
.N
CA590701 JB March 22, 1978 6:24 PM
.X
1134 5 77
1141 5 77
364 5 77
405 5 77
438 5 77
44 5 77
77 5 77
77 5 77
77 5 77
561 5 77
100 6 77
224 6 77
224 6 77
224 6 77
224 6 77
249 6 77
303 6 77
393 6 77
17 6 77
44 6 77
55 6 77
77 6 77
77 6 77
77 6 77
77 6 77
77 6 77
77 6 77
77 6 77
93 6 77
98 6 77
408 6 77
.I 78
.T
Remarks Practical Solution Characteristic Value Problems
.W
paper concerned practical
solution characteristic value problem
ordinary differential equation. once apparent
sequential computers, they digital
analog, solve initial value problems, rather than boundary
value problems, some mathematical process
must found compensate machine's inadequacy.
(Compensating machine imperfection is,
course, normal activity numerical analyst.)
number other papers have applied particular
devices particular problems. purpose
note establish mathematical framework
model these practical procedures thus assist
use extension ideas other particular
problems.
.B
CACM June, 1959
.A
Wouk, A.
.N
CA590606 JB March 22, 1978 6:30 PM
.X
78 5 78
78 5 78
78 5 78
.I 79
.T
Programming Machine Extended
Address Calculational Mechanism
.B
CACM June, 1959
.A
Schecher, H.
.N
CA590605 JB March 22, 1978 6:31 PM
.X
67 5 79
79 5 79
79 5 79
79 5 79
79 6 79
.I 80
.T
Technique Computing Critical Rotational
Speeds Flexible Shafts Automatic Computer
.B
CACM June, 1959
.A
Schwartz, B. L.
.N
CA590604 JB March 22, 1978 6:35 PM
.X
80 5 80
80 5 80
80 5 80
.I 81
.T
NORC High-Speed Printer
.B
CACM June, 1959
.A
Gleissner, G. H.
.N
CA590603 JB March 22, 1978 6:36 PM
.X
81 5 81
81 5 81
81 5 81
.I 82
.T
Handling Identifiers Internal Symbols Language Processors
.W
Substitution computer-oriented symbols
programmer-oriented symbols language processors
examined feasible method doing so presented.
.B
CACM June, 1959
.A
Williams, F. A.
.N
CA590602 JB March 22, 1978 6:38 PM
.X
222 5 82
82 5 82
82 5 82
82 5 82
799 5 82
945 6 82
399 6 82
44 6 82
82 6 82
82 6 82
404 6 82
.I 83
.T
Visit Computation Centers Soviet Union
.B
CACM June, 1959
.A
Carr III, J. W.
.N
CA590601 JB March 22, 1978 6:39 PM
.X
1134 4 83
83 4 83
1349 5 83
17 5 83
83 5 83
83 5 83
83 5 83
236 6 83
323 6 83
83 6 83
415 6 83
.I 84
.T
Survey Progress Trend Development
Use Automatic Data Processing Business
Management Control Systems Federal Government,
December 1957-II (Part 2 see CA590406)
.B
CACM May, 1959
.N
CA590502 JB March 22, 1978 6:42 PM
.X
84 5 84
84 5 84
84 5 84
.I 85
.T
Error Analysis Floating Point Arithmetic
.B
CACM May, 1959
.A
Carr III, J. W.
.N
CA590501 JB March 22, 1978 6:43 PM
.X
1148 5 85
85 5 85
85 5 85
85 5 85
85 6 85
.I 86
.T
Survey Progress Trend Development
Use Automatic Data Processing Business
Management Control Systems Federal Government, December 1957
.B
CACM April, 1959
.A
Controller General United States Congress United States
.N
CA590406 JB March 22, 1978 6:48 PM
.X
86 5 86
86 5 86
86 5 86
.I 87
.T
Note Method Generating Points
Uniformly N-Dimensional Spheres
.B
CACM April, 1959
.A
Muller, M. E.
.N
CA590405 JB March 22, 1978 7:04 PM
.X
2333 4 87
87 4 87
2333 5 87
87 5 87
87 5 87
87 5 87
88 5 87
1793 6 87
87 6 87
88 6 87
.I 88
.T
Efficient Method Generating Uniformly Distributed
Points Surface n-Dimensional
Sphere
.B
CACM April, 1959
.A
Hicks, J. S.
Wheeling, R. F.
.N
CA590404 JB March 22, 1978 7:10 PM
.X
2333 5 88
87 5 88
88 5 88
88 5 88
88 5 88
1793 6 88
87 6 88
88 6 88
88 6 88
.I 89
.T
Routine Find Solution Simultaneous
Linear Equations Polynomial Coefficients
.B
CACM April, 1959
.A
Larson, E. H.
Marshall, D. P.
.N
CA590403 JB March 22, 1978 7:12 PM
.X
89 5 89
89 5 89
89 5 89
.I 90
.T
Binary Arithmetic Discretely Variable
Word Length Serial Computer
.B
CACM April, 1959
.A
Ercoli, P.
Vacca, R.
.N
CA590402 JB March 22, 1978 7:13 PM
.X
107 5 90
90 5 90
90 5 90
90 5 90
90 6 90
.I 91
.T
Mathematical Procedure Machine Division
.B
CACM April, 1959
.A
Gilman, R. E.
.N
CA590401 JB March 22, 1978 7:14 PM
.X
214 5 91
1593 5 91
91 5 91
91 5 91
91 5 91
1 6 91
1292 6 91
53 6 91
91 6 91
91 6 91
.I 92
.T
Checklist Intelligence Programming Systems
.W
remarkable variation exists degree
sophistication various programming systems.
particular manifestation jungle assorted
devices reproducing limited human decision
procedures. attempt made here begin systematic
classification various devices
educating computer take over decision-making
functions one many human operators, both
those have been demonstrated feasible date
those highly desirable future.
.B
CACM March, 1959
.A
Bemer, R. W.
.N
CA590304 JB March 22, 1978 8:01 PM
.X
92 5 92
92 5 92
92 5 92
.I 93
.T
Formulas Computer Oriented Language
.W
technique shown enabling computer
translate simple algebraic formulas into
three address computer code.
.B
CACM March, 1959
.A
Wegstein, J. H.
.N
CA590303 JB March 22, 1978 8:03 PM
.X
405 5 93
54 5 93
93 5 93
93 5 93
93 5 93
224 6 93
55 6 93
77 6 93
93 6 93
93 6 93
.I 94
.T
Iterative Method Fitting Logistic Curve
.W
iterative method given finding
logistic curve best least squares fit set
two-dimensional points.
.B
CACM March, 1959
.A
Howell, J.R.
.N
CA590302 JB March 22, 1978 8:04 PM
.X
75 5 94
94 5 94
94 5 94
94 5 94
15 6 94
94 6 94
.I 95
.T
Elimination Special Functions Differential Equations
.W
set ordinary differential equations which
contains mathematical functions requiring
use subroutines numerical solution electronic
computer, tabular data numerical solution
hand calculation function generators analog
methods applied can sometimes expanded
equivalent set equations which do not contain
functions. practical if these functions
satisfy sufficiently simple differential equations.
Thus among those functions which can eliminated
procedure trigonometric, inverse trigonometric,
exponential, many other transcendental
functions.
.B
CACM March, 1959
.A
Powers, J. E.
.N
CA590301 JB March 22, 1978 8:08 PM
.X
95 5 95
95 5 95
95 5 95
.I 96
.T
Computing Radiation Integrals
.W
relative merit cost four ways
evaluating typical radiation integrals containing
spherical Bessel functions investigated. These methods
desk machine evaluation finite series,
integration appropriate differential equation
Reeves Electronic Analog Computer
Litton 40 IBM 704 computer. Results generally applicable
equations separated Helmholtz
wave equation.
.B
CACM February, 1959
.A
Hansen, R. C.
Bailin, L. L.
Rutishauser, R. W.
.N
CA590205 JB March 22, 1978 8:16 PM
.X
96 5 96
96 5 96
96 5 96
.I 97
.T
Signal Corps Research Development
Automatic Programming Digital Computers
.B
CACM February, 1959
.A
Luebbert, Capt. W. F.
Collom Jr., Capt. P. W.
.N
CA590204 JB March 22, 1978 8:19 PM
.X
97 5 97
97 5 97
97 5 97
.I 98
.T
Arithmetic Translator-Compiler
IBM FORTRAN Automatic Coding System
.B
CACM February, 1959
.A
Sheridan, P. B.
.N
CA590203 JB March 22, 1978 8:21 PM
.X
224 5 98
364 5 98
98 5 98
98 5 98
98 5 98
100 6 98
224 6 98
44 6 98
77 6 98
98 6 98
98 6 98
.I 99
.T
Possible Modifications International Algebraic Language
.B
CACM February, 1959
.A
Green, J.
.N
CA590202 JB March 22, 1978 8:22 PM
.X
99 5 99
99 5 99
99 5 99
.I 100
.T
Recursive Subscripting Compilers List-Types Memories
.B
CACM February, 1959
.A
Carr III, J. W.
.N
CA590201 JB March 22, 1978 8:23 PM
.X
205 4 100
210 4 100
214 4 100
1982 4 100
398 4 100
642 4 100
669 4 100
100 4 100
123 4 100
164 4 100
100 5 100
100 5 100
100 5 100
1 5 100
364 5 100
100 6 100
224 6 100
44 6 100
77 6 100
98 6 100
.I 101
.T
Nuclear Reactor Codes
.B
CACM January, 1959
.A
Nather, V.
Sangren, W.
.N
CA590101 JB March 22, 1978 8:24 PM
.X
101 5 101
101 5 101
101 5 101
.I 102
.T
Comparison 650 Programming Methods
.B
CACM December, 1960
.A
Curtz, T. B.
Riordan, J. F.
Spohn,M.
.N
CA601214 JB March 20, 1978 6:18 PM
.X
102 5 102
102 5 102
102 5 102
.I 103
.T
COPE (Console Operator Proficiency Examination)*
.W
Each year electronic computers become more
sophisticated, programs they must process
become more complex. Because this,dependence
those computing skill experience
operators increasing. same time, selection
training qualified operators grows more
difficult. meet need quick, accurate, uniform
operator test training aid, authors
have developed COPE (Console Operator Proficiency Examination),
outlined below. While examination
programmed specifically IBM 705 Model II
two Tape Record Coordinators, similar programs
could developed other computers.
.B
CACM December, 1960
.A
Farbman, D.
Ketover, R.
.N
CA601213 JB March 20, 1978 6:23 PM
.X
103 5 103
103 5 103
103 5 103
.I 104
.T
Digital Simulation Discrete Flow Systems*
.W
discrete flow systems discussed characterized
movement randomly arriving
items along interacting channels. Programing digital
computer simulate such systems utilizes some
techniques not common other approaches physical
problems. principal portion paper
discussion two simulation studies illustrate
some programming problems involved. One
extensive package-handling plant,
objective being optimization parameters such
storage capacities processing rates. other,
air traffic flow control procedures simulated
compare effects alternative control decisions.
.B
CACM December, 1960
.A
Moore, C. J.
Lewis, T. S.
.N
CA601212 JB March 20, 1978 6:27 PM
.X
104 5 104
104 5 104
104 5 104
.I 105
.T
Two Methods Word Inversion IBM 709
.B
CACM December, 1960
.A
Price, R. A.
Jardins, P. D.
.N
CA601211 JB March 20, 1978 6:28 PM
.X
105 5 105
105 5 105
105 5 105
.I 106
.T
Method Overlapping Erasure Lists
.W
important property Newell-Shaw-Simon
scheme computer storage lists
data having multiple occurrences need not stored
more than one place computer. is,
lists may "overlapped." Unfortunately, overlapping
poses problem subsequent erasure. Given
list no longer needed, desired erase
just those parts do not overlap other lists.
LISP, McCarthy employs elegant but inefficient solution
problem. present paper describes
general method which enables efficient erasure.
method employs interspersed reference counts
describe extent overlapping.
.B
CACM December, 1960
.A
Collins, G. E.
.N
CA601210 JB March 20, 1978 6:33 PM
.X
1024 4 106
1051 4 106
1102 4 106
1132 4 106
1390 4 106
1486 4 106
1549 4 106
1706 4 106
1826 4 106
1878 4 106
378 4 106
2060 4 106
2155 4 106
2168 4 106
2719 4 106
2723 4 106
2838 4 106
2842 4 106
2855 4 106
2879 4 106
3077 4 106
3080 4 106
3106 4 106
627 4 106
106 4 106
106 5 106
106 5 106
106 5 106
1050 5 106
210 5 106
1393 5 106
1549 5 106
2023 5 106
3112 5 106
627 5 106
849 6 106
106 6 106
106 6 106
106 6 106
106 6 106
106 6 106
106 6 106
196 6 106
1051 6 106
1380 6 106
209 6 106
1826 6 106
210 6 106
210 6 106
1878 6 106
296 6 106
1972 6 106
367 6 106
2438 6 106
2723 6 106
2736 6 106
2833 6 106
2838 6 106
406 6 106
627 6 106
627 6 106
731 6 106
731 6 106
731 6 106
753 6 106
.I 107
.T
Multiple Precision Arithmetic
.B
CACM December, 1960
.A
Pope, D. A.
Stein, M. L.
.N
CA601209 JB March 20, 1978 6:34 PM
.X
107 4 107
107 5 107
107 5 107
107 5 107
1026 5 107
1258 5 107
1292 5 107
1497 5 107
90 5 107
107 6 107
107 6 107
107 6 107
107 6 107
1026 6 107
1026 6 107
1026 6 107
1292 6 107
1593 6 107
.I 108
.T
Programmed Error Correction Project Mercury
.B
CACM December, 1960
.A
Dimsdale, B.
Weinberg, G. M.
.N
CA601208 JB March 20, 1978 6:35 PM
.X
108 5 108
108 5 108
108 5 108
361 5 108
108 6 108
.I 109
.T
Note Approximating e^x
.B
CACM December, 1960
.A
Lubkin, S.
.N
CA601207 JB March 20, 1978 6:37 PM
.X
109 5 109
109 5 109
109 5 109
.I 110
.T
Fibonaccian Searching
.B
CACM December, 1960
.A
Ferguson, D. E.
.N
CA601206 JB March 20, 1978 6:38 PM
.X
110 5 110
110 5 110
110 5 110
.I 111
.T
Programming Numerical Solution Polynomial Equations
.W
Numerical techniques presented computing
roots polynomial equations. applying
recommended scaling inversion rules, basic
Bairstow Newton-Raphson iterative techniques
can applied great reliability. Both high degree
accuracy rapid convergence realized.
Numerical examples shown illustrate pitfalls
show these circumvented application
recommended procedures.
.B
CACM December, 1960
.A
Ellenberger, K. W.
.N
CA601205 JB March 20, 1978 6:41 PM
.X
111 5 111
111 5 111
111 5 111
.I 112
.T
Numerical Solution Polynomial Equation (Algorithm 30)
.B
CACM December, 1960
.A
Ellenberger, K. W.
.N
CA601204 JB March 20, 1978 6:44 PM
.X
112 5 112
112 5 112
112 5 112
.I 113
.T
Survey Coded Character Representation
.B
CACM December, 1960
.A
Bemer, R. W.
.N
CA601203 JB March 20, 1978 6:44 PM
.X
113 5 113
113 5 113
113 5 113
.I 114
.T
Survey Punched Card Codes
.B
CACM December, 1960
.A
Smith, H. J.
Williams, F. A.
.N
CA601202 JB March 20, 1978 6:45 PM
.X
114 5 114
114 5 114
114 5 114
.I 115
.T
Optimizers: Their Structure
.B
CACM December, 1960
.A
Wheeling, R. F.
.N
CA601201 JB March 20, 1978 6:46 PM
.X
115 5 115
115 5 115
115 5 115
.I 116
.T
Sumador Chino
.W
recent motor trip through Mexico, writer
came across adding device which referred
sumador chino (Chinese adder). survey more
available literature history mathematics
instruments calculation has uncovered no reference
such device. purpose communication
enlist help other members bringing
light whatever may known concerning evolution
present status sumador chino.
.B
CACM November, 1960
.A
Rogers, J. L.
.N
CA601119 JB March 20, 1978 6:50 PM
.X
116 5 116
116 5 116
116 5 116
.I 117
.T
Estimation Relative Efficiency Two Internal Sorting Methods
.B
CACM November, 1960
.A
Nagler, H.
.N
CA601118 JB March 20, 1978 6:51 PM
.X
117 5 117
117 5 117
117 5 117
.I 118
.T
Character Scanning IBM 7070
.B
CACM November, 1960
.A
Speckhard, A. E.
.N
CA601117 JB March 20, 1978 6:52 PM
.X
118 5 118
118 5 118
118 5 118
.I 119
.T
Note Eigenvalue Computation
.B
CACM November, 1960
.A
Andrus, J. F.
.N
CA601116 JB March 20, 1978 6:53 PM
.X
119 5 119
119 5 119
119 5 119
.I 120
.T
Simple Technique Coding Differential Equations
.B
CACM November, 1960
.A
Sefton, P.
Vaillancourt, R.
.N
CA601115 JB March 20, 1978 6:57 PM
.X
120 4 120
120 5 120
120 5 120
120 5 120
175 5 120
.I 121
.T
Over-all Computation Control Labelling
.B
CACM November, 1960
.A
Holt, A.
.N
CA601114 JB March 20, 1978 6:58 PM
.X
121 4 121
121 5 121
121 5 121
121 5 121
221 5 121
.I 122
.T
Least Squares Fitting Great Circle Through Points Sphere
.B
CACM November,1960
.A
DeWitte, L.
.N
CA601113 JB March 20, 1978 6:59 PM
.X
122 5 122
122 5 122
122 5 122
297 5 122
122 6 122
.I 123
.T
Compilation Two Computers NELIAC
.W
NELIAC, compiler based ALGOL, developed
U.S. Navy Electronics Laboratory, San
Diego,California, a"boot-strap" compiler Remington
Rand Univac COUNTESS computer. compiler
used generate version itself which, running
COUNTESS program, generated machine code
Control Data Corporation CDC-1604. All three
versions NELIAC accepted essentially identical
input language.
.B
CACM November, 1960
.A
Masterson Jr., K. S.
.N
CA601112 JB March 20, 1978 7:03 PM
.X
205 4 123
210 4 123
214 4 123
249 4 123
254 4 123
272 4 123
1102 4 123
1109 4 123
1140 4 123
1188 4 123
1306 4 123
1464 4 123
1491 4 123
1767 4 123
1781 4 123
1787 4 123
1949 4 123
1982 4 123
321 4 123
398 4 123
2059 4 123
2126 4 123
435 4 123
437 4 123
463 4 123
483 4 123
491 4 123
2732 4 123
560 4 123
583 4 123
3073 4 123
627 4 123
631 4 123
632 4 123
637 4 123
642 4 123
642 4 123
644 4 123
653 4 123
669 4 123
680 4 123
761 4 123
762 4 123
763 4 123
100 4 123
123 4 123
123 4 123
123 4 123
140 4 123
164 4 123
919 4 123
989 4 123
123 5 123
123 5 123
123 5 123
165 5 123
196 5 123
1 5 123
1781 5 123
637 5 123
123 6 123
123 6 123
165 6 123
196 6 123
919 6 123
990 6 123
1007 6 123
1046 6 123
1131 6 123
1139 6 123
1140 6 123
1149 6 123
1198 6 123
1215 6 123
1223 6 123
1265 6 123
1303 6 123
1323 6 123
1358 6 123
1366 6 123
1421 6 123
1460 6 123
1462 6 123
1463 6 123
1467 6 123
1468 6 123
1477 6 123
1491 6 123
1496 6 123
1531 6 123
1535 6 123
1565 6 123
1601 6 123
1602 6 123
1613 6 123
1614 6 123
1626 6 123
1641 6 123
1787 6 123
1788 6 123
205 6 123
224 6 123
249 6 123
288 6 123
316 6 123
381 6 123
398 6 123
11 6 123
404 6 123
410 6 123
463 6 123
464 6 123
483 6 123
3184 6 123
3188 6 123
584 6 123
600 6 123
680 6 123
691 6 123
763 6 123
799 6 123
.I 124
.T
Algorithm Assignment Problem
.W
assignment problem formulated briefly
discussed. efficient algorithm its
solution presented ALGOL code. empirical relation
between solution time size
problem given, based extensive experiments
carried out digital computer.
.B
CACM November, 1960
.A
Silver, R.
.N
CA601111 JB March 20, 1978 7:05 PM
.X
124 5 124
124 5 124
124 5 124
2133 5 124
2134 5 124
124 6 124
124 6 124
2134 6 124
.I 125
.T
Polynomial Transformer (Algorithm 29)
.B
CACM November, 1960
.A
Mackinney, J. G.
.N
CA601110 JB March 20, 1978 7:06 PM
.X
125 5 125
125 5 125
125 5 125
1816 5 125
125 6 125
.I 126
.T
Least Squares Fit Orthogonal polynomials (Algorithm 28)
.B
CACM November, 1960
.A
Mackinney, J. G.
.N
CA601109 JB March 20, 1978 7:08 PM
.X
126 5 126
126 5 126
126 5 126
.I 127
.T
ASSIGNMENT (Algorithm 27)
.B
CACM November, 1960
.A
Silver, R.
.N
CA601108 JB March 20, 1978 7:09 PM
.X
127 5 127
127 5 127
127 5 127
.I 128
.T
ROOTFINDER III (Algorithm 26)
.B
CACM November, 1960
.A
Herroit, J. G.
.N
CA601107 JB March 20, 1978 7:57 PM
.X
128 5 128
128 5 128
128 5 128
.I 129
.T
ROOTFINDER II (Algorithm 15)
.B
CACM November, 1960
.A
Forsythe, G. E.
Herriot, J. G.
.N
CA601106 JB March 20, 1978 7:59 PM
.X
129 5 129
129 5 129
129 5 129
.I 130
.T
Real Zeros Arbitrary Function (Algorithm 25)
.B
CACM November, 1960
.A
Leavenworth, B.
.N
CA601105 JB March 20, 1978 8:00 PM
.X
130 5 130
130 5 130
130 5 130
.I 131
.T
Solution Tri-Diagonal Linear Equations (Algorithm 24)
.B
CACM November, 1960
.A
Leavenworth, B.
.N
CA601104 JB March 20, 1978 8:01 PM
.X
131 5 131
131 5 131
131 5 131
.I 132
.T
Math Sort (Algorithm 23)
.B
CACM November, 1960
.A
Feurzeig, W.
.N
CA601103 JB March 20, 1978 8:03 PM
.X
132 5 132
132 5 132
132 5 132
.I 133
.T
Riccati-Bessel Functions First Second Kind (Algorithm 22)
.B
CACM November, 1960
.A
Oser, H.
.N
CA601102 JB March 20, 1978 8:04 PM
.X
133 5 133
133 5 133
133 5 133
.I 134
.T
Bessel Function Set Integer Orders(Algorithm 21)
.B
CACM November, 1960
.A
Borsch-Supan, W.
.N
CA601101 JB March 20, 1978 8:05 PM
.X
134 5 134
134 5 134
134 5 134
1909 5 134
134 6 134
1023 6 134
1284 6 134
1316 6 134
.I 135
.T
Digital Computers Universities-IV
.B
CACM October, 1960
.A
Reeves, R. F.
.N
CA601013 JB March 20, 1978 8:07 PM
.X
135 5 135
135 5 135
135 5 135
.I 136
.T
Note Calculation Interest
.B
CACM October, 1960
.A
Ingerman, P. Z.
.N
CA601012 JB March 20, 1978 8:09 PM
.X
136 5 136
136 5 136
136 5 136
.I 137
.T
Evaluating Numbers Expressed Strings English Words
.B
CACM October, 1960
.A
Swift, C. J.
.N
CA601011 JB March 20, 1978 8:11 PM
.X
137 5 137
137 5 137
137 5 137
.I 138
.T
Some Thoughts Reconciling Various
Character Set Proposals (Corrigenda)
.B
CACM October, 1960
.A
Voorhees, E. A.
.N
CA601010 JB March 20, 1978 8:13 PM
.X
138 5 138
138 5 138
138 5 138
.I 139
.T
Binomial Coefficients (Algorithm 19)
.B
CACM October, 1960
.A
Kenyon, R. R.
.N
CA601009 JB March 20, 1978 8:14 PM
.X
139 5 139
139 5 139
139 5 139
.I 140
.T
Crout Pivoting (Algorithm 16)
.B
CACM October, 1960
.A
Forsythe, G. E.
.N
CA601008 JB March 20, 1978 8:15 PM
.X
249 4 140
254 4 140
272 4 140
1102 4 140
1109 4 140
1140 4 140
1188 4 140
1306 4 140
1319 4 140
1464 4 140
1491 4 140
1767 4 140
1781 4 140
1787 4 140
1949 4 140
321 4 140
2059 4 140
2126 4 140
435 4 140
437 4 140
454 4 140
463 4 140
483 4 140
491 4 140
2732 4 140
560 4 140
583 4 140
3073 4 140
627 4 140
631 4 140
632 4 140
642 4 140
644 4 140
653 4 140
680 4 140
761 4 140
762 4 140
763 4 140
123 4 140
140 4 140
140 4 140
919 4 140
989 4 140
140 5 140
140 5 140
140 5 140
152 5 140
196 5 140
.I 141
.T
Some Thoughts Parallel Processing
.B
CACM October, 1960
.A
Yarbrough, L. D.
.N
CA601007 JB March 20, 1978 8:16 PM
.X
141 5 141
141 5 141
141 5 141
.I 142
.T
Comments Technique Counting Ones
.B
CACM October, 1960
.A
Sherman, P. M.
.N
CA601006 JB March 20, 1978 8:18 PM
.X
2952 4 142
2952 4 142
2952 4 142
142 4 142
142 4 142
142 4 142
142 5 142
142 5 142
142 5 142
162 5 142
163 5 142
192 5 142
362 5 142
2952 5 142
142 6 142
142 6 142
162 6 142
163 6 142
192 6 142
2185 6 142
2727 6 142
.I 143
.T
List Computer Systems Programs
IBM 650, DATATRON 205, UNIVAC SS-80
.B
CACM October, 1960
.A
Romberg, A.
.N
CA601005 JB March 20, 1978 8:21 PM
.X
143 5 143
143 5 143
143 5 143
.I 144
.T
Do Numbers-Digital Shorthand
.W
Present communications systems transmit single
characters groups coded pulses between
simple terminal equipments. Since English words form only
sparse set all possible alphabetic combinations,
present methods inefficient computer systems
substituted these terminals. Using numeric
representations entire words common phrases (rather
than character-by-character representations)
requires approximately one-third present transmission
time. saving reflected overall costs.
Other benefits accrue code language translation
schemes. Provision made transmission
purely numeric and/or binary streams, single
character-transmission non-dictionary words such
names people places.
.B
CACM October, 1960
.A
Bemer, R. W.
.N
CA601004 JB March 20, 1978 8:27 PM
.X
144 5 144
144 5 144
144 5 144
.I 145
.T
Automatic Graders Programming Classes
.B
CACM October, 1960
.A
Hollingsworth, J.
.N
CA601003 JB March 20, 1978 8:28 PM
.X
145 5 145
145 5 145
145 5 145
1270 5 145
1902 5 145
145 6 145
145 6 145
1270 6 145
3184 6 145
.I 146
.T
Use Computers Engineering Classroom Instruction
.W
April 29-30, Computer Committee
College Engineering, University Michigan,
which acts steering committee Ford Foundation
Project Use Computers Engineering
Education, held special conference discuss certain
timely topics pertinent Ford Project.
report contains condensed transcription
key ideas offered conference attendees
selected topics.
.B
CACM October, 1960
.A
Katz, D. L.
.N
CA601002 JB March 20, 1978 8:37 PM
.X
146 5 146
146 5 146
146 5 146
.I 147
.T
Report Conference University Computing Center Directors
.B
CACM October, 1960
.N
CA601001 JB March 20, 1978 8:38 PM
.X
147 5 147
147 5 147
147 5 147
.I 148
.T
Digital Computers Universities-III
.B
CACM September, 1960
.A
Reeves, R. F.
.N
CA600909 JB March 20, 1978 8:41 PM
.X
148 5 148
148 5 148
148 5 148
.I 149
.T
Decision Rule Improved Efficiency Solving
Linear Programming Problems Simplex
Algorithm
.B
CACM September, 1960
.A
Dickson, J. C.
Frederick, F. P.
.N
CA600908 JB March 20, 1978 8:43 PM
.X
149 5 149
149 5 149
149 5 149
.I 150
.T
Rational Interpolation Continued Fractions (Algorithm 18)
.B
CACM September, 1960
.A
Floyd, R. W.
.N
CA600907 JB March 20, 1978 8:44 PM
.X
150 5 150
150 5 150
150 5 150
.I 151
.T
TRDIAG (Algorithm 17)
.B
CACM September, 1960
.A
Sprague III, C. D.
.N
CA600906 JB March 20, 1978 8:45 PM
.X
151 5 151
151 5 151
151 5 151
.I 152
.T
CROUT Pivoting (Algorithm 16)
.B
CACM September, 1960
.A
Forsythe, G. E.
.N
CA600905 JB March 20, 1978 8:47 PM
.X
140 5 152
152 5 152
152 5 152
152 5 152
1319 5 152
454 5 152
152 6 152
152 6 152
152 6 152
196 6 152
1128 6 152
586 6 152
.I 153
.T
Comments FORTRAN User
.B
CACM September, 1960
.A
Blatt, J. M.
.N
CA600904 JB March 20, 1978 8:48 PM
.X
153 5 153
153 5 153
153 5 153
754 5 153
153 6 153
.I 154
.T
Rapidly Convergent Expressions Evaluating e^x
.B
CACM September, 1960
.A
Berin, A.
.N
CA600903 JB March 20, 1978 8:49 PM
.X
154 5 154
154 5 154
154 5 154
.I 155
.T
Trie Memory
.B
CACM September, 1960
.A
Fredkin, E.
.N
CA600902 JB March 20, 1978 8:50 PM
.X
155 5 155
155 5 155
155 5 155
944 5 155
2846 5 155
849 5 155
155 6 155
155 6 155
155 6 155
615 6 155
.I 156
.T
Introductory Problem Symbol Manipulation Student
.B
CACM September, 1960
.A
Rosin, R. F.
.N
CA600901 JB March 20, 1978 8:51 PM
.X
156 5 156
156 5 156
156 5 156
.I 157
.T
Digital Computers Universities -II
.B
CACM August, 1960
.A
Reeves, R. F.
.N
CA600809 JB March 20, 1978 8:54 PM
.X
157 5 157
157 5 157
157 5 157
.I 158
.T
ROOTFINDER II (Algorithm 15)
.B
CACM August, 1960
.A
Thacher Jr., H. C.
.N
CA600808 JB March 20, 1978 8:55 PM
.X
158 5 158
158 5 158
158 5 158
.I 159
.T
ROOTFINDER (Algorithm 2)
.B
CACM August, 1960
.A
Thacher Jr., H. C.
.N
CA600807 JB March 20, 1978 8:56 PM
.X
159 5 159
159 5 159
159 5 159
.I 160
.T
ROOTFINDER II (Algorithm 15)
.B
CACM August, 1960
.A
Thacher Jr., H. C.
.N
CA600806 JB March 20, 1978 8:57 PM
.X
160 5 160
160 5 160
160 5 160
.I 161
.T
Abbreviating Words Systematically (Corrigendum)
.B
CACM August, 1960
.A
Barrett, J. A.
Grems, M.
.N
CA600805 JB March 20, 1978 8:58 PM
.X
161 5 161
161 5 161
161 5 161
.I 162
.T
Variant Technique Counting Ones
.B
CACM August, 1960
.A
Frieden, H.
.N
CA600804 JB March 20, 1978 9:00 PM
.X
142 5 162
162 5 162
162 5 162
162 5 162
2952 5 162
142 6 162
162 6 162
162 6 162
163 6 162
163 6 162
192 6 162
192 6 162
2185 6 162
2727 6 162
.I 163
.T
Counting Ones IBM 7090
.B
CACM August, 1960
.A
Kutler, S. S.
.N
CA600803 JB March 20, 1978 9:01 PM
.X
142 5 163
163 5 163
163 5 163
163 5 163
2952 5 163
142 6 163
162 6 163
162 6 163
163 6 163
163 6 163
192 6 163
192 6 163
2185 6 163
2727 6 163
.I 164
.T
Short Study Notation Efficiency
.B
CACM August, 1960
.A
Smith Jr., H. J.
.N
CA600802 JB March 20, 1978 9:02 PM
.X
205 4 164
210 4 164
214 4 164
1982 4 164
398 4 164
642 4 164
669 4 164
100 4 164
123 4 164
164 4 164
164 5 164
164 5 164
164 5 164
1 5 164
.I 165
.T
NELIAC-A Dialect ALGOL
.B
CACM August, 1960
.A
Huskey, H. D.
Halstead, M. H.
.N
CA600801 JB March 20, 1978 9:03 PM
.X
123 5 165
165 5 165
165 5 165
165 5 165
637 5 165
1 6 165
123 6 165
165 6 165
165 6 165
196 6 165
.I 166
.T
Programming Compatibility Family
Closely Related Digital Computers
.B
CACM July, 1960
.A
Luebbert, W. F.
.N
CA600707 JB March 20, 1978 9:14 PM
.X
166 5 166
166 5 166
166 5 166
.I 167
.T
Combining ALGOL Statement Analysis Validity Checking
.B
CACM July, 1960
.A
McIsaac, P.
.N
CA600706 JB March 20, 1978 9:15 PM
.X
167 5 167
167 5 167
167 5 167
.I 168
.T
Multiprogram Scheduling Parts 3 4 Scheduling
Algorithm External Constraints
.B
CACM July, 1960
.A
Codd, E. F.
.N
CA600705 JB March 20, 1978 9:16 PM
.X
491 4 168
168 4 168
168 5 168
168 5 168
168 5 168
1713 5 168
1901 5 168
491 5 168
46 5 168
168 6 168
168 6 168
168 6 168
185 6 168
185 6 168
185 6 168
196 6 168
1751 6 168
1754 6 168
46 6 168
.I 169
.T
Multilingual Terminology Project
.B
CACM July, 1960
.A
Holmstrom, J. E.
.N
CA600704 JB March 20, 1978 9:17 PM
.X
169 5 169
169 5 169
169 5 169
.I 170
.T
Some Thoughts Reconciling Various Character Set Proposals
.B
CACM July, 1960
.A
Voorhees, E. A.
.N
CA600703 JB March 20, 1978 9:18 PM
.X
170 5 170
170 5 170
170 5 170
.I 171
.T
Digital Computers Universities (Part I)
.B
CACM July, 1960
.A
Reeves, R. F.
.N
CA600702 JB March 20, 1978 9:20 PM
.X
171 5 171
171 5 171
171 5 171
.I 172
.T
Complex Exponential Integral (Algorithm 13)
.B
CACM July, 1960
.A
Beam, A.
.N
CA600701 JB March 20, 1978 9:21 PM
.X
172 5 172
172 5 172
172 5 172
.I 173
.T
ATLAS new concept large computer design
.B
CACM June, 1960
.N
CA600617 JB March 20, 1978 9:22 PM
.X
173 5 173
173 5 173
173 5 173
.I 174
.T
Interval Estimation Time One State
Total Time Ratio DoubleExponential Process
.B
CACM June, 1960
.A
Neal, W. R.
.N
CA600616 JB March 20, 1978 9:24 PM
.X
174 5 174
174 5 174
174 5 174
.I 175
.T
Solution Simultaneous Ordinary Differential
Equations Using General Purpose Digital
Computer
.B
CACM June, 1960
.A
Anderson, W. H.
.N
CA600615 JB March 20, 1978 9:25 PM
.X
120 5 175
175 5 175
175 5 175
175 5 175
175 6 175
.I 176
.T
Symbol Manipulation Threaded Lists (Corrigendum)
.B
CACM June, 1960
.A
Perlis, A. J.
Thornton, C.
.N
CA600614 JB March 20, 1978 9:26 PM
.X
176 5 176
176 5 176
176 5 176
.I 177
.T
Solution Polynomial Equation Bairstow
Hitchcock Method, A. A. Grau Communications ACM,
February, 1960 (Algorithm)
.B
CACM June, 1960
.A
Thacher Jr., H. C.
.N
CA600613 JB March 20, 1978 9:31 PM
.X
177 5 177
177 5 177
177 5 177
.I 178
.T
ROOTFINDER (Algorithm)
.B
CACM June, 1960
.A
Thacher Jr., H. C.
.N
CA600612 JB March 20, 1978 9:32 PM
.X
178 5 178
178 5 178
178 5 178
1667 5 178
178 6 178
1242 6 178
327 6 178
.I 179
.T
Evaluation Legendre Polynomial Pn(X) Recursion (Algorithm)
.B
CACM June, 1960
.A
Galler, G. M.
.N
CA600611 JB March 20, 1978 9:35 PM
.X
179 5 179
179 5 179
179 5 179
.I 180
.T
Evaluation Laguerre Polynomial Ln(X) Recursion (Algorithm)
.B
CACM June, 1960
.A
Galler, G. M.
.N
CA600610 JB March 20, 1978 9:36 PM
.X
180 5 180
180 5 180
180 5 180
.I 181
.T
Evaluation Hermite Polynomial Hn(X) Recursion (Algorithm)
.B
CACM June, 1960
.A
Galler, G. M.
.N
CA600609 JB March 20, 1978 9:37 PM
.X
181 5 181
181 5 181
181 5 181
.I 182
.T
Evaluation Chebyshev Polynomial Tn(X) Recursion (Algorithm)
.B
CACM June, 1960
.A
Galler, G. M.
.N
CA600608 JB March 20, 1978 9:38 PM
.X
182 5 182
182 5 182
182 5 182
.I 183
.T
Conversion Between Floating Point Representations
.B
CACM June, 1960
.A
Perry, C.
.N
CA600607 JB March 20, 1978 9:40 PM
.X
183 5 183
183 5 183
183 5 183
.I 184
.T
Short Method Measuring Error Least-Squares Power Series
.B
CACM June, 1960
.A
Robinson, S. M.
Struble, G. W.
.N
CA600606 JB March 20, 1978 9:41 PM
.X
184 5 184
184 5 184
184 5 184
.I 185
.T
Multiprogram Scheduling Parts 1 2. Introduction Theory*
.W
order exploit fully fast computer which
possesses simultaneous processing abilities,
should large extent schedule its own workload.
scheduling routine must capable extremely
rapid execution if not prove self-defeating.
construction schedule entails determining
which programs run concurrently which sequentially
respect each other. concise
scheduling algorithm described which tends minimize
time executing entire pending workload
(or any subset it), subject external constraints
such precedence, urgency, etc. algorithm
applicable wide class machines.
.B
CACM June, 1960
.A
Codd, E. F.
.N
CA600605 JB March 20, 1978 9:46 PM
.X
185 5 185
185 5 185
185 5 185
1713 5 185
1901 5 185
491 5 185
168 6 185
168 6 185
168 6 185
185 6 185
185 6 185
185 6 185
196 6 185
1751 6 185
1754 6 185
46 6 185
.I 186
.T
Algorithm Defining ALGOL Assignment Statements (Addendum)
.B
CACM June, 1960
.A
Floyd, R. W.
.N
CA600604 JB March 20, 1978 9:47 PM
.X
186 5 186
186 5 186
186 5 186
.I 187
.T
Compiling Connectives
.B
CACM June, 1960
.A
Swift, C. J.
.N
CA600603 JB March 20, 1978 9:54 PM
.X
187 5 187
187 5 187
187 5 187
.I 188
.T
Department Computer Mathematics Moscow State University
.B
CACM June, 1960
.A
Berezin, I. S.
.N
CA600602 JB March 20, 1978 9:56 PM
.X
188 5 188
188 5 188
188 5 188
.I 189
.T
Future Automatic Digital Computers
.B
CACM June, 1960
.A
Booth, A. D.
.N
CA600601 JB March 20, 1978 9:57PM
.X
189 5 189
189 5 189
189 5 189
.I 190
.T
Bendix G-20 System
.B
CACM May, 1960
.N
CA600507 JB March 22, 1978 1:28 PM
.X
190 5 190
190 5 190
190 5 190
.I 191
.T
Abbreviating Words Systematically
.B
CACM May, 1960
.A
Barrett, J. A.
Grems, M.
.N
CA600506 JB March 22, 1978 1:29 PM
.X
191 5 191
191 5 191
191 5 191
.I 192
.T
Technique Counting Ones Binary Computer
.B
CACM May, 1960
.A
Wegner, P.
.N
CA600505 JB March 22, 1978 1:30 PM
.X
142 5 192
192 5 192
192 5 192
192 5 192
2952 5 192
142 6 192
162 6 192
162 6 192
163 6 192
163 6 192
192 6 192
192 6 192
2185 6 192
2727 6 192
.I 193
.T
Start Automatic Storage Assignment
.B
CACM May, 1960
.A
Patrick, R. L.
.N
CA600504 JB March 22, 1978 1:31 PM
.X
193 5 193
193 5 193
193 5 193
.I 194
.T
Divisionless Computation Square Roots Through Continued Squaring
.B
CACM May, 1960
.A
Sarafyan, D.
.N
CA600503 JB March 22, 1978 1:32 PM
.X
194 5 194
194 5 194
194 5 194
.I 195
.T
Code?
.B
CACM May, 1960
.A
Patterson, G. W.
.N
CA600502 JB March 22, 1978 1:33 PM
.X
195 5 195
195 5 195
195 5 195
.I 196
.T
Report Algorithmic Language ALGOL 60
.A
Naur, P.
Backus, J.
.B
CACM May, 1960
.N
CA600501 JB March 22, 1978 1:34 PM
.X
123 5 196
140 5 196
196 5 196
196 5 196
196 5 196
919 5 196
989 5 196
1102 5 196
1109 5 196
1140 5 196
1188 5 196
1306 5 196
249 5 196
254 5 196
272 5 196
1464 5 196
1491 5 196
1767 5 196
1781 5 196
1787 5 196
1949 5 196
321 5 196
2059 5 196
2126 5 196
2732 5 196
435 5 196
437 5 196
463 5 196
483 5 196
491 5 196
560 5 196
583 5 196
3073 5 196
627 5 196
631 5 196
632 5 196
642 5 196
644 5 196
653 5 196
680 5 196
761 5 196
762 5 196
763 5 196
1 6 196
1 6 196
823 6 196
106 6 196
123 6 196
152 6 196
165 6 196
168 6 196
185 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
196 6 196
919 6 196
946 6 196
947 6 196
990 6 196
1007 6 196
1046 6 196
1131 6 196
1139 6 196
1140 6 196
1140 6 196
1141 6 196
1149 6 196
1198 6 196
1215 6 196
1215 6 196
1223 6 196
1265 6 196
1303 6 196
1303 6 196
1323 6 196
1358 6 196
1366 6 196
1421 6 196
1460 6 196
1462 6 196
1463 6 196
1467 6 196
1467 6 196
1468 6 196
1468 6 196
1477 6 196
1491 6 196
1491 6 196
1496 6 196
1496 6 196
1496 6 196
1531 6 196
1535 6 196
1565 6 196
1601 6 196
1602 6 196
1613 6 196
1614 6 196
1614 6 196
1626 6 196
1641 6 196
1693 6 196
1781 6 196
1787 6 196
1788 6 196
205 6 196
206 6 196
207 6 196
209 6 196
210 6 196
210 6 196
1834 6 196
224 6 196
224 6 196
224 6 196
249 6 196
249 6 196
271 6 196
288 6 196
288 6 196
303 6 196
316 6 196
321 6 196
381 6 196
387 6 196
398 6 196
11 6 196
46 6 196
51 6 196
2732 6 196
400 6 196
401 6 196
402 6 196
404 6 196
404 6 196
404 6 196
404 6 196
404 6 196
404 6 196
404 6 196
406 6 196
410 6 196
412 6 196
463 6 196
463 6 196
464 6 196
483 6 196
483 6 196
483 6 196
3184 6 196
3184 6 196
3184 6 196
3184 6 196
3184 6 196
3188 6 196
584 6 196
600 6 196
615 6 196
631 6 196
642 6 196
680 6 196
691 6 196
729 6 196
763 6 196
763 6 196
799 6 196
799 6 196
799 6 196
.I 197
.T
Imaginary Number System
.B
CACM April, 1960
.A
Knuth, D. E.
.N
CA600414 JB March 22, 1978 1:35 PM
.X
197 5 197
197 5 197
197 5 197
.I 198
.T
High-Speed Multiplication Process Digital Computers
.B
CACM April, 1960
.A
Gurzi, F.
.N
CA600413 JB March 22, 1978 1:36 PM
.X
198 5 198
198 5 198
198 5 198
.I 199
.T
Euclidian Algorithm (Algorithm 7)
.B
CACM April, 1960
.A
Claussen, R.
.N
CA600412 JB March 22, 1978 1:37 PM
.X
199 5 199
199 5 199
199 5 199
.I 200
.T
Bessel Function I, Asymptotic Expansion (Algorithm 6)
.B
CACM April, 1960
.A
Clarke, D. S.
.N
CA600411 JB March 22, 1978 1:39 PM
.X
200 5 200
200 5 200
200 5 200
.I 201
.T
Bessel Funtion I, Series Expansion (Algorithm 5)
.B
CACM April, 1960
.A
Clarke, D. S.
.N
CA600410 JB March 22, 1978 1:40 PM
.X
201 5 201
201 5 201
201 5 201
.I 202
.T
Control System Logical Block Diagnosis Data Loading
.W
paper describes section integrated
diagnostic monitor system which facilitates
checking sections instructions subroutines
anywhere object program. new method
specifying all diagnostic operations format similar
computer program makes system convenient
use relatively simple understand. paper
also describes number other novel diagnostic
features which can included system.
.B
CACM April, 1960
.A
Senko, M. E.
.N
CA600409 JB March 22, 1978 1:45 PM
.X
931 5 202
202 5 202
202 5 202
202 5 202
202 6 202
396 6 202
634 6 202
.I 203
.T
Decoding Combinations First n Integers Taken k Time
.B
CACM April, 1960
.A
Brown, R. M.
.N
CA600408 JB March 22, 1978 1:46 PM
.X
203 5 203
203 5 203
203 5 203
2690 5 203
203 6 203
579 6 203
.I 204
.T
Proving Theorems Pattern Recognition
.B
CACM April, 1960
.A
Wang, H.
.N
CA600407 JB March 22, 1978 1:47 PM
.X
204 4 204
204 5 204
204 5 204
204 5 204
3194 5 204
.I 205
.T
Macro Instruction Extensions Compiler Languages
.W
Macroinstruction compilers constructed
small set functions can made extremely
powerful. particular, conditional assembly, nested
definitions, parenthetical notation serve
make compiler capable accepting very
general extensions its ground language.
.B
CACM April, 1960
.A
McIlroy, M. D.
.N
CA600406 JB March 22, 1978 1:49 PM
.X
205 4 205
205 4 205
210 4 205
214 4 205
1982 4 205
398 4 205
642 4 205
669 4 205
100 4 205
123 4 205
164 4 205
1 5 205
205 5 205
205 5 205
205 5 205
1358 5 205
1565 5 205
1781 5 205
1788 5 205
43 5 205
123 6 205
196 6 205
919 6 205
990 6 205
1006 6 205
1007 6 205
1007 6 205
1046 6 205
1131 6 205
1139 6 205
1140 6 205
1149 6 205
1162 6 205
1198 6 205
1215 6 205
1223 6 205
1265 6 205
1303 6 205
1323 6 205
1358 6 205
1358 6 205
1366 6 205
1421 6 205
1455 6 205
1460 6 205
1460 6 205
1462 6 205
1463 6 205
1467 6 205
1468 6 205
1477 6 205
1491 6 205
1496 6 205
1531 6 205
1535 6 205
1565 6 205
1601 6 205
1602 6 205
1613 6 205
1614 6 205
1626 6 205
1641 6 205
1787 6 205
1788 6 205
205 6 205
205 6 205
205 6 205
205 6 205
224 6 205
249 6 205
288 6 205
316 6 205
381 6 205
398 6 205
11 6 205
404 6 205
410 6 205
463 6 205
464 6 205
483 6 205
3184 6 205
3184 6 205
3188 6 205
3189 6 205
584 6 205
600 6 205
680 6 205
691 6 205
729 6 205
763 6 205
799 6 205
799 6 205
.I 206
.T
Symbol Manipulation XTRAN
.B
CACM April, 1960
.A
Green, J.
.N
CA600405 JB March 22, 1978 1:50 PM
.X
206 4 206
207 4 206
206 5 206
206 5 206
206 5 206
64 5 206
644 5 206
196 6 206
206 6 206
207 6 206
.I 207
.T
Syntactic Semantic Augments ALGOL
.B
CACM April, 1960
.A
Smith, J. W.
.N
CA600404 JB March 22, 1978 1:54 PM
.X
206 4 207
207 4 207
207 5 207
207 5 207
207 5 207
64 5 207
644 5 207
196 6 207
206 6 207
207 6 207
.I 208
.T
Introduction Information Processing Language V
.B
CACM April, 1960
.A
Newell, A.
Tonge, F. M.
.N
CA600403 JB March 22, 1978 1:55 PM
.X
208 5 208
208 5 208
208 5 208
378 5 208
208 6 208
209 6 208
210 6 208
.I 209
.T
Symbol Manipulation Threaded Lists
.B
CACM April, 1960
.A
Perlis, A. J.
Thornton, C.
.N
CA600402 JB March 22, 1978 1:56 PM
.X
1050 5 209
1102 5 209
209 5 209
209 5 209
209 5 209
378 5 209
3008 5 209
731 5 209
798 5 209
849 6 209
106 6 209
196 6 209
208 6 209
209 6 209
209 6 209
209 6 209
209 6 209
209 6 209
209 6 209
210 6 209
210 6 209
367 6 209
406 6 209
483 6 209
627 6 209
627 6 209
.I 210
.T
Recursive Functions Symbolic Expressions
Their Computation Machine, Part
.B
CACM April, 1960
.A
McCarthy, J.
.N
CA600401 JB March 22, 1978 1:57 PM
.X
205 4 210
210 4 210
214 4 210
1982 4 210
398 4 210
642 4 210
669 4 210
100 4 210
123 4 210
164 4 210
106 5 210
1 5 210
1024 5 210
1051 5 210
1102 5 210
1132 5 210
210 5 210
210 5 210
210 5 210
1390 5 210
1486 5 210
1549 5 210
1706 5 210
1826 5 210
1878 5 210
378 5 210
2060 5 210
2155 5 210
2168 5 210
2719 5 210
2723 5 210
2838 5 210
2842 5 210
2855 5 210
2879 5 210
3077 5 210
3080 5 210
3106 5 210
627 5 210
106 6 210
106 6 210
196 6 210
196 6 210
1051 6 210
1180 6 210
1303 6 210
1380 6 210
1389 6 210
1421 6 210
1469 6 210
1477 6 210
1491 6 210
1549 6 210
1549 6 210
1549 6 210
1626 6 210
1626 6 210
1626 6 210
1749 6 210
208 6 210
209 6 210
209 6 210
1826 6 210
1826 6 210
1826 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
210 6 210
1834 6 210
1869 6 210
1878 6 210
1972 6 210
1972 6 210
378 6 210
378 6 210
2046 6 210
2060 6 210
2060 6 210
2060 6 210
2110 6 210
2148 6 210
2151 6 210
2167 6 210
2192 6 210
2210 6 210
2457 6 210
2513 6 210
2645 6 210
2651 6 210
2657 6 210
2665 6 210
2723 6 210
2766 6 210
2766 6 210
2833 6 210
2850 6 210
2855 6 210
2954 6 210
2998 6 210
2998 6 210
406 6 210
406 6 210
406 6 210
483 6 210
3184 6 210
3184 6 210
627 6 210
627 6 210
731 6 210
731 6 210
731 6 210
731 6 210
731 6 210
731 6 210
753 6 210
793 6 210
794 6 210
.I 211
.T
Share Standard Flow Chart Symbols
.B
CACM March, 1960
.A
Grems, M.
.N
CA600307 JB March 22, 1978 1:58 PM
.X
211 5 211
211 5 211
211 5 211
.I 212
.T
Bisection Routine (Algorithm 4)
.B
CACM March, 1960
.A
Gorn,S.
.N
CA600306 JB March 22, 1978 1:59 PM
.X
212 5 212
212 5 212
212 5 212
.I 213
.T
Numerical Inversion Laplace Transforms
.B
CACM March, 1960
.A
Schmittroth, L. A.
.N
CA600305 JB March 22, 1978 2:00 PM
.X
213 5 213
213 5 213
213 5 213
.I 214
.T
Algorithm Defining ALGOL Assignment Statements
.B
CACM March, 1960
.A
Floyd, R. W.
.N
CA600304 JB March 22, 1978 2:01 PM
.X
205 4 214
210 4 214
214 4 214
214 4 214
214 4 214
1593 4 214
1982 4 214
398 4 214
642 4 214
669 4 214
100 4 214
123 4 214
164 4 214
1 5 214
214 5 214
214 5 214
214 5 214
53 5 214
91 5 214
.I 215
.T
Execute Operations-A Fourth Mode Instruction Sequencing
.B
CACM March, 1960
.A
Brooks, F. P.
.N
CA600303 JB March 22, 1978 2:02 PM
.X
215 4 215
215 5 215
215 5 215
215 5 215
58 5 215
.I 216
.T
Note Use Abacus Number Conversion
.B
CACM March, 1960
.A
Kanner, H.
.N
CA600302 JB March 22, 1978 2:03 PM
.X
216 5 216
216 5 216
216 5 216
.I 217
.T
Soviet Computer Technology-1959
.B
CACM March, 1960
.N
CA600301 JB March 22, 1978 2:04 PM
.X
217 5 217
217 5 217
217 5 217
323 5 217
689 5 217
217 6 217
217 6 217
323 6 217
3197 6 217
.I 218
.T
Computer Preparation Poetry Concordance
.B
CACM February, 1960
.A
Painter, J. A.
.N
CA600214 JB March 22, 1978 2:05 PM
.X
218 5 218
218 5 218
218 5 218
.I 219
.T
Marriage-with Problems
.B
CACM February, 1960
.A
Shuchter, J. P.
.N
CA600213 JB March 22, 1978 2:06 PM
.X
219 5 219
219 5 219
219 5 219
.I 220
.T
New Method Computation Square Roots Without Using Division
.B
CACM February, 1960
.A
Traub, J. F.
.N
CA600212 JB March 22, 1978 2:08 PM
.X
220 5 220
220 5 220
220 5 220
.I 221
.T
Basic Side Tape Labeling
.B
CACM February, 1960
.A
Logan, W. A.
.N
CA600211 JB March 22, 1978 2:09 PM
.X
121 5 221
221 5 221
221 5 221
221 5 221
221 6 221
.I 222
.T
Coding Isomorphisms
.W
coding external symbols into symbols
internal compute can sometimes carried
out such way relevant informational properties
preserved, but form much more easily
dealt with. case point presented.
.B
CACM February, 1960
.A
Lynch, W. C.
.N
CA600210 JB March 22, 1978 2:12 PM
.X
222 4 222
222 4 222
364 4 222
799 4 222
222 5 222
222 5 222
222 5 222
44 5 222
82 5 222
.I 223
.T
Selfcipher: Programming
.B
CACM February, 1960
.A
Pelta, H. N.
.N
CA600209 JB March 22, 1978 2:13 PM
.X
223 5 223
223 5 223
223 5 223
.I 224
.T
Sequential Formula Translation
.W
syntax algorithmic language such
ALGOL conveniently described sequence
states indicated element called cellar. Transitions
controlled admissible state-symbol
pairs which may represented transition matrix.
description syntax furnishes same
time extremely simple rule translating into machine
programs statements algorithmic language.
Sequential treatment, however, not feasible case
certain optimizing processes such recursive
address calculation.
.B
CACM February, 1960
.A
Samelson, K.
Bauer, F. L.
.N
CA600208 JB March 22, 1978 2:17 PM
.X
224 4 224
364 4 224
1139 5 224
1141 5 224
1215 5 224
1223 5 224
224 5 224
224 5 224
224 5 224
267 5 224
1647 5 224
1781 5 224
1787 5 224
1792 5 224
364 5 224
405 5 224
438 5 224
98 5 224
763 5 224
100 6 224
123 6 224
196 6 224
196 6 224
196 6 224
919 6 224
990 6 224
1007 6 224
1025 6 224
1046 6 224
1131 6 224
1139 6 224
1140 6 224
1141 6 224
1149 6 224
1179 6 224
1198 6 224
1215 6 224
1215 6 224
1223 6 224
1265 6 224
1303 6 224
1323 6 224
1358 6 224
1366 6 224
1421 6 224
1460 6 224
1462 6 224
1463 6 224
1467 6 224
1468 6 224
1477 6 224
1491 6 224
1491 6 224
1496 6 224
1496 6 224
1531 6 224
1535 6 224
1565 6 224
1601 6 224
1602 6 224
1605 6 224
1613 6 224
1614 6 224
1626 6 224
1641 6 224
1781 6 224
1787 6 224
1788 6 224
205 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
224 6 224
249 6 224
249 6 224
288 6 224
303 6 224
316 6 224
381 6 224
398 6 224
399 6 224
11 6 224
44 6 224
55 6 224
77 6 224
77 6 224
77 6 224
77 6 224
93 6 224
98 6 224
404 6 224
404 6 224
404 6 224
405 6 224
410 6 224
412 6 224
438 6 224
463 6 224
464 6 224
464 6 224
483 6 224
3184 6 224
3188 6 224
584 6 224
600 6 224
631 6 224
631 6 224
680 6 224
691 6 224
763 6 224
763 6 224
763 6 224
799 6 224
799 6 224
.I 225
.T
Techniquefor Handling Macro Instructions (Corrigendum)
.B
CACM February, 1960
.A
Greenwald, I. D.
.N
CA600207 JB March 22, 1978 2:18 PM
.X
225 5 225
225 5 225
225 5 225
.I 226
.T
Solution Polynomial Equation
Bairstow-Hitchcock Method (Algorithm 3)
.B
CACM February, 1960
.A
Grau, A. A.
.N
CA600206 JB March 22, 1978 2:20 PM
.X
226 5 226
226 5 226
226 5 226
.I 227
.T
ROOTFINDER (Algorithm 2)
.B
CACM February, 1960
.A
Wegstein, J.
.N
CA600205 JB March 22, 1978 2:20 PM
.X
227 5 227
227 5 227
227 5 227
.I 228
.T
QUADI (Algorithm 1)
.B
CACM February, 1960
.A
Herbold, R. J.
.N
CA600204 JB March 22, 1978 2:21 PM
.X
228 5 228
228 5 228
228 5 228
.I 229
.T
Terminology Proposal
.B
CACM February, 1960
.A
Gruenberger, F.
.N
CA600203 JB March 22, 1978 2:24 PM
.X
229 5 229
229 5 229
229 5 229
.I 230
.T
Proposal Character Code Compatibility
.B
CACM February, 1960
.A
Bemer, R. W.
.N
CA600202 JB March 22, 1978 2:25 PM
.X
230 5 230
230 5 230
230 5 230
333 5 230
230 6 230
.I 231
.T
Proposal Set Publication Standards Use ACM
.B
CACM February, 1960
.A
Kent, E. R.
.N
CA600201 JB March 22, 1978 2:26 PM
.X
231 5 231
231 5 231
231 5 231
.I 232
.T
High-Speed Sorting Procedure
.B
CACM January, 1960
.A
Frank, R. M.
Lazarus, R. B.
.N
CA600104 JB March 22, 1978 2:27 PM
.X
232 5 232
232 5 232
232 5 232
852 5 232
864 5 232
232 6 232
232 6 232
309 6 232
74 6 232
74 6 232
.I 233
.T
Abstracts-Additional Nuclear Reactor Codes
.B
CACM January, 1960
.A
Nather, V.
Sangren, W.
.N
CA600103 JB March 22, 1978 2:29 PM
.X
233 5 233
233 5 233
233 5 233
.I 234
.T
SAP-Like Assembly Program IBM 650
.B
CACM January, 1960
.A
Speckhard, A. E.
.N
CA600102JB March 22, 1978 2:30 PM
.X
234 5 234
234 5 234
234 5 234
.I 235
.T
Two Think Pieces
.B
CACM January, 1960
.A
Bagley, P. R.
.N
CA600101 JB March 22, 1978 2:30 PM
.X
235 5 235
235 5 235
235 5 235
.I 236
.T
Soviet Cybernetics Computer
.W
article records observations Soviet
research technology cybernetics computer
science, made author during visit Soviet
Union delegate IFAC Congress
Automatic Control held Moscow summer 1960.
.B
CACM December, 1961
.A
Feigenbaum, E. A.
.N
CA611214 JB March 15, 1978 10:06 PM
.X
1349 5 236
236 5 236
236 5 236
236 5 236
236 6 236
323 6 236
83 6 236
415 6 236
.I 237
.T
Computer Production Peek-A-Boo Sheets
.B
CACM December, 1961
.A
Robbins, D.
.N
CA611213 JB March 15, 1978 10:07 PM
.X
237 5 237
237 5 237
237 5 237
.I 238
.T
Simulation Analysis Biochemical Systems
.B
CACM December, 1961
.A
Garfinkel, D.
Rutledge, J. D.
Higgins, J. J.
.N
CA611212 JB March 15, 1978 10:09 PM
.X
238 4 238
238 4 238
633 4 238
643 4 238
238 5 238
238 5 238
238 5 238
633 5 238
643 5 238
238 6 238
238 6 238
633 6 238
643 6 238
.I 239
.T
Inefficiency Use Boolean Functions
Information Retrieval Systems
.B
CACM December, 1961
.A
Verhoeff, J.
Goffman, W.
Belzer, J.
.N
CA611211 JB March 15, 1978 10:10 PM
.X
239 5 239
239 5 239
239 5 239
.I 240
.T
Processing Magnetic Tape Files Variable Blocks
.B
CACM December, 1961
.A
Graham, J. W.
Sprott, D. A.
.N
CA611210 JB March 15, 1978 10:11 PM
.X
240 5 240
240 5 240
240 5 240
.I 241
.T
Machine Calculation Moments Probability Distribution
.W
method presented calculation
machine moments probability distribution,
necessitating little more than n additions n references
memory each moment, instead
minimum n multiplication, 2n additions, 2n references
memory required most straightforward
method (where n number entries probability
distribution). method directly applicable
tabulated distribution exists, has
been computed repeated convolution; but
case conserves both time accuracy.
.B
CACM December, 1961
.A
Lechner, J. A.
.N
CA611209 JB March 15, 1978 10:15 PM
.X
241 5 241
241 5 241
241 5 241
.I 242
.T
Notes Geometric Weighted Check Digit Verification
.W
note describes method utilizing
geometric weight modulus 11 checking digits
computer which does not have either multiplication
division. addition some attempt has been made
show some limitations system.
.B
CACM December, 1961
.A
Wilson, J. G.
.N
CA611208 JB March 15, 1978 10:17 PM
.X
242 5 242
242 5 242
242 5 242
.I 243
.T
N-Dimensional Codes Detecting Correcting Multiple Errors
.W
paper introduces new family codes
detecting correcting multiple errors
binary-coded message. message itself arranged
(conceptually) into multidimensional rectangular
array. processes encoding error detection
based upon parity evaluations along prescribed
dimensions array. Effectiveness codes
increased introducing "system check bit",
which essentially parity check other parity
bits. Only three-dimensional codes discussed
paper parity evaluations along horizontal,
vertical, one main diagonal. However,
family codes not restricted three dimensions,
evidenced discussion Minnick
Ashenhurst similar multidimensional single-bit
selection plan used another purpose [6].
four-dimensional code, correcting three detecting
four errors, has been developed; extension
higher-dimensional codes greater correction power straightforward.
.B
CACM December, 1961
.A
Rubinoff, M.
.N
CA611207 JB March 15, 1978 10:23 PM
.X
243 5 243
243 5 243
243 5 243
.I 244
.T
Incomplete Elliptic Integrals (Algorithm 73)
.B
CACM December, 1961
.A
Kriebel, D. C.
.N
CA611206 JB March 15, 1978 10:24 PM
.X
244 5 244
244 5 244
244 5 244
.I 245
.T
Set Associate Legendre Polynomials Second Kind (Algorithm 62)
.B
CACM December, 1961
.A
Herndon, J. R.
.N
CA611205 JB March 15, 1978 10:25 PM
.X
1222 5 245
245 5 245
245 5 245
245 5 245
1130 6 245
245 6 245
310 6 245
.I 246
.T
Least-Squares Fit Orthogonal Polynomials (Algorithm 28)
.B
CACM December, 1961
.A
MacMillan, D. B.
.N
CA611204 JB March 15, 1978 10:27 PM
.X
246 5 246
246 5 246
246 5 246
.I 247
.T
Incomplete Elliptic Integrals (Algorithm 73)
.B
CACM December, 1961
.A
Jefferson, D. K.
.N
CA611203 JB March 15, 1978 10:27 PM
.X
247 5 247
247 5 247
247 5 247
.I 248
.T
Proprietary Mathematical Programming?-Impressions
Panel Discussion
.W
panel discussion "What Proprietary
Mathematical Programming?" sponsored
Special Interest Committee Mathematical Programming
ACM during Hall Discussion/on September
7th 16th National ACM meeting Los Angeles.
note consists solely impressions garnered
moderator panel does not necessarily
represent position any panelists
other participants discussion.
.B
CACM December, 1961
.A
Smith, L. W.
.N
CA611202 JB March 15, 1978 10:31 PM
.X
248 5 248
248 5 248
248 5 248
.I 249
.T
Specification Languages Mechanical Languages
Their Processors*-A Baker's Dozen
.B
CACM December, 1961
.A
Gorn, S.
.N
CA611201 JB March 15, 1978 10:32 PM
.X
249 4 249
249 4 249
249 4 249
254 4 249
272 4 249
1102 4 249
1109 4 249
1140 4 249
1188 4 249
1306 4 249
1464 4 249
1491 4 249
1767 4 249
1781 4 249
1787 4 249
1949 4 249
321 4 249
2059 4 249
2126 4 249
435 4 249
437 4 249
438 4 249
463 4 249
483 4 249
491 4 249
2732 4 249
560 4 249
583 4 249
3073 4 249
3185 4 249
627 4 249
631 4 249
632 4 249
642 4 249
644 4 249
653 4 249
680 4 249
761 4 249
762 4 249
763 4 249
123 4 249
140 4 249
919 4 249
989 4 249
196 5 249
249 5 249
249 5 249
249 5 249
1425 5 249
1781 5 249
303 5 249
438 5 249
51 5 249
762 5 249
123 6 249
196 6 249
196 6 249
919 6 249
990 6 249
1007 6 249
1046 6 249
1131 6 249
1139 6 249
1140 6 249
1149 6 249
1198 6 249
1215 6 249
1223 6 249
1265 6 249
1303 6 249
1323 6 249
1358 6 249
1366 6 249
1421 6 249
1460 6 249
1462 6 249
1463 6 249
1467 6 249
1468 6 249
1477 6 249
1491 6 249
1496 6 249
1531 6 249
1535 6 249
1565 6 249
1601 6 249
1602 6 249
1613 6 249
1614 6 249
1626 6 249
1641 6 249
1787 6 249
1788 6 249
205 6 249
224 6 249
224 6 249
249 6 249
249 6 249
249 6 249
249 6 249
288 6 249
303 6 249
316 6 249
381 6 249
398 6 249
11 6 249
77 6 249
404 6 249
410 6 249
463 6 249
464 6 249
483 6 249
483 6 249
3184 6 249
3188 6 249
584 6 249
600 6 249
680 6 249
691 6 249
763 6 249
799 6 249
.I 250
.T
Engineering Application Logic-Structure Tables
.B
CACM November, 1961
.A
Nickerson, R. C.
.N
CA611118 JB March 15, 1978 10:34 PM
.X
250 4 250
1237 4 250
1237 5 250
250 5 250
250 5 250
250 5 250
320 5 250
2220 5 250
753 5 250
1172 6 250
1237 6 250
1327 6 250
1354 6 250
1489 6 250
1548 6 250
250 6 250
250 6 250
250 6 250
320 6 250
753 6 250
.I 251
.T
Ballistic Cam Design
.W
paper presents digital computer program
rapid calculation manufacturing data
essential design preproduction cams which
utilized ballistic computers tank fire
control systems. cam profile generated introduces
superelevation angle required tank main
armament particular type ammunition.
.B
CACM November, 1961
.A
Archambault, M.
.N
CA611117 JB March 15, 1978 10:37 PM
.X
251 5 251
251 5 251
251 5 251
.I 252
.T
Programming Duplex Computer System
.W
paper describes method duplex-computer
programming has been used two computers
military defense system. method combines special
programs basic data processing program
package. duplex operation gives system greater
reliability. After achieving required level
integration, both computers do similar processing
same inputs continually cross-check
intermediate final results.
.B
CACM November, 1961
.A
Dow, J.
.N
CA611116 JB March 15, 1978 10:40 PM
.X
252 5 252
252 5 252
252 5 252
.I 253
.T
Program Ray-Chaudhuri's Algorithm
Minimum Cover Abstract Complex
.B
CACM November, 1961
.A
Foata, D. C.
.N
CA611115 JB March 15, 1978 10:41 PM
.X
253 5 253
253 5 253
253 5 253
.I 254
.T
SMALGOL-61
.W
Prior during 1961 Western Joint
Computer Conference, several people Joint
Users Groups had expressed interest defining "smalgol"
language. ALGOL language
use compilers relatively small size computers.
preliminary report resulted. ACM
National Conference four months later, after considering
several counter proposals, final version
agreed upon subcommittee. recommendations
Subcommittee standard subset ALGOL
60 use small computers presented here.
.B
CACM November, 1961
.A
Bachelork, G. A.
Dempster, J. R. H.
Knuth, D. E.
Speroni, J.
.N
CA611114 JB March 15, 1978 10:44 PM
.X
249 4 254
254 4 254
254 4 254
254 4 254
272 4 254
1102 4 254
1109 4 254
1140 4 254
1188 4 254
1234 4 254
1306 4 254
1464 4 254
1491 4 254
1767 4 254
1781 4 254
1787 4 254
1949 4 254
321 4 254
2059 4 254
2126 4 254
435 4 254
437 4 254
463 4 254
483 4 254
491 4 254
2732 4 254
560 4 254
583 4 254
3073 4 254
627 4 254
631 4 254
632 4 254
642 4 254
644 4 254
653 4 254
680 4 254
761 4 254
762 4 254
763 4 254
123 4 254
140 4 254
919 4 254
989 4 254
196 5 254
254 5 254
254 5 254
254 5 254
321 5 254
387 5 254
794 5 254
254 6 254
.I 255
.T
Augmentation (Algorithm 68)
.B
CACM November, 1961
.A
Breed, L. M.
.N
CA611113 JB March 15, 1978 10:45 PM
.X
255 5 255
255 5 255
255 5 255
.I 256
.T
Set Test Matrices (Algorithm 52)
.B
CACM November, 1961
.A
Dubay, G. H.
.N
CA611112 JB March 15, 1978 10:46 PM
.X
256 5 256
256 5 256
256 5 256
.I 257
.T
Invert (Algorithm 42)
.B
CACM November, 1961
.A
Knapp, A. W.
Shaman, P.
.N
CA611111 JB March 15, 1978 10:47 PM
.X
257 5 257
257 5 257
257 5 257
.I 258
.T
Composition Generator (Algorithm 72)
.B
CACM November, 1961
.A
Hellerman, O.
Ogden, S.
.N
CA611110 JB March 15, 1978 10:48 PM
.X
258 5 258
258 5 258
258 5 258
.I 259
.T
Permutation (Algorithm 71)
.B
CACM November, 1961
.A
Coveyou, R. R.
Sullivan, J. G.
.N
CA611109 JB March 15, 1978 10:52 PM
.X
259 5 259
259 5 259
259 5 259
.I 260
.T
Interpolation Aitken (Algorithm 70)
.B
CACM November, 1961
.A
Mifsud, C. J.
.N
CA611108 JB March 15, 1978 10:53 PM
.X
260 5 260
260 5 260
260 5 260
.I 261
.T
Tape Splitting
.B
CACM November, 1961
.A
Moore, D. P.
.N
CA611107 JB March 15, 1978 10:54 PM
.X
261 5 261
261 5 261
261 5 261
.I 262
.T
MAP
.B
CACM November, 1961
.A
Moore, C. L.
Ruwe, M. L.
.N
CA611106 JB March 15, 1978 10:54 PM
.X
262 5 262
262 5 262
262 5 262
.I 263
.T
Library Loading Alternate Routine Selection
.B
CACM November, 1961
.A
Moore, D. P.
.N
CA611105 JB March 15, 1978 10:55 PM
.X
263 5 263
263 5 263
263 5 263
.I 264
.T
Generalized Polyphase Merge Algorithm
.B
CACM November, 1961
.A
Reynolds, S. W.
.N
CA611104 JB March 15, 1978 10:56 PM
.X
264 5 264
264 5 264
264 5 264
479 5 264
264 6 264
299 6 264
.I 265
.T
Low Level Language Subroutines Use Within Fortran
.W
paper describes some subroutines, coded
symbolic languages use within Fortran
coded programs, deal "special arithmetic" (e.g.
multi-precision arithmetic), symbol manipulation,
bit manipulation expanded character set input-output, visual display.
.B
CACM November, 1961
.A
Barnett, M. P.
.N
CA611103 JB March 15, 1978 10:59 PM
.X
265 5 265
265 5 265
265 5 265
464 5 265
720 5 265
265 6 265
265 6 265
404 6 265
464 6 265
474 6 265
.I 266
.T
Fitting Spheres Method Least Squares
.B
CACM November, 1961
.A
Robinson, S. M.
.N
CA611102 JB March 15, 1978 11:00 PM
.X
266 5 266
266 5 266
266 5 266
.I 267
.T
Some Proposals Improving Efficiency ALGOL 60
.B
CACM November, 1961
.A
Wilkes, M. V.
.N
CA611101 JB March 15,1978 11:01 PM
.X
267 4 267
1139 4 267
1141 4 267
1215 4 267
1223 4 267
1647 4 267
1781 4 267
1787 4 267
1792 4 267
364 4 267
405 4 267
438 4 267
763 4 267
1323 5 267
224 5 267
267 5 267
267 5 267
267 5 267
267 6 267
3184 6 267
799 6 267
.I 268
.T
Stochastic Evaluation Static Storage Allocation
.B
CACM October, 1961
.A
Cohen, L. J.
.N
CA611013 JB March 16, 1978 12:48 PM
.X
268 5 268
268 5 268
268 5 268
.I 269
.T
Core Allocation Based Probability
.B
CACM October, 1961
.A
Riskin, B. N.
.N
CA611012 JB March 16, 1978 12:49 PM
.X
269 5 269
269 5 269
269 5 269
.I 270
.T
Techniques Storage Allocation Algorithms
.B
CACM October, 1961
.A
Kelley Jr., J. E.
.N
CA611011 JB March 16, 1978 12:50 PM
.X
270 5 270
270 5 270
270 5 270
678 5 270
270 6 270
.I 271
.T
Semi-Automatic Storage Allocation System Loading Time
.B
CACM October, 1961
.A
Heising, W. P.
Larner, R. A.
.N
CA611010 JB March 16, 1978 12:51 PM
.X
972 5 271
271 5 271
271 5 271
271 5 271
1774 5 271
560 5 271
800 6 271
196 6 271
1173 6 271
271 6 271
271 6 271
271 6 271
273 6 271
276 6 271
.I 272
.T
Storage Allocation Scheme ALGOL 60
.W
storage allocation scheme machine
2048 instruction core store magnetic
drum described. use drum storing
program blocks and/or data must directed
programmer through auxiliary information ALGOL
program. administrative routines controlling
storage run time described full. detailed example given.
.B
CACM October, 1961
.A
Jensen, J.
Mondrup, P.
Naur, P.
.N
CA611009 JB March 16, 1978 12:54 PM
.X
249 4 272
254 4 272
272 4 272
1102 4 272
1109 4 272
1140 4 272
1188 4 272
1306 4 272
1464 4 272
1491 4 272
1767 4 272
1781 4 272
1787 4 272
1949 4 272
321 4 272
2059 4 272
2126 4 272
435 4 272
437 4 272
463 4 272
483 4 272
491 4 272
2732 4 272
560 4 272
583 4 272
3073 4 272
627 4 272
631 4 272
632 4 272
642 4 272
644 4 272
653 4 272
680 4 272
761 4 272
762 4 272
763 4 272
123 4 272
140 4 272
919 4 272
989 4 272
196 5 272
272 5 272
272 5 272
272 5 272
.I 273
.T
Experience Automatic Storage Allocation
.B
CACM October, 1961
.A
Collins Jr., G. O.
.N
CA611008 JB March 16, 1978 12:55 PM
.X
972 5 273
273 5 273
273 5 273
273 5 273
2911 5 273
1879 6 273
271 6 273
273 6 273
273 6 273
276 6 273
2435 6 273
2498 6 273
2734 6 273
2773 6 273
2983 6 273
.I 274
.T
Dynamic Storage Allocation Atlas Computer,
Including Automatic Use Backing Store
.B
CACM October, 1961
.A
Fotheringham, J.
.N
CA611007 JB March 16, 1978 12:57 PM
.X
274 5 274
274 5 274
274 5 274
1754 5 274
2358 5 274
488 5 274
1746 6 274
1751 6 274
1753 6 274
274 6 274
274 6 274
274 6 274
376 6 274
.I 275
.T
Dynamic Storage Allocation Information Retrieval System
.B
CACM October, 1961
.A
Sams, B. H.
.N
CA611006 JB March 16, 1978 12:58 PM
.X
275 5 275
275 5 275
275 5 275
.I 276
.T
Program Organization Record Keeping Dynamic Storage Allocation
.W
material presented paper part
design plan core allocation portion
ASCII-MATIC Programming System. Project ASCII-MATIC
concerned application computer
techniques activities certain headquarters
military intelligence operations U.S. Army.
.B
CACM October, 1961
.A
Holt, A. W.
.N
CA611005 JB March 16, 1978 1:02 PM
.X
972 5 276
276 5 276
276 5 276
276 5 276
1471 5 276
800 6 276
271 6 276
273 6 276
276 6 276
276 6 276
.I 277
.T
Problems Storage Allocation
Multiprocessor Multiprogrammed System
.B
CACM October, 1961
.A
Maher, R. J.
.N
CA611004 JB March 16, 1978 1:12 PM
.X
277 5 277
277 5 277
277 5 277
.I 278
.T
General Formulation storage Allocation
.W
Formalization general computer storage
allocation process attempted. given
computer M associated fictitious computer M' essentially
identical M except respect possession
unbounded primary storage. Mappings total
storage set (internal external) M into
direct address set M' introduced. program
sequence P M' termed M-admissible (relative
specific execution time period) if there mapping
underwhich P its effective data referents
all located direct address set M. Storage
allocation considered process establishing
arbitrary M' program sequence mappings, decoupling
program into M-admissible subprograms
linking set interludes. existence proof
terms completely interpretive M program
indicated. Some special cases discussed. Various
restrictions generality M' programs
considered under which more practical realization
allocation processes becomes tractable.
.B
CACM October, 1961
.A
Roberts Jr., A. E.
.N
CA611003 JB March 16, 1978 1:22 PM
.X
278 5 278
278 5 278
278 5 278
.I 279
.T
Case Dynamic storage Allocation
.B
CACM October, 1961
.A
Sams, B. H.
.N
CA611002 JB March 16, 1978 1:23 PM
.X
279 5 279
279 5 279
279 5 279
657 5 279
279 6 279
409 6 279
.I 280
.T
Preplanned Approach Storage Allocating Compiler
.B
CACM October, 1961
.A
O'Neil, R. W.
.N
CA611001 JB March 16, 1978 1:24 PM
.X
280 5 280
280 5 280
280 5 280
.I 281
.T
Putting Hex e^x
.W
Recent notes approximate natural antilogy
have not considered indirect formulations
describing e^x. note we produce particular
family very fast, high precision eminently
practical exponential evaluation formulas derived one such formulation.
.B
CACM October, 1961
.A
Feurzeig, W.
.N
CA610913 JB March 16, 1978 1:27 PM
.X
281 5 281
281 5 281
281 5 281
.I 282
.T
Optimum Tape-Writing Procedures
.W
Consider magnetic tape system read
check after writing. error occurs
writing record, programmed error routine may either
bypass some all area tape try
rewrite record same area. paper evaluates
these two procedures basis expected
loss computer time develops decision rule
selecting optimum procedure. rule depends
critically number times tape being written
used future. case
optimum procedure bypass area, second
decision-the size area bypassed-is
necessary. formula developed determine
optimum area bypassed each procedure.
.B
CACM September, 1961
.A
Hutchinson, K.
.N
CA610912 JB March 16, 1978 1:32 PM
.X
282 5 282
282 5 282
282 5 282
.I 283
.T
Inversion Complex Matrix
.B
CACM September, 1961
.A
Tornheim, L.
.N
CA610911 JB March 16, 1978 1:44 PM
.X
283 5 283
283 5 283
283 5 283
.I 284
.T
Manipulation Algebraic Expressions
.W
algorithm algebraically manipulating
expressions form SUM{CiPi, i=1,...,n}; has
been developed conjunction development programs
systems analysis problems. algorithm
enablesus derive over-all system transfer functions
algebraically described block diagrams
any linear continuous multi-loop feedback system.
machine representation derived expression,
is, virtue algorithm, form which simplifies
task compiling. algorithm
developed particular purpose connection
system analysis studies. However, its application
mathematical device extends far beyond
confines original problem.
.B
CACM September, 1961
.A
Rom, A. R. M.
.N
CA610910 JB March 16, 1978 9:36 PM
.X
964 5 284
1396 5 284
284 5 284
284 5 284
284 5 284
964 6 284
1028 6 284
1029 6 284
1083 6 284
1132 6 284
1214 6 284
1278 6 284
1334 6 284
1365 6 284
1386 6 284
1387 6 284
1388 6 284
1392 6 284
1393 6 284
1394 6 284
1395 6 284
1396 6 284
1397 6 284
1496 6 284
284 6 284
284 6 284
407 6 284
3199 6 284
3200 6 284
3201 6 284
3202 6 284
3203 6 284
3204 6 284
561 6 284
561 6 284
730 6 284
759 6 284
.I 285
.T
Solution Tridiagonal Matrices
.B
CACM September, 1961
.A
Wenrick, R. C.
Houghton, A. V.
.N
CA610909 JB March 16, 1978 9:39 PM
.X
285 5 285
285 5 285
285 5 285
.I 286
.T
Iterative Method Inversion Power Series
.B
CACM September, 1961
.A
Bramhall, J. N.
.N
CA610908 JB March 16, 1978 9:41 PM
.X
286 5 286
286 5 286
286 5 286
.I 287
.T
Generalized Important Event Technique
.B
CACM September, 1961
.A
Shapiro, N.
Vreenegoor, H.
.N
CA610907 JB March 16, 1978 9:42 PM
.X
287 5 287
287 5 287
287 5 287
.I 288
.T
Syntactical Chart ALGOL 60
.B
CACM September, 1961
.A
Taylor, W.
Turner, L.
Waychoff, R.
.N
CA610906JB March 16, 1978 9:43 PM
.X
989 5 288
288 5 288
288 5 288
288 5 288
1781 5 288
729 5 288
123 6 288
196 6 288
196 6 288
919 6 288
990 6 288
1007 6 288
1046 6 288
1131 6 288
1139 6 288
1140 6 288
1149 6 288
1198 6 288
1215 6 288
1223 6 288
1265 6 288
1303 6 288
1323 6 288
1358 6 288
1366 6 288
1421 6 288
1460 6 288
1462 6 288
1463 6 288
1467 6 288
1468 6 288
1477 6 288
1491 6 288
1496 6 288
1531 6 288
1535 6 288
1565 6 288
1601 6 288
1602 6 288
1613 6 288
1614 6 288
1626 6 288
1641 6 288
1787 6 288
1788 6 288
205 6 288
224 6 288
249 6 288
288 6 288
288 6 288
288 6 288
316 6 288
381 6 288
398 6 288
11 6 288
404 6 288
410 6 288
463 6 288
464 6 288
483 6 288
3184 6 288
3184 6 288
3188 6 288
584 6 288
600 6 288
616 6 288
680 6 288
691 6 288
763 6 288
799 6 288
.I 289
.T
Critical Path Scheduling (Algorithm 40)
.B
CACM September, 1961
.A
Alexander, N. P.
.N
CA610905 JB March 16, 1978 9:44 PM
.X
289 5 289
289 5 289
289 5 289
.I 290
.T
Chain Tracing (Algorithm 69)
.B
CACM September, 1961
.A
Mayoh, B. H.
.N
CA610904 JB March 16, 1978 9:45 PM
.X
290 5 290
290 5 290
290 5 290
.I 291
.T
Use MOBOL PreparingRetrieval Programs
.B
CACM September, 1961
.A
Hoffman, J.
Opler, A.
.N
CA610903 JB March 16, 1978 9:50 PM
.X
291 5 291
291 5 291
291 5 291
.I 292
.T
Information Retrieval Language Legal Studies
.B
CACM September, 1961
.A
Kehl, W. B.
Horty, J. F.
Bacon, C. R. T.
Mitchell, D. S.
.N
CA610902 JB March 16, 1978 9:51 PM
.X
292 5 292
292 5 292
292 5 292
.I 293
.T
Applied Mathematics Laboratory David W. Taylor Model Basin
.B
CACM September, 1961
.A
Richstone, M.
.N
CA610901 JB March 16, 1978 10:01 PM
.X
293 5 293
293 5 293
293 5 293
.I 294
.T
Imaginary Number System
.B
CACM August, 1961
.A
Knuth, D.
.N
CA610810 JB March 16, 1978 10:02 PM
.X
294 5 294
294 5 294
294 5 294
.I 295
.T
Rational Approximations Error Function Similar Functions
.B
CACM August, 1961
.A
Clendenin, W. W.
.N
CA610809 JB March 16, 1978 10:03 PM
.X
295 5 295
295 5 295
295 5 295
.I 296
.T
Note Multiple Precision Arithmetic
.B
CACM August, 1961
.A
Cox, A. G.
Luther, H. A.
.N
CA610808 JB March 16, 1978 10:04 PM
.X
1393 5 296
296 5 296
296 5 296
296 5 296
106 6 296
296 6 296
731 6 296
.I 297
.T
Note Fitting Great Circles Least Squares
.B
CACM August, 1961
.A
Marcus, C. F.
.N
CA610807 JB March 16, 1978 10:05 PM
.X
297 4 297
122 5 297
297 5 297
297 5 297
297 5 297
.I 298
.T
48-Bit Pseudo-Random Number Generator
.W
new 48-bit pseudo-random number generator, suitable
several computers, tested statistically
randomness determine its adequacy use Monte
Carlo programs. Frequency tests, distributions
certain low-order moments, runs up down, runs
above below mean were applied one-half
million generated numbers lying within interval
(0,1) three sets integers obtained
specified bits within generated numbers. These
tests substantiated randomness all numbers
except set integers coming least significant bits.
.B
CACM August, 1961
.A
Kuehn, H. G.
.N
CA610806 JB March 16, 1978 10:09 PM
.X
298 5 298
298 5 298
298 5 298
.I 299
.T
Generalized Polyphase Merge Algorithm
.B
CACM August, 1961
.A
Reynolds, S. W.
.N
CA610805 JB March 16, 1978 10:10 PM
.X
299 5 299
299 5 299
299 5 299
2146 5 299
479 5 299
862 5 299
863 5 299
861 6 299
862 6 299
863 6 299
264 6 299
299 6 299
299 6 299
299 6 299
299 6 299
479 6 299
.I 300
.T
COBOL: Sample Problem
.W
simplified Merchandise Control problem has
been chosen presenting COBOL users
potential users computing systems. mythical department
store, "E. Language Bros., Inc.", programming
COBOL language one many runs its computer.
.B
CACM August, 1961
.A
Mackinson, T. N.
.N
CA610804 JB March 16, 1978 10:12 PM
.X
300 5 300
300 5 300
300 5 300
638 5 300
300 6 300
.I 301
.T
Set Test Matrices (Algorithm 52)
.B
CACM August, 1961
.A
Gilbert, H. E.
.N
CA610803 JB March 16, 1978 10:13 PM
.X
301 5 301
301 5 301
301 5 301
.I 302
.T
Augmentation (Algorithm 68)
.B
CACM August, 1961
.A
Rice, H. G.
.N
CA610802 JB March 16, 1978 10:14 PM
.X
302 5 302
302 5 302
302 5 302
.I 303
.T
Some Basic Terminology Connected
Mechanical Languages Their Processors
.W
suggestions paper part
terminology used work University
Pennsylvania's Office computer Research Education.
work jointly supported National
Science Foundation Air Force Office Scientific Research.
.B
CACM August, 1961
.A
Gorn, S.
.N
CA610801 JB March 16, 1978 10:16 PM
.X
249 5 303
303 5 303
303 5 303
303 5 303
438 5 303
3185 5 303
196 6 303
224 6 303
249 6 303
303 6 303
303 6 303
303 6 303
51 6 303
77 6 303
438 6 303
.I 304
.T
Nth Roots Complex Number (Algorithm 53)
.B
CACM July, 1961
.A
Nestor Jr., C. W.
.N
CA610713 JB March 16, 1978 10:17 PM
.X
304 5 304
304 5 304
304 5 304
.I 305
.T
CRAM (Algorithm 67)
.B
CACM July, 1961
.A
Caffrey, J.
.N
CA610712 JB March 16, 1978 10:18 PM
.X
305 5 305
305 5 305
305 5 305
.I 306
.T
INVRS (Algorithm 66)
.B
CACM July, 1961
.A
Caffery, J.
.N
CA610711 JB March 16, 1978 10:19 PM
.X
306 5 306
306 5 306
306 5 306
.I 307
.T
FIND (Algorithm 65)
.B
CACM July, 1961
.A
Hoare, C. A. R.
.N
CA610710 JB March 16, 1978 10:20 PM
.X
307 5 307
307 5 307
307 5 307
2227 5 307
2783 5 307
3054 5 307
1175 6 307
1834 6 307
1880 6 307
1919 6 307
1969 6 307
1980 6 307
1997 6 307
307 6 307
307 6 307
307 6 307
308 6 307
309 6 307
309 6 307
2017 6 307
2679 6 307
776 6 307
.I 308
.T
QUICKSORT (Algorithm 64)
.B
CACM July, 1961
.A
Hoare, C. A. R.
.N
CA610709 JB March 16, 1978 10:21 PM
.X
1175 5 308
1919 5 308
1969 5 308
1997 5 308
308 5 308
308 5 308
308 5 308
2191 5 308
2388 5 308
2679 5 308
3054 5 308
3121 5 308
864 6 308
864 6 308
970 6 308
1175 6 308
1175 6 308
1175 6 308
1175 6 308
1190 6 308
1228 6 308
1312 6 308
1880 6 308
1919 6 308
1969 6 308
1969 6 308
1969 6 308
1980 6 308
1997 6 308
1997 6 308
307 6 308
308 6 308
308 6 308
308 6 308
308 6 308
308 6 308
308 6 308
308 6 308
308 6 308
308 6 308
309 6 308
309 6 308
309 6 308
309 6 308
309 6 308
2017 6 308
2042 6 308
2456 6 308
2679 6 308
2709 6 308
74 6 308
3187 6 308
3187 6 308
507 6 308
716 6 308
776 6 308
783 6 308
.I 309
.T
PARTITION (Algorithm 63)
.B
CACM July, 1961
.A
Hoare, C. A. R.
.N
CA610708 JB March 16, 1978 10:22 PM
.X
1919 5 309
309 5 309
309 5 309
309 5 309
2191 5 309
2388 5 309
2783 5 309
2784 5 309
3054 5 309
3121 5 309
864 5 309
864 6 309
1175 6 309
1175 6 309
1312 6 309
1729 6 309
232 6 309
1880 6 309
1919 6 309
1969 6 309
1980 6 309
1997 6 309
307 6 309
307 6 309
308 6 309
308 6 309
308 6 309
308 6 309
308 6 309
309 6 309
309 6 309
309 6 309
309 6 309
309 6 309
309 6 309
309 6 309
309 6 309
2017 6 309
2456 6 309
2679 6 309
2709 6 309
74 6 309
74 6 309
2783 6 309
3187 6 309
776 6 309
.I 310
.T
Set Associate Legendre Polynomials
Second Kind (Algorithm 62)
.B
CACM July, 1961
.A
Herndon, J. R.
.N
CA610707 JB March 16, 1978 10:23 PM
.X
1222 5 310
310 5 310
310 5 310
310 5 310
1130 6 310
245 6 310
310 6 310
.I 311
.T
Procedures Range Arithmetic (Algorithm 61)
.B
CACM July, 1961
.A
Gibb, A.
.N
CA610706 JB March 16, 1978 10:25 PM
.X
1524 5 311
1931 5 311
311 5 311
311 5 311
311 5 311
2214 5 311
2544 5 311
879 6 311
1177 6 311
1197 6 311
1524 6 311
311 6 311
311 6 311
311 6 311
311 6 311
2214 6 311
.I 312
.T
Further Note Approximating e^x
.B
CACM July, 1961
.A
Olivier, D.
.N
CA610705 JB March 16, 1978 10:26 PM
.X
312 5 312
312 5 312
312 5 312
.I 313
.T
Iterative Method Inversion Power Series
.B
CACM July, 1961
.A
Bramhall, J. N.
.N
CA610704 JB March 16, 1978 10:26 PM
.X
313 5 313
313 5 313
313 5 313
.I 314
.T
Divisionless Method Integer Conversion
.B
CACM July, 1961
.A
Clarkson, W. K.
Prince, B. M.
.N
CA610703 JB March 16, 1978 10:27 PM
.X
314 5 314
314 5 314
314 5 314
.I 315
.T
Solution Tridiagonal Matrices
.B
CACM July, 1961
.A
Wenrick, R. C.
.N
CA610702 JB March 16, 1978 10:28 PM
.X
315 5 315
315 5 315
315 5 315
.I 316
.T
Algorithm Equivalence Declarations
.B
CACM July, 1961
.A
Arden, B. W.
Galler, A.
Graham, R. M.
.N
CA610701 JB March 16, 1978 10:29 PM
.X
1072 5 316
1781 5 316
316 5 316
316 5 316
316 5 316
123 6 316
196 6 316
919 6 316
990 6 316
1007 6 316
1046 6 316
1131 6 316
1139 6 316
1140 6 316
1149 6 316
1198 6 316
1215 6 316
1223 6 316
1265 6 316
1303 6 316
1323 6 316
1358 6 316
1366 6 316
1421 6 316
1460 6 316
1462 6 316
1463 6 316
1467 6 316
1468 6 316
1477 6 316
1491 6 316
1496 6 316
1531 6 316
1535 6 316
1565 6 316
1601 6 316
1602 6 316
1613 6 316
1614 6 316
1626 6 316
1641 6 316
1787 6 316
1788 6 316
205 6 316
224 6 316
249 6 316
288 6 316
316 6 316
316 6 316
381 6 316
398 6 316
11 6 316
404 6 316
410 6 316
463 6 316
464 6 316
483 6 316
3184 6 316
3188 6 316
584 6 316
600 6 316
680 6 316
691 6 316
763 6 316
799 6 316
.I 317
.T
Approximation Curves Line Segments Using Dynamic Programming
.B
CACM June, 1961
.A
Bellman, R.
.N
CA610608 JB March 16, 1978 10:31 PM
.X
317 5 317
317 5 317
317 5 317
497 5 317
867 5 317
317 6 317
317 6 317
497 6 317
.I 318
.T
Combat Vehicle Firing Stability (Active Suspension)
.B
CACM June, 1961
.A
Fischer, C. M.
.N
CA610607 JB March 16, 1978 10:32 PM
.X
318 5 318
318 5 318
318 5 318
.I 319
.T
Class Iteration Formulas Some Historical Notes
.W
class iteration formulas obtainable
rational approximations "Euler's formula"
derived corresponding error estimates.
Some historical notes iterative procedures
followed derivation Euler's formula
associated error estimate new notation which
simplifies error estimate suggests generalizations.
final section considers Pade approximants
"Euler polynomial" shows number known
formulas may derived unified approach.
There short discussion "best" formula.
.B
CACM June, 1961
.A
Traub, J. F.
.N
CA610606 JB March 16, 1978 10:36 PM
.X
319 4 319
319 5 319
319 5 319
319 5 319
380 5 319
.I 320
.T
Logic-Structure Tables
.W
Logic tables excellent way developing
expressing logic required procedures,
operations, systems circuits. set rules
writing using logic tables explained
means some simple examples. Then logic structure
vending machine given which two logic
tables used. Logic tables two-dimensional
nature, enabling us fully express consider
both sequential parallel aspects logic. They
can compiled directly into computer program
so eliminate need flow charting hand coding.
.B
CACM June, 1961
.A
Cantrell, H. N.
King, J.
King, F. E. H.
.N
CA610605 JB March 16, 1978 10:40 PM
.X
1237 5 320
250 5 320
320 5 320
320 5 320
320 5 320
250 6 320
320 6 320
320 6 320
753 6 320
.I 321
.T
ALGOL 60 Confidential
.W
ALGOL 60 Report,* first encountered,
seems describe very complex language which
difficult learn. "metalinguistic formulae"
admirably serve purpose precisely specifying
language, but they certainly not very readable
beginner. However, experience has shown
once report explained fact easy learn
ALGOL write algorithms it. language
so general powerful can handle enormous
class problems. not hard learn those
parts ALGOL present other compiler languages:
write assignment go statements,
etc. Indeed, lot unnecessary restrictions
imposed other compiling languages have finally
been lifted. But ALGOL also allows many unobvious things
written, we see later, herein
lies problem: ALGOL seems have become too general.
So many restrictions have been lifted
lot technical details crop up which hard learn
use correctly. paper some
more obscure features language considered
their usefulness discussed. Remarks
based authors' interpretations ALGOL 60 Report.
.B
CACM June, 1961
.A
Knuth, D. E.
Merner, J. N.
.N
CA610604 JB March 16, 1978 10:48 PM
.X
249 4 321
254 4 321
272 4 321
1102 4 321
1109 4 321
1140 4 321
1188 4 321
1234 4 321
1234 4 321
1306 4 321
1464 4 321
1491 4 321
1767 4 321
1781 4 321
1787 4 321
1949 4 321
321 4 321
321 4 321
321 4 321
321 4 321
2059 4 321
2126 4 321
435 4 321
437 4 321
463 4 321
483 4 321
491 4 321
2732 4 321
560 4 321
583 4 321
3073 4 321
627 4 321
631 4 321
632 4 321
642 4 321
644 4 321
653 4 321
680 4 321
761 4 321
762 4 321
763 4 321
123 4 321
140 4 321
919 4 321
989 4 321
196 5 321
1234 5 321
254 5 321
321 5 321
321 5 321
321 5 321
400 5 321
401 5 321
402 5 321
196 6 321
944 6 321
321 6 321
321 6 321
385 6 321
387 6 321
400 6 321
402 6 321
404 6 321
3184 6 321
729 6 321
.I 322
.T
Operational Compatibility Systems-CONVENTIONS
.W
General Standards Committee SHARE
organization has devoted considerable effort
problem operating computer efficiently
view growing number programming systems
available. Each these programming systems has been
coded utilize fixed set hardware components
without recognizing fact others may occupying
storage medium required first. These
incompatibilities currently resolved manually setting
up computer each system required.
following set conventions being considered
minimize computer set-up time. They
sufficiently broad interest we feel other computer
users should aware them. -George F. Ryckman,
Chairman
.B
CACM June, 1961
.A
Bright, H. S.
.N
CA610603 JB March 16, 1978 10:55 PM
.X
322 5 322
322 5 322
322 5 322
.I 323
.T
State Digital Computer Technology Europe
.B
CACM June, 1961
.A
Blachman, N. M.
.N
CA610602 JB March 16, 1978 10:56 PM
.X
323 4 323
689 4 323
1349 5 323
217 5 323
323 5 323
323 5 323
323 5 323
689 5 323
217 6 323
236 6 323
323 6 323
323 6 323
83 6 323
415 6 323
3197 6 323
.I 324
.T
Romberg Integration (Algorithm 60)
.B
CACM June, 1961
.A
Bauer, F. L.
.N
CA610601 JB March 16, 1978 10:57 PM
.X
1352 5 324
1982 5 324
324 5 324
324 5 324
324 5 324
2040 5 324
1 6 324
834 6 324
872 6 324
1040 6 324
1092 6 324
1241 6 324
1241 6 324
1273 6 324
1273 6 324
1273 6 324
1352 6 324
1356 6 324
1883 6 324
324 6 324
324 6 324
324 6 324
429 6 324
570 6 324
621 6 324
621 6 324
786 6 324
.I 325
.T
Numerical Solution Polynomial Equation (Algorithm 30)
.B
CACM May, 1961
.A
Alexander, W. J.
.N
CA610509 JB March 16, 1978 10:58 PM
.X
325 5 325
325 5 325
325 5 325
.I 326
.T
MATHSORT (Algorithm 23)
.B
CACM May, 1961
.A
Ranshaw, R. W.
.N
CA610508 JB March 16, 1978 10:59 PM
.X
326 5 326
326 5 326
326 5 326
.I 327
.T
Zeros Real Polynomial Resultant Procedure (Algorithm 59)
.B
CACM May, 1961
.A
Bareiss, E. H.
Fisherkeller, M. A.
.N
CA610507 JB March 16, 1978 11:01 PM
.X
1667 5 327
327 5 327
327 5 327
327 5 327
178 6 327
1242 6 327
327 6 327
.I 328
.T
Matrix Inversion (ALgorithm 58)
.B
CACM May, 1961
.A
Cohen, D.
.N
CA610506 JB March 16, 1978 11:03 PM
.X
328 5 328
328 5 328
328 5 328
.I 329
.T
Automatic Abstracting Indexing Survey Recommendations
.W
preparation widespread use automatic
scanners which read documents transmit
their contents other machines analysis, report
presents new concept automatic analysis:
relative-frequency approach measuring significance
words, word groups, sentences.
relative-frequency approach discussed detail,
its application problems automatic
indexing automatic abstracting. Included
report summary automatic analysis studies
published date writing. Conclusions
point toward more sophisticated mathematical
linguistic techniques solution problems automatic analysis.
.B
CACM May, 1961
.A
Edmundson, H. P.
Wyllys, R. E.
.N
CA610505 JB March 16, 1978 11:08 PM
.X
1087 5 329
329 5 329
329 5 329
329 5 329
634 5 329
329 6 329
329 6 329
.I 330
.T
Method Evaluating Area Normal Function
.B
CACM May, 1961
.A
Baker, F. B.
.N
CA610504 JB March 16, 1978 11:09 PM
.X
330 5 330
330 5 330
330 5 330
.I 331
.T
Successive Approximations Computer Storage
Problems Ordinary Differential Equations
.B
CACM May, 1961
.A
Bellman, R.
.N
CA610503 JB March 16, 1978 11:10 PM
.X
331 5 331
331 5 331
331 5 331
.I 332
.T
Indirect Chaining Method Addressing Secondary Keys
.W
Methods entering random access files
basis one key briefly surveyed.
widely used chaining method, based pseudo-random
key transformation, reviewed more detail.
efficient generalization chaining method
which permits recovery additional keys then
presented.
.B
CACM May, 1961
.A
Johnson, L. R.
.N
CA610502 JB March 16, 1978 11:13 PM
.X
911 5 332
1271 5 332
1785 5 332
332 5 332
332 5 332
332 5 332
2543 5 332
2552 5 332
911 6 332
911 6 332
1785 6 332
1785 6 332
1786 6 332
1973 6 332
332 6 332
332 6 332
332 6 332
332 6 332
332 6 332
2107 6 332
2109 6 332
2203 6 332
492 6 332
492 6 332
.I 333
.T
Design Improved* Transmission/Data Processing Code
.B
CACM May, 1961
.A
Bemer, R. W.
Smith Jr., H. J.
Williams Jr., F. A.
.N
CA610501 JB March 16, 1978 11:14 PM
.X
333 4 333
230 5 333
333 5 333
333 5 333
333 5 333
.I 334
.T
Division Square Root Quater-Imaginary Number System
.B
CACM April, 1961
.A
Nadler, M.
.N
CA610334 JB March 16, 1978 11:16 PM
.X
334 5 334
334 5 334
334 5 334
.I 335
.T
Some Numerical Experiments Using Newton's Method
Nonlinear Parabolic EllipticBoundary-Value
Problems
.W
Using generalization Newton's method, nonlinear
parabolic equation form U(t)-U(xx)=g(U)
nonlinear elliptic equation U(xx)+U(yy)=exp(U)
solved numerically Comparison these results
results obtained using Picard iteration procedure
show many cases quisi linearization
method offers substantial advantages both time accuracy.
.B
CACM April, 1961
.A
Bellman, R.
Juncosa, M. L.
Kalaba, R.
.N
CA610433 JB March 16, 1978 11:20 PM
.X
335 5 335
335 5 335
335 5 335
.I 336
.T
Practical Technique Determination
Optimum Relaxation Factor Successive
Over-Relaxation Method
.B
CACM April, 1961
.A
Kulsrud, H. E.
.N
CA610432 JB March 16, 1978 11:27 PM
.X
336 5 336
336 5 336
336 5 336
.I 337
.T
Further Survey Punched Card Codes
.B
CACM April, 1961
.A
Ross, H. M.
.N
CA610431 JB March 16, 1978 11:34 PM
.X
337 5 337
337 5 337
337 5 337
.I 338
.T
GROUT II (Algorithm 43)
.B
CACM April, 1961
.A
Thacher Jr., H.C.
.N
CA610430 JB March 16, 1978 11:35 PM
.X
338 5 338
338 5 338
338 5 338
.I 339
.T
Real Exponential Integral (Algorithm 20)
.B
CACM April, 1961
.A
Alexander, W. J.
Thacher Jr., H. C.
.N
CA610429 JB March 16, 1978 11:36 PM
.X
339 5 339
339 5 339
339 5 339
.I 340
.T
Legendre Polynomial (Algorithm 13)
.B
CACM April, 1961
.A
Herndon, J.
.N
CA610428 JB March 16, 1978 11:37 PM
.X
1611 5 340
340 5 340
340 5 340
340 5 340
1295 6 340
340 6 340
.I 341
.T
Chebyschev Polynomial (Algorithm 10)
.B
CACM April, 1961
.A
Herndon, J.
.N
CA610427 JB March 16, 1978 11:38 PM
.X
341 5 341
341 5 341
341 5 341
.I 342
.T
Solution Polynomial Equation Barstow-Hitchcock (Algorithm 3)
.B
CACM April, 1961
.A
Herndon, J.
.N
CA610426 JB March 16, 1978 11:39 PM
.X
342 5 342
342 5 342
342 5 342
.I 343
.T
Frequently Occurring Errors ALGOL 60 Programs (Algorithm 25)
.B
CACM April, 1961
.A
Herndon, J.
.N
CA610425 JB March 16, 1978 11:40 PM
.X
343 5 343
343 5 343
343 5 343
.I 344
.T
Ber Bei Function (Algorithm 57)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610424 JB March 16, 1978 11:42 PM
.X
344 5 344
344 5 344
344 5 344
.I 345
.T
Complete Elliptic Integral Second Kind (Algorithm 56)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610423 JB March 16, 197811:43 PM
.X
345 5 345
345 5 345
345 5 345
.I 346
.T
Complete Elliptic Integral First Kind (Algorithm 55)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610422 JB March 16, 1978 11:44 PM
.X
346 5 346
346 5 346
346 5 346
.I 347
.T
Gamma Function Range 1 2 (Algorithm 54)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610421 JB March 16, 1978 11:45 PM
.X
347 5 347
347 5 347
347 5 347
.I 348
.T
Nth Roots Complex Number (Algorithm 53)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610420 JB March 16, 1978 11:47 PM
.X
348 5 348
348 5 348
348 5 348
.I 349
.T
Set Test Matrices
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610419 JB March 16, 1978 11:47 PM
.X
349 5 349
349 5 349
349 5 349
.I 350
.T
Adjust Inverse Matrix Element Perturbed (Algorithm 51)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610418 JB March 16, 1978 11:49 PM
.X
350 5 350
350 5 350
350 5 350
.I 351
.T
Inverse Finite Segment Hilbert Matrix (Algorithm 50)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610417 JB March 16, 1978 11:50 PM
.X
351 5 351
351 5 351
351 5 351
.I 352
.T
Spherical Neumant Function (Algorithm 49)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610416 JB March 16, 1978 11:51 PM
.X
352 5 352
352 5 352
352 5 352
.I 353
.T
Logarithm Complex Number (Algorithm 48)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610415 JB March 16, 1978 11:53 PM
.X
353 5 353
353 5 353
353 5 353
.I 354
.T
Associated Legendre Functions First Kind
Real Imaginary Arguments (Algorithm 47)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610414 JB March 16, 1978 11:57 PM
.X
354 5 354
354 5 354
354 5 354
.I 355
.T
Exponential Complex Number (Algorithm 46)
.B
CACM April, 1961
.A
Herndon, J. R.
.N
CA610413 JB March 16, 1978 11:59 PM
.X
355 5 355
355 5 355
355 5 355
.I 356
.T
INTEREST (Algorithm 45)
.B
CACM April, 1961
.A
Ingerman, P. Z.
.N
CA610412 JB March 17, 1978 12:00 AM
.X
356 5 356
356 5 356
356 5 356
.I 357
.T
Bessel Functions Computed Recursively (Algorithm 44)
.B
CACM April, 1961
.A
Wojcicki, M. E.
.N
CA610411 JB March 17, 1978 12:01 AM
.X
357 5 357
357 5 357
357 5 357
.I 358
.T
Crout Pivoting II (Algorithm 43)
.B
CACM April, 1961
.A
Thacher Jr., H. C.
.N
CA610410 JB March 17, 1978 12:02 AM
.X
358 5 358
358 5 358
358 5 358
.I 359
.T
INVERT (Algorithm 42)
.B
CACM April, 1961
.A
Wood, T. C.
.N
CA610409 JB March 17, 1978 12:03 AM
.X
359 5 359
359 5 359
359 5 359
.I 360
.T
Evaluation Determinant (Algorithm 41)
.B
CACM April, 1961
.A
Solomon, J. G.
.N
CA610408 JB March 17, 1978 12:04 AM
.X
1946 5 360
360 5 360
360 5 360
360 5 360
878 6 360
902 6 360
1093 6 360
1177 6 360
1387 6 360
1393 6 360
360 6 360
731 6 360
.I 361
.T
Programmed Error Correction Decimal Computer
.B
CACM April, 1961
.A
Weinberg, G. M.
.N
CA610407 JB March 17, 1978 12:05 AM
.X
361 4 361
108 5 361
361 5 361
361 5 361
361 5 361
.I 362
.T
Table Look-At Techniques
.B
CACM April, 1961
.A
Sherman, P. M.
.N
CA610406 JB March 17, 1978 12:08 AM
.X
362 4 362
2952 4 362
142 5 362
362 5 362
362 5 362
362 5 362
.I 363
.T
Approximating Transcendental Numbers Continued Fractions
.B
CACM April, 1961
.A
Karst, E.
.N
CA610405 JB March 17, 1978 12:09 AM
.X
363 5 363
363 5 363
363 5 363
.I 364
.T
Compilation Subscripted Variables
.B
CACM April, 1961
.A
Nather, R. E.
.N
CA610404 JB March 17, 1978 12:10 AM
.X
222 4 364
224 4 364
267 4 364
1134 4 364
1139 4 364
1141 4 364
1141 4 364
1215 4 364
1223 4 364
1647 4 364
1781 4 364
1787 4 364
1792 4 364
364 4 364
364 4 364
364 4 364
364 4 364
364 4 364
405 4 364
405 4 364
438 4 364
438 4 364
561 4 364
44 4 364
763 4 364
100 5 364
224 5 364
364 5 364
364 5 364
364 5 364
44 5 364
77 5 364
98 5 364
.I 365
.T
Bessel Functions Integral Order Complex Argument
.B
CACM April, 1961
.A
Gray, M. C.
.N
CA610403 JB March 17, 1978 12:13 AM
.X
365 5 365
365 5 365
365 5 365
.I 366
.T
Eigenvalues Symmetric 3 x 3 Matrix
.B
CACM April, 1961
.A
Smith, O. K.
.N
CA610402 JB March 17, 1978 12:14 AM
.X
366 5 366
366 5 366
366 5 366
.I 367
.T
Topological Ordering List
Randomly-Numbered Elements Network
.W
network directed line segments free circular
elements assumed. lines identified
their terminal nodes nodes assumed
numbered non-topological system. Given
list these lines numeric order, simple technique
can used create high speed list
topological order.
.B
CACM April, 1961
.A
Lasser, D. J.
.N
CA610401 JB March 17, 1978 12:17 AM
.X
1050 5 367
1226 5 367
367 5 367
367 5 367
367 5 367
441 5 367
758 5 367
849 6 367
106 6 367
209 6 367
367 6 367
367 6 367
367 6 367
367 6 367
441 6 367
627 6 367
.I 368
.T
Real Zeros Arbitrary Function (Algorithm 25)
.B
CACM March, 1961
.A
Collinge, R. M.
.N
CA610314 JB March 17, 1978 12:31 AM
.X
368 5 368
368 5 368
368 5 368
.I 369
.T
Crout Pivoting (Algorithm 16)
.B
CACM March, 1961
.A
Thacher Jr., H. C.
.N
CA610313 JB March 17, 1978 12:32 AM
.X
369 5 369
369 5 369
369 5 369
.I 370
.T
Bisection Routine (Algorithm 4)
.B
CACM March, 1961
.A
Rader, P. J.
.N
CA610312 JB March 17, 1978 12:33 AM
.X
370 5 370
370 5 370
370 5 370
.I 371
.T
Remarks Algorithms 2 3, Algorithm 15 Algorithms 25 26
.B
CACM March, 1961
.A
Wilkinson, J. H.
.N
CA610311 JB March 17, 1978 12:35 AM
.X
371 5 371
371 5 371
371 5 371
.I 372
.T
Critical Path Scheduling (Algorithm 40)
.B
CACM March, 1961
.A
Leavenworth, B.
.N
CA610310 JB March 17, 1978 12:36 AM
.X
372 5 372
372 5 372
372 5 372
.I 373
.T
Correlation Coefficients Matrix Multiplication (Algorithm 39)
.B
CACM March, 1961
.A
Sassouni, P.
.N
CA610309 JB March 17, 1978 12:37 AM
.X
373 5 373
373 5 373
373 5 373
.I 374
.T
Telescope2 (Algorithm 38)
.B
CACM March, 1961
.A
Brons, K. A.
.N
CA610308 JB March 17, 1978 12:38 AM
.X
374 5 374
374 5 374
374 5 374
.I 375
.T
Telescope1 (Algorithm 37)
.B
CACM March, 1961
.A
Brons, K. A.
.N
CA610307 JB March 17, 1978 12:39 AM
.X
375 5 375
375 5 375
375 5 375
.I 376
.T
Tchebycheff (Algorithm 36)
.B
CACM March, 1961
.A
Gianni, A. J.
.N
CA610306 JB March 17, 1978 12:40 AM
.X
1754 5 376
376 5 376
376 5 376
376 5 376
274 6 376
376 6 376
.I 377
.T
SIEVE (Algorithm 35)
.B
CACM March, 1961
.A
Wood, T. C.
.N
CA610305 JB March 17, 1978 12:41 AM
.X
1841 5 377
377 5 377
377 5 377
377 5 377
2120 5 377
1537 6 377
1539 6 377
1539 6 377
1841 6 377
377 6 377
377 6 377
.I 378
.T
Generalized Technique Symbol
Manipulation Numerical Calculation
.B
CACM March, 1961
.A
Ross, D. T.
.N
CA610304 JB March 17, 1978 12:42 AM
.X
1024 4 378
1050 4 378
1051 4 378
1102 4 378
1102 4 378
1132 4 378
1390 4 378
1486 4 378
1549 4 378
1706 4 378
1826 4 378
1878 4 378
378 4 378
378 4 378
378 4 378
2060 4 378
2155 4 378
2168 4 378
2719 4 378
2723 4 378
2838 4 378
2842 4 378
2855 4 378
2879 4 378
3008 4 378
3077 4 378
3080 4 378
3106 4 378
627 4 378
731 4 378
798 4 378
106 4 378
1051 5 378
208 5 378
209 5 378
210 5 378
1552 5 378
1665 5 378
1860 5 378
378 5 378
378 5 378
378 5 378
2155 5 378
1184 6 378
1366 6 378
1389 6 378
1389 6 378
1421 6 378
1421 6 378
1496 6 378
1626 6 378
1641 6 378
1781 6 378
1785 6 378
1786 6 378
210 6 378
210 6 378
378 6 378
378 6 378
378 6 378
378 6 378
378 6 378
2046 6 378
2060 6 378
406 6 378
3184 6 378
631 6 378
731 6 378
793 6 378
794 6 378
799 6 378
.I 379
.T
Bitwise Operations
.B
CACM March, 1961
.A
Strachey, C.
.N
CA610303 JB March 17, 1978 12:42 AM
.X
379 5 379
379 5 379
379 5 379
.I 380
.T
Comparison Iterative Methods Calculation nth Roots
.W
Three iterative methods calculation
nth roots (including one proposed author)
compared two ways: (1) Theoretical convergence
estimates given. (2) new macrocompiler which
estimates machine running time used compare
running time three methods variety
input data.
.B
CACM March, 1961
.A
Traub, J. F.
.N
CA610302 JB March 17, 1978 12:45 AM
.X
319 5 380
380 5 380
380 5 380
380 5 380
380 6 380
.I 381
.T
Alternate Form "UNCOL Diagram"
.B
CACM March, 1961
.A
Bratman, H.
.N
CA610301 JB March 17, 1978 12:46 AM
.X
1159 4 381
1988 4 381
381 4 381
1781 5 381
1988 5 381
381 5 381
381 5 381
381 5 381
14 5 381
123 6 381
196 6 381
919 6 381
990 6 381
1007 6 381
1046 6 381
1131 6 381
1139 6 381
1140 6 381
1149 6 381
1198 6 381
1215 6 381
1223 6 381
1265 6 381
1303 6 381
1323 6 381
1358 6 381
1366 6 381
1421 6 381
1460 6 381
1462 6 381
1463 6 381
1467 6 381
1468 6 381
1477 6 381
1491 6 381
1496 6 381
1496 6 381
1531 6 381
1535 6 381
1565 6 381
1601 6 381
1602 6 381
1613 6 381
1614 6 381
1626 6 381
1641 6 381
1787 6 381
1788 6 381
205 6 381
224 6 381
249 6 381
288 6 381
316 6 381
381 6 381
381 6 381
398 6 381
11 6 381
11 6 381
14 6 381
404 6 381
410 6 381
463 6 381
464 6 381
483 6 381
3184 6 381
3188 6 381
584 6 381
600 6 381
680 6 381
691 6 381
763 6 381
799 6 381
.I 382
.T
Statistical Programs University North Carolina
.B
CACM February, 1961
.A
Bush, N.
.N
CA610216 JB March 17, 1978 12:48 AM
.X
382 5 382
382 5 382
382 5 382
.I 383
.T
Finding Minimum Routes Network Turn Penalties
.B
CACM February, 1961
.A
Caldwell, T.
.N
CA610215 JB March 17, 1978 12:49 AM
.X
383 5 383
383 5 383
383 5 383
.I 384
.T
Gamma Function (Algorithm 34)
.B
CACM February, 1961
.A
Lipp, M. F.
.N
CA610214 JB March 17, 1978 12:49 AM
.X
384 5 384
384 5 384
384 5 384
.I 385
.T
FACTORIAL (Algorithm 33)
.B
CACM February, 1961
.A
Lipp, M. F.
.N
CA610213 JB March 17, 1978 12:50 AM
.X
1234 5 385
385 5 385
385 5 385
385 5 385
944 6 385
321 6 385
385 6 385
400 6 385
402 6 385
404 6 385
3184 6 385
729 6 385
.I 386
.T
MULTINT (Algorithm 32)
.B
CACM February, 1961
.A
Freeman Jr., R. D.
.N
CA610212 JB March 17, 1978 12:52 AM
.X
1146 5 386
386 5 386
386 5 386
386 5 386
386 6 386
.I 387
.T
Gamma Function (Algorithm 31)
.B
CACM February, 1961
.A
Collinge,R. M.
.N
CA610211 JB March 17, 1978 12:53 AM
.X
254 5 387
387 5 387
387 5 387
387 5 387
196 6 387
321 6 387
387 6 387
.I 388
.T
Solution Polynomial Equations
Bairstow Hitchcock Method (Algorithm 3)
.B
CACM February, 1961
.A
Vandergraft, J. S.
.N
CA610210 JB March 17, 1978 12:54 AM
.X
388 5 388
388 5 388
388 5 388
.I 389
.T
Real Exponential Integral (Algorithm 20)
.B
CACM February, 1961
.A
Peavy, S.
.N
CA610209 JB March 17, 1978 12:55 AM
.X
389 5 389
389 5 389
389 5 389
.I 390
.T
Complex Exponential Integral (Algorithm 13)
.B
CACM February, 1961
.A
Rader, P. J.
Thacher Jr., H. C.
.N
CA610208 JB March 17, 1978 12:56 AM
.X
390 5 390
390 5 390
390 5 390
.I 391
.T
BKS System Philco-2000
.B
CACM February, 1961
.A
Smith, R. B.
.N
CA610207 JB March 17, 1978 12:57 AM
.X
391 5 391
391 5 391
391 5 391
.I 392
.T
Comment Paper Parallel Processing
.B
CACM February, 1961
.A
Nekora, M. R.
.N
CA610206 JB March 17, 1978 12:58 AM
.X
392 5 392
392 5 392
392 5 392
.I 393
.T
Two Subroutines Symbol Manipulation Algebraic Compiler
.B
CACM February, 1961
.A
Carr III, J. W.
Hanson, J. W.
.N
CA610205 JB March 17, 1978 12:59 AM
.X
393 5 393
393 5 393
393 5 393
561 5 393
393 6 393
77 6 393
.I 394
.T
Multiple Programming Data Processing
.B
CACM February, 1961
.A
Ryle, B. L.
.N
CA610204 JB March 17, 1978 1:00 AM
.X
394 5 394
394 5 394
394 5 394
.I 395
.T
Multiple-Precision Division
.B
CACM February, 1961
.A
Rabinowitz, P.
.N
CA610202 JB March 17, 1978 1:01 AM
.X
395 5 395
395 5 395
395 5 395
.I 396
.T
Automation Program Debugging
.W
Automatic Debugging can substantially reduce lead-time between coding
effective use complex program. also enforces analysis
debugging criteria, resulting verifiably accurate programs. programmer
specifies program debugged, memory areas, set input data, maximum
repetition loops, checkpoint information each set data.
executive debugging program runs program debugged, performing
checking functions creating trace record its own later analysis
location errors. Applications quite flexible, system can used
alone conjunction other debugging techniques.
.B
CACM July, 1961
.A
Jacoby, K.
Layton, H.
.N
CA610714 ES March 17, 1982 10:10 AM
.X
931 5 396
396 5 396
396 5 396
396 5 396
202 6 396
396 6 396
634 6 396
.I 397
.T
Card Format Reference Files Information Processing
.W
paper proposes card format suitable
variety reference files information
processing. 80-column IBM card divided into two
fields-reference material field (columns 1-67)
identification field (columns 68-80). format
reference material flexible, while
format identification rigid. reference
material includes basically index, title, source,
class, summary cross reference each entry.
identification includes basically codes
matrix descriptors, entry number, kind,
major interest, source reference.
identification also provides choice identify material
personal well general files. Since
card format sufficient identify material
normally associated reference files
books, articles, programming terms, hardware terms, equipment,
machine systems, abbreviations, etc.,
suitable standard card reference files information processing.
.B
CACM February, 1961
.A
Grems, M.
.N
CA610201 JB March 17, 1978 1:08 AM
.X
929 5 397
397 5 397
397 5 397
397 5 397
397 6 397
.I 398
.T
SLANG System
.B
CACM January, 1961
.A
Sibley, R. A.
.N
CA610116 JB March 17, 1978 1:10 AM
.X
205 4 398
210 4 398
214 4 398
1982 4 398
398 4 398
642 4 398
669 4 398
100 4 398
123 4 398
164 4 398
1 5 398
1781 5 398
398 5 398
398 5 398
398 5 398
123 6 398
196 6 398
919 6 398
990 6 398
1007 6 398
1046 6 398
1131 6 398
1139 6 398
1140 6 398
1149 6 398
1198 6 398
1215 6 398
1223 6 398
1265 6 398
1303 6 398
1323 6 398
1358 6 398
1366 6 398
1421 6 398
1460 6 398
1462 6 398
1463 6 398
1467 6 398
1468 6 398
1477 6 398
1491 6 398
1496 6 398
1531 6 398
1535 6 398
1565 6 398
1601 6 398
1602 6 398
1613 6 398
1614 6 398
1626 6 398
1641 6 398
1787 6 398
1788 6 398
205 6 398
224 6 398
249 6 398
288 6 398
316 6 398
381 6 398
398 6 398
11 6 398
404 6 398
410 6 398
463 6 398
464 6 398
483 6 398
3184 6 398
3188 6 398
584 6 398
600 6 398
680 6 398
691 6 398
763 6 398
799 6 398
.I 399
.T
Compiling Techniques Boolean Expressions
Conditional Statements ALGOL 60
.B
CACM January, 1961
.A
Huskey, H. D.
Wattenburg, W. H.
.N
CA610115 JB March 17, 1978 1:12 AM
.X
1139 5 399
1947 5 399
399 5 399
399 5 399
399 5 399
556 5 399
799 5 399
945 6 399
1134 6 399
1223 6 399
1248 6 399
224 6 399
399 6 399
399 6 399
399 6 399
399 6 399
82 6 399
404 6 399
404 6 399
438 6 399
464 6 399
631 6 399
.I 400
.T
Comments Implementation Recursive
Procedures Blocks ALGOL 60
.B
CACM January, 1961
.A
Irons, E. T.
Feurzeig, W.
.N
CA610114 JB March 17, 1978 1:13 AM
.X
1234 5 400
321 5 400
400 5 400
400 5 400
400 5 400
196 6 400
944 6 400
321 6 400
385 6 400
400 6 400
400 6 400
401 6 400
402 6 400
402 6 400
404 6 400
3184 6 400
729 6 400
.I 401
.T
Allocation Storage Arrays ALGOL 60
.B
CACM January, 1961
.A
Sattley, K.
.N
CA610113 JB March 17, 1978 1:14 AM
.X
321 5 401
401 5 401
401 5 401
401 5 401
196 6 401
400 6 401
401 6 401
402 6 401
.I 402
.T
Dynamic Declarations
.B
CACM January, 1961
.A
Ingerman, P. Z.
.N
CA610112 JB March 17, 1978 1:14 AM
.X
1234 5 402
321 5 402
402 5 402
402 5 402
402 5 402
196 6 402
944 6 402
321 6 402
385 6 402
400 6 402
400 6 402
401 6 402
402 6 402
402 6 402
404 6 402
3184 6 402
729 6 402
.I 403
.T
Thunks -- Way Compiling Procedure Statements
Some Comments Procedure Declarations
.B
CACM January, 1961
.A
Ingerman, P. Z.
.N
CA610111 JB March 17, 1978 1:16 AM
.X
403 5 403
403 5 403
403 5 403
.I 404
.T
Syntax Directed Compiler ALGOL 60
.B
CACM January, 1961
.A
Irons, E. T.
.N
CA610110 JB March 17, 1978 1:16 AM
.X
945 5 404
1046 5 404
1105 5 404
1139 5 404
1140 5 404
1234 5 404
1263 5 404
1265 5 404
1496 5 404
1781 5 404
1824 5 404
2126 5 404
2546 5 404
404 5 404
404 5 404
404 5 404
464 5 404
584 5 404
631 5 404
653 5 404
680 5 404
763 5 404
795 5 404
799 5 404
823 6 404
123 6 404
196 6 404
196 6 404
196 6 404
196 6 404
196 6 404
196 6 404
196 6 404
919 6 404
931 6 404
944 6 404
945 6 404
989 6 404
990 6 404
1007 6 404
1046 6 404
1131 6 404
1137 6 404
1139 6 404
1140 6 404
1141 6 404
1149 6 404
1198 6 404
1215 6 404
1223 6 404
1265 6 404
1303 6 404
1323 6 404
1358 6 404
1358 6 404
1366 6 404
1421 6 404
1460 6 404
1462 6 404
1463 6 404
1467 6 404
1468 6 404
1477 6 404
1477 6 404
1491 6 404
1491 6 404
1496 6 404
1531 6 404
1535 6 404
1565 6 404
1601 6 404
1602 6 404
1613 6 404
1614 6 404
1614 6 404
1614 6 404
1626 6 404
1641 6 404
1693 6 404
1781 6 404
1787 6 404
1788 6 404
205 6 404
224 6 404
224 6 404
224 6 404
249 6 404
265 6 404
288 6 404
316 6 404
321 6 404
381 6 404
385 6 404
398 6 404
399 6 404
399 6 404
11 6 404
2126 6 404
82 6 404
400 6 404
402 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
404 6 404
410 6 404
412 6 404
438 6 404
463 6 404
464 6 404
464 6 404
464 6 404
483 6 404
3184 6 404
3184 6 404
3184 6 404
3184 6 404
3184 6 404
3188 6 404
584 6 404
600 6 404
631 6 404
631 6 404
631 6 404
635 6 404
680 6 404
691 6 404
729 6 404
763 6 404
799 6 404
.I 405
.T
Algorithm Coding Efficient Arithmetic Operations
.W
Most existing formula translation schemes
yield inefficient coding. method described
which reduces number store fetch operations,
evaluates constant subexpressions during compilation,
recognizes many equivalent subexpressions.
.B
CACM January, 1961
.A
Floyd, R. W.
.N
CA610109 JB March 17, 1978 1:19 AM
.X
267 4 405
1134 4 405
1139 4 405
1141 4 405
1141 4 405
1215 4 405
1223 4 405
1647 4 405
1781 4 405
1787 4 405
1792 4 405
364 4 405
364 4 405
405 4 405
405 4 405
405 4 405
405 4 405
438 4 405
438 4 405
561 4 405
44 4 405
54 4 405
763 4 405
1223 5 405
224 5 405
1388 5 405
405 5 405
405 5 405
405 5 405
436 5 405
55 5 405
77 5 405
93 5 405
224 6 405
405 6 405
405 6 405
405 6 405
731 6 405
.I 406
.T
Use Threaded Lists Constructing Combined
ALGOL Machine-Like Assembly Processor
.B
CACM January, 1961
.A
Evans Jr., A.
Perlis, A. J.
Van Zoeren, H.
.N
CA610108 JB March 17, 1978 1:20 AM
.X
1051 5 406
1102 5 406
1549 5 406
406 5 406
406 5 406
406 5 406
106 6 406
196 6 406
1051 6 406
209 6 406
210 6 406
210 6 406
210 6 406
378 6 406
406 6 406
406 6 406
406 6 406
483 6 406
627 6 406
731 6 406
731 6 406
753 6 406
793 6 406
794 6 406
.I 407
.T
MADCAP: Scientific Compiler Displayed Formula Textbook Language
.B
CACM January, 1961
.A
Wells, M. B.
.N
CA610107 JB March 17, 1978 1:21 AM
.X
1083 5 407
1396 5 407
407 5 407
407 5 407
407 5 407
679 5 407
964 6 407
1028 6 407
1029 6 407
1083 6 407
1132 6 407
1214 6 407
1278 6 407
1334 6 407
1365 6 407
1386 6 407
1387 6 407
1388 6 407
1392 6 407
1393 6 407
1394 6 407
1395 6 407
1396 6 407
1397 6 407
1496 6 407
284 6 407
21 6 407
407 6 407
407 6 407
407 6 407
3184 6 407
3192 6 407
3193 6 407
3199 6 407
3200 6 407
3201 6 407
3202 6 407
3203 6 407
3204 6 407
561 6 407
730 6 407
730 6 407
.I 408
.T
Internal Organization MAD Translator
.B
CACM January, 1961
.A
Arden, B. W.
Galler, B. A.
Graham, R. M.
.N
CA610106 JB March 17, 1978 1:22 AM
.X
1134 5 408
1179 5 408
1861 5 408
408 5 408
408 5 408
408 5 408
830 6 408
1614 6 408
1781 6 408
17 6 408
77 6 408
408 6 408
408 6 408
408 6 408
.I 409
.T
CL-1, Environment Compiler
.W
flexible, large-scale programming system
facilitate solution information processing
problems provide intercommunication between programs
and/or programmers has been developed
realized IBM 709/7090 computer. system
based master file concept has provisions
accepting, storing, retrieving both descriptions
instances large complex data sets,
well algorithms defined these data sets. Both
data algorithms may expressed family
command descriptive languages. concept
distinct data descriptions content
use such descriptions discussed some detail.
.B
CACM January, 1961
.A
Cheatham Jr., T. E.
Collins Jr., G. O.
Leonard, G. F.
.N
CA610105 JB March 17, 1978 1:26 AM
.X
409 5 409
409 5 409
409 5 409
657 5 409
279 6 409
409 6 409
.I 410
.T
CLIP Translator
.B
CACM January, 1961
.A
Englund, D.
Clark, E.
.N
CA610104 JB March 17, 1978 1:27 AM
.X
1781 5 410
410 5 410
410 5 410
410 5 410
669 5 410
1 6 410
123 6 410
196 6 410
919 6 410
990 6 410
1007 6 410
1046 6 410
1131 6 410
1139 6 410
1140 6 410
1149 6 410
1198 6 410
1215 6 410
1223 6 410
1265 6 410
1303 6 410
1323 6 410
1358 6 410
1366 6 410
1421 6 410
1460 6 410
1462 6 410
1463 6 410
1467 6 410
1468 6 410
1477 6 410
1491 6 410
1496 6 410
1531 6 410
1535 6 410
1565 6 410
1601 6 410
1602 6 410
1613 6 410
1614 6 410
1626 6 410
1641 6 410
1787 6 410
1788 6 410
205 6 410
224 6 410
249 6 410
288 6 410
316 6 410
381 6 410
398 6 410
11 6 410
404 6 410
410 6 410
410 6 410
463 6 410
464 6 410
483 6 410
3184 6 410
3184 6 410
3188 6 410
584 6 410
600 6 410
680 6 410
691 6 410
763 6 410
799 6 410
.I 411
.T
Use Magnetic Tape Data Storage ORACLE-ALGOL Translator
.B
CACM January, 1961
.A
Bottenbruch, H.
.N
CA610103 JB March 17, 1978 1:28 AM
.X
411 5 411
411 5 411
411 5 411
.I 412
.T
Recursive Processes ALGOL Translation
.B
CACM January, 1961
.A
Gray, A. A.
.N
CA610102 JB March 17, 1978 1:29 AM
.X
412 5 412
412 5 412
412 5 412
763 5 412
196 6 412
224 6 412
404 6 412
412 6 412
631 6 412
.I 413
.T
Basic Compiler Arithmetic Expressions
.B
CACM January, 1961
.A
Huskey, H. D.
Wattenburg, W. H.
.N
CA610101 JB March 17, 1978 1:30 AM
.X
413 5 413
413 5 413
413 5 413
.I 414
.T
IBM 1440 Data Processing System Features Five New Units
.W
IBM 1440 data processing system, announced
recently International Business Machines
Corporation, not only features 1311 disk storage
drive interchangeable disk packs but four other
newly developed units.
.B
CACM December, 1961
.A
Wheeling, R.
.N
CA621225 JB March 17,1978 4:30 PM
.X
414 5 414
414 5 414
414 5 414
.I 415
.T
Use Digital Computers Western Germany
.B
CACM December, 1962
.A
Schuff, H. K.
.N
CA621224 JB March 17, 1978 4:32 PM
.X
1349 5 415
415 5 415
415 5 415
415 5 415
236 6 415
323 6 415
83 6 415
415 6 415
.I 416
.T
Multiple Shooting Method Two-Point Boundary Value Problems
.B
CACM December, 1962
.A
Morrison, D. D.
Riley, J. D.
Zancanaro, J. F.
.N
CA621223 JB March 17, 1978 4:33 PM
.X
1049 5 416
416 5 416
416 5 416
416 5 416
416 6 416
.I 417
.T
Legal Implications Computer Use
.W
paper points out variety ways computer
systems used business industry can
involved legal entanglements suggests
computer specialists have responsibility call
assistance forestalling minimizing those entanglements
during planning stage. Techniques
suggested making legal clearance effective
least burden new technology
achieving favorable legal climate generally.
Computer specialists also alerted potential
opportunities interpret lawyers technical aspects
computer systems involved legal situations.
.B
CACM December, 1962
.A
Freed, R. N.
.N
CA621222 JB March 17, 1978 4:37 PM
.X
417 5 417
417 5 417
417 5 417
.I 418
.T
RANDOM (Algorithm 133)
.B
CACM December, 1962
.A
Behrenz, P. G.
.N
CA621221 JB March 17, 1978 4:38 PM
.X
418 5 418
418 5 418
418 5 418
.I 419
.T
Magic Square (Algorithm 118)
.B
CACM December, 1962
.A
Thacher Jr., H. C.
.N
CA621220 JB March 17, 1978 4:52 PM
.X
419 5 419
419 5 419
419 5 419
.I 420
.T
PERM (Algorithm 115)
.B
CACM December, 1962
.A
Phillips, E. S.
.N
CA621219 JB March 17, 1978 4:53 PM
.X
420 5 420
420 5 420
420 5 420
.I 421
.T
Position Point Relative Polygon (Algorithm 112)
.B
CACM December, 1962
.A
Hacker, R.
.N
CA621218 JB March 17, 1978 4:54 PM
.X
1804 5 421
2987 5 421
421 5 421
421 5 421
421 5 421
1326 6 421
1630 6 421
2125 6 421
2547 6 421
2633 6 421
421 6 421
421 6 421
524 6 421
524 6 421
.I 422
.T
COMBINATION (Algorithm 94)
.B
CACM December, 1962
.A
Grench, R. E.
.N
CA621217 JB March 17, 1978 4:56 PM
.X
422 5 422
422 5 422
422 5 422
.I 423
.T
Matrix Inversion (Algorithm 58)
.B
CACM December, 1962
.A
Behrenz, P. G.
.N
CA621216 JB March 17, 1978 4:57 PM
.X
423 5 423
423 5 423
423 5 423
.I 424
.T
Gamma Function (Algorithm 31)
.B
CACM December, 1962
.A
Behrenz, P. G.
.N
CA621215 JB March 17, 1978 4:58 PM
.X
424 5 424
424 5 424
424 5 424
.I 425
.T
Complete Elliptic Integral (Algorithm 149)
.B
CACM December, 1962
.A
Merner, J. N.
.N
CA621214 JB March 17,1978 4:59 PM
.X
425 5 425
425 5 425
425 5 425
.I 426
.T
Term Magic Square (Algorithm 148)
.B
CACM December, 1962
.A
Collison, D. M.
.N
CA621213 JB March 17, 1978 5:00 PM
.X
426 5 426
426 5 426
426 5 426
.I 427
.T
PSIF (Algorithm 147)
.B
CACM December, 1962
.A
Amit, D.
.N
CA621212 JB March 17, 1978 5:03 PM
.X
427 5 427
427 5 427
427 5 427
.I 428
.T
Multiple Integration (Algorithm 146)
.B
CACM December, 1962
.A
McKeeman, W. M.
.N
CA621211 JB March 17, 1978 5:04 PM
.X
428 5 428
428 5 428
428 5 428
.I 429
.T
Adaptive Nimerical Integration Simpson's Rule (Algorithm 145)
.B
CACM December, 1962
.A
McKeeman, W. M.
.N
CA621210 JB March 17, 1978 5:06 PM
.X
1352 5 429
2048 5 429
2074 5 429
2093 5 429
2550 5 429
429 5 429
429 5 429
429 5 429
834 6 429
834 6 429
834 6 429
834 6 429
872 6 429
872 6 429
872 6 429
1040 6 429
1092 6 429
1092 6 429
1241 6 429
1273 6 429
1298 6 429
1573 6 429
1573 6 429
324 6 429
2074 6 429
429 6 429
429 6 429
429 6 429
429 6 429
429 6 429
570 6 429
621 6 429
786 6 429
786 6 429
786 6 429
.I 430
.T
TREESORT2 (Algorithm 144)
.B
CACM December, 1962
.A
Kaupe Jr.,A. F.
.N
CA621209 JB March 17, 1978 5:07 PM
.X
430 5 430
430 5 430
430 5 430
.I 431
.T
TREESORT1 (Algorithm 143)
.B
CACM December, 1962
.A
Kaupe Jr., A. F.
.N
CA621208 JB March 17, 1978 5:08 PM
.X
431 5 431
431 5 431
431 5 431
.I 432
.T
Triangular Regression (Algorithm 142)
.B
CACM December, 1962
.A
Hafley, W. L.
Lewis, J. S.
.N
CA621207 JB March 17,1978 5:09 PM
.X
432 5 432
432 5 432
432 5 432
.I 433
.T
Fixed-World-Length Arrays Variable-Word-Length Computers
.B
CACM December, 1962
.A
Sonquist, J. A.
.N
CA621206 JB March 17, 1978 5:10 PM
.X
433 5 433
433 5 433
433 5 433
.I 434
.T
Character Manipulation 1620 Fortran II
.B
CACM December, 1962
.A
Poore Jr., J. H.
.N
CA621205 JB March 17, 1978 5:11 PM
.X
434 5 434
434 5 434
434 5 434
.I 435
.T
Decision Matrix Basis Simple Data Input Routine
.W
Currently great deal time effort
being spent development bigger better
compiler languages, multiprogram executive systems,
etc. Since implementation new methods
procedures not instantaneous, but rather occurs
evolutionary process, we should concerned
also problem maintaining, improving
incorporating new ideas into existing systems.
somewhat neglected area author
interested. method employing decision matrix
presented handling standard systems
programming problem,that providing data input
routine.
.B
CACM December, 1962
.A
Vasilakos, G. J.
.N
CA621204 JB March 17, 1978 5:15 PM
.X
249 4 435
254 4 435
272 4 435
1102 4 435
1109 4 435
1140 4 435
1188 4 435
1306 4 435
1464 4 435
1491 4 435
1767 4 435
1781 4 435
1787 4 435
1949 4 435
321 4 435
2059 4 435
2126 4 435
435 4 435
435 4 435
437 4 435
463 4 435
483 4 435
491 4 435
2732 4 435
560 4 435
583 4 435
3073 4 435
627 4 435
631 4 435
632 4 435
642 4 435
644 4 435
653 4 435
680 4 435
761 4 435
762 4 435
763 4 435
849 4 435
123 4 435
140 4 435
919 4 435
989 4 435
196 5 435
1053 5 435
435 5 435
435 5 435
435 5 435
615 5 435
435 6 435
474 6 435
718 6 435
720 6 435
.I 436
.T
Evaluation Polynomials Computer
.B
CACM December, 1962
.A
Knuth, D. E.
.N
CA621203 JB March 17, 1978 5:16 PM
.X
1223 4 436
1388 4 436
436 4 436
1620 5 436
405 5 436
436 5 436
436 5 436
436 5 436
819 5 436
819 6 436
436 6 436
436 6 436
.I 437
.T
Compiling Matrix Operations
.B
CACM December, 1962
.A
Galler, B. A.
Perlis, A. J.
.N
CA621202 JB March 17, 1978 5:17 PM
.X
249 4 437
254 4 437
272 4 437
1102 4 437
1109 4 437
1140 4 437
1188 4 437
1306 4 437
1464 4 437
1491 4 437
1767 4 437
1781 4 437
1787 4 437
1949 4 437
321 4 437
2059 4 437
2126 4 437
435 4 437
437 4 437
463 4 437
483 4 437
491 4 437
2732 4 437
560 4 437
583 4 437
3073 4 437
627 4 437
631 4 437
632 4 437
642 4 437
644 4 437
653 4 437
680 4 437
761 4 437
762 4 437
763 4 437
123 4 437
140 4 437
919 4 437
989 4 437
196 5 437
1614 5 437
2253 5 437
2557 5 437
437 5 437
437 5 437
437 5 437
2081 6 437
437 6 437
437 6 437
437 6 437
3184 6 437
.I 438
.T
Mechanical Pragmatics: Time-Motion Study
Miniature Mechanical Linguistic System
.B
CACM December, 1962
.A
Gorn, S.
.N
CA621201 JB March 17, 1978 5:19 PM
.X
249 4 438
267 4 438
1134 4 438
1139 4 438
1141 4 438
1141 4 438
1215 4 438
1223 4 438
1425 4 438
1647 4 438
1781 4 438
1781 4 438
1787 4 438
1792 4 438
364 4 438
364 4 438
405 4 438
405 4 438
438 4 438
438 4 438
438 4 438
438 4 438
561 4 438
44 4 438
3185 4 438
762 4 438
763 4 438
1139 5 438
224 5 438
249 5 438
303 5 438
438 5 438
438 5 438
438 5 438
77 5 438
3185 5 438
224 6 438
303 6 438
399 6 438
404 6 438
438 6 438
438 6 438
464 6 438
631 6 438
.I 439
.T
On-Line Digital Computer Measurement Neurological Control System
.B
CACM November, 1962
.A
Stark, L.
Payne, R.
Okabe, Y.
.N
CA621122 JB March 17, 1978 5:20 PM
.X
439 5 439
439 5 439
439 5 439
.I 440
.T
Record Linkage
.W
Special difficulties encountered devising
reliable systems searching updating
any large files documents must identified
primarily basis names other personal
particulars. underlying problem making nearly
maximum use items identifying information
individually unreliable but may collectively
considerable discriminating power.
Rules can applied generally name retrieval
systems have been developed methodological
study linkage vital health records into
family groupings demographic research purposes.
These rules described, ways which information
utilization matching may optimized
discussed.
.B
CACM November, 1962
.A
Newcombe, H. B.
Kennedy, J. M.
.N
CA621121 JB March 17, 1978 5:51 PM
.X
1112 4 440
1592 4 440
2111 4 440
2339 4 440
440 4 440
2339 5 440
440 5 440
440 5 440
440 5 440
619 5 440
1112 6 440
1592 6 440
440 6 440
619 6 440
.I 441
.T
Topological Sorting Large Networks
.W
Topological Sorting procedure required
many problems involving analysis networks.
example one such problem PERT. present
paper presents very general method obtaining
topological order. permits treatment larger networks
than can handled present procedures
achieves greater efficiency. Although
procedure can adapted any machine,
discussed terms 7090. PERT network
30,000 activities can ordered less than one
hour machine time. method developed
byproduct procedures needed Westinghouse,
Baltimore. has not been programmed present
there no plans implement it. regard
techniques described, Westinghouse's present
anticipated needs completely served
Lockheed program, which current use.
.B
CACM November, 1962
.A
Kahn, A. B.
.N
CA621120 JB March 17, 1978 5:58 PM
.X
1050 4 441
1226 4 441
441 4 441
758 4 441
1723 5 441
367 5 441
441 5 441
441 5 441
441 5 441
758 5 441
367 6 441
441 6 441
441 6 441
.I 442
.T
Crout Equilibration Iteration (Algorithm 135)
.B
CACM November, 1962
.A
McKeeman, W. M.
.N
CA621119 JB March 17, 1978 5:59 PM
.X
442 5 442
442 5 442
442 5 442
.I 443
.T
Complex Number Real Power (Algorithm 106)
.B
CACM December, 1962
.A
Erwin Jr.,G. W.
.N
CA621118 JB March 17, 1978 6:01 PM
.X
443 5 443
443 5 443
443 5 443
.I 444
.T
Evaluation Jacobi Symbol (Algorithm 99)
.B
CACM November, 1962
.A
May, R. W.
.N
CA621117 JB March 17, 1978 6:02 PM
.X
444 5 444
444 5 444
444 5 444
.I 445
.T
COMBINATION (Algorithm 94)
.B
CACM November, 1962
.A
May, R. W.
.N
CA621116 JB March 17, 1978 6:03 PM
.X
445 5 445
445 5 445
445 5 445
.I 446
.T
Simpson's Integration (Algorithm 84)
.B
CACM November, 1962
.A
Behrenz, P. G.
.N
CA621115 JB March 17, 1978 6:04 PM
.X
446 5 446
446 5 446
446 5 446
.I 447
.T
Certification Calculation Easter
.B
CACM November, 1962
.A
Williams, M. R.
.N
CA621114 JB March 17, 1978 6:05 PM
.X
447 5 447
447 5 447
447 5 447
.I 448
.T
Path Matrix (Algorithm 141)
.B
CACM November, 1962
.A
Ingerman, P. Z.
.N
CA621113 JB March 17, 1978 6:06 PM
.X
448 5 448
448 5 448
448 5 448
.I 449
.T
Matrix Inversion(Algorithm 140)
.B
CACM November, 1962
.A
Ingerman, P. Z.
.N
CA621112 JB March 17, 1978 6:12 PM
.X
449 5 449
449 5 449
449 5 449
.I 450
.T
Solution Diophantine Equation (Algorithm 139)
.B
CACM November, 1962
.A
Peck, J. E. L.
.N
CA621111 JB March 17, 1978 6:13 PM
.X
2031 5 450
450 5 450
450 5 450
450 5 450
1022 6 450
450 6 450
.I 451
.T
Nesting Statement II (Algorithm 138)
.B
CACM November, 1962
.A
Dahm, D. M.
Wells, M.
.N
CA621110 JB March 17, 1978 6:14 PM
.X
451 5 451
451 5 451
451 5 451
.I 452
.T
Nesting Statement (Algorithm 137)
.B
CACM November, 1962
.A
Dahm, D. M.
Wells, M.
.N
CA621109 JB March 17, 1978 6:15 PM
.X
452 5 452
452 5 452
452 5 452
.I 453
.T
Enlargement Group (Algorithm 136)
.B
CACM November, 1962
.A
Wells, M.
.N
CA621108 JB March 17, 1978 6:17 PM
.X
453 5 453
453 5 453
453 5 453
.I 454
.T
Crout Equilibration Iteration (Algorithm 135)
.B
CACM November, 1962
.A
McKeeman, W. M.
.N
CA621107 JB March 17, 1978 6:51 PM
.X
1319 4 454
454 4 454
454 4 454
140 4 454
152 5 454
1177 5 454
454 5 454
454 5 454
454 5 454
586 5 454
806 5 454
932 6 454
454 6 454
454 6 454
.I 455
.T
Exponentiation Series (Algorithm 134)
.B
CACM November, 1962
.A
Fettis, H. E.
.N
CA621106 JB March 17, 1978 6:52 PM
.X
455 5 455
455 5 455
455 5 455
.I 456
.T
RANDOM (Algorithm 133)
.B
CACM November, 1962
.A
Behrenz, P. G.
.N
CA621105 JB March 17, 1978 6:53 PM
.X
1190 5 456
456 5 456
456 5 456
456 5 456
456 6 456
.I 457
.T
Quantum Mechanical Integrals Over all Slater-Type Integrals
.B
CACM November, 1962
.A
Browne, J. C.
.N
CA621104 JB March 17, 1978 6:54 PM
.X
457 5 457
457 5 457
457 5 457
.I 458
.T
Coefficient Determination (Algorithm 131)
.B
CACM November, 1962
.A
Smith, V. H.
Allen, M. L.
.N
CA621103 JB March 17, 1978 6:56 PM
.X
458 5 458
458 5 458
458 5 458
.I 459
.T
PERMUTE (Algorithm 130)
.B
CACM November, 1962
.A
Eaves, Lt. B. C.
.N
CA621102 JB March 17, 1978 6:57 PM
.X
459 5 459
459 5 459
459 5 459
.I 460
.T
MINIFUN (Algorithm 129)
.B
CACM November, 1962
.A
Whitley, V. W.
.N
CA621101 JB March 17, 1978 6:58 PM
.X
460 5 460
460 5 460
460 5 460
.I 461
.T
Coding Medical Case History Data Computer Analysis
.B
CACM October, 1962
.A
Lipkin, M.
Woodbury, M. A.
.N
CA621019 JB March 17, 1978 6:59 PM
.X
461 5 461
461 5 461
461 5 461
.I 462
.T
Computer Pattern Recognition Techniques: Electrocardiographic Diagnosis
.W
use programmed digital computers general
pattern classification recognition devices
one phase current lively interest artificial
intelligence. important choose
class signals which is, present, undergoing
good deal visual inspection trained people
purpose pattern recognition. way
comparisons between machine human performance
may obtained. practical result also serves additional
motivation. Clinical electrocardiograms
make up such class signals. approach
problem presented here centers upon use
multiple adaptive matched filters classify normalized
signals. present report fives some
background application method.
.B
CACM October, 1962
.A
Stark,L.
Okajima, M.
Whipple, G. H.
.N
CA621018 JB March 17, 1978 7:04 PM
.X
1325 5 462
462 5 462
462 5 462
462 5 462
462 6 462
.I 463
.T
Ambiguity Phrase Structure Languages
.B
CACM October, 1962
.A
Floyd, R. W.
.N
CA621017 JB March 17, 1978 7:05 PM
.X
249 4 463
254 4 463
272 4 463
1102 4 463
1109 4 463
1140 4 463
1188 4 463
1306 4 463
1464 4 463
1491 4 463
1767 4 463
1781 4 463
1787 4 463
1949 4 463
321 4 463
2059 4 463
2126 4 463
435 4 463
437 4 463
463 4 463
483 4 463
491 4 463
2732 4 463
560 4 463
583 4 463
3073 4 463
627 4 463
631 4 463
632 4 463
642 4 463
644 4 463
653 4 463
680 4 463
761 4 463
762 4 463
763 4 463
123 4 463
140 4 463
919 4 463
989 4 463
196 5 463
1306 5 463
1781 5 463
463 5 463
463 5 463
463 5 463
123 6 463
196 6 463
196 6 463
919 6 463
990 6 463
1007 6 463
1046 6 463
1131 6 463
1139 6 463
1140 6 463
1149 6 463
1198 6 463
1215 6 463
1223 6 463
1265 6 463
1303 6 463
1323 6 463
1358 6 463
1366 6 463
1421 6 463
1460 6 463
1462 6 463
1463 6 463
1467 6 463
1468 6 463
1477 6 463
1491 6 463
1496 6 463
1531 6 463
1535 6 463
1565 6 463
1601 6 463
1602 6 463
1613 6 463
1614 6 463
1626 6 463
1641 6 463
1787 6 463
1788 6 463
205 6 463
224 6 463
249 6 463
288 6 463
316 6 463
381 6 463
398 6 463
11 6 463
404 6 463
410 6 463
463 6 463
463 6 463
464 6 463
483 6 463
3184 6 463
3188 6 463
584 6 463
600 6 463
680 6 463
691 6 463
763 6 463
799 6 463
.I 464
.T
Syntactic Analysis Digital Computer
.W
paper provides account Shadow
language used describe syntax
corresponding subroutine enables computer
perform syntactic analysis. input
subroutine consists string analyzed
description syntax used.
syntax expressed Shadow language. output
consists trace table expresses
results syntactic analysis tabular form. Several
versions subroutine some associated
programs have been use now over three years.
present account language subroutine
contains summary material has been described
previously unpublished reports also some
additional discussion work relation more
general questions problem-oriented languages
string transformations.
.B
CACM October, 1962
.A
Barnett, M. P.
Futrelle, R. P.
.N
CA621016 JB March 17, 1978 7:11 PM
.X
1046 4 464
1105 4 464
1139 4 464
1140 4 464
1234 4 464
1263 4 464
1265 4 464
1496 4 464
1781 4 464
1824 4 464
2126 4 464
2546 4 464
464 4 464
464 4 464
584 4 464
631 4 464
653 4 464
680 4 464
720 4 464
763 4 464
795 4 464
799 4 464
945 4 464
1062 5 464
1121 5 464
1139 5 464
1265 5 464
265 5 464
1781 5 464
404 5 464
464 5 464
464 5 464
464 5 464
720 5 464
759 5 464
123 6 464
196 6 464
919 6 464
990 6 464
1007 6 464
1046 6 464
1131 6 464
1139 6 464
1140 6 464
1149 6 464
1198 6 464
1215 6 464
1223 6 464
1265 6 464
1303 6 464
1323 6 464
1358 6 464
1366 6 464
1421 6 464
1460 6 464
1462 6 464
1463 6 464
1467 6 464
1468 6 464
1477 6 464
1491 6 464
1496 6 464
1531 6 464
1535 6 464
1565 6 464
1601 6 464
1602 6 464
1613 6 464
1614 6 464
1626 6 464
1641 6 464
1787 6 464
1788 6 464
205 6 464
224 6 464
224 6 464
249 6 464
265 6 464
288 6 464
316 6 464
381 6 464
398 6 464
399 6 464
11 6 464
404 6 464
404 6 464
404 6 464
410 6 464
438 6 464
463 6 464
464 6 464
464 6 464
464 6 464
464 6 464
464 6 464
464 6 464
464 6 464
474 6 464
483 6 464
3184 6 464
3184 6 464
3188 6 464
584 6 464
600 6 464
631 6 464
631 6 464
635 6 464
680 6 464
691 6 464
759 6 464
763 6 464
794 6 464
799 6 464
.I 465
.T
PERM (Algorithm 115)
.B
CACM October, 1962
.A
Schrack, G. F.
.N
CA621015 JB March 17, 1978 7:12 PM
.X
465 5 465
465 5 465
465 5 465
.I 466
.T
General Order Arithmetic (Algorithm 93)
.B
CACM October, 1962
.A
George, R.
.N
CA621014 JB March 17, 1978 7:13 PM
.X
466 5 466
466 5 466
466 5 466
.I 467
.T
Permutation Generator (Algorithm 87)
.B
CACM October, 1962
.A
Schrack, G. F.
Shimrat, M.
.N
CA621013 JB March 17, 1978 7:14 PM
.X
467 5 467
467 5 467
467 5 467
.I 468
.T
Incomplete Elliptic Integrals (Algorithm 73)
.B
CACM October, 1962
.A
Jefferson, D. K.
.N
CA621012 JB March 17, 1978 7:14 PM
.X
468 5 468
468 5 468
468 5 468
.I 469
.T
Critical Path Scheduling (Algorithm 40)
.B
CACM October, 1962
.A
Hellberg, L.
.N
CA621011 JB March 17, 1978 7:15 PM
.X
469 5 469
469 5 469
469 5 469
.I 470
.T
Summation Fourier Series (Algorithm 128)
.B
CACM October, 1962
.A
Wells, M.
.N
CA621010 JB March 17, 1978 7:16 PM
.X
470 5 470
470 5 470
470 5 470
.I 471
.T
ORTHO (Algorithm 127)
.B
CACM October, 1962
.A
Walsh, P. J.
.N
CA621009 JB March 17, 1978 7:17 PM
.X
471 5 471
471 5 471
471 5 471
.I 472
.T
Gauss' Method (Algorithm 126)
.B
CACM October, 1962
.A
Counts, J. W.
.N
CA621008 JB March 17, 1978 7:18 PM
.X
2075 5 472
472 5 472
472 5 472
472 5 472
472 6 472
.I 473
.T
WEIGHTCOEFF (Algorithm 125)
.B
CACM October, 1962
.A
Rutishauser, H.
.N
CA621007 JB March 17, 1978 7:19 PM
.X
473 5 473
473 5 473
473 5 473
.I 474
.T
Input Data Organization Fortran
.B
CACM October, 1962
.A
Yarbrough, L.D.
.N
CA621006 JB March 17, 1978 7:20 PM
.X
1053 5 474
474 5 474
474 5 474
474 5 474
720 5 474
265 6 474
435 6 474
464 6 474
474 6 474
474 6 474
718 6 474
720 6 474
.I 475
.T
Test Matrix Inversion Procedures
.B
CACM October, 1962
.A
Pei, M. L.
.N
CA621005 JB March 17, 1978 7:21 PM
.X
1963 5 475
475 5 475
475 5 475
475 5 475
909 6 475
475 6 475
750 6 475
.I 476
.T
Further Remarks Sampling Tape File-II
.B
CACM October, 1962
.A
Nadler, M.
.N
CA621004 JB March 17, 1978 7:22 PM
.X
476 5 476
476 5 476
476 5 476
.I 477
.T
Further Remarks Sampling Tape File-I
.B
CACM October, 1962
.A
Muller, M. E.
.N
CA621003 JB March 17, 1978 7:23 PM
.X
477 4 477
6 5 477
477 5 477
477 5 477
477 5 477
.I 478
.T
Implementing Stack
.B
CACM October, 1962
.A
Baecker, H.D.
.N
CA621002 JB March 17, 1978 7:25 PM
.X
478 5 478
478 5 478
478 5 478
.I 479
.T
Dispersion Pass Algorithm Polyphase Merge
.W
paper presents new manner dispersing
strings Polyphase merge. If number
strings dispersed between two levels acceptable
Polyphase merge, more economical technique
reaching next level Polyphase merge shown proved.
.B
CACM October, 1962
.A
Mendoza, A. G.
.N
CA621001 JB March 17, 1978 7:27 PM
.X
2146 4 479
479 4 479
479 4 479
862 4 479
863 4 479
264 5 479
299 5 479
479 5 479
479 5 479
479 5 479
860 5 479
862 5 479
861 6 479
299 6 479
479 6 479
479 6 479
.I 480
.T
Quick Calculation Jacobian Elliptic Functions (Corrigendum)
.B
CACM September, 1962
.A
Salzer, H. E.
.N
CA620912 JB March 17, 1978 7:28 PM
.X
480 5 480
480 5 480
480 5 480
.I 481
.T
One-Day Look Computing
.B
CACM September, 1962
.A
Armerding, G. W.
Gruenberger, F. J.
Marks, S. L.
Parkin, T. R.
.N
CA620911 JB March 17, 1978 7:30 PM
.X
481 5 481
481 5 481
481 5 481
.I 482
.T
TALL-A List Processor Philco 200 Computer
.B
CACM September, 1962
.A
Feldman, J.
.N
CA620910 JB March 17, 1978 7:31 PM
.X
482 5 482
482 5 482
482 5 482
.I 483
.T
Nonexistence Phrase Structure Grammar ALGOL 60
.W
ALGOL 60 defined partly formal mechanisms
phrase structure grammar, partly informally
stated restrictions. shown no formal mechanisms
type used sufficient define
ALGOL 60.
.B
CACM September, 1962
.A
Floyd, R. W.
.N
CA620909 JB March 17, 1978 7:33 PM
.X
249 4 483
254 4 483
272 4 483
1102 4 483
1109 4 483
1140 4 483
1188 4 483
1306 4 483
1464 4 483
1491 4 483
1767 4 483
1781 4 483
1787 4 483
1949 4 483
321 4 483
2059 4 483
2126 4 483
435 4 483
437 4 483
463 4 483
483 4 483
491 4 483
2732 4 483
560 4 483
583 4 483
3073 4 483
627 4 483
631 4 483
632 4 483
642 4 483
644 4 483
653 4 483
680 4 483
761 4 483
762 4 483
763 4 483
123 4 483
140 4 483
919 4 483
989 4 483
196 5 483
949 5 483
1102 5 483
1142 5 483
1781 5 483
1945 5 483
483 5 483
483 5 483
483 5 483
762 5 483
823 6 483
123 6 483
196 6 483
196 6 483
196 6 483
914 6 483
915 6 483
917 6 483
919 6 483
984 6 483
989 6 483
990 6 483
990 6 483
1007 6 483
1012 6 483
1046 6 483
1084 6 483
1098 6 483
1122 6 483
1131 6 483
1138 6 483
1139 6 483
1139 6 483
1140 6 483
1141 6 483
1149 6 483
1198 6 483
1200 6 483
1215 6 483
1223 6 483
1223 6 483
1265 6 483
1265 6 483
1303 6 483
1323 6 483
1336 6 483
1358 6 483
1366 6 483
1396 6 483
1421 6 483
1455 6 483
1460 6 483
1462 6 483
1463 6 483
1467 6 483
1468 6 483
1477 6 483
1477 6 483
1487 6 483
1491 6 483
1491 6 483
1496 6 483
1496 6 483
1531 6 483
1535 6 483
1565 6 483
1601 6 483
1602 6 483
1613 6 483
1614 6 483
1626 6 483
1641 6 483
1787 6 483
1788 6 483
205 6 483
209 6 483
210 6 483
224 6 483
249 6 483
249 6 483
288 6 483
316 6 483
381 6 483
398 6 483
11 6 483
404 6 483
406 6 483
410 6 483
463 6 483
464 6 483
483 6 483
483 6 483
483 6 483
483 6 483
483 6 483
483 6 483
3184 6 483
3184 6 483
3188 6 483
584 6 483
584 6 483
584 6 483
600 6 483
669 6 483
680 6 483
680 6 483
691 6 483
763 6 483
763 6 483
799 6 483
.I 484
.T
Hankel Function (Algorithm 124)
.B
CACM September, 1962
.A
Schaefer, L. J.
.N
CA620908 JB March 17, 1978 7:34 PM
.X
484 5 484
484 5 484
484 5 484
.I 485
.T
Real Error Function, ERF(x) (Algorithm 123)
.B
CACM September, 1962
.A
Crawford, M.
Techo, R.
.N
CA620907 JB March 17, 1978 7:35 PM
.X
1157 5 485
485 5 485
485 5 485
485 5 485
836 6 485
1081 6 485
485 6 485
714 6 485
.I 486
.T
Tridiagonal Matrix (Algorithm 122)
.B
CACM September, 1962
.A
Dietzel, G. F.
.N
CA620906 JB March 17, 1978 7:36 PM
.X
486 5 486
486 5 486
486 5 486
.I 487
.T
NORMDEV (Algorithm 121)
.B
CACM September, 1962
.A
Shafer,D.
.N
CA620905 JB March 17, 1978 7:38 PM
.X
487 5 487
487 5 487
487 5 487
.I 488
.T
Heuristic Page Turning Multiprogrammed Computer
.B
CACM September, 1962
.A
Weil, J. W.
.N
CA620904 JB March 17, 1978 7:40 PM
.X
1754 4 488
2358 4 488
488 4 488
274 5 488
488 5 488
488 5 488
488 5 488
.I 489
.T
Current Status IPL-V Philco 2000 Computer (June 1962)
.B
CACM September, 1962
.A
Shaffer, S. S.
.N
CA620903 JB March 17, 1978 7:41 PM
.X
489 5 489
489 5 489
489 5 489
.I 490
.T
Programmed Methods Printer Graphical Output
.B
CACM September, 1962
.A
Garfinkel, D.
.N
CA620902 JB March 17, 1978 8:56 PM
.X
490 5 490
490 5 490
490 5 490
.I 491
.T
Use Multiprogramming Design Low Cost Digital Computer
.B
CACM September, 1962
.A
Penny, J. P.
Pearcey, T.
.N
CA620901 JB March 17, 1978 8:57 PM
.X
249 4 491
254 4 491
272 4 491
1102 4 491
1109 4 491
1140 4 491
1188 4 491
1306 4 491
1464 4 491
1491 4 491
1713 4 491
1713 4 491
1767 4 491
1781 4 491
1787 4 491
1901 4 491
1901 4 491
1949 4 491
321 4 491
2059 4 491
2126 4 491
435 4 491
437 4 491
463 4 491
483 4 491
491 4 491
491 4 491
491 4 491
491 4 491
2732 4 491
560 4 491
583 4 491
3073 4 491
627 4 491
631 4 491
632 4 491
642 4 491
644 4 491
653 4 491
680 4 491
761 4 491
762 4 491
763 4 491
123 4 491
140 4 491
168 4 491
919 4 491
989 4 491
168 5 491
185 5 491
196 5 491
491 5 491
491 5 491
491 5 491
46 5 491
3193 5 491
796 5 491
491 6 491
491 6 491
.I 492
.T
Analysis File Addressing Method
.W
paper presents new file addressing method
based calculation address
identification record. large recirculating
type files, seems more advantageous
than customary ones. probability distribution
displacement records their calculated
address, which one less than number probes
required address record, computed
basis Markov chain model. reader not interested
mathematics, introduction
summary should sufficient.
.B
CACM August, 1962
.A
Schay Jr., G.
Spruth, W. G.
.N
CA620836 JB March 17, 1978 9:02 PM
.X
911 5 492
1785 5 492
2203 5 492
2860 5 492
492 5 492
492 5 492
492 5 492
911 6 492
911 6 492
1328 6 492
1785 6 492
1786 6 492
332 6 492
332 6 492
2107 6 492
2109 6 492
2203 6 492
492 6 492
492 6 492
492 6 492
492 6 492
.I 493
.T
Property Classification Method File Design Processing
.B
CACM August, 1962
.A
McGee, W. C.
.N
CA620835 JB March 17, 1978 9:03 PM
.X
1135 4 493
1136 4 493
493 4 493
2710 4 493
2765 4 493
2888 4 493
2906 4 493
729 4 493
1136 5 493
493 5 493
493 5 493
493 5 493
616 5 493
493 6 493
616 6 493
657 6 493
.I 494
.T
Finite Sequentially Compact Process Adjoints
Matrices Over Arbitrary Integral Domains
.B
CACM August, 1962
.A
Luther, H. A.
Guseman Jr., L. F.
.N
CA620834 JB March 17, 1978 9:04 PM
.X
494 5 494
494 5 494
494 5 494
.I 495
.T
Procedure Inverting Large Symmetric Matrices
.W
least squares method simultaneous
adjustment several parameters, coefficients
normal equations elements symmetric
positive-definite matrix. order solve
normal equations evaluate precision measures
resulting parameters, inversion
matrix coefficients required. Many available procedures
matrix inversion do not take advantage
symmetry. Thus, programmed high-speed
computer, all n^2 elements must stored
manipulated, whereas only (n + 1)/2 them independent.
order allow computer given memory
capacity handle larger matrix, following procedure
inverting symmetric matrix has been
devised.
.B
CACM August, 1962
.A
Busing, W. R.
Levy, H. S.
.N
CA620833 JB March 17, 1978 9:09 PM
.X
495 5 495
495 5 495
495 5 495
.I 496
.T
Set Matrices Testing Computer Programs
.B
CACM August, 1962
.A
Brenner, J. L.
.N
CA620832 JB March 17, 1978 9:10 PM
.X
1047 5 496
496 5 496
496 5 496
496 5 496
496 6 496
.I 497
.T
Further Remarks Line Segment Curve-Fitting Using Dynamic Programming
.W
recent paper, Bellman showed dynamic
programming could used determine solution
problem previously considered Stone. problem
comprises determination, given N,
N points subdivision given interval (a,B)
corresponding line segments, give
best least squares fit function g(x) interval.
Bellman confined himself primarily
analytical derivation, suggesting briefly, however,
solution equation derived each
particular point subdivision u(i) could reduced
discrete search. paper, computational
procedure considered more fully, similarities
some Stone's equations indicated.
further shown equation u(i) involving
no minimization may found. addition,
shown Bellman's method may applied
curve-fitting problem additional constraints
added ends line segments must curve.
.B
CACM August, 1962
.A
Gluss, B.
.N
CA620831 JB March 17, 1978 9:19 PM
.X
497 4 497
867 4 497
317 5 497
497 5 497
497 5 497
497 5 497
867 5 497
317 6 497
497 6 497
.I 498
.T
Magic Square (Algorithm 117 & 118)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620830 JB March 17, 1978 9:20 PM
.X
498 5 498
498 5 498
498 5 498
.I 499
.T
Permutation Generator (Algorithm 87)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620829 JB March 17, 1978 9:22 PM
.X
499 5 499
499 5 499
499 5 499
.I 500
.T
PERMUTE (Algorithm 86)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620828 JB March 17, 1978 9:23 PM
.X
500 5 500
500 5 500
500 5 500
.I 501
.T
JACOBI (Algorithm 85)
.B
CACM August, 1962
.A
Hillmore, J. S.
.N
CA620827 JB March 17, 1978 9:24 PM
.X
2349 5 501
501 5 501
501 5 501
501 5 501
1648 6 501
1716 6 501
1794 6 501
1894 6 501
2043 6 501
501 6 501
613 6 501
774 6 501
.I 502
.T
Simpson's Integration (Algorithm 84)
.B
CACM August, 1962
.A
George, R.
.N
CA620826 JB March 17, 1978 9:25 PM
.X
502 5 502
502 5 502
502 5 502
.I 503
.T
Rational Roots Polynomials Integer Coefficients (Algorithm 78)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620825 JB March 17, 1978 9:27 PM
.X
503 5 503
503 5 503
503 5 503
.I 504
.T
FACTORS (Algorithm 75)
.B
CACM August, 1962
.A
Hillmore, J. S.
.N
CA620824 JB March 17, 1978 9:28 PM
.X
504 5 504
504 5 504
504 5 504
.I 505
.T
Composition Generator (Algorithm 72)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620823 JB March 17, 1978 9:29 PM
.X
505 5 505
505 5 505
505 5 505
.I 506
.T
PERMUTATION (Algorithm 71)
.B
CACM August, 1962
.A
Hillmore, J. S.
.N
CA620822 JB March 17, 1978 9:30 PM
.X
506 5 506
506 5 506
506 5 506
.I 507
.T
Partition, Quicksort, Find (Algorithm 63, 64, 65)
.B
CACM August, 1962
.A
Hillmore, J. S.
.N
CA620821 JB March 17, 1978 9:32 PM
.X
2679 5 507
507 5 507
507 5 507
507 5 507
970 6 507
1175 6 507
1190 6 507
1228 6 507
1969 6 507
1997 6 507
308 6 507
2042 6 507
3187 6 507
507 6 507
716 6 507
783 6 507
.I 508
.T
Matrix Inversion (Algorithm 58)
.B
CACM August, 1962
.A
George, R.
.N
CA620820 JB March 17, 1978 9:32 PM
.X
508 5 508
508 5 508
508 5 508
.I 509
.T
Matrix Inversion (Algorithm 58)
.B
CACM August, 1962
.A
Struble, G.
.N
CA620819 JB March 17, 1978 9:33 PM
.X
509 5 509
509 5 509
509 5 509
.I 510
.T
Ber Bei Function (Algorithm 57)
.B
CACM August, 1962
.A
Thacher Jr., H. C.
.N
CA620818 JB March 17, 1978 9:34 PM
.X
510 5 510
510 5 510
510 5 510
.I 511
.T
Set Test Matrices (Algorithm 52)
.B
CACM August, 1962
.A
Hillmore, J. S.
.N
CA620817 JB March 17, 1978 9:35 PM
.X
1707 5 511
511 5 511
511 5 511
511 5 511
1047 6 511
511 6 511
.I 512
.T
Telescope 1 (Algorithm 37)
.B
CACM August, 1962
.A
Thacher Jr., H. C.
.N
CA620816 JB March 17, 1978 9:36 PM
.X
512 5 512
512 5 512
512 5 512
.I 513
.T
SIEVE (Algorithm 35)
.B
CACM August, 1962
.A
Hillmore, J. S.
.N
CA620815 JB March 17, 1978 9:37 PM
.X
513 5 513
513 5 513
513 5 513
.I 514
.T
Binomial Coefficients (Algorithm 19)
.B
CACM August, 1962
.A
George, R.
.N
CA620814 JB March 17, 1978 9:40 PM
.X
514 5 514
514 5 514
514 5 514
.I 515
.T
Rational Interpolation Continued Fractions (Algorithm 18)
.B
CACM August, 1962
.A
Thacher Jr., H. C.
.N
CA620813 JB March 17, 1978 9:41 PM
.X
515 5 515
515 5 515
515 5 515
.I 516
.T
Matrix Inversion II (Algorithm 120)
.B
CACM August, 1962
.A
George, R.
.N
CA620812 JB March 17, 1978 9:42 PM
.X
516 5 516
516 5 516
516 5 516
.I 517
.T
Evaluation Pert Network (Algorithm 119)
.B
CACM August, 1962
.A
Eisenman, B.
Shapiro, M.
.N
CA620811 JB March 17, 1978 9:44 PM
.X
517 5 517
517 5 517
517 5 517
.I 518
.T
Magic Square (Odd Order) (Algorithm 118)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620810 JB March 17, 1978 9:45 PM
.X
2082 5 518
518 5 518
518 5 518
518 5 518
1491 6 518
518 6 518
.I 519
.T
Magic Square (Even Order) (Algorithm 117)
.B
CACM August, 1962
.A
Collison, D. M.
.N
CA620809 JB March 17, 1978 9:46 PM
.X
519 5 519
519 5 519
519 5 519
.I 520
.T
Complex Division (Algorithm 116)
.B
CACM August, 1962
.A
Smith, R. L.
.N
CA620808 JB March 17, 1978 9:47 PM
.X
520 5 520
520 5 520
520 5 520
.I 521
.T
PERM (Algorithm 115)
.B
CACM August, 1962
.A
Trotter, H. F.
.N
CA620807 JB March 17, 1978 9:57 PM
.X
2044 5 521
2189 5 521
2417 5 521
2505 5 521
2874 5 521
2908 5 521
521 5 521
521 5 521
521 5 521
996 6 521
1558 6 521
1594 6 521
1682 6 521
2087 6 521
2189 6 521
2227 6 521
2230 6 521
2292 6 521
2317 6 521
2505 6 521
2683 6 521
2871 6 521
2884 6 521
3191 6 521
521 6 521
521 6 521
521 6 521
521 6 521
521 6 521
521 6 521
.I 522
.T
Generation Partitions Constraints (Algorithm 114)
.B
CACM August, 1962
.A
Stockmal, F.
.N
CA620806 JB March 17, 1978 7:28 PM
.X
522 5 522
522 5 522
522 5 522
.I 523
.T
TREESORT (Algorithm 113)
.B
CACM August, 1962
.A
Floyd,R. W.
.N
CA620805 JB March 17, 1978 7:29 PM
.X
523 5 523
523 5 523
523 5 523
.I 524
.T
Position Point Relative Polygon (Algorithm 112)
.B
CACM August, 1962
.A
Shimrat, M.
.N
CA620804 JB March 17, 1978 7:30 PM
.X
1804 5 524
2987 5 524
524 5 524
524 5 524
524 5 524
1326 6 524
1630 6 524
2125 6 524
2547 6 524
2633 6 524
421 6 524
421 6 524
524 6 524
524 6 524
.I 525
.T
Computer Technique Handling Analysis Variance
.B
CACM August, 1962
.A
Howell, J. R.
.N
CA620803 JB March 17, 1978 7:32 PM
.X
525 5 525
525 5 525
525 5 525
.I 526
.T
Character Manipulation Fortran
.B
CACM August, 1962
.A
Pyle, I. C.
.N
CA620802 JB March 17, 1978 7:33 PM
.X
526 5 526
526 5 526
526 5 526
.I 527
.T
Description List Concepts
.W
concept defined class objects
whose members can distinguished processing
its properties. Property defined mean partition
set all objects into disjoint classes.
formal definition concept recursive nature.
concept described list structure.
one-to-one correspondence established between
recursive definition concept its description
list structure. Like definition, description
list structure concept also built up
elementary list structures recursive process.
list structures obtained way compared
description list structure discussed
author previous publication.
.B
CACM August, 1962
.A
Banerji, R. B.
.N
CA620801 JB March 17, 1978 7:39 PM
.X
527 5 527
527 5 527
527 5 527
.I 528
.T
FORTRAN Business Data Processing
.B
CACM July, 1962
.A
Robbins, D. K.
.N
CA620733 JB March 17, 1978 7:41 PM
.X
1330 5 528
528 5 528
528 5 528
528 5 528
528 6 528
728 6 528
.I 529
.T
Regression Coded Patterns Data Editing
.B
CACM July, 1962
.A
Robison, D. E.
Aroian, L. A.
.N
CA620732 JB March 17, 1978 7:42 PM
.X
529 5 529
529 5 529
529 5 529
.I 530
.T
Computer Method Radiation Treatment Planning
.B
CACM July, 1962
.A
Siler, W.
Laughlin, J. S.
.N
CA620731 JB March 17, 1978 7:43 PM
.X
530 5 530
530 5 530
530 5 530
.I 531
.T
Person-Matching Electronic Methods
.W
Record linkage updating files
accomplished many establishments through
use preassigned number, such payroll number,
customer number, social security number.
vital health records, however, unique number
generally not preassigned individual
purposes reporting services received health
department. order determine whether different
physician reports refer same individual, name
other identification must compared.
laborious operation which subject various
errors because name misspellings, changes
name upon marriage, other problems. We interested
maintenance psychiatric case register
Maryland, many reports over hundred
psychiatric agencies refer same patient.
These records must linked order provide unduplicated
counts individuals under care longitudinal
records psychiatric history. earlier paper [1] describes
our general procedures register maintenance
use digital computer (Honeywell 800). Here
we present more detail our initial procedures
person-matching process order elicit comments
suggestions persons have had
experience matching.
.B
CACM July, 1962
.A
Phillips Jr., W.
Bahn, A. K.
Miyasaki, M.
.N
CA620730 JB March 17, 1978 7:51 PM
.X
531 5 531
531 5 531
531 5 531
.I 532
.T
Computation Rational Approximations Continuous Functions
.B
CACM July, 1962
.A
Fraser, W.
HArt, J. F.
.N
CA620729 JB March 17, 1978 7:52 PM
.X
951 5 532
1015 5 532
1346 5 532
1440 5 532
1645 5 532
532 5 532
532 5 532
532 5 532
951 6 532
962 6 532
532 6 532
532 6 532
532 6 532
532 6 532
532 6 532
.I 533
.T
Digital Synthesis Correlated Stationary Noise
.W
note we propose method generating
stationary noise prescribed auto-covariance
function digital methods. need such technique
often arises testing performance
data processing engineering systems, inputs
corrupted correlated noise (of known form)
required. technique quite simple produces
strict-sense stationary noise which agrees
approximately R(t), prescribed auto-covariance
function (acf), over interval [-T(0), T(0)].
method consists approximating spectral density
periodic process spectral lines,
then synthesizing periodic noise random
phases appropriate amplitudes. order
simplify discussion statistical properties
noise generated, technique first presented
terms exact harmonic analysis. practice, discrete
harmonic analysis presented third
section used.
.B
CACM July, 1962
.A
Peabody, P. R.
Adorno, D. S.
.N
CA620728 JB March 17, 1978 7:59 PM
.X
533 5 533
533 5 533
533 5 533
.I 534
.T
Quick Calculation Jacobian Elliptic Functions
.B
CACM July, 1962
.A
Salzer, H. E.
.N
CA620727 JB March 17, 1978 8:01 PM
.X
534 5 534
534 5 534
534 5 534
.I 535
.T
Triangular Walk Pattern Down-hill
Method Solving Transcendental Equation
.B
CACM July, 1962
.A
Onoe, M.
.N
CA620726 JB March 17, 1978 8:02 PM
.X
1806 5 535
535 5 535
535 5 535
535 5 535
535 6 535
.I 536
.T
Nonlinear Regression Solution Simultaneous Equations
.W
If one has set observables (Z1,...,Zm) which
bound relation certain parameters
(A1,...,An) equation S(Z1,...;A1,...)=0, one frequently
has problem determining set
values Ai which minimizes sum squares
differences between observed calculated values
distinguished observable, say Zm. If solution
above equation Zm, Zm=N(Z1,...;A1,...)
gives rise function N which nonlinear Ai,
then one may rely version Gaussian regression
[1,2] iteration scheme converges minimizing
set values. shown here
same minimization technique may used solution
simultaneous (not necessarily linear) equations.
.B
CACM July, 1962
.A
Baer, R. M.
.N
CA620725 JB March 17, 1978 8:09 PM
.X
536 5 536
536 5 536
536 5 536
.I 537
.T
Machine Program Theorem-Proving
.W
program proof procedure discussed
connection trial runs possible improvements.
.B
CACM July, 1962
.A
Davis, M.
Logemann, G.
Loveland, D.
.N
CA620724 JB March 17, 1978 8:11 PM
.X
537 5 537
537 5 537
537 5 537
.I 538
.T
Quantum Mechanical Integrals Slater-Type Orbitals (Algorithm 110)
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620723 JB March 17, 1978 8:13 PM
.X
538 5 538
538 5 538
538 5 538
.I 539
.T
Definite Exponential Integrals B (Algorithm 109)
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620722 JB March 17, 1978 8:15 PM
.X
539 5 539
539 5 539
539 5 539
.I 540
.T
Definite Exponential Integrals (Algorithm 108)
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620721 JB March 17, 1978 8:16 PM
.X
540 5 540
540 5 540
540 5 540
.I 541
.T
Simpson's Integration (Algorithm 84)
.B
CACM July, 1962
.A
Relph, A. P.
.N
CA620720 JB March 17, 1978 8:17 PM
.X
541 5 541
541 5 541
541 5 541
.I 542
.T
FACTORS (Algorithm 75)
.B
CACM July, 1962
.A
Relph, A. P.
.N
CA620719 JB March 17, 1978 8:18 PM
.X
542 5 542
542 5 542
542 5 542
.I 543
.T
Interpolation Aitken (Algorithm 70)
.B
CACM July, 1962
.A
Relph, A. P.
.N
CA620718 JB March 17, 1978 8:19 PM
.X
543 5 543
543 5 543
543 5 543
.I 544
.T
Ber Bei Function (Algorithm 57)
.B
CACM July, 1962
.A
Relph, A. P.
.N
CA620717 JB March 17, 1978 8:21 PM
.X
544 5 544
544 5 544
544 5 544
.I 545
.T
Adjust Inverse Matrix Element Perturbed (Algorithm 51)
.B
CACM July, 1962
.A
George, R.
.N
CA620716 JB March 17, 1978 8:22 PM
.X
545 5 545
545 5 545
545 5 545
.I 546
.T
Logarithm Complex Number (Algorithm 48)
.B
CACM July, 1962
.A
Johnson, M. L.
Sangren, W.
.N
CA620715 JB March 17, 1978 8:23 PM
.X
546 5 546
546 5 546
546 5 546
.I 547
.T
Gamma Function (Algorithm 34)
.B
CACM July, 1962
.A
Johnson, M. L.
Sangren, W.
.N
CA620714 JB March 17, 1978 8:25 PM
.X
547 5 547
547 5 547
547 5 547
.I 548
.T
Molecular-Orbital Calculation Molecular Interactions
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620713 JB March 17, 1978 8:26 PM
.X
548 5 548
548 5 548
548 5 548
.I 549
.T
Quantum Mechanical Integrals Slater-Type Orbitals
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620712 JB March 17, 1978 8:27 PM
.X
549 5 549
549 5 549
549 5 549
.I 550
.T
Definite Exponential Integrals B (Algorithm 109)
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620711 JB March 17, 1978 8:30 PM
.X
550 5 550
550 5 550
550 5 550
.I 551
.T
Definite Exponential Integrals (Algorithm 108)
.B
CACM July, 1962
.A
Kruglyak, Y. A.
Whitman, D. R.
.N
CA620710 JB March 17, 1978 8:31 PM
.X
551 5 551
551 5 551
551 5 551
.I 552
.T
Gauss's Method (Algorithm 107)
.B
CACM July, 1962
.A
Counts, J. W.
.N
CA620709 JB March 17, 1978 8:33 PM
.X
552 5 552
552 5 552
552 5 552
.I 553
.T
Complex Number Real Power (Algorithm 106)
.B
CACM July, 1962
.A
Johnson, M. L.
Sangren, W.
.N
CA620708 JB March 17, 1978 8:34 PM
.X
553 5 553
553 5 553
553 5 553
.I 554
.T
Newton Maehly, (Algorithm 105)
.B
CACM July, 1962
.A
Bauer, F. L.
Stoer, J.
.N
CA620707 JB March 17, 1978 8:44 PM
.X
554 5 554
554 5 554
554 5 554
.I 555
.T
Reduction Jacobi (Algorithm 104)
.B
CACM July, 1962
.A
Rutishausr, H.
.N
CA620706 JB March 17, 1978 8:45 PM
.X
555 5 555
555 5 555
555 5 555
.I 556
.T
Translation Boolean Expressions
.B
CACM July, 1972
.A
Bottenbirruch, H. H
Grau, A. A.
.N
CA620705 JB March 17, 1978 8:52 PM
.X
1139 4 556
1947 4 556
556 4 556
799 4 556
399 5 556
556 5 556
556 5 556
556 5 556
.I 557
.T
Simulation Computer Timing Device
.B
CACM July, 1962
.N
CA620704 JB March 17, 1978 8:57 PM
.X
1380 4 557
1552 4 557
1693 4 557
1781 4 557
1854 4 557
1860 4 557
2060 4 557
557 4 557
1421 5 557
557 5 557
557 5 557
557 5 557
3184 5 557
1198 6 557
1749 6 557
557 6 557
.I 558
.T
Modified Inversion Procedure Product
Form Inverse Linear Programming Codes
.W
paper describes new algorithm
selection pivot row matrix inversion
using product form inverse. algorithm
has been developed linear programming
codes; however, would valuable inversion
any non-dense matrix. procedures described
paper have been thoroughly tested have been
operation Esso Research Engineering
IBM 7090 computer nine months. Substantial computer
cost savings have been realized because
procedure.
.B
CACM July,1962
.A
Larsen, L. J.
.N
CA620703 JB March 17, 1978 9:07 PM
.X
558 5 558
558 5 558
558 5 558
.I 559
.T
Solution Eigenvalue Problems Approximately Known Eigenvectors
.B
CACM July, 1962
.A
Appel, K.
.N
CA620702 JB March 17, 1978 9:10 PM
.X
559 5 559
559 5 559
559 5 559
.I 560
.T
Communication Between Independently Translated Blocks
.B
CACM July, 1962
.A
Wegner, P.
.N
CA620701 JB March 17, 1978 9:11 PM
.X
249 4 560
254 4 560
272 4 560
1102 4 560
1109 4 560
1140 4 560
1188 4 560
1306 4 560
1464 4 560
1491 4 560
1767 4 560
1774 4 560
1781 4 560
1787 4 560
1949 4 560
321 4 560
2059 4 560
2126 4 560
435 4 560
437 4 560
463 4 560
483 4 560
491 4 560
2732 4 560
560 4 560
560 4 560
583 4 560
3073 4 560
627 4 560
631 4 560
632 4 560
642 4 560
644 4 560
653 4 560
680 4 560
761 4 560
762 4 560
763 4 560
123 4 560
140 4 560
919 4 560
972 4 560
989 4 560
196 5 560
271 5 560
560 5 560
560 5 560
560 5 560
.I 561
.T
Analytic Differentiation Computer
.B
CACM June, 1962
.A
Hanson, J. W.
Caviness, J. S.
Joseph, C.
.N
CA620624 JB March 17, 1978 9:12 PM
.X
1134 4 561
1141 4 561
364 4 561
405 4 561
438 4 561
561 4 561
561 4 561
44 4 561
964 5 561
1028 5 561
1216 5 561
1396 5 561
1392 5 561
393 5 561
77 5 561
561 5 561
561 5 561
561 5 561
964 6 561
1028 6 561
1028 6 561
1029 6 561
1029 6 561
1029 6 561
1083 6 561
1132 6 561
1214 6 561
1278 6 561
1334 6 561
1365 6 561
1386 6 561
1387 6 561
1388 6 561
1392 6 561
1393 6 561
1394 6 561
1395 6 561
1396 6 561
1397 6 561
1496 6 561
284 6 561
284 6 561
407 6 561
3199 6 561
3200 6 561
3201 6 561
3202 6 561
3203 6 561
3204 6 561
561 6 561
561 6 561
561 6 561
561 6 561
561 6 561
730 6 561
759 6 561
.I 562
.T
AVINT (Algorithm 77)
.B
CACM June, 1962
.A
Whittier, V. E.
.N
CA620623 JB March 17, 1978 9:14 PM
.X
562 5 562
562 5 562
562 5 562
.I 563
.T
Sorting Procedures (Algorithm 76)
.B
CACM June, 1962
.A
Randell, B.
.N
CA620622 JB March 17, 1978 9:15 PM
.X
563 5 563
563 5 563
563 5 563
.I 564
.T
CRAM (Algorithm 67)
.B
CACM June, 1962
.A
Relph, A. P.
.N
CA620621 JB March 17, 1978 9:17 PM
.X
564 5 564
564 5 564
564 5 564
.I 565
.T
INVRS (Algorithm 66)
.B
CACM June, 1962
.A
Caffrey, J.
.N
CA620620 JB March 17, 1978 9:18 PM
.X
565 5 565
565 5 565
565 5 565
.I 566
.T
Matrix Inversion (Algorithm 58)
.B
CACM June, 1962
.A
Conger, R. A.
.N
CA620619 JB March 17, 1978 9:19 PM
.X
566 5 566
566 5 566
566 5 566
.I 567
.T
Logarithm Complex Number (Algorithm 48)
.B
CACM June, 1962
.A
Relph, A. P.
.N
CA620618 JB March 17, 1978 9:20 PM
.X
567 5 567
567 5 567
567 5 567
.I 568
.T
Exponential Complex Number (Algorithm 46)
.B
CACM June, 1962
.A
Relph, A. P.
.N
CA620617 JB March 17, 1978 9:21 PM
.X
568 5 568
568 5 568
568 5 568
.I 569
.T
Binomial Coefficients (Algorithm 19)
.B
CACM June, 1962
.A
Steck, B.
.N
CA620616 JB March 17, 1978 9:22 PM
.X
569 5 569
569 5 569
569 5 569
.I 570
.T
Simpson's Rule Integrator (Algorithm 103)
.B
CACM June, 1962
.A
Kuncir, G. F.
.N
CA620615 JB March 17, 1978 9:24 PM
.X
1352 5 570
570 5 570
570 5 570
570 5 570
834 6 570
872 6 570
1040 6 570
1092 6 570
1241 6 570
1273 6 570
324 6 570
429 6 570
570 6 570
621 6 570
786 6 570
.I 571
.T
Permutation Lexicographical Order (Algorithm 102)
.B
CACM June, 1962
.A
Schrack, G. F.
Shimrat, M.
.N
CA620614 JB March 17, 1978 9:25 PM
.X
571 5 571
571 5 571
571 5 571
.I 572
.T
Add Item Chain-Linked List (Algorithm 100)
.B
CACM June, 1962
.A
Kiviat, P. J.
.N
CA620612 JB March 17, 1978 9:26 PM
.X
572 5 572
572 5 572
572 5 572
.I 573
.T
Remove Item Chain-Linked List (Algorithm 101)
.B
CACM June, 1962
.A
Kiviat, P. J.
.N
CA620613 JB March 17, 1978 9:27 PM
.X
573 5 573
573 5 573
573 5 573
.I 574
.T
Evaluation Jacobi Symbol (Algorithm 99)
.B
CACM June, 1962
.A
Garland, S. J.
Knapp, A. W.
.N
CA620611 JB March 17, 1978 9:28 PM
.X
574 5 574
574 5 574
574 5 574
.I 575
.T
Evaluation Definite Complex Line Integrals (Algorithm 98)
.B
CACM June, 1962
.A
Pfaltz, J. L.
.N
CA620610 JB March 17, 1978 9:29 PM
.X
575 5 575
575 5 575
575 5 575
.I 576
.T
Shortest Path (Algorithm 97)
.B
CACM June, 1962
.A
Floyd, R. W.
.N
CA620609 JB March 17, 1978 9:30 PM
.X
1846 5 576
2630 5 576
2650 5 576
576 5 576
576 5 576
576 5 576
830 6 576
1380 6 576
1424 6 576
1484 6 576
1572 6 576
2111 6 576
576 6 576
576 6 576
576 6 576
680 6 576
.I 577
.T
ANCESTOR (Algorithm 96)
.B
CACM June, 1962
.A
Floyd, R. W.
.N
CA620608 JB March 17, 19789:31 PM
.X
1836 5 577
577 5 577
577 5 577
577 5 577
1191 6 577
1477 6 577
1491 6 577
1781 6 577
577 6 577
.I 578
.T
Generation Partitions Part-Count Form (Algorithm 95)
.B
CACM June, 1962
.A
Stockmal, F.
.N
CA620607 JB March 17, 1978 9:32 PM
.X
578 5 578
578 5 578
578 5 578
.I 579
.T
COMBINATION (Algorithm 94)
.B
CACM June, 1962
.A
Kurtzberg, J.
.N
CA620606 JB March 17, 1978 9:33 PM
.X
2690 5 579
2853 5 579
579 5 579
579 5 579
579 5 579
3115 5 579
907 6 579
203 6 579
2045 6 579
2417 6 579
2466 6 579
2690 6 579
2884 6 579
579 6 579
579 6 579
579 6 579
785 6 579
.I 580
.T
General Order Arithmetic (Algorithm 93)
.B
CACM June, 1962
.A
Perstein, M. H.
.N
CA620605 JB March 17, 1978 9:34 PM
.X
580 5 580
580 5 580
580 5 580
.I 581
.T
Note Sampling Tape-File
.B
CACM June, 1962
.A
Jones, T. G.
.N
CA620604 JB March 17, 1978 9:35 PM
.X
581 5 581
581 5 581
581 5 581
.I 582
.T
One Lost Bit
.B
CACM June, 1962
.A
Oster, C. A.
.N
CA620603 JB March 17, 1978 9:36 PM
.X
582 5 582
582 5 582
582 5 582
.I 583
.T
Redundancy Check ALGOL Programs
.B
CACM June, 1962
.A
Thacher Jr., H. C.
.N
CA620602 JB March 17, 1978 9:37 PM
.X
249 4 583
254 4 583
272 4 583
1102 4 583
1109 4 583
1140 4 583
1188 4 583
1306 4 583
1464 4 583
1491 4 583
1767 4 583
1781 4 583
1787 4 583
1949 4 583
321 4 583
2059 4 583
2126 4 583
435 4 583
437 4 583
463 4 583
483 4 583
491 4 583
2732 4 583
560 4 583
583 4 583
3073 4 583
627 4 583
631 4 583
632 4 583
642 4 583
644 4 583
653 4 583
680 4 583
761 4 583
762 4 583
763 4 583
123 4 583
140 4 583
919 4 583
989 4 583
196 5 583
583 5 583
583 5 583
583 5 583
.I 584
.T
Report Algorithmic Language FORTRAN II
.B
CACM June, 1962
.A
Rabinowitz, I. N.
.N
CA620601 JB March 17, 1978 9:38 PM
.X
1046 4 584
1105 4 584
1139 4 584
1140 4 584
1234 4 584
1263 4 584
1265 4 584
1496 4 584
1781 4 584
1824 4 584
2126 4 584
2546 4 584
464 4 584
584 4 584
631 4 584
653 4 584
680 4 584
763 4 584
795 4 584
799 4 584
945 4 584
949 5 584
1781 5 584
1945 5 584
404 5 584
584 5 584
584 5 584
584 5 584
823 6 584
123 6 584
196 6 584
914 6 584
915 6 584
917 6 584
919 6 584
984 6 584
989 6 584
990 6 584
990 6 584
1007 6 584
1012 6 584
1046 6 584
1084 6 584
1098 6 584
1122 6 584
1131 6 584
1138 6 584
1139 6 584
1139 6 584
1140 6 584
1141 6 584
1149 6 584
1198 6 584
1200 6 584
1215 6 584
1223 6 584
1223 6 584
1265 6 584
1265 6 584
1303 6 584
1323 6 584
1336 6 584
1358 6 584
1366 6 584
1396 6 584
1421 6 584
1455 6 584
1460 6 584
1462 6 584
1463 6 584
1467 6 584
1468 6 584
1477 6 584
1477 6 584
1487 6 584
1491 6 584
1491 6 584
1496 6 584
1496 6 584
1531 6 584
1535 6 584
1565 6 584
1601 6 584
1602 6 584
1613 6 584
1614 6 584
1626 6 584
1641 6 584
1787 6 584
1788 6 584
205 6 584
224 6 584
249 6 584
288 6 584
316 6 584
381 6 584
398 6 584
11 6 584
404 6 584
410 6 584
463 6 584
464 6 584
483 6 584
483 6 584
483 6 584
3184 6 584
3184 6 584
3188 6 584
584 6 584
584 6 584
584 6 584
600 6 584
669 6 584
680 6 584
680 6 584
691 6 584
763 6 584
763 6 584
799 6 584
.I 585
.T
Initial Experience Operating Multiprogramming System
.W
Lewis Research Center has been using various
forms degrees program simultaneity
operation its modified Sperry-Rand Univac Scientific
Model 1103 computer during last five
years. simultaneity has evolved initial
achievement self-searching input output
automatic time sharing independently coded
problems. Several important machine program
system modifications were necessary accomplish
evolution. Several additional modifications,
although not required, were added facilitate ease
coding operation. All modifications had
proceed relatively temperate pace insure
basic data-reduction work load computing
center completed schedule. Some educationally
valuable mistakes were made, their suggested
cures often pointed way useful future improvements
emphasized some basic principles
multiprogramming system. material follows
description evolution programming
hardware system which has developed into present
multiprogramming system Lewis research Center.
.B
CACM May, 1962
.A
Landis, N.
Manos, A.
Turner, L. R.
.N
CA620520 JB March 17, 1978 9:45 PM
.X
585 5 585
585 5 585
585 5 585
.I 586
.T
Simultaneous System Equations
Matrix Inversion Routine (Algorithm 92)
.B
CACM May, 1962
.A
Roek, D. J.
.N
CA620519 JB March 20, 1978 1:31 PM
.X
454 5 586
586 5 586
586 5 586
586 5 586
152 6 586
586 6 586
.I 587
.T
Romberg Integration (Algorithm 60)
.B
CACM May, 1962
.A
Buchner, K. H.
.N
CA620518 JB March 20, 1978 1:33 PM
.X
1040 5 587
587 5 587
587 5 587
587 5 587
885 6 587
587 6 587
621 6 587
.I 588
.T
Chebyshev Curve-Fit (Algorithm 91)
.B
CACM May, 1962
.A
Newhouse, A.
.N
CA620517 JB March 20, 1978 1:34 PM
.X
588 5 588
588 5 588
588 5 588
.I 589
.T
Evaluation Fresnel Cosine Integral (Algorithm 90)
.B
CACM May, 1962
.A
Cundiff, J. L.
.N
CA620516 JB March 20, 1978 1:35 PM
.X
589 5 589
589 5 589
589 5 589
.I 590
.T
Evaluation Fresnel Sine Integral (Algorithm 89)
.B
CACM May, 1962
.A
Cundiff, J. L.
.N
CA620515 JB March 20, 1978 1:36 PM
.X
590 5 590
590 5 590
590 5 590
.I 591
.T
Evaluation Asymptotic Expression
Fresnel Sine Cosine Integrals (Algorithm 88)
.B
CACM May, 1962
.A
Cundiff, J. L.
.N
CA620514 JB March 20, 1978 1:37 PM
.X
591 5 591
591 5 591
591 5 591
.I 592
.T
COBOL Batching Problems
.B
CACM May, 1962
.A
Mullen, J. W.
.N
CA620513 JB March 20, 1978 1:38 PM
.X
592 5 592
592 5 592
592 5 592
.I 593
.T
Introduction Machine-Independent Data Division
.B
CACM May, 1962
.A
Mullin, J. P.
.N
CA620512 JB March 20, 1978 1:39 PM
.X
593 5 593
593 5 593
593 5 593
.I 594
.T
Advanced Input-Output System COBOL Compiler
.B
CACM May, 1962
.A
Bouman, C. A.
.N
CA620511 JB March 20, 1978 1:40 PM
.X
594 5 594
594 5 594
594 5 594
.I 595
.T
Guides Teaching COBOL
.W
teaching COBOL can divided into
three main subject areas. They syntax
COBOL, use such syntax solving any given problem,
programming concepts. generally
accepted some knowledge hardware computer
logic must possessed programmer.
teaching problem arises determining thoroughly
student must know hardware logic
computer which he write COBOL programs.
Unfortunately, historical data concerning
students' programming proficiency almost non-existent
and, best, difficult measure. then
might we approach solving problem?
.B
CACM May, 1962
.A
Greene, I.
.N
CA620510 JB March 20, 1978 1:44 PM
.X
595 5 595
595 5 595
595 5 595
.I 596
.T
Floating-Point Arithmetic COBOL
.W
paper basic operations floating-point
arithmetic examined COBOL procedures
carrying these out given, along specification
working storage. paper concludes
example which these procedures used.
.B
CACM May, 1962
.A
Kesner, O.
.N
CA620509 JB March 20, 1978 1:46 PM
.X
596 5 596
596 5 596
596 5 596
.I 597
.T
Modular Data Processing Systems Written COBOL
.B
CACM May, 1962
.A
Emery, J. C.
.N
CA620508 JB March 20, 1978 1:47 PM
.X
597 5 597
597 5 597
597 5 597
.I 598
.T
COBOL Librarian - Key Object Program Efficiency
.W
Many answers question "How may COBOL
Compiler forced into generation
efficient object program?" purpose article
present one possible answer: creation
full utilization well-constructed COBOL Library.
.B
CACM May, 1962
.A
Hicks, W.
.N
CA620507 JB March 20, 1978 1:50 PM
.X
598 5 598
598 5 598
598 5 598
.I 599
.T
Report Writer COBOL
.B
CACM May, 1962
.A
Donally, W. L.
.N
CA620506 JB March 20, 1978 1:51 PM
.X
599 5 599
599 5 599
599 5 599
.I 600
.T
Syntactical Charts COBOL 61
.B
CACM May, 1962
.A
Berman, R.
Sharp, J.
Sturges, L.
.N
CA620505 JB March 20, 1978 1:52 PM
.X
1781 5 600
600 5 600
600 5 600
600 5 600
123 6 600
196 6 600
919 6 600
990 6 600
1007 6 600
1046 6 600
1131 6 600
1139 6 600
1140 6 600
1149 6 600
1198 6 600
1215 6 600
1223 6 600
1265 6 600
1303 6 600
1323 6 600
1358 6 600
1366 6 600
1421 6 600
1460 6 600
1462 6 600
1463 6 600
1467 6 600
1468 6 600
1477 6 600
1491 6 600
1496 6 600
1531 6 600
1535 6 600
1565 6 600
1601 6 600
1602 6 600
1613 6 600
1614 6 600
1626 6 600
1641 6 600
1787 6 600
1788 6 600
205 6 600
224 6 600
249 6 600
288 6 600
316 6 600
381 6 600
398 6 600
11 6 600
404 6 600
410 6 600
463 6 600
464 6 600
483 6 600
3184 6 600
3188 6 600
584 6 600
600 6 600
680 6 600
691 6 600
763 6 600
799 6 600
.I 601
.T
Interim Report Bureau Ships COBOL Evaluation Program
.B
CACM May, 1962
.A
Siegel, M.
Smith, A. E.
.N
CA620504 JB March 20, 1978 1:53 PM
.X
601 5 601
601 5 601
601 5 601
.I 602
.T
COBOL Compatibility
.B
CACM May, 1962
.A
Lippitt, A.
.N
CA620503 JB March 20, 1978 1:54 PM
.X
602 5 602
602 5 602
602 5 602
.I 603
.T
Basic Elements COBOL 61
.B
CACM May, 1962
.A
Sammet, J. E.
.N
CA620502 JB March 20, 1978 1:54 PM
.X
1084 5 603
603 5 603
603 5 603
603 5 603
868 6 603
603 6 603
644 6 603
669 6 603
791 6 603
797 6 603
.I 604
.T
Why COBOL?
.B
CACM May, 1962
.A
Cunningham, J. F.
.N
CA620501 JB March 20, 1978 1:55 PM
.X
604 5 604
604 5 604
604 5 604
.I 605
.T
Computer Simulation City Traffic
.W
simulating traffic flow city streets,
National Bureau Standards has used data
processing techniques tabulate make motion pictures
vehicle movements model. Each vehicle
assigned digital identification giving points
entry exit, type vehicle, desired speed,
actual speed, proportions simulating field data.
Changes model can made observe
their consequences determine ability
real street carry loads expected future.
.B
CACM April, 1962
.N
CA620412 JB March 20, 1978 2:00 PM
.X
605 5 605
605 5 605
605 5 605
.I 606
.T
Method Eliminating Ambiguity Due
Signal Coincidence Digital Design
.B
CACM April, 1962
.A
Kaiser, C. J.
.N
CA620411 JB March 20, 1978 2:16 PM
.X
606 5 606
606 5 606
606 5 606
.I 607
.T
Calculation Easter...
.B
CACM April, 1962
.A
Knuth, D.
.N
CA620410 JB March 20, 1978 2:17 PM
.X
607 5 607
607 5 607
607 5 607
.I 608
.T
Permutation (Algorithm 71)
.B
CACM April, 1962
.A
Peck, J. E. L.
Schrack, G. F.
.N
CA620409 JB March 20, 1978 2:18 PM
.X
608 5 608
608 5 608
608 5 608
.I 609
.T
Permutation (Algorithm 71)
.B
CACM April, 1962
.A
Brown, P. J.
.N
CA620408 JB March 20, 1978 2:19 PM
.X
609 5 609
609 5 609
609 5 609
.I 610
.T
SIEVE (Algorithm 35)
.B
CACM April, 1962
.A
Brown, P. J.
.N
CA620407 JB March 20, 1978 2:20 PM
.X
610 5 610
610 5 610
610 5 610
.I 611
.T
Permutation Generator (Algorithm 87)
.B
CACM April, 1962
.A
Howell, J. R.
.N
CA620406 JB March 20, 1978 2:20 PM
.X
611 5 611
611 5 611
611 5 611
.I 612
.T
Permute (Algorithm 86)
.B
CACM April, 1962
.A
Peck, J. E. L.
Schrack, G. F.
.N
CA620405 JB March 20, 1978 2:21 PM
.X
3188 5 612
612 5 612
612 5 612
612 5 612
1594 6 612
612 6 612
.I 613
.T
JACOBI (Algorithm 85)
.B
CACM April, 1962
.A
Evans, T. G.
.N
CA620404 JB March 20, 1978 2:22 PM
.X
2349 5 613
613 5 613
613 5 613
613 5 613
1648 6 613
1716 6 613
1794 6 613
1894 6 613
2043 6 613
501 6 613
613 6 613
774 6 613
.I 614
.T
Simpson's Integration (Algorithm 84)
.B
CACM April, 1962
.A
Hennion, P. E.
.N
CA620403 JB March 20, 1978 2:25 PM
.X
614 5 614
614 5 614
614 5 614
.I 615
.T
Addressing Multidimensional Arrays
.W
useful method representing function
n variables consider function assume
its values selected points n-dimensional space.
Although picture value analyst,
elements n-dimensional array must exist
conventional storage linear array vector.
means performing transformation set
indices locating array element n-space
location (address) element its storage
vector subject paper. noted
index address transformation computationally
identical conversion number
fixed mixed radix number system. Several ways
implementing transformation described.
.B
CACM April, 1962
.A
Hellerman, H.
.N
CA620402 JB March 20, 1978 2:29 PM
.X
435 5 615
615 5 615
615 5 615
615 5 615
849 5 615
155 6 615
196 6 615
615 6 615
615 6 615
.I 616
.T
Information Algebra - Phase Report-Language
Structure Group CODASYL Development Committee
.W
report represents results
first phase work Language Structure
Group. goal work arrive proper
structure machine-independent problem-defining
language, systems level data processing.
report based, most part, mathematical
model called "An Information Algebra" developed primarily
R. Bosak. hoped report
read (a) avid interest programming language
designers implementors, all those
interested developing theoretical approach data
processing; (b) interest understanding
professional programmers systems analysts; (c)
appreciation businessman-analyst-manager.
authors have not attempted exhaustive discourse
report. Rather, they have tried present
philosophy professional people vitally
concerned providing working language
systems analyst's use. They trust ideas
report stimulate others think along
similar lines. Questions comments welcomed,
can addressed any members
Language Structure Group: Robert Bosak, System
Development Corporation; Richard F. Clippinger,
Honeywell EDP Division; Carey Dobbs, Remington Rand
Univac Division; Roy Goldfinger (Chairman), IBM
Corporation; Renee B. Jasper, Navy Management Office;
William Keating, National Cash Register; George
Kendrick, General Electric Company; Jean E. Sammet, IBM Corporation.
.B
CACM April, 1962
.N
CA620401 JB March 20, 1978 2:40 PM
.X
1135 5 616
1136 5 616
2710 5 616
2765 5 616
2888 5 616
2906 5 616
493 5 616
616 5 616
616 5 616
616 5 616
729 5 616
1515 6 616
288 6 616
1936 6 616
1976 6 616
2046 6 616
2046 6 616
2046 6 616
2451 6 616
2452 6 616
2715 6 616
493 6 616
616 6 616
616 6 616
616 6 616
616 6 616
616 6 616
616 6 616
616 6 616
616 6 616
657 6 616
.I 617
.T
POSEIDON
.W
Any computer forms part control system-whether
completely automatic partly human-must
work same speed control system. must
perform its calculations data processing fast
enough results available required
instants action control system.
known working "real time."
.B
CACM March, 1962
.A
Wheeling, R. F.
.N
CA620315 JB March 20, 1978 2:51 PM
.X
617 5 617
617 5 617
617 5 617
.I 618
.T
Computers- Key Total Systems Control: Industrial Viewpoint
.W
Man-Man-machine processes characterized five
main types, markets each type
shown 1950 1960 estimated 1970.
.B
CACM March, 1962
.A
Carlson, W. M.
.N
CA620314 JB March 20, 1978 2:53 PM
.X
618 5 618
618 5 618
618 5 618
.I 619
.T
Retrieval Misspelled Names Airlines Passenger Record System
.W
paper discusses limited problem
recognition retrieval given misspelled
name among roster several hundred names, such
reservation inventory given flight
large jet airliner. program has been developed
operated Telefile (a stored-program
core drum memory solid-state computer) which
retrieve passengers' records successfully, despite
significant misspellings either original entry time
retrieval time. procedure involves
automatic scoring technique which matches names
condensed form. Only those few names most
closely resembling requested name, their phone
numbers annexed, presented agents
final manual selecton. program has successfully
isolated retrieved names which were subjected
number unusual (as well usual) misspellings.
.B
CACM March, 1962
.A
Davidson, L.
.N
CA620313 JB March 20, 1978 2:59 PM
.X
1112 5 619
1592 5 619
2111 5 619
2339 5 619
440 5 619
619 5 619
619 5 619
619 5 619
830 6 619
982 6 619
1112 6 619
1112 6 619
1112 6 619
1592 6 619
1592 6 619
440 6 619
619 6 619
619 6 619
619 6 619
619 6 619
619 6 619
.I 620
.T
RATFACT (Algorithm 78)
.B
CACM March, 1962
.A
Halstead, M. H.
.N
CA620312 JB March 20, 1978 3:00 PM
.X
620 5 620
620 5 620
620 5 620
.I 621
.T
Romberg Integration (Algorithm 60)
.B
CACM March, 1962
.A
Thacher Jr., H. C.
.N
CA620311 JB March 20, 1978 3:01 PM
.X
1040 5 621
1352 5 621
2040 5 621
621 5 621
621 5 621
621 5 621
834 6 621
872 6 621
885 6 621
1040 6 621
1092 6 621
1241 6 621
1241 6 621
1273 6 621
1273 6 621
1352 6 621
1356 6 621
324 6 621
324 6 621
429 6 621
570 6 621
587 6 621
621 6 621
621 6 621
621 6 621
786 6 621
.I 622
.T
Optimal Classification Objects (Algorithm 83)
.B
CACM March, 1962
.A
Mayoh, B. H.
.N
CA620310 JB March 20, 1978 3:02 PM
.X
622 5 622
622 5 622
622 5 622
.I 623
.T
Economising Sequence 2 (Algorithm 82)
.B
CACM March, 1962
.A
Mayoh, B. H.
.N
CA620309 JB March 20, 1978 3:03 PM
.X
623 5 623
623 5 623
623 5 623
.I 624
.T
Economising Sequence 1 (Algorithm 81)
.B
CACM March, 1962
.A
Mayoh, B. H.
.N
CA620308 JB March 20, 1978 3:04 PM
.X
624 5 624
624 5 624
624 5 624
.I 625
.T
Reciprocal Gamma Function Real Argument (Algorithm 80)
.B
CACM March, 1962
.A
Holsten, W.
.N
CA620307 JB March 20, 1978 3:05 PM
.X
625 5 625
625 5 625
625 5 625
.I 626
.T
Method Representation, Storage Retrieval
13 Random Codes 4-Digit Number 16
Random Codes 5-Digit Number
.B
CACM March, 1962
.A
Foster, M. B.
.N
CA620306 JB March 20, 1978 3:07 PM
.X
626 5 626
626 5 626
626 5 626
.I 627
.T
Knotted List Structures
.B
CACM March, 1962
.A
Weizenbaum, J.
.N
CA620305 JB March 20, 1978 3:07 PM
.X
249 4 627
254 4 627
272 4 627
1024 4 627
1050 4 627
1051 4 627
1102 4 627
1102 4 627
1109 4 627
1132 4 627
1140 4 627
1188 4 627
1306 4 627
1390 4 627
1393 4 627
1464 4 627
1486 4 627
1491 4 627
1549 4 627
1549 4 627
1706 4 627
1767 4 627
1781 4 627
1787 4 627
1826 4 627
1878 4 627
1949 4 627
321 4 627
378 4 627
2023 4 627
2059 4 627
2060 4 627
2126 4 627
2155 4 627
2168 4 627
435 4 627
437 4 627
463 4 627
483 4 627
491 4 627
2719 4 627
2723 4 627
2732 4 627
2838 4 627
2842 4 627
2855 4 627
2879 4 627
560 4 627
583 4 627
3073 4 627
3077 4 627
3080 4 627
3106 4 627
3112 4 627
627 4 627
627 4 627
627 4 627
631 4 627
632 4 627
642 4 627
644 4 627
653 4 627
680 4 627
761 4 627
762 4 627
763 4 627
106 4 627
123 4 627
140 4 627
919 4 627
989 4 627
106 5 627
196 5 627
1050 5 627
210 5 627
1549 5 627
2723 5 627
2882 5 627
627 5 627
627 5 627
627 5 627
731 5 627
793 5 627
849 6 627
106 6 627
106 6 627
1051 6 627
1549 6 627
1749 6 627
209 6 627
209 6 627
1826 6 627
210 6 627
210 6 627
367 6 627
2198 6 627
2452 6 627
2651 6 627
406 6 627
627 6 627
627 6 627
627 6 627
627 6 627
627 6 627
627 6 627
731 6 627
731 6 627
753 6 627
.I 628
.T
Floating-Point Number Representation
Use Algorithmic Languages
.B
CACM March, 1962
.A
Grau, A. A.
.N
CA620304 JB March 20, 1978 3:09 PM
.X
628 5 628
628 5 628
628 5 628
.I 629
.T
Wired-In Binary-to-Decimal Conversion Scheme
.B
CACM March, 1962
.A
Lynch, W. C.
.N
CA620303 JB March 20, 1978 3:10 PM
.X
629 5 629
629 5 629
629 5 629
.I 630
.T
Evaluation Autocode Readability
.W
many requirements autocode,
pair requirements "easy read" "easy
write" not often compatible. paper argues
readability can added automatically
translation process so programmer can
enjoy utmost economy expression, while
management full valid COBOL version printed give
all advantages readability compatibility.
.B
CACM March, 1962
.A
Ellis, P. V.
.N
CA620302 JB March 20, 1978 3:15 PM
.X
630 5 630
630 5 630
630 5 630
.I 631
.T
Automatic-Programming-Language Translation Through Syntactical Analysis*
.B
CACM March, 1962
.A
Ledley, R.S.
Wilson, J. B.
.N
CA620301 JB March 20, 1978 3:17 PM
.X
249 4 631
254 4 631
272 4 631
1046 4 631
1102 4 631
1105 4 631
1109 4 631
1139 4 631
1140 4 631
1140 4 631
1188 4 631
1234 4 631
1263 4 631
1265 4 631
1306 4 631
1464 4 631
1491 4 631
1496 4 631
1767 4 631
1781 4 631
1781 4 631
1787 4 631
1824 4 631
1949 4 631
321 4 631
2059 4 631
2126 4 631
2126 4 631
2546 4 631
435 4 631
437 4 631
463 4 631
464 4 631
483 4 631
491 4 631
2732 4 631
560 4 631
583 4 631
584 4 631
3073 4 631
627 4 631
631 4 631
631 4 631
632 4 631
642 4 631
644 4 631
653 4 631
653 4 631
680 4 631
680 4 631
761 4 631
762 4 631
763 4 631
763 4 631
795 4 631
799 4 631
123 4 631
140 4 631
919 4 631
945 4 631
989 4 631
196 5 631
1139 5 631
1265 5 631
1665 5 631
404 5 631
631 5 631
631 5 631
631 5 631
763 5 631
196 6 631
1781 6 631
224 6 631
224 6 631
378 6 631
399 6 631
404 6 631
404 6 631
404 6 631
412 6 631
438 6 631
464 6 631
464 6 631
3184 6 631
631 6 631
631 6 631
631 6 631
631 6 631
635 6 631
799 6 631
.I 632
.T
Vectorcardiographic Diagnosis Aid ALGOL
.B
CACM February, 1962
.A
Forsythe, G. E.
Von Der Groeben, J.
Toole, J. G.
.N
CA620211 JB March 20, 1978 3:41 PM
.X
249 4 632
254 4 632
272 4 632
1102 4 632
1109 4 632
1140 4 632
1188 4 632
1306 4 632
1464 4 632
1491 4 632
1767 4 632
1781 4 632
1787 4 632
1949 4 632
321 4 632
2059 4 632
2126 4 632
435 4 632
437 4 632
463 4 632
483 4 632
491 4 632
2732 4 632
560 4 632
583 4 632
3073 4 632
627 4 632
631 4 632
632 4 632
642 4 632
644 4 632
653 4 632
680 4 632
761 4 632
762 4 632
763 4 632
123 4 632
140 4 632
919 4 632
989 4 632
196 5 632
632 5 632
632 5 632
632 5 632
.I 633
.T
Simulation Analysis Biochemical Systems
(III. Analysis Pattern Recognition)
.B
CACM February, 1962
.A
Garfinkel, D.
Polk, W.
Higgins, J. J.
Ochser, R. T.
.N
CA620210 JB March 20, 1978 3:43 PM
.X
238 4 633
633 4 633
633 4 633
643 4 633
238 5 633
633 5 633
633 5 633
633 5 633
643 5 633
238 6 633
633 6 633
633 6 633
643 6 633
.I 634
.T
Manipulation Trees Information Retrieval*
.B
CACM February, 1962
.A
Salton, G.
.N
CA620209 JB March 20, 1978 3:44 PM
.X
1087 4 634
634 4 634
931 5 634
1324 5 634
329 5 634
634 5 634
634 5 634
634 5 634
202 6 634
396 6 634
634 6 634
634 6 634
652 6 634
653 6 634
.I 635
.T
Note Multiplying Boolean Matrices
.B
CACM February, 1962
.A
Baker, J. J.
.N
CA620208 JB March 20, 1978 3:45 PM
.X
1151 5 635
1265 5 635
2769 5 635
635 5 635
635 5 635
635 5 635
404 6 635
464 6 635
3184 6 635
631 6 635
635 6 635
635 6 635
635 6 635
.I 636
.T
Tape Splitting Iterative Program
.B
CACM February, 1962
.A
Weisert, C.
.N
CA620207 JB March 20, 1978 3:46 PM
.X
1117 5 636
636 5 636
636 5 636
636 5 636
861 6 636
862 6 636
636 6 636
.I 637
.T
NELIAC-Generated 7090-1401 Compiler
.W
NELIAC systems several different machines
have been generated using original NELIAC
system developed Naval Electronics Laboratory,
San Diego, 1958. basic "bootstrap" process
used generate all but first, i.e. systems
were described NELIAC language generated
existing NELIAC compiler. experience has
shown there no inherent difficulty "building
compilers compilers"; indeed, pointed out many advantages
using POL constructing programming
systems. report presents results project
completed May, 1961 which NELIAC system
used generate compiler IBM 1401.
1401 compiler, which runs 7090 produces
1401 programs, described NELIAC language
generated 7090 NELIAC system. reduction
programming time improvement documentation
system were very significant.
.B
CACM February, 1962
.A
Watt, J. B.
Wattenburg, W. H.
.N
CA620206 JB March 20, 1978 3:52 PM
.X
1781 4 637
637 4 637
637 4 637
123 4 637
123 5 637
165 5 637
637 5 637
637 5 637
637 5 637
.I 638
.T
SURGE: Recoding COBOL Merchandise Control Algorithm
.B
CACM February, 1962
.A
Longo, L. F.
.N
CA620205 JB March 20, 1978 3:53 PM
.X
638 4 638
300 5 638
638 5 638
638 5 638
638 5 638
.I 639
.T
Difference Expression Coefficients (Algorithm 79)
.B
CACM February, 1962
.A
Giammo, T. P.
.N
CA620204 JB March 20, 1978 3:54 PM
.X
639 5 639
639 5 639
639 5 639
.I 640
.T
Rational Roots Polynomials Integer Coefficients (Algorithm 78)
.B
CACM February, 1962
.A
Perry, C.
.N
CA620203 JB March 20, 1978 3:55 PM
.X
640 5 640
640 5 640
640 5 640
.I 641
.T
Interpolation, Differentiation, Integration (Algorithm 77)
.B
CACM February, 1962
.A
Hennion, P. E.
.N
CA620202 JB March 20, 1978 3:56 PM
.X
641 5 641
641 5 641
641 5 641
.I 642
.T
Introduction ALGOL
.B
CACM February, 1962
.A
Schwarz, H. R.
.N
CA620201 JB March 20, 1978 3:57 PM
.X
205 4 642
210 4 642
214 4 642
249 4 642
254 4 642
272 4 642
1102 4 642
1109 4 642
1140 4 642
1188 4 642
1306 4 642
1464 4 642
1491 4 642
1767 4 642
1781 4 642
1787 4 642
1949 4 642
1982 4 642
321 4 642
398 4 642
2059 4 642
2126 4 642
435 4 642
437 4 642
463 4 642
483 4 642
491 4 642
2732 4 642
560 4 642
583 4 642
3073 4 642
627 4 642
631 4 642
632 4 642
642 4 642
642 4 642
644 4 642
653 4 642
669 4 642
680 4 642
761 4 642
762 4 642
763 4 642
100 4 642
123 4 642
123 4 642
140 4 642
164 4 642
919 4 642
989 4 642
196 5 642
1 5 642
1173 5 642
1188 5 642
642 5 642
642 5 642
642 5 642
196 6 642
642 6 642
642 6 642
.I 643
.T
Simulation Analysis Biochemcial Systems
(II. Solution Differential Equations)
.B
CACM January, 1962
.A
Larson, R.
Sellers, P.
Meyer, R.
.N
CA620116 JB March 20, 1978 3:58 PM
.X
238 4 643
633 4 643
643 4 643
643 4 643
238 5 643
633 5 643
643 5 643
643 5 643
643 5 643
238 6 643
633 6 643
643 6 643
643 6 643
.I 644
.T
String Language Symbol Manipulation Based ALGOL 60
.W
artificial computer programming language
proposed describing manipulation
strings characters symbols. concept strings,
introduced ALGOL 60 report, extended
adding: (1) declaration strings, substrings,
string arrays explicit lengths; (2)
ability concatenate shift strings; (3)
ranking symbols comparing stings Boolean
relations. primer informal description
language followed examples, description
experiments language IBM 704 computer,
formal description which, taken
ALGOL 60 Report, defines proposed string language.
.B
CACM January, 1962
.A
Wegstein, J. H.
Youden, W. W.
.N
CA620115 JB March 20, 1978 4:02 PM
.X
249 4 644
254 4 644
272 4 644
1102 4 644
1109 4 644
1140 4 644
1188 4 644
1306 4 644
1464 4 644
1491 4 644
1767 4 644
1781 4 644
1787 4 644
1949 4 644
321 4 644
2059 4 644
2126 4 644
435 4 644
437 4 644
463 4 644
483 4 644
491 4 644
2732 4 644
560 4 644
583 4 644
3073 4 644
627 4 644
631 4 644
632 4 644
642 4 644
644 4 644
644 4 644
644 4 644
653 4 644
680 4 644
761 4 644
762 4 644
763 4 644
123 4 644
140 4 644
919 4 644
989 4 644
196 5 644
1084 5 644
206 5 644
207 5 644
644 5 644
644 5 644
644 5 644
868 6 644
603 6 644
644 6 644
669 6 644
791 6 644
797 6 644
.I 645
.T
INVRS (Algorithm 66)
.B
CACM January, 1962
.A
Randell, B.
Broyden, C. G.
.N
CA620114 JB March 20, 1978 4:04 PM
.X
645 5 645
645 5 645
645 5 645
.I 646
.T
Inverse Finite Segment Hilbert Matrix (Algorithm 50)
.B
CACM January, 1962
.A
Randell, B.
.N
CA620113 JB March 20, 1978 4:31 PM
.X
646 5 646
646 5 646
646 5 646
.I 647
.T
Numerical Solution Polynomial Equation (Algorithm 30)
.B
CACM January, 1962
.A
Cohen, K. J.
.N
CA620112 JB March 20, 1978 4:32 PM
.X
647 5 647
647 5 647
647 5 647
.I 648
.T
Sorting Procedures (Algorithm 76)
.B
CACM January, 1962
.A
Flores, I.
.N
CA620111 JB March 20, 1978 4:33 PM
.X
648 5 648
648 5 648
648 5 648
.I 649
.T
FACTORS (Algorithm 75)
.B
CACM January, 1962
.A
Peck, J. E. L.
.N
CA620110 JB March 20, 1978 4:34 PM
.X
649 5 649
649 5 649
649 5 649
.I 650
.T
Curve Fitting Constraints (Algorithm 74)
.B
CACM January, 1962
.A
Peck, J. E. L.
.N
CA620109 JB March 20, 1978 4:35 PM
.X
650 5 650
650 5 650
650 5 650
.I 651
.T
Survey Languages Systems Information Retrieval
.B
CACM January, 1962
.A
Grems, M.
.N
CA620108 JB March 20, 1978 4:36 PM
.X
651 5 651
651 5 651
651 5 651
.I 652
.T
Use Semantic Structure Information Systems
.B
CACM January, 1962
.A
Sable, J. D.
.N
CA620107 JB March 20, 1978 4:37 PM
.X
1324 5 652
652 5 652
652 5 652
652 5 652
634 6 652
652 6 652
653 6 652
.I 653
.T
Translation Retrieval Requests Couched
"Semiformal" English-Like Language*
.B
CACM January, 1962
.A
Cheatham Jr., T. E.
Warshall, S.
.N
CA620106 JB March 20, 1978 4:39 PM
.X
249 4 653
254 4 653
272 4 653
1046 4 653
1102 4 653
1105 4 653
1109 4 653
1139 4 653
1140 4 653
1140 4 653
1188 4 653
1234 4 653
1263 4 653
1265 4 653
1306 4 653
1464 4 653
1491 4 653
1496 4 653
1767 4 653
1781 4 653
1781 4 653
1787 4 653
1824 4 653
1949 4 653
321 4 653
2059 4 653
2126 4 653
2126 4 653
2546 4 653
435 4 653
437 4 653
463 4 653
464 4 653
483 4 653
491 4 653
2732 4 653
560 4 653
583 4 653
584 4 653
3073 4 653
627 4 653
631 4 653
631 4 653
632 4 653
642 4 653
644 4 653
653 4 653
653 4 653
680 4 653
680 4 653
761 4 653
762 4 653
763 4 653
763 4 653
795 4 653
799 4 653
123 4 653
140 4 653
919 4 653
945 4 653
989 4 653
196 5 653
1324 5 653
404 5 653
653 5 653
653 5 653
653 5 653
892 5 653
634 6 653
652 6 653
653 6 653
653 6 653
656 6 653
.I 654
.T
Language Problems Posed Heavily Structured Data
.B
CACM January, 1962
.A
Barnes, R. F.
.N
CA620105 JB March 20, 1978 4:40 PM
.X
654 5 654
654 5 654
654 5 654
.I 655
.T
COMIT IR Language
.W
Many features make COMIT good
all around symbol manipulation language also render
well suited various types information retrieval
programs. Presented here general discussion
unique different programming language
examination some its applications.
.B
CACM January, 1962
.A
Yngve, V. H.
.N
CA620104 JB March 20, 1978 4:46 PM
.X
1145 5 655
655 5 655
655 5 655
655 5 655
655 6 655
.I 656
.T
Information System Ability Extract Intelligence Data
.B
CACM January, 1962
.A
Wang, T. L.
.N
CA620103 JB March 20, 1978 4:47 PM
.X
1309 5 656
656 5 656
656 5 656
656 5 656
892 5 656
653 6 656
656 6 656
656 6 656
.I 657
.T
Information Structures Processing Retrieving
.B
CACM January, 1962
.A
Colilla, R. A.
Sams, B. H.
.N
CA620102 JB March 20, 1978 4:48 PM
.X
657 4 657
657 4 657
1136 5 657
279 5 657
409 5 657
657 5 657
657 5 657
657 5 657
493 6 657
616 6 657
657 6 657
.I 658
.T
Discussion-The Pros Cons Special IR Language
.B
CACM January, 1962
.A
Sammet, J. E.
Ohlman, H.
Bohnest, H. G.
.N
CA620101 JB March 20, 1978 4:50 PM
.X
658 5 658
658 5 658
658 5 658
.I 659
.T
Reversion Series (Algorithm 193)
.B
CACM December, 1963
.A
Thacher Jr., H. C.
.N
CA631215 JB March 23, 1978 8:08 PM
.X
1121 4 659
659 4 659
964 4 659
659 5 659
659 5 659
659 5 659
759 5 659
.I 660
.T
More Test Matrices Determinants Inverses (Pracnique)
.B
CACM December, 1963
.A
Englar, T. S.
.N
CA631214 JB March 13, 1978 2:46 PM
.X
660 5 660
660 5 660
660 5 660
.I 661
.T
Indexing Lambda-Notation
.W
Some methods indexing sequentially stored
elements sparse multi-dimensional arrays
described scheme notation.
.B
CACM December, 1963
.A
Barnett, M. P.
.N
CA631213 JB March 13, 1978 2:51 PM
.X
661 5 661
661 5 661
661 5 661
.I 662
.T
Shuttle Sort (Algorithm 175)
.B
CACM December, 1963
.A
Juelich, O. C.
.N
CA631212 JB March 13, 1978 2:52 PM
.X
662 5 662
662 5 662
662 5 662
.I 663
.T
Determinant (Algorithm 159)
.B
CACM December, 1963
.A
Lapidus, A.
.N
CA631211 JB March 13, 1978 2:53 PM
.X
663 5 663
663 5 663
663 5 663
.I 664
.T
Assignment (Algorithm 27)
.B
CACM December, 1963
.A
Witty, R. D.
.N
CA631210 JB March 13, 1978 2:54 PM
.X
664 5 664
664 5 664
664 5 664
.I 665
.T
Gauss-Seidel (Algorithm 220)
.B
CACM December, 1963
.A
Shantz, P. W.
.N
CA631209 JB March 13, 1978 2:55 PM
.X
665 5 665
665 5 665
665 5 665
.I 666
.T
Topological Ordering Pert Networks (Algorithm 219)
.B
CACM December, 1963
.A
Kase, R. H.
.N
CA631208 JB March 13, 1978 2:56 PM
.X
1916 5 666
666 5 666
666 5 666
666 5 666
1533 6 666
666 6 666
.I 667
.T
Kutta Merson (Algorithm 218)
.B
CACM December, 1963
.A
Lukehart, P. M.
.N
CA631207 JB March 13, 1978 2:57 PM
.X
667 5 667
667 5 667
667 5 667
.I 668
.T
Minimum Excess Cost Curve (Algorithm 217)
.B
CACM December, 1963
.A
Briggs, W. A.
.N
CA631206 JB March 13, 1978 2:58 PM
.X
668 5 668
668 5 668
668 5 668
.I 669
.T
Specification JOVIAL
.B
CACM December, 1963
.A
Shaw, C. J.
.N
CA631205 JB March 13, 1978 2:59 PM
.X
205 4 669
210 4 669
214 4 669
1086 4 669
1132 4 669
1234 4 669
1263 4 669
1265 4 669
1270 4 669
1323 4 669
1358 4 669
1379 4 669
1380 4 669
1453 4 669
1464 4 669
1484 4 669
1491 4 669
1498 4 669
1613 4 669
1614 4 669
1781 4 669
1781 4 669
1825 4 669
1860 4 669
1982 4 669
398 4 669
2083 4 669
2178 4 669
2179 4 669
2252 4 669
2325 4 669
2341 4 669
2546 4 669
2645 4 669
2652 4 669
2684 4 669
2842 4 669
2929 4 669
2934 4 669
3069 4 669
642 4 669
669 4 669
669 4 669
669 4 669
679 4 669
691 4 669
761 4 669
100 4 669
123 4 669
164 4 669
949 4 669
989 4 669
1 5 669
1084 5 669
1379 5 669
1625 5 669
1945 5 669
410 5 669
3184 5 669
669 5 669
669 5 669
669 5 669
823 6 669
868 6 669
914 6 669
915 6 669
917 6 669
984 6 669
989 6 669
990 6 669
1012 6 669
1084 6 669
1098 6 669
1122 6 669
1138 6 669
1139 6 669
1141 6 669
1200 6 669
1223 6 669
1248 6 669
1263 6 669
1265 6 669
1336 6 669
1396 6 669
1455 6 669
1477 6 669
1477 6 669
1487 6 669
1491 6 669
1496 6 669
483 6 669
3184 6 669
584 6 669
603 6 669
644 6 669
669 6 669
669 6 669
669 6 669
669 6 669
680 6 669
761 6 669
763 6 669
791 6 669
797 6 669
.I 670
.T
Some Legal Implications Use Computers Banking Business
.W
introduction computers banking
business has wide variety legal implications
merit careful attention very early stage.
industry highly regulated government
and, hence, subject many statutes regulations.
also affected important common law
rules established courts. legal ramifications
involve not only mechanization itself, but
also very significant, economically attractive phenomenon
off premises processing. essential
identify provide many legal aspects right
now, before systems practices crystallize,
order avoid later impact unanticipated physical
complications expense. legal aspects
computerization banking business especially
diverse. some states, there might
basic question whether banks authorized law
invest new facilities, either directly
through cooperatives. More challenging questions
relating off-premises processors, particularly
respect obligation not disclose information
concerning bank's customers, adequacy
fidelity bond coverage, extent liability
improper refusal pay check, susceptibility
regulation government agencies. Also pertinent
propriety data processing banks
nonbank entities particularly rendering
service without charge bank depositors.
.B
CACM December, 1963
.A
Freed, R. N.
.N
CA631204 JB March 13, 1978 3:09 PM
.X
670 5 670
670 5 670
670 5 670
.I 671
.T
TELEFILE-A Case Study On-Line Savings Bank Application
.W
development on-line computer system
savings bank institution traced
early conceptual needs bank consummation
design Teleregister Corporation.
Both bank equipment criteria specified which
led development Telefile System
Teleregister Corporation. Operation on-line
off-line programs described statistics
cited reliability performance system.
Benefits bank discussed
banker's point view; indication future trends
on-line savings bank field also discussed.
.B
CACM December, 1963
.A
Sanders, M.
.N
CA631203 JB March 13, 1978 3:13 PM
.X
671 5 671
671 5 671
671 5 671
.I 672
.T
Recent Developments Affecting ADP Tax Administration
.B
CACM December, 1963
.A
Leibowitz, G. J.
.N
CA631202 JB March 13, 1978 3:14 PM
.X
672 5 672
672 5 672
672 5 672
.I 673
.T
Account Classification Automating Banks
.B
CACM December, 1963
.A
Eckert, J. B.
.N
CA631201 JB March 13, 1978 3:15 PM
.X
673 5 673
673 5 673
673 5 673
.I 674
.T
Application IBM 1620 EDP Methods Calculation
Formation Constants Complex
Irons
.B
CACM November, 1963
.A
Andrews, A. C.
Hassler, J.
DeCou, F.
.N
CA631118 JB March 13, 1978 3:18 PM
.X
674 5 674
674 5 674
674 5 674
.I 675
.T
Coding Clinical Laboratory Data Automatic Storage Retrieval
.W
series clinical laboratory codes have been
developed accept store urin analysis, blood
chemistry, hematology test results automatic
data processing. codes, although constructed
part computerized hospital simulation, have been
able handle results every laboratory
test they have encountered. unique feature
these codes they can accept conventionally
recorded qualitative well quantitative test results.
Consequently, clinical test results need
not arbitrarily stratified, standardized, altered
any way coded. paper describes
codes were developed presents listing
urin analysis codes. Five criteria used developing
codes outlined problem multiple-synonymous
terminology discussed. solution
problem described. Flexible, computer-produced,
composite laboratory reports also discussed,
along reproduction such report. paper concludes
even though many problems remain unsolved,
next ten years could witness emergence practical
automated information system laboratory.
.B
CACM November, 1963
.A
Gross, L. D.
.N
CA631117 JB March 13, 1978 3:26 PM
.X
675 5 675
675 5 675
675 5 675
.I 676
.T
Computation Certain Type IncompleteBeta Functions
.B
CACM November, 1963
.A
Tang, I. C.
.N
CA631116 JB March 13, 1978 3:27 PM
.X
676 5 676
676 5 676
676 5 676
.I 677
.T
Length Strings Merge Sort
.W
Detailed statistics given length
maximal sorted strings which result form
first (internal sort) phase merge sort onto tapes.
shown strings produced
alternating method (i.e. one which produces ascending
descending strings alternately) tend
only three-fourths long those method which produces
only ascending strings, contrary statements
which have appeared previously literature.
slight modification read-backward polyphase
merge algorithm therefore suggested.
.B
CACM November, 1963
.A
Knuth, D. E.
.N
CA631115 JB March 13, 1978 3:31 PM
.X
1117 4 677
2017 4 677
2146 4 677
677 4 677
860 4 677
1638 5 677
2176 5 677
2272 5 677
677 5 677
677 5 677
677 5 677
861 5 677
1638 6 677
677 6 677
677 6 677
677 6 677
.I 678
.T
Optimizing Bit-time Computer Simulation
.W
major component bit-time computer simulation
program Boolean compiler. compiler
accepts Boolean functions representing simulated computer's
digital circuits, generates corresponding
sets machine instructions which subsequently
executed "host" computer. Techniques
discussed increasing sophistication Boolean
compiler so optimize bit-time computer
simulation. techniques applicable any general-purpose computer.
.B
CACM November, 1963
.A
Katz,J. H.
.N
CA631114 JB March 13, 1978 3:34 PM
.X
678 4 678
1030 5 678
270 5 678
1886 5 678
1939 5 678
678 5 678
678 5 678
678 5 678
1030 6 678
678 6 678
678 6 678
678 6 678
.I 679
.T
Recent Improvements MADCAP
.W
MADCAP programming language admitting subscripts,
superscripts certain forms displayed
formulas. basic implementation language
described previous paper [MADCAP: scientific
compiler displayed formula textbook language, Comm.
ACM 4 (Jan. 61), 31-36]. paper discusses
recent improvements language three areas: complex
display, logical control, subprogramming.
area complex display, most prominent improvements
notation integration
binomial coefficients. area logical control
chief new feature notation variably
nested looping. discussion subprogramming focused
MADCAP's notation use "procedures."
.B
CACM November, 1963
.A
Wells, M. B.
.N
CA631113 JB March 13, 1978 3:39 PM
.X
1083 4 679
1086 4 679
1132 4 679
1234 4 679
1263 4 679
1265 4 679
1270 4 679
1323 4 679
1358 4 679
1379 4 679
1380 4 679
1396 4 679
1453 4 679
1464 4 679
1484 4 679
1491 4 679
1498 4 679
1613 4 679
1614 4 679
1781 4 679
1825 4 679
1860 4 679
2083 4 679
2178 4 679
2179 4 679
2252 4 679
2325 4 679
2341 4 679
2546 4 679
2645 4 679
2652 4 679
2684 4 679
2842 4 679
2929 4 679
2934 4 679
3069 4 679
669 4 679
679 4 679
679 4 679
679 4 679
691 4 679
761 4 679
949 4 679
989 4 679
407 5 679
21 5 679
3184 5 679
679 5 679
679 5 679
679 5 679
.I 680
.T
Error-Correcting Parse Algorithm
.B
CACM November, 1963
.A
Irons, E. T.
.N
CA631112 JB March 13, 1978 3:40 PM
.X
249 4 680
254 4 680
272 4 680
1046 4 680
1102 4 680
1105 4 680
1109 4 680
1139 4 680
1140 4 680
1140 4 680
1188 4 680
1234 4 680
1263 4 680
1265 4 680
1306 4 680
1464 4 680
1491 4 680
1496 4 680
1767 4 680
1781 4 680
1781 4 680
1787 4 680
1824 4 680
1949 4 680
321 4 680
2059 4 680
2126 4 680
2126 4 680
2546 4 680
435 4 680
437 4 680
463 4 680
464 4 680
483 4 680
491 4 680
2732 4 680
560 4 680
583 4 680
584 4 680
3073 4 680
627 4 680
631 4 680
631 4 680
632 4 680
642 4 680
644 4 680
653 4 680
653 4 680
680 4 680
680 4 680
761 4 680
762 4 680
763 4 680
763 4 680
795 4 680
799 4 680
123 4 680
140 4 680
919 4 680
945 4 680
989 4 680
196 5 680
1225 5 680
1350 5 680
1646 5 680
1781 5 680
1945 5 680
2650 5 680
2698 5 680
2708 5 680
404 5 680
3093 5 680
680 5 680
680 5 680
680 5 680
823 6 680
830 6 680
830 6 680
123 6 680
196 6 680
914 6 680
915 6 680
917 6 680
919 6 680
984 6 680
987 6 680
989 6 680
990 6 680
990 6 680
1007 6 680
1012 6 680
1012 6 680
1012 6 680
1046 6 680
1072 6 680
1084 6 680
1098 6 680
1122 6 680
1131 6 680
1138 6 680
1139 6 680
1139 6 680
1140 6 680
1141 6 680
1149 6 680
1179 6 680
1198 6 680
1200 6 680
1215 6 680
1223 6 680
1223 6 680
1225 6 680
1265 6 680
1265 6 680
1265 6 680
1303 6 680
1323 6 680
1336 6 680
1358 6 680
1366 6 680
1396 6 680
1399 6 680
1421 6 680
1455 6 680
1460 6 680
1462 6 680
1463 6 680
1467 6 680
1468 6 680
1477 6 680
1477 6 680
1477 6 680
1477 6 680
1487 6 680
1491 6 680
1491 6 680
1491 6 680
1491 6 680
1491 6 680
1496 6 680
1496 6 680
1531 6 680
1535 6 680
1565 6 680
1601 6 680
1602 6 680
1613 6 680
1614 6 680
1626 6 680
1641 6 680
1647 6 680
1781 6 680
1787 6 680
1787 6 680
1788 6 680
205 6 680
224 6 680
249 6 680
288 6 680
316 6 680
381 6 680
398 6 680
2110 6 680
2111 6 680
2111 6 680
11 6 680
2179 6 680
2534 6 680
2556 6 680
2556 6 680
2708 6 680
404 6 680
410 6 680
463 6 680
464 6 680
483 6 680
483 6 680
3184 6 680
3188 6 680
576 6 680
584 6 680
584 6 680
600 6 680
669 6 680
680 6 680
680 6 680
680 6 680
680 6 680
680 6 680
680 6 680
680 6 680
680 6 680
680 6 680
691 6 680
763 6 680
763 6 680
799 6 680
799 6 680
.I 681
.T
Flexible Abbreviation Words Computer Language
.B
CACM November, 1963
.A
Lomis, R. G.
Rubin, J.
.N
CA631111 JB March 13, 1978 3:42 PM
.X
681 5 681
681 5 681
681 5 681
.I 682
.T
Recursive programming FORTRAN II
.B
CACM November, 1963
.A
Ayers, J. A.
.N
CA631110 JB March 13, 1978 3:43 PM
.X
682 5 682
682 5 682
682 5 682
.I 683
.T
Serial Technique Determine Minimum Paths
.B
CACM November, 1963
.A
Weimer, D. L.
.N
CA631109 JB March 13, 1978 3:44 PM
.X
683 5 683
683 5 683
683 5 683
.I 684
.T
Interpolation, Differentiation, Integration (Algorithm 77)
.B
CACM November, 1963
.A
Hennion, P. E.
.N
CA631108 JB March 13, 1978 3:45 PM
.X
684 5 684
684 5 684
684 5 684
.I 685
.T
Euler Summation (Algorithm 8)
.B
CACM November, 1963
.A
Thacher Jr., H. C.
.N
CA631108 JB March 13, 1978 3:46 PM
.X
685 5 685
685 5 685
685 5 685
.I 686
.T
Smooth (Algorithm 216)
.B
CACM November, 1963
.A
George, R.
.N
CA631106 JB March 13, 1978 3:47 PM
.X
686 5 686
686 5 686
686 5 686
.I 687
.T
Shanks (Algorithm 215)
.B
CACM November, 1963
.A
Thacher Jr., H. C.
.N
CA631105 JB March 13, 1978 3:48 PM
.X
687 5 687
687 5 687
687 5 687
.I 688
.T
q-Bessel Functions In(t)(Algorithm 214)
.B
CACM November, 1963
.A
Simoes Pereira, J. M. S.
.N
CA631104 JB March 13, 1978 3:49 PM
.X
688 5 688
688 5 688
688 5 688
.I 689
.T
Report Visit Discuss Common Programming
Languages Czechoslovakia Poland, 1963
.B
CACM November, 1963
.A
Gosden, J. A.
Merner, J. N.
Gay, R. E.
Jones, J. L.
Christopher, J. S.
.N
CA631103 JB March 13, 1978 3:51 PM
.X
1349 4 689
323 4 689
689 4 689
689 4 689
689 4 689
217 5 689
323 5 689
3197 5 689
689 5 689
689 5 689
689 5 689
.I 690
.T
USA Participation International
Standard glossary Information Processing
.B
CACM November, 1963
.A
Traub, J. F.
.N
CA631102 JB March 13, 1978 3:52 PM
.X
690 4 690
690 4 690
690 4 690
929 5 690
3195 5 690
690 5 690
690 5 690
690 5 690
890 5 690
.I 691
.T
Description APT Language
.W
APT (Automatically Programmed Tools) language
numerical control programming described
using metalinguistic notation introduced ALGOL
60 report. Examples APT usage included.
Presented also historical summary development
APT statement concerning its present
status.
.B
CACM November, 1963
.A
Brown, S. A.
Drayton, C. E.
Mittman, B.
.N
CA631101 JB March 13, 1978 3:59 PM
.X
1086 4 691
1132 4 691
1234 4 691
1263 4 691
1265 4 691
1270 4 691
1323 4 691
1358 4 691
1379 4 691
1380 4 691
1453 4 691
1464 4 691
1484 4 691
1491 4 691
1498 4 691
1613 4 691
1614 4 691
1781 4 691
1825 4 691
1860 4 691
1945 4 691
2083 4 691
2126 4 691
2178 4 691
2179 4 691
2252 4 691
2325 4 691
2341 4 691
2546 4 691
2645 4 691
2652 4 691
2684 4 691
2842 4 691
2929 4 691
2934 4 691
3069 4 691
669 4 691
679 4 691
691 4 691
691 4 691
761 4 691
949 4 691
989 4 691
1781 5 691
3184 5 691
691 5 691
691 5 691
691 5 691
823 5 691
123 6 691
196 6 691
919 6 691
990 6 691
1007 6 691
1046 6 691
1131 6 691
1139 6 691
1140 6 691
1149 6 691
1198 6 691
1215 6 691
1223 6 691
1265 6 691
1303 6 691
1323 6 691
1358 6 691
1366 6 691
1421 6 691
1460 6 691
1462 6 691
1463 6 691
1467 6 691
1468 6 691
1477 6 691
1491 6 691
1496 6 691
1531 6 691
1535 6 691
1565 6 691
1601 6 691
1602 6 691
1613 6 691
1614 6 691
1626 6 691
1641 6 691
1787 6 691
1788 6 691
205 6 691
224 6 691
249 6 691
288 6 691
316 6 691
381 6 691
398 6 691
11 6 691
404 6 691
410 6 691
463 6 691
464 6 691
483 6 691
3184 6 691
3188 6 691
584 6 691
600 6 691
680 6 691
691 6 691
763 6 691
799 6 691
.I 692
.T
Inverse Test Matrix
.B
CACM October, 1963
.A
Stockmal, F. J.
.N
CA631033 JB March 27, 1978 9:00 PM
.X
692 5 692
692 5 692
692 5 692
.I 693
.T
Extension Fibonaccian Search Several Variables
.W
technique which uses Fibonaccian search
concepts has been developed solve optimization
problems involving unimodal functions several variables.
technique has not been proven
optimal sense one-dimensional Fibonaccian
search is. However, valuable certain
kinds calculations.
.B
CACM October, 1963
.A
Krolak, P.
Cooper, L.
.N
CA631032 JB March 13, 1978 4:19 PM
.X
693 5 693
693 5 693
693 5 693
.I 694
.T
Comparison Disks Tapes
.W
principal characteristics current magnetic
disks tape units summarized compared.
Some characteristics disk files illustrated
sorting example compared tapesort.
conclusion presented disk files competitive
tapes some important applications.
.B
CACM October, 1963
.A
Hess, H.
.N
CA631031 JB March 13, 1978 4:21 PM
.X
694 5 694
694 5 694
694 5 694
.I 695
.T
Use Disk File Stretch
.W
paper begins briefly describing
Stretch (IBM 7030) computer special emphasis
given organization operation its input-output
equipment. Physical characteristics
two-disk system (4,194,304 72-bit words, 8 usec-per-word
transmission rate, etc.) noted. Timing
limitations due arm motion disk rotation discussed.
Applications disk usage discussed
separately problem programs systems programs
such compilers supervisory program.
Approximately 260,000 words disk storage reserved
storage systems programs
subroutine library. Problem programs, however, not
currently filed disk. Certain programming
techniques discussed transmitting words between
disk core storage minimum delaying
interruption arithmetic unit. Dumps disk
considered both recovery computer malfunction
mathematical physical developments during
calculation. Some comments made regarding
reliability, economics, utility weaknesses
limitations disk system. Several possible
future applications noted which appear have disk connotations.
.B
CACM October, 1963
.A
Carlson, B. G.
Voorhes, E. A.
.N
CA631030 JB March 13, 1978 4:28 PM
.X
695 5 695
695 5 695
695 5 695
.I 696
.T
Automatic Data Acquisition Inquiry System Using Disk Files
.W
Lockheed Missiles Space Company has installed
large-scale Automatic Data Acquisition
(ADA) system which ties together Company's manufacturing
facilities located Van Nuys Sunnyvale,
California. system includes over 200 remote Input
Stations which collect transmit Company operating
data central Data Processing Center. Two RCA 301
EDP Systems used record control
flow data transmitted Data Processing Center.
large capacity RCA 366 Data Disc File used
store information required provide up-to-date
information response inquiries received
remotely located Inquiry Stations. addition storage
data disk files, system automatically
records all incoming outgoing data magnetic tape
used input Company's conventional
off-line business data processing applications.
.B
CACM October, 1963
.A
Edwards, J. D.
.N
CA631029 JB March 13, 1978 4:34 PM
.X
696 5 696
696 5 696
696 5 696
.I 697
.T
Numerical Method Determination Moving
Field Isodose Curves Treatment Planning
Radiotherapy
.B
CACM October, 1963
.A
Dalrymple, G. V.
Perez-Tamayo, R.
.N
CA631028 JB March 13, 1978 5:19 PM
.X
697 5 697
697 5 697
697 5 697
.I 698
.T
DATA-DIAL: Two-Way Communication
Computers Ordinary dial Telephones
.W
operating system described which allows
users call up remotely located computer
ordinary dial telephones. No special hardware
connections required users' telephones.
Input computer through telephone dial;output
computer spoken form. Results
test telephones Boston area reported.
.B
CACM October, 1963
.A
Marill, T.
Edwards, D.
Feurzeig, W.
.N
CA631027 JB March 13, 1978 5:23 PM
.X
1181 5 698
698 5 698
698 5 698
698 5 698
698 6 698
.I 699
.T
Contour-Map Program X-Ray Crystallography
.W
FORTRAN program described use
IBM 7090 system X, Y-plotter produce
contour map. matrix points evenly spaced
each dimension contoured. Scale factors along
axes may different axes need not perpendicular.
.B
CACM October, 1963
.A
Dayhoff, M. O.
.N
CA631026 JB March 13, 1978 5:26 PM
.X
2633 5 699
699 5 699
699 5 699
699 5 699
699 6 699
.I 700
.T
Hermite Interpolation (Algorithm 210)
.B
CACM October, 1963
.A
Dwyer, T. A.
.N
CA631025 JB March 13, 1978 5:27 PM
.X
700 5 700
700 5 700
700 5 700
.I 701
.T
Shuttle Sort (Algorithm 175)
.B
CACM October, 1963
.A
Schubert, G. R.
.N
CA631024 JB March 13, 1978 5:29 PM
.X
701 5 701
701 5 701
701 5 701
.I 702
.T
Assign (Algorithm 173)
.B
CACM October, 1963
.A
Filsak, Z.
Vrchovecka, L.
.N
CA631023 JB March 13, 1978 5:31 PM
.X
702 5 702
702 5 702
702 5 702
.I 703
.T
Assign (Algorithm 173)
.B
CACM October, 1963
.A
Scowen, R. S.
.N
CA631022 JB March 13, 1978 5:32 PM
.X
703 5 703
703 5 703
703 5 703
.I 704
.T
Combinatorial M Things Taken One Time
Two Time, Up N Time (Algorithm 161)
.B
CACM October, 1963
.A
Collins, D. H.
.N
CA631021 JB March 13, 1978 5:34 PM
.X
704 5 704
704 5 704
704 5 704
.I 705
.T
Combinatorial M Things Taken N Time (Algorithm 160)
.B
CACM October, 1963
.A
Blakely, R. E.
.N
CA631020 JB March 13, 1978 5:36 PM
.X
705 5 705
705 5 705
705 5 705
.I 706
.T
Fourier Series Approximation (Algorithm 157)
.B
CACM October, 1963
.A
Schubert, G. R.
.N
CA631019 JB March 13, 1978 5:37 PM
.X
706 5 706
706 5 706
706 5 706
.I 707
.T
Erf(x) (Algorithm 123)
.B
CACM October, 1963
.A
Ibbetson, D.
.N
CA631018 JB March 13, 1978 5:40 PM
.X
1583 5 707
707 5 707
707 5 707
707 5 707
831 6 707
967 6 707
1126 6 707
707 6 707
.I 708
.T
Evaluation Fresnel Integrals (Algorithm 88, 89, 90)
.B
CACM October, 1963
.A
Gray, M. D.
.N
CA631017JB March 13, 1978 5:45 PM
.X
708 5 708
708 5 708
708 5 708
.I 709
.T
Assignment (Algorithm 27)
.B
CACM October, 1963
.A
Newhouse, A.
.N
CA631016 JB March 13, 1978 5:46 PM
.X
709 5 709
709 5 709
709 5 709
.I 710
.T
Fresnel Integrals (Algorithm 213)
.B
CACM October, 1963
.A
Gray, M. D.
.N
CA631015 JB March 13, 1978 5:47 PM
.X
710 5 710
710 5 710
710 5 710
.I 711
.T
Frequency Distribution (Algorithm 212)
.B
CACM October, 1963
.A
Gray, M. D.
.N
CA631014 JB March 13, 1978 5:50 PM
.X
711 5 711
711 5 711
711 5 711
.I 712
.T
Hermite Interpolation (Algorithm 211)
.B
CACM October, 1963
.A
Schubert, G. R.
.N
CA631013 JB March 13, 1978 5:51 PM
.X
712 5 712
712 5 712
712 5 712
.I 713
.T
Lagrangian Interpolation (Algorithm 210)
.B
CACM October, 1963
.A
Schubert, G. R.
.N
CA631012 JB March 13, 1978 5:52 PM
.X
713 5 713
713 5 713
713 5 713
.I 714
.T
Gauss (Algorithm 209)
.B
CACM October, 1963
.A
Ibbetson, D.
.N
CA631011 JB March 13, 1978 5:52 PM
.X
1157 5 714
1779 5 714
1920 5 714
1944 5 714
1987 5 714
2548 5 714
714 5 714
714 5 714
714 5 714
836 6 714
1081 6 714
1561 6 714
1581 6 714
1778 6 714
1779 6 714
1779 6 714
1944 6 714
485 6 714
714 6 714
714 6 714
714 6 714
714 6 714
714 6 714
714 6 714
.I 715
.T
Discrete Convolution (Algorithm 208)
.B
CACM October, 1963
.A
Foreman Jr., W. T.
.N
CA631010 JB March 13, 1978 5:53 PM
.X
715 5 715
715 5 715
715 5 715
.I 716
.T
Stringsort (Algorithm 207)
.B
CACM October, 1963
.A
Boothroyd, J.
.N
CA631009 JB March 13,1978 5:54 PM
.X
2679 5 716
716 5 716
716 5 716
716 5 716
970 6 716
1175 6 716
1190 6 716
1228 6 716
1969 6 716
1997 6 716
308 6 716
2042 6 716
3187 6 716
507 6 716
716 6 716
783 6 716
.I 717
.T
Partitioning Algorithms Finite Sets
.W
partitions set n elements represented
certain n-tuples positive integers.
Algorithm described which generate without repetitions
n-tuples corresponding to: (1) all partitions
given set, (2) all partitions given set
into m fewer sets (1 <= m <= n), (3) all
partitions given set into exactly m sets (1 <= m <= n).
.B
CACM October, 1963
.A
Hutchinson, G.
.N
CA631008 JB March 13, 1978 5:57 PM
.X
717 5 717
717 5 717
717 5 717
.I 718
.T
Experiment Automatic Verification Programs
.W
effective compiler replacing explicit
verification, cost
technique?
.B
CACM October, 1963
.A
Weinberg, G. M.
Gressett, G. L.
.N
CA631007 JB March 13, 1978 5:59 PM
.X
1053 5 718
718 5 718
718 5 718
718 5 718
435 6 718
474 6 718
718 6 718
720 6 718
.I 719
.T
Variable Width Stacks
.W
Character addressable, variable field computers
permit ready establishment manipulation
variable width stacks. Single machine commands may
push variable field items down into such stacks
pop them up. availability variety field
delimiters allows machine push down
pop up more than one variable width item one command.
Since these stacking operations can made
basis compiler decoding algorithms proper
use machines class compilation has
advantages over machines fixed-length words.
.B
CACM October, 1963
.A
Rotenberg, N.
Opler, A.
.N
CA631006 JB March 13, 1978 6:25 PM
.X
719 5 719
719 5 719
719 5 719
.I 720
.T
Format-Free Input FORTRAN
.B
CACM October, 1963
.A
Bailey, M. J.
Barnett, M. P.
Futrelle, R. P.
.N
CA631005 JB March 13, 1978 6:26 PM
.X
1053 4 720
1062 4 720
1121 4 720
1139 4 720
1265 4 720
1781 4 720
464 4 720
720 4 720
720 4 720
720 4 720
759 4 720
1053 5 720
265 5 720
464 5 720
474 5 720
720 5 720
720 5 720
720 5 720
435 6 720
474 6 720
718 6 720
720 6 720
.I 721
.T
Report Proposed American Standard Flowchart
Symbols Information Processing
.W
paper presents essential contents
Proposed American Standard Flowchart Symbols
Information Processing. first proposed
standard prepared Subcommittee X3.6 Problem
Description Analysis American Standards Association (ASA).
.B
CACM October, 1963
.A
Rossheim, R. J.
.N
CA631004 JB March 13, 1978 6:33 PM
.X
2961 5 721
721 5 721
721 5 721
721 5 721
721 6 721
.I 722
.T
ALCOR Group Representation ALGOL Symbols
.B
CACM October, 1963
.N
CA631003 JB March 13, 1978 6:36 PM
.X
722 5 722
722 5 722
722 5 722
.I 723
.T
ECMA Subset ALGOL 60
.B
CACM October, 1963
.N
CA631002 JB March 13, 1978 6:38 PM
.X
723 5 723
723 5 723
723 5 723
.I 724
.T
Profile Programmer
.W
Synopsis: 549 members ACM participated
study concerned primarily attitudes
programmers toward their careers jobs. very
high percentage programmers have apparently
entered their careers accident; has proven happy
choice most they expect remain
field during next five years. Their principal
job satisfactions relate nature their
work, mostfind their jobs offer high level professional
interest good working conditions.
Salary advancement prospects, however,are not
satisfactory. More than half report positive
attitude toward programmers programming part
their organizations. Turnover among themselves
attributed primarily poor management-salary
seen principal motivating factor turnover
among other programmers. Nature work offered
salary principal determinants accepting
new job. Programmers less mobile than expected.
Programmers tend see their colleagues
favorable light, whole. Personalities seem
vary function, systems programmers differing
applications programmers. Four principal problems
programming immediate future listed
participants: languages, personnel, various specific
applications techniques, building programming
profession.
.B
CACM October, 1963
.N
CA631001 JB March 13, 1978 6:48 PM
.X
724 5 724
724 5 724
724 5 724
.I 725
.T
Group Participation Computer Demonstration
.B
CACM October, 1963
.A
McCormick, E. M.
.N
CA630933 JB March 13, 1978 6:50 PM
.X
725 5 725
725 5 725
725 5 725
.I 726
.T
General Program Analysis
Square Rectangular Lattice Designs
.W
paper describes general-purpose program
handle those incomplete block designs
known square rectangular lattices. Flow diagrams
given so method calculation
may programmed any digital computer.
.B
CACM September, 1963
.A
Smillie, K. W.
.N
CA630932 JB March 13, 1978 6:53 PM
.X
726 5 726
726 5 726
726 5 726
.I 727
.T
Approximate Solution Delta(u)=F(u)
.W
Three-dimensional Dirichlet problems Delta(u)=F(u),
Fu >= 0, treated numerically
exceptionally fast, exceptionally accurate numerical
method. Programming details, numerous examples
mathematical theory supplied.Extension
method natural way n-dimensional problems
indicated means 4-dimensional example.
.B
CACM September, 1963
.A
Greenspan, D.
Yohe, M.
.N
CA630931 JB March 13, 1978 6:57 PM
.X
727 5 727
727 5 727
727 5 727
.I 728
.T
Computer-Drawn Flowcharts*
.W
meet need improved documentation
written computer programs, simple system
effective communication presented, which has shown
great promise. programmer describes his program
simple format, computer prepares flow charts
other cross-referenced listings
input. description can kept up-to-date easily,
final output clearly explains original
program. system has also proved valuable debugging coding aid.
.B
CACM September, 1963
.A
Knuth, D. E.
.N
CA630930 JB March 13, 1978 7:01 PM
.X
728 4 728
728 4 728
920 5 728
1330 5 728
1348 5 728
2315 5 728
45 5 728
728 5 728
728 5 728
728 5 728
1348 6 728
1834 6 728
1987 6 728
528 6 728
728 6 728
728 6 728
728 6 728
.I 729
.T
Generalization ALGOL
.B
CACM September, 1963
.A
Wirth, N.
.N
CA630929 JB March 13, 1978 7:02 PM
.X
1135 4 729
1136 4 729
1781 4 729
493 4 729
2710 4 729
2765 4 729
2888 4 729
2906 4 729
729 4 729
729 4 729
989 4 729
1037 5 729
1234 5 729
1358 5 729
288 5 729
1491 5 729
616 5 729
729 5 729
729 5 729
729 5 729
196 6 729
944 6 729
1140 6 729
1303 6 729
1460 6 729
205 6 729
321 6 729
385 6 729
400 6 729
402 6 729
404 6 729
3184 6 729
3184 6 729
3184 6 729
729 6 729
729 6 729
729 6 729
729 6 729
799 6 729
.I 730
.T
MIRFAG: Compiler Based Standard
Mathematical Notation Plain English
.W
pilot version compiler MIRFAG, now
operation, described. chief features
system, which intended solution scientific
problems, presentation mathematical
formulas entirely standard textbook notation. use
plain English organizational instructions,
automatic error diagnosis indicating actual location
error uncompiled program,
attempt minimize fragmentation original
problem statement which normal feature
programming systems.
.B
CACM September, 1963
.A
Gawlik, H. J.
.N
CA630928 JB March 13, 1978 7:06 PM
.X
1083 5 730
1396 5 730
730 5 730
730 5 730
730 5 730
964 6 730
1028 6 730
1029 6 730
1083 6 730
1132 6 730
1214 6 730
1278 6 730
1334 6 730
1365 6 730
1386 6 730
1387 6 730
1388 6 730
1392 6 730
1393 6 730
1394 6 730
1395 6 730
1396 6 730
1397 6 730
1496 6 730
284 6 730
407 6 730
407 6 730
3192 6 730
3193 6 730
3199 6 730
3200 6 730
3201 6 730
3202 6 730
3203 6 730
3204 6 730
561 6 730
730 6 730
730 6 730
.I 731
.T
Symmetric List Processor
.W
list processing system which each list
cell contains both forward backward link
well datum described. system intended
imbeding higher level languages capable
calling functions subroutines coded machine language.
presentation form FORTRAN
programs depending only limited set FORTRAN programs
depending only limited set "primitive"
machine language subroutines which also defined.
Finally, set field, particularly character,
manipulation primitives given round out system.
.B
CACM September, 1963
.A
Weizenbaum, J.
.N
CA630927 JB March 13, 1978 7:10 PM
.X
1050 4 731
1050 4 731
1102 4 731
1549 4 731
378 4 731
2723 4 731
2882 4 731
3008 4 731
731 4 731
731 4 731
793 4 731
798 4 731
1024 5 731
1051 5 731
1098 5 731
1214 5 731
209 5 731
1380 5 731
1388 5 731
1393 5 731
1485 5 731
1487 5 731
1549 5 731
1570 5 731
1878 5 731
1946 5 731
1957 5 731
2168 5 731
2723 5 731
2857 5 731
3112 5 731
627 5 731
731 5 731
731 5 731
731 5 731
878 6 731
106 6 731
106 6 731
106 6 731
902 6 731
1051 6 731
1093 6 731
1098 6 731
1132 6 731
1177 6 731
1380 6 731
1387 6 731
1389 6 731
1393 6 731
1393 6 731
1421 6 731
1549 6 731
1626 6 731
1749 6 731
1826 6 731
1826 6 731
1826 6 731
210 6 731
210 6 731
210 6 731
210 6 731
210 6 731
210 6 731
1860 6 731
1878 6 731
296 6 731
1972 6 731
360 6 731
378 6 731
2438 6 731
2651 6 731
2723 6 731
2736 6 731
2833 6 731
2838 6 731
405 6 731
406 6 731
406 6 731
3184 6 731
627 6 731
627 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
731 6 731
753 6 731
793 6 731
794 6 731
799 6 731
.I 732
.T
Monte Carlo Inverse (Algorithm 166)
.B
CACM September, 1963
.A
Rodman,R. D.
.N
CA630926 JB March 13, 1978 7:11 PM
.X
732 5 732
732 5 732
732 5 732
.I 733
.T
Newton Interpolation Forward Divided Differences (Algorithm 169)
.B
CACM September, 1963
.A
Thacher Jr., H. C.
.N
CA630925 JB March 13, 1978 7:13 PM
.X
733 5 733
733 5 733
733 5 733
.I 734
.T
Newton Interpolation Backward Divided Differences (Algorithm 168)
.B
CACM September, 1963
.A
Thacher Jr., H. C.
.N
CA630924 JB March 13, 1978 7:15 PM
.X
734 5 734
734 5 734
734 5 734
.I 735
.T
Calculation Confluent Divided Differences (Algorithm 167)
.B
CACM September, 1963
.A
Thacher Jr., H. C.
.N
CA630923 JB March 13, 1978 7:17 PM
.X
735 5 735
735 5 735
735 5 735
.I 736
.T
Modified Hankel Functions (Algorithm 163)
.B
CACM September, 1963
.A
Thacher Jr.,H. C.
.N
CA630922 JB March 13, 1978 7:18 PM
.X
736 5 736
736 5 736
736 5 736
.I 737
.T
Exponentiation Series (Algorithm 158)
.B
CACM September, 1963
.A
Lawrence, J. D.
.N
CA630921 JB March 13, 1978 7:19 PM
.X
737 5 737
737 5 737
737 5 737
.I 738
.T
Fourier Series Approximation (Algorithm 157)
.B
CACM September, 1963
.A
George, R.
.N
CA630920 JB March 13, 1978 7:20 PM
.X
738 5 738
738 5 738
738 5 738
.I 739
.T
MINIFUN (Algorithm 129)
.B
CACM September, 1963
.A
Wasscher, E. J.
.N
CA630919 JB March 13, 1978 7:22 PM
.X
739 5 739
739 5 739
739 5 739
.I 740
.T
INTEREST (Algorithm 45)
.B
CACM September, 1963
.A
Wright, C. B.
.N
CA630918 JB March 13, 1978 7:23 PM
.X
740 5 740
740 5 740
740 5 740
.I 741
.T
Evaluation Determinant (Algorithm 41)
.B
CACM September, 1963
.A
Freed, B. H.
.N
CA630917 JB March 13, 1978 7:24 PM
.X
741 5 741
741 5 741
741 5 741
.I 742
.T
Evaluation Determinant (Algorithm 41)
.B
CACM September, 1963
.A
Freed, B. H.
.N
CA630916 JB March 13, 1978 7:25 PM
.X
742 5 742
742 5 742
742 5 742
.I 743
.T
ARCCOSIN (Algorithm 206)
.B
CACM September, 1963
.A
Konda, M.
.N
CA630915 JB March 13, 1978 7:26 PM
.X
743 5 743
743 5 743
743 5 743
.I 744
.T
ATIVE (Algorithm 205)
.B
CACM September, 1963
.A
Haubrich, J. G. A.
.N
CA630914 JB March 13, 1978 7:28 PM
.X
744 5 744
744 5 744
744 5 744
.I 745
.T
STEEP2 (Algorithm 204)
.B
CACM September, 1963
.A
Wasscher, E. J.
.N
CA630913 JB March 13, 1978 7:29 PM
.X
745 5 745
745 5 745
745 5 745
.I 746
.T
STEEP1 (Algorithm 203)
.B
CACM September, 1963
.A
Wasscher, E. J.
.N
CA630912 JB March 13, 1978 7:30 PM
.X
746 5 746
746 5 746
746 5 746
.I 747
.T
Generation Permutations Lexicographical Order (Algorithm 202)
.B
CACM September, 1963
.A
Shen, M. K.
.N
CA630911 JB March 13, 1978 7:31 PM
.X
2443 5 747
747 5 747
747 5 747
747 5 747
747 6 747
.I 748
.T
Semi-Iterative Process Evaluating Arctangents
.B
CACM September, 1963
.A
Chu, W. H.
Saathoff, D. R.
.N
CA630910 JB March 13, 1978 7:33 PM
.X
748 5 748
748 5 748
748 5 748
.I 749
.T
Note onStochastic Matrices
.B
CACM September, 1963
.A
Dumey, A. I.
.N
CA630909 JB March 13, 1978 7:35 PM
.X
749 5 749
749 5 749
749 5 749
.I 750
.T
PEI Matrix Eigenvectors
.B
CACM September, 1963
.A
Newbery, A. C. R.
.N
CA630908 JB March 13, 1978 7:36 PM
.X
1963 5 750
750 5 750
750 5 750
750 5 750
909 6 750
475 6 750
750 6 750
.I 751
.T
Note Set Test Matrices Inversion
.B
CACM September, 1963
.A
Rodman, R. D.
.N
CA630907 JB March 13, 1978 7:38 PM
.X
751 5 751
751 5 751
751 5 751
.I 752
.T
Closing Out Print Tape
.B
CACM September, 1963
.A
Moore, D. P.
.N
CA630906 JB March 13, 1978 7:39 PM
.X
752 5 752
752 5 752
752 5 752
.I 753
.T
Procedure Converting Logic Table Conditions
into Efficient Sequence Test Instructions
.B
CACM September, 1963
.A
Egler, J. F.
.N
CA630905 JB March 13, 1978 7:40 PM
.X
1237 4 753
2220 4 753
753 4 753
1237 5 753
250 5 753
1549 5 753
1564 5 753
2453 5 753
753 5 753
753 5 753
753 5 753
106 6 753
1051 6 753
1172 6 753
1354 6 753
210 6 753
250 6 753
320 6 753
2053 6 753
2220 6 753
406 6 753
627 6 753
731 6 753
753 6 753
753 6 753
753 6 753
753 6 753
.I 754
.T
Ye Indiscreet Monitor
.B
CACM September, 1963
.A
Blatt, J. M.
.N
CA630904 JB March 13, 1978 7:41 PM
.X
754 4 754
153 5 754
754 5 754
754 5 754
754 5 754
.I 755
.T
Exponential Method Numerical Integration
Ordinary Differential Equations
.W
formula numerical integration prepared,
which involves exponential term.
formula compared two standard integration methods,
shown large class differential
equations, exponential formula has superior stability
properties large step sizes. Thus
formula may used large step size decrease
total computing time solution significantly,
particularly those engineering problems high accuracy not needed.
.B
CACM August, 1963
.A
Pope, D. A.
.N
CA630843 JB March 13, 1978 7:52 PM
.X
2567 5 755
755 5 755
755 5 755
755 5 755
2268 6 755
755 6 755
.I 756
.T
Computer Program Editing News
.B
CACM August, 1963
.A
Danielson, W. A.
Briggs, B.
.N
CA630842 JB March 13, 1978 7:53 PM
.X
756 5 756
756 5 756
756 5 756
.I 757
.T
Simulation Traffic Network
.B
CACM August, 1963
.A
Katz, J. H.
.N
CA630841 JB March 13, 1978 7:55 PM
.X
1890 5 757
757 5 757
757 5 757
757 5 757
757 6 757
.I 758
.T
Skeletal Structure PERT CPA Computer Programs
.W
introduction inner mechanics
PERT CPA computer programs provided.
major components these programs well their
purposes interrelationships outlined.
.B
CACM August, 1963
.A
Kahn, A. B.
.N
CA630840 JB March 13, 1978 7:58 PM
.X
1050 4 758
1226 4 758
1723 4 758
441 4 758
758 4 758
758 4 758
367 5 758
441 5 758
758 5 758
758 5 758
758 5 758
.I 759
.T
Continued Operation Notation Symbol
Manipulation Array Processing
.W
brief account given notational device
very useful formal representation
syntaxes, string relationships string transformation
procedures also computing procedures
deal arrays functions many variables.
device consists use certain "continued
operation" "collective" symbols analogous summation
symbol (Sigma) continued multiplication
symbol (Pi) conventional mathematics.
.B
CACM August, 1963
.A
Barnett, M. P.
.N
CA630839 JB March 13, 1978 8:02 PM
.X
1062 4 759
1121 4 759
1139 4 759
1265 4 759
1781 4 759
720 4 759
759 4 759
964 5 759
1121 5 759
464 5 759
659 5 759
759 5 759
759 5 759
759 5 759
284 6 759
464 6 759
561 6 759
759 6 759
759 6 759
759 6 759
.I 760
.T
Dialects FORTRAN
.B
CACM August, 1963
.A
Pyle, I. C.
.N
CA630838 JB March 13, 1978 8:03 PM
.X
760 5 760
760 5 760
760 5 760
.I 761
.T
Note Dangling Else ALGOL 60
.W
Some revisions ALGOL 60 proposed, which
not only eliminate certain ambiguous statements
but also add some convenience language. discussion
background problem sketch
proof ambiguities have been removed included.
.B
CACM August, 1963
.A
Kaupe Jr., A. F.
.N
CA630837 JB March 13, 1978 8:06 PM
.X
249 4 761
254 4 761
272 4 761
1086 4 761
1102 4 761
1109 4 761
1132 4 761
1140 4 761
1188 4 761
1234 4 761
1263 4 761
1265 4 761
1270 4 761
1306 4 761
1323 4 761
1358 4 761
1379 4 761
1380 4 761
1453 4 761
1464 4 761
1464 4 761
1484 4 761
1491 4 761
1491 4 761
1498 4 761
1613 4 761
1614 4 761
1767 4 761
1781 4 761
1781 4 761
1787 4 761
1825 4 761
1860 4 761
1949 4 761
321 4 761
2059 4 761
2083 4 761
2126 4 761
2178 4 761
2179 4 761
2252 4 761
2325 4 761
2341 4 761
2546 4 761
435 4 761
437 4 761
463 4 761
483 4 761
491 4 761
2645 4 761
2652 4 761
2684 4 761
2732 4 761
2842 4 761
2929 4 761
2934 4 761
560 4 761
583 4 761
3069 4 761
3073 4 761
627 4 761
631 4 761
632 4 761
642 4 761
644 4 761
653 4 761
669 4 761
679 4 761
680 4 761
691 4 761
761 4 761
761 4 761
761 4 761
762 4 761
763 4 761
123 4 761
140 4 761
919 4 761
949 4 761
989 4 761
989 4 761
196 5 761
947 5 761
1379 5 761
3184 5 761
761 5 761
761 5 761
761 5 761
1263 6 761
1477 6 761
3184 6 761
669 6 761
761 6 761
.I 762
.T
Some Remarks Syntax Symbolic Programming Languages
.B
CACM August, 1963
.A
DiForino, A. C.
.N
CA630836 JB March 13, 1978 8:07 PM
.X
249 4 762
254 4 762
272 4 762
1102 4 762
1102 4 762
1109 4 762
1140 4 762
1142 4 762
1188 4 762
1306 4 762
1425 4 762
1464 4 762
1491 4 762
1767 4 762
1781 4 762
1781 4 762
1781 4 762
1787 4 762
1945 4 762
1949 4 762
321 4 762
2059 4 762
2126 4 762
435 4 762
437 4 762
438 4 762
463 4 762
483 4 762
491 4 762
2732 4 762
560 4 762
583 4 762
3073 4 762
627 4 762
631 4 762
632 4 762
642 4 762
644 4 762
653 4 762
680 4 762
761 4 762
762 4 762
762 4 762
762 4 762
763 4 762
123 4 762
140 4 762
919 4 762
949 4 762
989 4 762
196 5 762
249 5 762
483 5 762
762 5 762
762 5 762
762 5 762
.I 763
.T
Syntax Controlled Generator Formal Language Processors
.B
CACM August, 1963
.A
Eickel, J.
Bauer, F. L.
Paul, M.
Samelson, K.
.N
CA630835 JB March 13, 1978 8:08 PM
.X
249 4 763
254 4 763
267 4 763
272 4 763
1046 4 763
1102 4 763
1105 4 763
1109 4 763
1139 4 763
1139 4 763
1139 4 763
1140 4 763
1140 4 763
1141 4 763
1188 4 763
1215 4 763
1223 4 763
1234 4 763
1263 4 763
1265 4 763
1265 4 763
1306 4 763
1464 4 763
1491 4 763
1496 4 763
1647 4 763
1665 4 763
1767 4 763
1781 4 763
1781 4 763
1781 4 763
1787 4 763
1787 4 763
1792 4 763
1824 4 763
1949 4 763
321 4 763
364 4 763
2059 4 763
2126 4 763
2126 4 763
405 4 763
2546 4 763
435 4 763
437 4 763
438 4 763
463 4 763
464 4 763
483 4 763
491 4 763
2732 4 763
560 4 763
583 4 763
584 4 763
3073 4 763
627 4 763
631 4 763
631 4 763
632 4 763
642 4 763
644 4 763
653 4 763
653 4 763
680 4 763
680 4 763
761 4 763
762 4 763
763 4 763
763 4 763
763 4 763
763 4 763
763 4 763
795 4 763
799 4 763
123 4 763
140 4 763
919 4 763
945 4 763
989 4 763
196 5 763
1215 5 763
224 5 763
1781 5 763
1787 5 763
1945 5 763
2603 5 763
404 5 763
412 5 763
631 5 763
763 5 763
763 5 763
763 5 763
823 6 763
123 6 763
196 6 763
196 6 763
914 6 763
915 6 763
917 6 763
919 6 763
984 6 763
989 6 763
990 6 763
990 6 763
1007 6 763
1012 6 763
1025 6 763
1046 6 763
1084 6 763
1098 6 763
1122 6 763
1131 6 763
1138 6 763
1139 6 763
1139 6 763
1140 6 763
1141 6 763
1141 6 763
1149 6 763
1198 6 763
1200 6 763
1215 6 763
1215 6 763
1223 6 763
1223 6 763
1265 6 763
1265 6 763
1303 6 763
1323 6 763
1336 6 763
1358 6 763
1366 6 763
1396 6 763
1421 6 763
1455 6 763
1460 6 763
1462 6 763
1463 6 763
1467 6 763
1468 6 763
1477 6 763
1477 6 763
1487 6 763
1491 6 763
1491 6 763
1491 6 763
1491 6 763
1496 6 763
1496 6 763
1496 6 763
1531 6 763
1535 6 763
1565 6 763
1601 6 763
1602 6 763
1613 6 763
1614 6 763
1626 6 763
1641 6 763
1781 6 763
1787 6 763
1788 6 763
205 6 763
224 6 763
224 6 763
224 6 763
249 6 763
288 6 763
316 6 763
381 6 763
398 6 763
11 6 763
404 6 763
410 6 763
463 6 763
464 6 763
483 6 763
483 6 763
3184 6 763
3188 6 763
584 6 763
584 6 763
600 6 763
669 6 763
680 6 763
680 6 763
691 6 763
763 6 763
763 6 763
763 6 763
763 6 763
763 6 763
799 6 763
799 6 763
.I 764
.T
Reduction Matrix Containing Polynomial Elements (Algorithm 170)
.B
CACM August, 1963
.A
Hennion, P. E.
.N
CA630834 JB March 13, 1978 8:09 PM
.X
764 5 764
764 5 764
764 5 764
.I 765
.T
Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164)
.B
CACM August, 1963
.A
Bitterli, C. V.
.N
CA630833 JB March 13, 1978 8:10 PM
.X
765 5 765
765 5 765
765 5 765
.I 766
.T
XY-move Plotting (Algorithm 162)
.B
CACM August, 1963
.A
Fletcher, W. E.
.N
CA630832 JB March 13, 1978 8:12 PM
.X
766 5 766
766 5 766
766 5 766
.I 767
.T
Certification Algorithm 161
Combinatorial M Things Taken One Time,
Two Time, Up N Time
[M. L. Wolfson H. V. Wright,
Comm. ACM, Apr. 1963]
.B
CACM August, 1963
.A
Thoro, D.
.N
CA630831 JB March 13, 1978 8:13 PM
.X
767 5 767
767 5 767
767 5 767
.I 768
.T
Certification Algorithm 160
Combinatorial M Things Taken N Time [M. L. Wolfson H. V. Wright,
Comm. ACM, Apr. 1963]
.B
CACM August, 1963
.A
Thoro, D.
.N
CA630830 JB March 13, 1978 8:14 PM
.X
768 5 768
768 5 768
768 5 768
.I 769
.T
Algebra Sets (Algorithm 156)
.B
CACM August, 1963
.A
Bosworth, K. M.
.N
CA630829 JB March 13, 1978 8:15 PM
.X
769 5 769
769 5 769
769 5 769
.I 770
.T
Combination Any Order (Algorithm 155)
.B
CACM August, 1963
.A
Bosworth, K. M.
.N
CA630828 JB March 13, 1978 8:17 PM
.X
770 5 770
770 5 770
770 5 770
.I 771
.T
Combination Lexicographical Order (Algorithm 154)
.B
CACM August, 1963
.A
Bosworth, K. M.
.N
CA630827 JB March 13, 1978 8:18 PM
.X
771 5 771
771 5 771
771 5 771
.I 772
.T
GOMORY (Algorithm 153)
.B
CACM August, 1963
.A
Lefkowitz, B.
D'Esopo, D. A.
.N
CA630826 JB March 13, 1978 8:19 PM
.X
772 5 772
772 5 772
772 5 772
.I 773
.T
Matrix Inversion (Algorithm 140)
.B
CACM August, 1963
.A
George, R.
.N
CA630825 JB March 13, 1978 8:20 PM
.X
2061 5 773
773 5 773
773 5 773
773 5 773
1140 6 773
1141 6 773
1477 6 773
1491 6 773
1825 6 773
773 6 773
.I 774
.T
Jacobi (Algorithm 85)
.B
CACM August, 1963
.A
Naur, P.
.N
CA630824 JB March 13, 1978 8:21 PM
.X
2349 5 774
774 5 774
774 5 774
774 5 774
1648 6 774
1716 6 774
1794 6 774
1894 6 774
2043 6 774
501 6 774
613 6 774
774 6 774
.I 775
.T
Interpolation, Differentiation, Integration (Algorithm 77)
.B
CACM August, 1963
.A
Hennion, P. E.
.N
CA630823 JB March 13, 1978 8:22 PM
.X
775 5 775
775 5 775
775 5 775
.I 776
.T
Partition, Quicksort, Find (Algorithm 62, 64, & 65)
.B
CACM August, 1963
.A
Randell, B.
Russell, L. J.
.N
CA630822 JB March 13, 1978 8:23 PM
.X
3054 5 776
776 5 776
776 5 776
776 5 776
1175 6 776
1880 6 776
1919 6 776
1969 6 776
1980 6 776
1997 6 776
307 6 776
308 6 776
309 6 776
2017 6 776
2679 6 776
776 6 776
.I 777
.T
Set Test Matrices (Algorithm 52)
.B
CACM August, 1963
.A
Naur, P.
.N
CA630821 JB March 13, 1978 8:24 PM
.X
777 5 777
777 5 777
777 5 777
.I 778
.T
Associated Legendre Functions First Kind
Real Imaginary Arguments (Algorithm 47)
.B
CACM August, 1963
.A
George, R.
.N
CA630820 JB March 13, 1978 8:26 PM
.X
1818 5 778
778 5 778
778 5 778
778 5 778
778 6 778
.I 779
.T
CROUT II (Algorithm 43)
.B
CACM August, 1963
.A
Domingo, C.
Rodriguez-Gil, F.
.N
CA630819 JB March 13, 1978 8:27 PM
.X
779 5 779
779 5 779
779 5 779
.I 780
.T
Algorithm 42 INVERT, Alg.107 Gauss's
Method, Alg.120 Inversion II, gjr
.B
CACM August, 1963
.A
Naur, P.
.N
CA630818 JB March 13, 1978 8:29 PM
.X
780 5 780
780 5 780
780 5 780
.I 781
.T
Telescope 2 (Algorithm 38)
.B
CACM August, 1963
.A
Bridges, J. F.
.N
CA630817 JB March 13, 1978 8:30 PM
.X
781 5 781
781 5 781
781 5 781
.I 782
.T
Telescope 1 (Algorithm 37)
.B
CACM August, 1963
.A
Bridges, J. F.
.N
CA630816 JB March 13, 1978 8:31 PM
.X
782 5 782
782 5 782
782 5 782
.I 783
.T
Shellsort (Algorithm 201)
.B
CACM August, 1963
.A
Boothroyd, J.
.N
CA630815 JB March 13, 1978 8:32 PM
.X
2679 5 783
783 5 783
783 5 783
783 5 783
970 6 783
1175 6 783
1190 6 783
1228 6 783
1969 6 783
1997 6 783
308 6 783
2042 6 783
3187 6 783
507 6 783
716 6 783
783 6 783
.I 784
.T
Normal Random (Algorithm 200)
.B
CACM August, 1963
.A
George, R.
.N
CA630814 JB March 13, 1978 8:33 PM
.X
784 5 784
784 5 784
784 5 784
.I 785
.T
Conversions Between Calendar Date Julian day Number (Algorithm 199)
.B
CACM August, 1963
.A
Tantzen, R. G.
.N
CA630813 JB March 13, 1978 8:34 PM
.X
2269 5 785
3115 5 785
785 5 785
785 5 785
785 5 785
907 6 785
2045 6 785
2417 6 785
2466 6 785
2884 6 785
579 6 785
785 6 785
785 6 785
.I 786
.T
Adaptive Integration Multiple Integration (Algorithm 198)
.B
CACM August, 1963
.A
McKeeman, W. M.
.N
CA630812 JB March 13, 1978 8:35 PM
.X
1352 5 786
2048 5 786
2074 5 786
786 5 786
786 5 786
786 5 786
834 6 786
834 6 786
834 6 786
872 6 786
872 6 786
1040 6 786
1092 6 786
1241 6 786
1273 6 786
324 6 786
429 6 786
429 6 786
429 6 786
570 6 786
621 6 786
786 6 786
786 6 786
786 6 786
.I 787
.T
Matrix Division (Algorithm 197)
.B
CACM August, 1963
.A
Wells, M.
.N
CA630811 JB March 13, 1978 8:37 PM
.X
787 5 787
787 5 787
787 5 787
.I 788
.T
Muller's Method Finding Roots
Arbitrary Function (Algorithm 196)
.B
CACM August, 1963
.A
Roman, R. D.
.N
CA630810 JB March 13, 1978 8:38 PM
.X
788 5 788
788 5 788
788 5 788
.I 789
.T
Bandsolve (Algorithm 195)
.B
CACM August, 1963
.A
Thurnau, D. H.
.N
CA630809 JB March 13, 1978 8:39 PM
.X
789 5 789
789 5 789
789 5 789
.I 790
.T
Zersol (Algorithm 194)
.B
CACM August, 1963
.A
Domingo, C.
.N
CA630808 JB March 13, 1978 8:40 PM
.X
790 5 790
790 5 790
790 5 790
.I 791
.T
Character Manipulation 7090 Fortran
.B
CACM August, 1963
.A
Smith, D. D.
.N
CA630807 JB March 13, 1978 8:41 PM
.X
1084 5 791
791 5 791
791 5 791
791 5 791
868 6 791
603 6 791
644 6 791
669 6 791
791 6 791
797 6 791
.I 792
.T
Multiple-Precision Binary-To-Decimal Integer
Conversion Using Only Addition Subtraction
.B
CACM August, 1963
.A
Keyes, D. F.
Moore, D. P.
.N
CA630806 JB March 13, 1978 8:42 PM
.X
792 5 792
792 5 792
792 5 792
.I 793
.T
Mapped List Structures
.B
CACM August, 1963
.A
Baecker, H. D.
.N
CA630805 JB March 13, 1978 8:43 PM
.X
1050 4 793
1549 4 793
2723 4 793
2882 4 793
731 4 793
793 4 793
1051 5 793
627 5 793
793 5 793
793 5 793
793 5 793
210 6 793
378 6 793
406 6 793
731 6 793
793 6 793
794 6 793
.I 794
.T
List-Type Storage Technique Alphameric Information
.W
method which economic terms space
time proposed storage manipulation
character strings arbitrary length fixed
word-length computer. method illustrated
application Algol-type identifiers Algol-like block structure.
.B
CACM August, 1963
.A
Bowlden, H. J.
.N
CA630804 JB March 13, 1978 8:45 PM
.X
794 4 794
1051 5 794
1062 5 794
254 5 794
794 5 794
794 5 794
794 5 794
210 6 794
378 6 794
406 6 794
464 6 794
731 6 794
793 6 794
794 6 794
794 6 794
.I 795
.T
Debugging Systems Source Language Level
.B
CACM August, 1963
.A
Ferguson, H. E.
Berner, E.
.N
CA630803 JB March 13, 1978 8:46 PM
.X
1046 4 795
1105 4 795
1139 4 795
1140 4 795
1234 4 795
1263 4 795
1265 4 795
1496 4 795
1781 4 795
1824 4 795
2126 4 795
2546 4 795
464 4 795
2616 4 795
584 4 795
631 4 795
653 4 795
680 4 795
763 4 795
795 4 795
795 4 795
799 4 795
945 4 795
931 5 795
404 5 795
795 5 795
795 5 795
795 5 795
.I 796
.T
SABRAG, Time-Sharing Low-Cost Computer
.W
serial SABRAC computer designed built
Scientific Department Israel defense
Ministry has 5000-location magnetic drum, main store.
avoid need resort optimum programming
techniques increase its overall efficiency
computer has also been given 224-word ferrite
core store which program obeyed. Transfers
between core drum stores
twin paper-tape input output channels all
available autonomously (concurrently, time-shared).
Multiplication division orders also autonomous,
so machine may executing up three
orders simultaneously. All functions naturally interlocked.
number other advanced orders
facilities also incorporated.In particular,
"Execute" order permits temporary jump up
four orders second modifier register permits double
modification general relative addressing
subroutines particular. Thus overall effective
speed machine muchhigher than its
basic specification would lead one expect its
design indicates one way which concepts
time sharing may incorporated "low-cost" computers.
.B
CACM August, 1963
.A
Lehman, M.
Netter, Z.
Eshed, R.
.N
CA630802 JB March 13, 1978 8:54 PM
.X
3193 4 796
796 4 796
491 5 796
796 5 796
796 5 796
796 5 796
.I 797
.T
American Standard Code Information Interchange
.B
CACM August, 1963
.N
CA630801 JB March 13, 1978 8:55 PM
.X
1084 5 797
797 5 797
797 5 797
797 5 797
868 6 797
603 6 797
644 6 797
669 6 797
791 6 797
797 6 797
.I 798
.T
Catalogue Entry Retrieval System
.A
Scheff, B. H.
.B
CACM July, 1963
.N
CA630726 JB March 14, 1978 8:08 AM
.X
1050 4 798
1102 4 798
378 4 798
3008 4 798
731 4 798
798 4 798
209 5 798
798 5 798
798 5 798
798 5 798
.I 799
.T
Design Separable Transition-Diagram Compiler*
.W
COBOL compiler design presented which
compact enough permit rapid, one-pass compilation
large subset COBOL moderately large computer.
Versions same compiler smaller
machines require only two working tapes plus compiler
tape. methods given largely applicable
construction ALGOL compilers.
.B
CACM July, 1963
.A
Conway, M. E.
.N
CA630725 JB March 14, 1978 8:11 AM
.X
222 4 799
1046 4 799
1105 4 799
1139 4 799
1139 4 799
1140 4 799
1234 4 799
1263 4 799
1265 4 799
1496 4 799
1781 4 799
1824 4 799
1947 4 799
2126 4 799
2546 4 799
464 4 799
556 4 799
584 4 799
631 4 799
653 4 799
680 4 799
763 4 799
795 4 799
799 4 799
799 4 799
799 4 799
799 4 799
945 4 799
945 5 799
1323 5 799
1358 5 799
1380 5 799
1665 5 799
1781 5 799
1787 5 799
1989 5 799
399 5 799
2112 5 799
2534 5 799
2541 5 799
2698 5 799
2733 5 799
2820 5 799
404 5 799
82 5 799
3073 5 799
3155 5 799
799 5 799
799 5 799
799 5 799
830 6 799
123 6 799
196 6 799
196 6 799
196 6 799
919 6 799
990 6 799
1007 6 799
1046 6 799
1131 6 799
1139 6 799
1140 6 799
1141 6 799
1149 6 799
1198 6 799
1215 6 799
1215 6 799
1223 6 799
1265 6 799
1303 6 799
1323 6 799
1358 6 799
1366 6 799
1421 6 799
1421 6 799
1460 6 799
1460 6 799
1462 6 799
1463 6 799
1467 6 799
1468 6 799
1477 6 799
1477 6 799
1491 6 799
1491 6 799
1491 6 799
1496 6 799
1496 6 799
1531 6 799
1535 6 799
1565 6 799
1601 6 799
1602 6 799
1613 6 799
1614 6 799
1626 6 799
1641 6 799
1781 6 799
1781 6 799
1781 6 799
1781 6 799
1787 6 799
1787 6 799
1788 6 799
205 6 799
205 6 799
224 6 799
224 6 799
249 6 799
267 6 799
288 6 799
1959 6 799
1973 6 799
316 6 799
378 6 799
381 6 799
398 6 799
2110 6 799
2110 6 799
2111 6 799
11 6 799
2179 6 799
2182 6 799
2204 6 799
2247 6 799
2423 6 799
2534 6 799
2556 6 799
2732 6 799
2786 6 799
404 6 799
410 6 799
463 6 799
464 6 799
483 6 799
3073 6 799
3184 6 799
3184 6 799
3184 6 799
3184 6 799
3186 6 799
3188 6 799
584 6 799
600 6 799
631 6 799
680 6 799
680 6 799
691 6 799
729 6 799
731 6 799
763 6 799
763 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
799 6 799
.I 800
.T
Linking Segment Subprogram Language Linking Loader
.B
CACM July, 1963
.A
McCarthy, J.
Corbato, F. J.
Daggett, M. M.
.N
CA630724 JB March 14, 1978 8:13 AM
.X
1471 5 800
1774 5 800
800 5 800
800 5 800
800 5 800
800 6 800
800 6 800
1173 6 800
271 6 800
276 6 800
.I 801
.T
Least Squares Solution Constraints (Algorithm 177)
.B
CACM July, 1963
.A
Synge, M. J.
.N
CA630723 JB March 14, 1978 8:14 AM
.X
801 5 801
801 5 801
801 5 801
.I 802
.T
SYMINV2 (Algorithm 150)
.B
CACM July, 1963
.A
Rutishauser, H.
.N
CA630722JB March 14, 1978 8:15 AM
.X
802 5 802
802 5 802
802 5 802
.I 803
.T
Syminv2 (Algorithm 150)
.B
CACM July, 1963
.A
Evans Jr., A.
.N
CA630721 JB March 14, 1978 8:16 AM
.X
803 5 803
803 5 803
803 5 803
.I 804
.T
Exponentiation Series (Algorithms 134)
.B
CACM July, 1963
.A
Thacher Jr., H. C.
.N
CA630720 JB March 14, 1978 8:19 AM
.X
804 5 804
804 5 804
804 5 804
.I 805
.T
Newton Maehly (Algorithm 105)
.B
CACM July, 1963
.A
Kondo, J.
.N
CA630719 JB March 14, 1978 8:20 AM
.X
805 5 805
805 5 805
805 5 805
.I 806
.T
Remark Certification Matrix Inversion Procedures
.B
CACM July, 1963
.A
Moler, C.
.N
CA630718 JB March 14, 1978 8:21 AM
.X
1177 4 806
806 4 806
806 4 806
932 5 806
454 5 806
806 5 806
806 5 806
806 5 806
.I 807
.T
Reversion Series (Algorithm 193)
.B
CACM July, 1963
.A
Fettis, H. E.
.N
CA630717 JB March 14, 1978 8:22 AM
.X
807 5 807
807 5 807
807 5 807
.I 808
.T
Confluent Hypergeometric (Algorithm 192)
.B
CACM July, 1963
.A
Relph, A. P.
.N
CA630716 JB March 14, 1978 8:29 AM
.X
808 5 808
808 5 808
808 5 808
.I 809
.T
Hypergeometric (Algorithm 191)
.B
CACM July, 1963
.A
Relph, A. P.
.N
CA630715 JB March 14, 1978 8:30 AM
.X
809 5 809
809 5 809
809 5 809
.I 810
.T
Complex Power (Algorithm 190)
.B
CACM July, 1963
.A
Relph, A. P.
.N
CA630714 JB March 14, 1978 8:32 AM
.X
810 5 810
810 5 810
810 5 810
.I 811
.T
Smoothing 2 (Algorithm 189)
.B
CACM July, 1963
.A
Rodriguez Gil, F.
.N
CA630713 JB March 14, 1978 8:33 AM
.X
811 5 811
811 5 811
811 5 811
.I 812
.T
Smoothing 1 (Algorithm 188)
.B
CACM July, 1963
.A
Rodriguez-Gil, F.
.N
CA630712 JB March 14, 1978 8:34 AM
.X
812 5 812
812 5 812
812 5 812
.I 813
.T
Differences Derivatives (Algorithm 187)
.B
CACM July, 1963
.A
Vande Riet, R. P.
.N
CA630711 JB March 14, 1978 8:35 AM
.X
813 5 813
813 5 813
813 5 813
.I 814
.T
Complex Arithmetic (Algorithm 186)
.B
CACM July, 1963
.A
Vande Riet, R. P.
.N
CA630710 JB March 14, 1978 8:36 AM
.X
814 5 814
814 5 814
814 5 814
.I 815
.T
Normal Probability Curve Fitting (Algorithm 185)
.B
CACM July, 1963
.A
Colker, A.
.N
CA630709 JB March 14, 1978 8:38 AM
.X
815 5 815
815 5 815
815 5 815
.I 816
.T
Erlang Probability Curve Fitting (Algorithm 184)
.B
CACM July, 1963
.A
Colker, A.
.N
CA630708 JB March 14, 1978 8:39 AM
.X
816 5 816
816 5 816
816 5 816
.I 817
.T
Nexcom (Algorithm 152)
.B
CACM July, 1963
.A
Hopley, J.
.N
CA630707 JB March 14, 1978 8:40 AM
.X
817 5 817
817 5 817
817 5 817
.I 818
.T
Realizing Boolean Connectives IBM 1620
.B
CACM July, 1963
.A
Hellerman, H.
Senzig, D. N.
.N
CA630706 JB March 14, 1978 8:44 AM
.X
818 5 818
818 5 818
818 5 818
.I 819
.T
Polynomial Evaluation Revised
.B
CACM July, 1963
.A
Eisman, S. H.
.N
CA630705 JB March 14, 1978 8:46 AM
.X
1620 4 819
819 4 819
1620 5 819
436 5 819
819 5 819
819 5 819
819 5 819
819 6 819
436 6 819
.I 820
.T
Checking Loops Networks
.B
CACM July, 1963
.A
Gordon, R. M.
.N
CA630704 JB March 14, 1978 8:47 AM
.X
820 5 820
820 5 820
820 5 820
.I 821
.T
Further Remarks Sampling Tape File-III
.B
CACM July, 1963
.A
Juelich, O. C.
.N
CA630703 JB March 14, 1978 8:48 AM
.X
821 5 821
821 5 821
821 5 821
.I 822
.T
Real-Time Programming Specifications
.W
Problems implementation large real-time
applications treated, suggested guidelines
both program file specifications developed.
problems delineated also occur systems
programming.
.B
CACM July, 1963
.A
Head, R. V.
.N
CA630702 JB March 14, 1978 8:50 AM
.X
822 5 822
822 5 822
822 5 822
.I 823
.T
Syntactic Description BC NELLIAC
.B
CACM July, 1963
.A
Huskey, H. D.
Love, R.
Wirth, N.
.N
CA630701 JB March 14, 1978 8:51 AM
.X
1945 5 823
2126 5 823
691 5 823
823 5 823
823 5 823
823 5 823
823 6 823
823 6 823
823 6 823
196 6 823
914 6 823
915 6 823
917 6 823
984 6 823
989 6 823
990 6 823
1012 6 823
1084 6 823
1098 6 823
1122 6 823
1138 6 823
1139 6 823
1141 6 823
1200 6 823
1223 6 823
1265 6 823
1336 6 823
1396 6 823
1455 6 823
1477 6 823
1487 6 823
1491 6 823
1496 6 823
1614 6 823
1693 6 823
404 6 823
483 6 823
3184 6 823
584 6 823
669 6 823
680 6 823
763 6 823
.I 824
.T
DESCRIPTRAN-Automated Descriptive Geometry*
.W
Descriptive geometry consists procedures originally
designed solve 3-space geometry problems
graphical constructions measurement instead
computation. However, addition
unifies simplifies approach many such problems.
one can call subroutines compute
new coordinates correspond those obtainable
graphical constructions, there three-way
advantage approach descriptive geometry,
accuracy computation speed digital
computer. DESCRIPTRAN makes possible program
many problems 3-space few statements;
consists 15 subroutines analogous procedures descriptive geometry.
.B
CACM June, 1963
.A
Kliphardt, R. A.
.N
CA630625 JB March 14, 1978 9:56 AM
.X
824 5 824
824 5 824
824 5 824
.I 825
.T
PIP: Photo-Interpretive Program
Analysis Spark-Chamber Data*
.W
operating computer program processes
photographically recorded data described.
input program consists spark-chamber photographs
which tracks high-energy particles
recorded. program automatically scans, measures
performs preliminary interpretation
these photographs. continuous operation processing
rate 5,000 photographic frames per hour
achieved.
.B
CACM June, 1963
.A
Rudloe, H.
Deutsch, M.
Marill, T.
.N
CA630624 JB March 14, 1978 9:59 AM
.X
825 5 825
825 5 825
825 5 825
.I 826
.T
Remarks Fortran Subroutines Time Series Analysis
.B
CACM June, 1963
.A
Bennett, C. M.
.N
CA630623 JB March 14, 1978 10:00 AM
.X
1118 4 826
826 4 826
948 4 826
942 5 826
1118 5 826
826 5 826
826 5 826
826 5 826
826 6 826
942 6 826
.I 827
.T
Disk File Sorting
.W
Sorting techniques using IBM 1401
random access storage device evaluated.
.B
CACM June, 1963
.A
Schick, T.
.N
CA630622 JB March 14, 1978 10:02 AM
.X
827 5 827
827 5 827
827 5 827
.I 828
.T
Incompressible flow Network Calculations
.W
general method calculation flows
pressures fluid flow networks presented.
method applicable computer use.
.B
CACM June, 1963
.A
Cantrell, H. N.
.N
CA630621 JB March 14, 1978 10:03 AM
.X
828 5 828
828 5 828
828 5 828
.I 829
.T
External Language KLIPA URAL-2 Digital computer
.B
CACM June, 1963
.A
Greniewski, M,
Turski, W.
.N
CA630620 JB March 14, 1978 10:04 AM
.X
2905 5 829
829 5 829
829 5 829
829 5 829
829 6 829
.I 830
.T
CORC-The Cornell Computing Language
.B
CACM June, 1963
.A
Conway, R. W.
Maxwell, W. L.
.N
CA630619 JB March 14, 1978 10:06 AM
.X
1179 5 830
1288 5 830
1544 5 830
1646 5 830
2111 5 830
2534 5 830
2556 5 830
2650 5 830
830 5 830
830 5 830
830 5 830
830 6 830
830 6 830
830 6 830
830 6 830
830 6 830
830 6 830
830 6 830
830 6 830
987 6 830
1072 6 830
1112 6 830
1179 6 830
1592 6 830
1647 6 830
1787 6 830
1935 6 830
1936 6 830
1959 6 830
1973 6 830
2111 6 830
2111 6 830
2111 6 830
2182 6 830
408 6 830
576 6 830
619 6 830
680 6 830
680 6 830
799 6 830
.I 831
.T
Real Error Function, ERF (Algorithm 123)
.B
CACM June, 1963
.A
Thacher Jr., H. C.
.N
CA630618 JB March 14, 1978 10:07 AM
.X
1583 5 831
831 5 831
831 5 831
831 5 831
831 6 831
967 6 831
1126 6 831
707 6 831
.I 832
.T
Curve Fitting Constraints (Algorithm 74)
.B
CACM June, 1963
.A
Isoda, K.
.N
CA630617 JB March 14, 1978 10:08 AM
.X
832 5 832
832 5 832
832 5 832
.I 833
.T
Reduction Symmetric Bandmatrix Triple Diagonal Form
.B
CACM June, 1963
.A
Schwartz, H. R.
.N
CA630616JB March 14, 1978 10:09 AM
.X
833 5 833
833 5 833
833 5 833
.I 834
.T
Nonrecursive Adaptive Integration (Algorithm 182)
.B
CACM June, 1963
.A
McKeeman, W. M.
Tesler, L.
.N
CA630615 JB March 14, 1978 10:10 AM
.X
1352 5 834
2048 5 834
2074 5 834
2093 5 834
834 5 834
834 5 834
834 5 834
834 6 834
834 6 834
834 6 834
834 6 834
872 6 834
872 6 834
872 6 834
1040 6 834
1092 6 834
1092 6 834
1241 6 834
1273 6 834
1298 6 834
1573 6 834
324 6 834
429 6 834
429 6 834
429 6 834
429 6 834
570 6 834
621 6 834
786 6 834
786 6 834
786 6 834
.I 835
.T
Complementary Error Function-Large X (Algorithm 181)
.B
CACM June, 1963
.A
Thacher Jr., H. C.
.N
CA630614 JB March 14, 1978 10:12 AM
.X
835 5 835
835 5 835
835 5 835
.I 836
.T
Error Function-Large X (Algorithm 180)
.B
CACM June, 1963
.A
Thacher Jr., H. C.
.N
CA630613 JB March 14, 1978 10:13 AM
.X
1157 5 836
836 5 836
836 5 836
836 5 836
836 6 836
1081 6 836
485 6 836
714 6 836
.I 837
.T
Incomplete Beta Ratio (Algorithm 179)
.B
CACM June, 1963
.A
Ludwig, O. G.
.N
CA630612 JB March 14, 1978 10:15 AM
.X
837 5 837
837 5 837
837 5 837
.I 838
.T
Direct Search (Algorithm 178)
.B
CACM June, 1963
.A
Kaupe Jr., A. F.
.N
CA630611 JB March 14, 1978 10:16 AM
.X
838 5 838
838 5 838
838 5 838
.I 839
.T
Least Squares Solution Constraints (Algorithm 177)
.B
CACM June, 1963
.A
Synge, M. J.
.N
CA630610 JB March 14, 1978 10:17 AM
.X
839 5 839
839 5 839
839 5 839
.I 840
.T
Least Squares Surface Fit (Algorithm 176)
.B
CACM June, 1963
.A
Arthurs, T. D.
.N
CA630609 JB March 14, 1978 10:18 AM
.X
840 5 840
840 5 840
840 5 840
.I 841
.T
Shuttle Sort (Algorithm 175)
.B
CACM June, 1963
.A
Shaw, C. J.
Trimble, T. N.
.N
CA630608 JB March 14, 1978 10:20 AM
.X
841 5 841
841 5 841
841 5 841
.I 842
.T
Posteriori Bounds Zero Polynomial (Algorithm 174)
.B
CACM June, 1963
.A
Gibb, A.
.N
CA630607 JB March 14, 1978 10:21 AM
.X
842 5 842
842 5 842
842 5 842
.I 843
.T
Assign (Algorithm 173)
.B
CACM June, 1963
.A
Hajek, O.
.N
CA630606 JB March 14, 1978 10:22 AM
.X
843 5 843
843 5 843
843 5 843
.I 844
.T
1410 Fortran Edit Feature
.B
CACM June, 1963
.A
Fedako,J. E.
.N
CA630605 JB March 14, 1978 10:23 AM
.X
844 5 844
844 5 844
844 5 844
.I 845
.T
Another Test Matrix Determinants Inverses
.B
CACM June, 1963
.A
Caffrey, J.
.N
CA630604 JB March 14, 1978 10:24 AM
.X
845 5 845
845 5 845
845 5 845
.I 846
.T
Self-Inverse Conversion Table
.B
CACM June, 1963
.A
Sanborn, T. G.
.N
CA630603 JB March 14, 1978 10:25 AM
.X
846 5 846
846 5 846
846 5 846
.I 847
.T
Penny-Matching Program
.W
logic penny-matching program
written CSX-1 described.
.B
CACM June, 1963
.A
Wall, E.
Brown, R. M.
.N
CA630602 JB March 14, 1978 10:27 AM
.X
847 5 847
847 5 847
847 5 847
.I 848
.T
Note Range Transformations Square Root Logarithm
.W
There germ idea two previous
papers [1,2] which no one seems have picked
up almost five years. certain functions seems
desirable transform argument short
range symmetric 10.1 give examples
usage square root logarithm function
both binary decimal machines.
.B
CACM June, 1963
.A
Bemer, R. W.
.N
CA630601 JB March 14, 1978 10:41 AM
.X
848 4 848
848 4 848
26 5 848
35 5 848
848 5 848
848 5 848
848 5 848
.I 849
.T
Use Tree Structures Processing Files
.W
data processing problems, files frequently
used which must both searched altered.
Binary search techniques efficient searching
large files, but associated file organization
not readily adapted file alterations. Conversely,
chained file allocation permits efficient
alteration but cannot searched efficiently. file
organized into tree-like structure discussed,
shown such file may both searched
altered times proportional slog(s)N,
N number file items s parameter
tree. also shown optimizing
value s leads search time which only 25
per cent slower than binary search. tree
organization employs two data chains may considered
compromise between organizations
binary search chained file. relation
tree organization multidimensional
indexing trie structure also discussed.
.B
CACM May, 1963
.A
Sussenguth Jr., E. H.
.N
CA630518 JB March 14, 1978 10:49 AM
.X
435 4 849
2846 4 849
849 4 849
849 4 849
944 4 849
155 5 849
1050 5 849
1935 5 849
1936 5 849
2017 5 849
2032 5 849
2257 5 849
2360 5 849
2451 5 849
2452 5 849
615 5 849
849 5 849
849 5 849
849 5 849
849 6 849
849 6 849
849 6 849
849 6 849
849 6 849
849 6 849
849 6 849
849 6 849
849 6 849
850 6 849
851 6 849
852 6 849
853 6 849
854 6 849
855 6 849
856 6 849
857 6 849
858 6 849
859 6 849
860 6 849
861 6 849
862 6 849
863 6 849
864 6 849
865 6 849
866 6 849
106 6 849
944 6 849
1115 6 849
1785 6 849
209 6 849
1831 6 849
1831 6 849
1935 6 849
1936 6 849
1936 6 849
1936 6 849
1936 6 849
1976 6 849
367 6 849
2198 6 849
2360 6 849
627 6 849
.I 850
.T
Conversion, Reconversion Comparison
Techniques Variable-Length Sorting
.W
logic described converting highly
variable input records into format can
easily efficiently processed sorting program.
internal record formats discussed
relation (1) their conversion input formats,
(2) their reconversion output formats,
(3) comparison techniques between internal formats.
.B
CACM May, 1963
.A
Waks, D. J.
.N
CA630517 JB March 14, 1978 10:52 AM
.X
2017 5 850
850 5 850
850 5 850
850 5 850
849 6 850
850 6 850
851 6 850
852 6 850
853 6 850
854 6 850
855 6 850
856 6 850
857 6 850
858 6 850
859 6 850
860 6 850
861 6 850
862 6 850
863 6 850
864 6 850
865 6 850
866 6 850
.I 851
.T
Design Characteristics Variable-Length
Record Sort Using New Fixed-Length Record Sorting
Techniques
.W
paper describes application several
new techniques sorting fixed-length records
problems variable-length record sorting.
techniques have been implemented Sylvania
9400 computer system 32,000 fixed-length words
memory. Specifically, techniques sequence
variable-length records unrestricted size, produce
long initial strings data, merge strings
data power T-1, T number work
tapes system, do not restrict volume
input data.
.B
CACM May,1963
.A
Goetz, M. A.
.N
CA630516 JB March 14, 1978 10:57 AM
.X
2017 4 851
2017 4 851
851 4 851
851 4 851
2017 5 851
851 5 851
851 5 851
851 5 851
858 5 851
865 5 851
849 6 851
850 6 851
851 6 851
852 6 851
853 6 851
854 6 851
855 6 851
856 6 851
857 6 851
858 6 851
859 6 851
860 6 851
861 6 851
862 6 851
863 6 851
864 6 851
865 6 851
866 6 851
.I 852
.T
Method Comparing Time Requirements Sorting Methods
.B
CACM May, 1963
.A
Hall, M. H.
.N
CA630515 JB March 14, 1978 10:58 AM
.X
1919 4 852
852 4 852
852 4 852
864 4 852
864 4 852
865 4 852
232 5 852
2017 5 852
74 5 852
852 5 852
852 5 852
852 5 852
849 6 852
850 6 852
851 6 852
852 6 852
853 6 852
854 6 852
855 6 852
856 6 852
857 6 852
858 6 852
859 6 852
860 6 852
861 6 852
862 6 852
863 6 852
864 6 852
865 6 852
866 6 852
.I 853
.T
COBOL Sort Verb
.B
CACM May, 1963
.A
Paterson, J. B.
.N
CA630514 JB March 14, 1978 10:59 AM
.X
2017 5 853
853 5 853
853 5 853
853 5 853
849 6 853
850 6 853
851 6 853
852 6 853
853 6 853
854 6 853
855 6 853
856 6 853
857 6 853
858 6 853
859 6 853
860 6 853
861 6 853
862 6 853
863 6 853
864 6 853
865 6 853
866 6 853
.I 854
.T
Some Characteristics Sorting Computing
Systems Using Random Access Storage Devices
.W
substantial differences characteristics
random access storage tape devices dictate
concepts objectives computer program design
considered viewpoint external
file medium used. particularly true
case sorting. tape-oriented system,
major sorting problem minimizing merge time
despite limited orders merge possible.
contrast, sorting random access-oriented system
encourages selection optimum order
merge many possible orders. latter problem
discussed paper, along criteria
developed determining optimum order merge according
various properties random access
storage devices. Attention also given problem
key sorting versus record sorting
possibly serious disadvantage key sorting random access system.
.B
CACM May, 1963
.A
Hubbard, G. U.
.N
CA630513 JB March 14, 1978 11:05 AM
.X
1956 5 854
2017 5 854
854 5 854
854 5 854
854 5 854
849 6 854
850 6 854
851 6 854
852 6 854
853 6 854
854 6 854
854 6 854
855 6 854
856 6 854
857 6 854
858 6 854
859 6 854
860 6 854
861 6 854
862 6 854
863 6 854
864 6 854
865 6 854
866 6 854
.I 855
.T
Organization Structure Dataon Disk File
Memory Systems Efficient Sorting Other
Data Processing Programs
.W
approach organization structure
data Bryant Disc File Memory Systems
sorting performing other data processing functions
presented. following areas covered:
characteristics Bryant Disc File Systems Bendix
G-20 RCA 301; two proposed "chaining" structures
data; functions Disk File Executive Routine.
concepts sorting performing file
maintenance processing using proposed structure
executive routine discussed. Additionally,
shown sorting can accomplished
without use disk storage work areas.
.B
CACM May, 1963
.A
Goetz, M. A.
.N
CA630512 JB March 14, 1978 11:10 AM
.X
2017 5 855
855 5 855
855 5 855
855 5 855
849 6 855
850 6 855
851 6 855
852 6 855
853 6 855
854 6 855
855 6 855
856 6 855
857 6 855
858 6 855
859 6 855
860 6 855
861 6 855
862 6 855
863 6 855
864 6 855
865 6 855
866 6 855
.I 856
.T
Sorting Large Volume, Random Access, Drum Storage
.W
approach sorting records described
using random access drum memory. Sort program
described designed generalized, self-generating
sort, applicable variety record statements.
description divided into three parts.
first part presents operating environment;
second defines general solution; third part
describes internal sort-merge technique.
.B
CACM May, 1963
.A
Falkin, J.
Savastano Jr., S.
.N
CA630511 JB March 14, 1978 11:14 AM
.X
2017 5 856
856 5 856
856 5 856
856 5 856
849 6 856
850 6 856
851 6 856
852 6 856
853 6 856
854 6 856
855 6 856
856 6 856
857 6 856
858 6 856
859 6 856
860 6 856
861 6 856
862 6 856
863 6 856
864 6 856
865 6 856
866 6 856
.I 857
.T
Sorting Nonredundant Files-Techniques Used FACT Compiler
.W
Some typical file structures, including some
called "non-redundant," examined,and
methods used FACT sort such files discussed.
.B
CACM May, 1963
.A
Glore, J. B.
.N
CA630510 JB March 14, 1978 11:16 AM
.X
2017 5 857
857 5 857
857 5 857
857 5 857
849 6 857
850 6 857
851 6 857
852 6 857
853 6 857
854 6 857
855 6 857
856 6 857
857 6 857
858 6 857
859 6 857
860 6 857
861 6 857
862 6 857
863 6 857
864 6 857
865 6 857
866 6 857
.I 858
.T
Tape File Merge Pattern Generator
.W
routine presented which specifies
sequence merge cycles effect merging
sorted tape files. routine designed minimize
elapsed computer time varying power
merge cycles, so use all available tape
drives, its characteristic assigning one
drive single-reel file two drives each multiple-reel file.
.B
CACM May, 1963
.A
Cooke, W. S.
.N
CA630509 JB March 14, 1978 11:21 AM
.X
2017 5 858
851 5 858
858 5 858
858 5 858
858 5 858
849 6 858
850 6 858
851 6 858
852 6 858
853 6 858
854 6 858
855 6 858
856 6 858
857 6 858
858 6 858
858 6 858
859 6 858
860 6 858
861 6 858
862 6 858
863 6 858
864 6 858
865 6 858
865 6 858
866 6 858
.I 859
.T
Computer Planned Collates
.B
CACM May, 1963
.A
French, N.C.
.N
CA630508 JB March 14, 1978 11:22 AM
.X
2017 5 859
859 5 859
859 5 859
859 5 859
849 6 859
850 6 859
851 6 859
852 6 859
853 6 859
854 6 859
855 6 859
856 6 859
857 6 859
858 6 859
859 6 859
860 6 859
861 6 859
862 6 859
863 6 859
864 6 859
865 6 859
866 6 859
.I 860
.T
Comparison Between Polyphase Oscillating Sort Techniques
.W
comparison between Oscillating Polyphase
Sort techniques developed computer
systems having four ten tape drives. basis
comparison total reading writing
required various number input strings
tape drives two techniques.
.B
CACM May, 1963
.A
Goetz, M. A.
Toth, G. S.
.N
CA630507 JB March 14, 1978 11:25 AM
.X
1117 4 860
2017 4 860
2146 4 860
677 4 860
860 4 860
860 4 860
862 4 860
2017 5 860
479 5 860
860 5 860
860 5 860
860 5 860
861 5 860
849 6 860
850 6 860
851 6 860
852 6 860
853 6 860
854 6 860
855 6 860
856 6 860
857 6 860
858 6 860
859 6 860
860 6 860
861 6 860
862 6 860
863 6 860
864 6 860
865 6 860
866 6 860
.I 861
.T
Read-Backward Polyphase Sorting
.W
Read-backward Polyphase sorting provides more
efficient use tapes available sort
than most other sorting techniques. Backward Polyphase
produces continuous merging process n-1
tapes n total number tapes being used
sorting process. Any available presorting
techniques may used conjunction Polyphase
merge sort provided presort has
capability producing both ascending descending
strings distributing strings various
tapes required Polyphase Merge.
.B
CACM May, 1963
.A
Gilstad, R. L.
.N
CA630506 JB March 14, 1978 11:28 AM
.X
1117 4 861
2017 4 861
2146 4 861
861 4 861
1117 5 861
2017 5 861
2146 5 861
677 5 861
860 5 861
862 5 861
861 5 861
861 5 861
861 5 861
849 6 861
850 6 861
851 6 861
852 6 861
853 6 861
854 6 861
855 6 861
856 6 861
857 6 861
858 6 861
859 6 861
860 6 861
861 6 861
861 6 861
861 6 861
861 6 861
861 6 861
862 6 861
862 6 861
862 6 861
863 6 861
863 6 861
864 6 861
865 6 861
866 6 861
299 6 861
479 6 861
636 6 861
.I 862
.T
String Distribution Polyphase Sort
.B
CACM May, 1963
.A
Malcolm Jr., W. D.
.N
CA630505 JB March 14, 1978 11:29 AM
.X
2146 4 862
479 4 862
860 4 862
862 4 862
862 4 862
863 4 862
1117 5 862
299 5 862
2017 5 862
2146 5 862
479 5 862
862 5 862
862 5 862
862 5 862
861 5 862
849 6 862
850 6 862
851 6 862
852 6 862
853 6 862
854 6 862
855 6 862
856 6 862
857 6 862
858 6 862
859 6 862
860 6 862
861 6 862
861 6 862
861 6 862
862 6 862
862 6 862
862 6 862
862 6 862
863 6 862
863 6 862
864 6 862
865 6 862
866 6 862
299 6 862
636 6 862
.I 863
.T
Multiphase Sorting
.B
CACM May, 1963
.A
Manker, H. H.
.N
CA630504 JB March 14, 1978 11:30 AM
.X
2146 4 863
479 4 863
862 4 863
863 4 863
299 5 863
2017 5 863
2146 5 863
863 5 863
863 5 863
863 5 863
849 6 863
850 6 863
851 6 863
852 6 863
853 6 863
854 6 863
855 6 863
856 6 863
857 6 863
858 6 863
859 6 863
860 6 863
861 6 863
861 6 863
862 6 863
862 6 863
863 6 863
863 6 863
864 6 863
865 6 863
866 6 863
299 6 863
.I 864
.T
Empirical Study Minimal Storage Sorting
.B
CACM May, 1963
.A
Hibbard, T. N.
.N
CA630503 JB March 14, 1978 11:31 AM
.X
1919 4 864
1919 4 864
2191 4 864
2388 4 864
2783 4 864
2784 4 864
3054 4 864
3121 4 864
852 4 864
852 4 864
864 4 864
864 4 864
864 4 864
865 4 864
1175 5 864
232 5 864
1919 5 864
309 5 864
2017 5 864
2041 5 864
2216 5 864
74 5 864
864 5 864
864 5 864
864 5 864
849 6 864
850 6 864
851 6 864
852 6 864
853 6 864
854 6 864
855 6 864
856 6 864
857 6 864
858 6 864
859 6 864
860 6 864
861 6 864
862 6 864
863 6 864
864 6 864
864 6 864
864 6 864
864 6 864
864 6 864
865 6 864
866 6 864
1175 6 864
1919 6 864
1969 6 864
1997 6 864
308 6 864
308 6 864
309 6 864
74 6 864
3187 6 864
.I 865
.T
Internal Tape Sorting Using Replacement-Selection Technique
.W
general technique sequencing unsorted
records presented. technique shown
applicable first stage generalized sort
program (the formation initial strings)
well sorting records within memory storage (an
internal sort). shown given N records
memory storage, records sequenced using 1+log2
N tests per record, initial string lengths
average 2N random input records, reading,
writing processing can accomplished
simultaneously if computer permits such overlap.
.B
CACM May, 1963
.A
Goetz, M. A.
.N
CA630502 JB March 14, 1978 11:36 AM
.X
1919 4 865
852 4 865
864 4 865
865 4 865
2017 5 865
74 5 865
851 5 865
865 5 865
865 5 865
865 5 865
849 6 865
850 6 865
851 6 865
852 6 865
853 6 865
854 6 865
855 6 865
856 6 865
857 6 865
858 6 865
858 6 865
859 6 865
860 6 865
861 6 865
862 6 865
863 6 865
864 6 865
865 6 865
865 6 865
866 6 865
.I 866
.T
Sorting Computers
.B
CACM May, 1963
.A
Gotlieb, C. C.
.N
CA630501 JB March 14, 1978 11:37 AM
.X
2017 5 866
866 5 866
866 5 866
866 5 866
849 6 866
850 6 866
851 6 866
852 6 866
853 6 866
854 6 866
855 6 866
856 6 866
857 6 866
858 6 866
859 6 866
860 6 866
861 6 866
862 6 866
863 6 866
864 6 866
865 6 866
866 6 866
.I 867
.T
Least Squares Fitting Planes Surfaces Using Dynamic Programming
.W
Dynamic programming has recently been used
Stone, Bellman Gluss determine
closet fit broken line segments curve
interval under constraint number
segments fixed. present paper successive
models developed extend method
fitting broken plane segments surfaces z=g(x,y) defined
over certain types subareas (x,y)-space.
first model considers rectangular area,
constraint plane segments defined
over grid (x,y)-space. then shown
model may incorporated into algorithm
provides successive approximations optimal fits
any type closed area. Finally, applications
briefly described.
.B
CACM April, 1963
.A
Gluss, B.
.N
CA630424 JB March 14, 1978 11:43 AM
.X
497 4 867
867 4 867
867 4 867
317 5 867
497 5 867
867 5 867
867 5 867
867 5 867
.I 868
.T
Suggested Method Making Fuller Use Strings ALGOL 60
.B
CACM April, 1963
.A
Shoffner, M. G.
Brown, P. J.
.N
CA630423 JB March 14, 1978 11:45 AM
.X
1084 5 868
868 5 868
868 5 868
868 5 868
868 6 868
603 6 868
644 6 868
669 6 868
791 6 868
797 6 868
.I 869
.T
Term Magic Square (Algorithm 148)
.B
CACM April, 1963
.A
Thoro, D.
.N
CA630422 JB March 14, 1978 11:46 AM
.X
869 5 869
869 5 869
869 5 869
.I 870
.T
Term Magic Square (Algorithm 148)
.B
CACM April, 1963
.A
Barnecut, J. N. R.
.N
CA630421 JB March 14, 1978 11:47 AM
.X
870 5 870
870 5 870
870 5 870
.I 871
.T
PSIF (Algorithm 147)
.B
CACM April, 1963
.A
Thacher Jr., H. C.
.N
CA630420 JB March 14, 1978 11:48 AM
.X
1800 5 871
871 5 871
871 5 871
871 5 871
871 6 871
.I 872
.T
Adaptive Numerical Integration Simpson's Rule (Algorithm 145)
.B
CACM April, 1963
.A
McKeeman, W. M.
.N
CA630419 JB March 14, 1978 11:49 AM
.X
1352 5 872
2074 5 872
2093 5 872
872 5 872
872 5 872
872 5 872
834 6 872
834 6 872
834 6 872
872 6 872
872 6 872
872 6 872
1040 6 872
1092 6 872
1092 6 872
1241 6 872
1273 6 872
1298 6 872
1573 6 872
324 6 872
429 6 872
429 6 872
429 6 872
570 6 872
621 6 872
786 6 872
786 6 872
.I 873
.T
Random (Algorithm 133)
.B
CACM April, 1963
.A
Poore Jr., J. H.
.N
CA630418 JB March 14, 1978 11:50 AM
.X
873 5 873
873 5 873
873 5 873
.I 874
.T
Chebyshev Curvefit (Algorithm 91)
.B
CACM April, 1963
.A
Hale, R. P.
.N
CA630417 JB March 14, 1978 11:56 AM
.X
874 5 874
874 5 874
874 5 874
.I 875
.T
Incomplete Elliptic Integrals (Algorithm 73)
.B
CACM April, 1963
.A
van De Riet, R. P.
.N
CA630416 JB March 14, 1978 12:06 PM
.X
875 5 875
875 5 875
875 5 875
.I 876
.T
Complete Elliptic Integral (Algorithm 149)
.B
CACM April, 1963
.A
Thacher, H. C.
.N
CA630415 JB March 14, 1978 12:14 PM
.X
876 5 876
876 5 876
876 5 876
.I 877
.T
Complete Elliptic Integral First Kind (Algorithm 55)
.B
CACM April, 1963
.A
Thacher Jr., H. C.
.N
CA630414 JB March 14, 1978 12:15 PM
.X
877 5 877
877 5 877
877 5 877
.I 878
.T
Reduction Matrix Containing Polynomial Elements (Algorithm 170)
.B
CACM April, 1963
.A
Hennion, P. E.
.N
CA630413 JB March 14, 1978 12:17 PM
.X
1946 5 878
878 5 878
878 5 878
878 5 878
878 6 878
902 6 878
1093 6 878
1177 6 878
1387 6 878
1393 6 878
360 6 878
731 6 878
.I 879
.T
Newton Interpolation Forward Divided Differences (Algorithm 169)
.B
CACM April, 1963
.A
Kahan, W.
Farkas, I.
.N
CA630412 JB March 14, 1978 12:18 PM
.X
1524 5 879
879 5 879
879 5 879
879 5 879
879 6 879
1197 6 879
311 6 879
.I 880
.T
Newton Interpolation Backward Divided Differences
.B
CACM April, 1963
.A
Kahan, W.
Farkas, I.
.N
CA630411 JB March 14, 1978 12:20 PM
.X
880 5 880
880 5 880
880 5 880
.I 881
.T
Calculation Confluent Divided Differences (Algorithm 167)
.B
CACM April, 1963
.A
Kahan, W.
Farkas, I.
.N
CA630410 JB March 14, 1978 12:21 PM
.X
881 5 881
881 5 881
881 5 881
.I 882
.T
Monte Carlo (Algorithm 166)
.B
CACM April, 1963
.A
Rodman, R. D.
.N
CA630409 JB March 14, 1978 12:22 PM
.X
882 5 882
882 5 882
882 5 882
.I 883
.T
Complete Elliptic Integrals (Algorithm 165)
.B
CACM April, 1963
.A
Thacher Jr., H. C.
.N
CA630408 JB March 14, 1978 12:23 PM
.X
883 5 883
883 5 883
883 5 883
.I 884
.T
Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164)
.B
CACM April, 1963
.A
Clark, R. E.
Kubik, R. N.
Phillips, L. P.
.N
CA630407 JB March 14, 1978 12:25 PM
.X
884 5 884
884 5 884
884 5 884
.I 885
.T
Modified Hankel Function (Algorithm 163)
.B
CACM April, 1963
.A
Fettis, H. E.
.N
CA630406 JB March 14, 1978 12:26 PM
.X
1040 5 885
885 5 885
885 5 885
885 5 885
885 6 885
587 6 885
621 6 885
.I 886
.T
XY-move Plotting (Algorithm 162)
.B
CACM April, 1963
.A
Stockton, F. G.
.N
CA630405 JB March 14, 1978 12:27 PM
.X
886 5 886
886 5 886
886 5 886
.I 887
.T
Combinatorial M Things Taken One Time,
Two Time, Up N Time (Algorithm 161)
.B
CACM April, 1963
.A
Wright, H. V.
Wolfson, M. L.
.N
CA630404 JB March 14, 1978 12:28 PM
.X
887 5 887
887 5 887
887 5 887
.I 888
.T
Algorithm 160 Combinatorial M Things Taken N Time
.B
CACM April, 1963
.A
Wolfson, M. L.
Wright, H. V.
.N
CA630403 JB March 14, 1978 12:29 PM
.X
2590 5 888
888 5 888
888 5 888
888 5 888
888 6 888
.I 889
.T
Official Actions Responses ALGOL Programming Language
.B
CACM April, 1963
.N
CA630402 JB March 14, 1978 12:30 PM
.X
889 5 889
889 5 889
889 5 889
.I 890
.T
Selected Definitions
.W
selection definitions prepared
ACM Standards Committee's Subcommittee Programming
Terminology presented review ACM membership.
.B
CACM April, 1963
.A
Fritz, W. B.
.N
CA630401 JB March 14, 1978 12:32 PM
.X
690 5 890
890 5 890
890 5 890
890 5 890
890 6 890
929 6 890
3195 6 890
.I 891
.T
Everyman's Information Retrieval System
.W
information retrieval problem whose solution
presented here posed technical
library limited bubget personnel. solution,
however, quite general applicable
many different types retrieval problems. Further,the
method solution makes possible
many groups have previously dismissed information
retrieval program expensive difficult
(from programming stand-point) reconsider their position,
present solution makes possible
install information retrieval program less than
three months, relatively little equipment.
.B
CACM March, 1963
.A
Whitley, V. W.
.N
CA630329 JB March 14, 1978 12:37 PM
.X
891 5 891
891 5 891
891 5 891
.I 892
.T
RECOL-A Retrieval Command Language
.W
interrogation scheme described
retrieval manipulation data file records.
language interrogation scheme allows selecting
file records logical condition
statements, defining record classes, associating file
records, editing printed output, summarizing
results above operations. Some examples
typical file application more significant
features particular machine implementation given.
.B
CACM March, 1963
.A
Climenson, W. D.
.N
CA630328 JB March 14, 1978 12:42 PM
.X
1309 4 892
1324 4 892
892 4 892
892 4 892
653 5 892
656 5 892
892 5 892
892 5 892
892 5 892
.I 893
.T
Significance Arithmetic Digital Computer
.W
7090 NYU has been modified include
"Significance Mode" operation which intended
facilitate identification significant bits
results floating-point arithmetic operations.
manner which floating-point arithmetic handled
mode discussed. Several numerical
experiments using mode described comparisons
made ordinary "normalized mode."
Examples include power series evaluation, linear equations
solution, determinant evaluation matrix
inversion.
.B
CACM March, 1963
.A
Goldstein, M.
.N
CA630327 JB March 14, 1978 12:47 PM
.X
3131 5 893
893 5 893
893 5 893
893 5 893
893 6 893
1148 6 893
.I 894
.T
Iterative Factorization Technique Polynomials
.W
iterative technique displayed whereby factors
arbitrary degree can found polynomials
one variable. Convergence shown occur always
if certain Jacobian does not vanish if
initial approximation factor near enough
actual factor. process simply programmed,
preliminary results indicate well adapted
use digital computers. factors
degree two, technique similar Bairstow,
present method being somewhat simpler.
.B
CACM March, 1963
.A
Luther, H. A.
.N
CA630326 JB March 14, 1978 12:51 PM
.X
1111 5 894
894 5 894
894 5 894
894 5 894
894 6 894
.I 895
.T
Computational Extension Variate Difference Method
.W
Presented here computational extension
variate difference method developed
G. Tintner [1].
.B
CACM March, 1963
.A
Scheinok, P. A.
.N
CA630325 JB March 14, 1978 12:57 PM
.X
895 5 895
895 5 895
895 5 895
.I 896
.T
Characteristic Values Vectors Defective Matrices
.B
CACM March, 1963
.A
Thompson, G. T.
.N
CA630324 JB March 14, 1978 12:58 PM
.X
896 5 896
896 5 896
896 5 896
.I 897
.T
Note Proof Non-existence
Phrase Structure Grammar ALGOL 60
.B
CACM March, 1963
.A
Brown, P. J.
.N
CA630323 JB March 14, 1978 1:00 PM
.X
897 5 897
897 5 897
897 5 897
.I 898
.T
Random (Algorithm 133)
.B
CACM March, 1963
.A
Laughlin, D. L.
.N
CA630322 JB March 14, 1978 1:01 PM
.X
898 5 898
898 5 898
898 5 898
.I 899
.T
Magic Square (Algorithm 117 & 118)
.B
CACM March, 1963
.A
Bosworth, K. M.
.N
CA630321 JB March 14, 1978 1:02 PM
.X
899 5 899
899 5 899
899 5 899
.I 900
.T
Ancestor (Algorithm 79)
.B
CACM March, 1963
.A
Thacher Jr., H. C.
.N
CA630320 JB March 14, 1978 1:23 PM
.X
900 5 900
900 5 900
900 5 900
.I 901
.T
Difference Expression Coefficients (Algorithm 79)
.B
CACM March, 1963
.A
Clark, E. S.
.N
CA630319 JB March 14, 1978 1:24 PM
.X
901 5 901
901 5 901
901 5 901
.I 902
.T
Determinant (Algorithm 159)
.B
CACM March, 1963
.A
Digby, D. W.
.N
CA630318 JB March 14, 1978 1:28 PM
.X
902 5 902
902 5 902
902 5 902
1946 5 902
878 6 902
902 6 902
1093 6 902
1177 6 902
1387 6 902
1393 6 902
360 6 902
731 6 902
.I 903
.T
Exponentiation Series (Algorithm 134 )
.B
CACM March, 1963
.A
Fettis, H. E.
.N
CA630317 JB March 14, 1978 1:29 PM
.X
903 5 903
903 5 903
903 5 903
.I 904
.T
Fourier Series Approximation (Algorithm 157)
.B
CACM March, 1963
.A
Mifsud, C. J.
.N
CA630316 JB March 14, 1978 1:31 PM
.X
904 5 904
904 5 904
904 5 904
.I 905
.T
Algebra Sets (Algorithm 156)
.B
CACM March, 1963
.A
Mifsud, C. J.
.N
CA630315 JB March 14, 1978 1:32 PM
.X
905 5 905
905 5 905
905 5 905
.I 906
.T
Combination any Order (Algorithm 155)
.B
CACM March, 1963
.A
Mifsud, C. J.
.N
CA630314 JB March 14, 1978 1:33 PM
.X
906 5 906
906 5 906
906 5 906
.I 907
.T
Combination Lexicographical Order (Algorithm 154)
.B
CACM March, 1963
.A
Mifsud, C. J.
.N
CA630313 JB March 14, 1978 1:34 PM
.X
907 5 907
907 5 907
907 5 907
3115 5 907
907 6 907
2045 6 907
2417 6 907
2466 6 907
2884 6 907
579 6 907
785 6 907
.I 908
.T
Test Matrix Inversion
.B
CACM March, 1963
.A
LaSor, W. S.
.N
CA630312a JB March 14, 1978 1:38 PM
.X
908 5 908
908 5 908
908 5 908
.I 909
.T
Arithmetizing Declarations (Corrigendum)
.B
CACM March, 1963
.A
Conway, M. E.
Speroni, J.
.N
CA630312b JB March 14, 1978 1:40 PM
.X
909 5 909
909 5 909
909 5 909
1963 5 909
909 6 909
475 6 909
750 6 909
.I 910
.T
Selective Instruction Trap 7090
.B
CACM March, 1963
.A
Mayer, R. J.
.N
CA630311 JB March 14, 1978 1:41 PM
.X
910 5 910
910 5 910
910 5 910
.I 911
.T
Variant Method File Searching
.B
CACM March, 1963
.A
McIlroy, M. D.
.N
CA630310 JB March 14, 1978 1:42 PM
.X
1271 4 911
1785 4 911
1785 4 911
2203 4 911
2543 4 911
2552 4 911
2860 4 911
911 4 911
911 4 911
911 5 911
911 5 911
911 5 911
1785 5 911
332 5 911
2203 5 911
2552 5 911
492 5 911
911 6 911
911 6 911
911 6 911
1785 6 911
1785 6 911
1786 6 911
332 6 911
332 6 911
2107 6 911
2109 6 911
2203 6 911
492 6 911
492 6 911
.I 912
.T
Addressing Array Yi k-Dimensions
Fortran Analysis Variance
.B
CACM March, 1963
.A
Garber, M. J.
.N
CA630309 JB March 14, 1978 1:44 PM
.X
912 5 912
912 5 912
912 5 912
1014 5 912
912 6 912
.I 913
.T
Neliac
.B
CACM March, 1963
.A
Halstead, M. H.
.N
CA630308 JB March 14, 1978 1:45 PM
.X
913 5 913
913 5 913
913 5 913
.I 914
.T
Jovial Its Documentation
.B
CACM March, 1963
.A
Shaw, C. J.
.N
CA630307 JB March 14, 1978 1:46 PM
.X
914 5 914
914 5 914
914 5 914
1945 5 914
823 6 914
914 6 914
915 6 914
917 6 914
984 6 914
989 6 914
990 6 914
1012 6 914
1084 6 914
1098 6 914
1122 6 914
1138 6 914
1139 6 914
1141 6 914
1200 6 914
1223 6 914
1265 6 914
1336 6 914
1396 6 914
1455 6 914
1477 6 914
1487 6 914
1491 6 914
1496 6 914
483 6 914
584 6 914
669 6 914
680 6 914
763 6 914
.I 915
.T
Documentation IPL-V
.B
CACM March, 1963
.A
Newell, A.
.N
CA630306 JB March 14, 1978 1:46 PM
.X
915 5 915
915 5 915
915 5 915
1945 5 915
823 6 915
914 6 915
915 6 915
917 6 915
984 6 915
989 6 915
990 6 915
1012 6 915
1084 6 915
1098 6 915
1122 6 915
1138 6 915
1139 6 915
1141 6 915
1200 6 915
1223 6 915
1265 6 915
1336 6 915
1396 6 915
1455 6 915
1477 6 915
1487 6 915
1491 6 915
1496 6 915
483 6 915
584 6 915
669 6 915
680 6 915
763 6 915
.I 916
.T
FORTRAN
.B
CACM March, 1963
.A
Heising, W. P.
.N
CA630305 JB March 14, 1978 1:47 PM
.X
916 5 916
916 5 916
916 5 916
.I 917
.T
COMIT
.B
CACM March, 1963
.A
Yngve, V. H.
.N
CA630304 JB March 14, 1978 1:48 PM
.X
917 5 917
917 5 917
917 5 917
1068 5 917
1945 5 917
823 6 917
914 6 917
915 6 917
917 6 917
917 6 917
984 6 917
989 6 917
990 6 917
1012 6 917
1084 6 917
1098 6 917
1122 6 917
1138 6 917
1139 6 917
1141 6 917
1200 6 917
1223 6 917
1265 6 917
1336 6 917
1396 6 917
1455 6 917
1477 6 917
1487 6 917
1491 6 917
1496 6 917
483 6 917
584 6 917
669 6 917
680 6 917
763 6 917
.I 918
.T
COBOL
.B
CACM March, 1963
.A
Cunningham, J. F.
.N
CA630303 JB March 27, 1978 9:22 PM
.X
918 5 918
918 5 918
918 5 918
.I 919
.T
Documentation Problems: ALGOL 60
.B
CACM March, 1963
.A
Naur, P.
.N
CA630302 JB March 14, 1978 1:50 PM
.X
249 4 919
254 4 919
272 4 919
1102 4 919
1109 4 919
1140 4 919
1188 4 919
1306 4 919
1464 4 919
1491 4 919
1767 4 919
1781 4 919
1787 4 919
1949 4 919
321 4 919
2059 4 919
2126 4 919
435 4 919
437 4 919
463 4 919
483 4 919
491 4 919
2732 4 919
560 4 919
583 4 919
3073 4 919
627 4 919
631 4 919
632 4 919
642 4 919
644 4 919
653 4 919
680 4 919
761 4 919
762 4 919
763 4 919
123 4 919
140 4 919
919 4 919
989 4 919
196 5 919
919 5 919
919 5 919
919 5 919
1781 5 919
123 6 919
196 6 919
919 6 919
990 6 919
1007 6 919
1046 6 919
1131 6 919
1139 6 919
1140 6 919
1149 6 919
1198 6 919
1215 6 919
1223 6 919
1265 6 919
1303 6 919
1323 6 919
1358 6 919
1366 6 919
1421 6 919
1460 6 919
1462 6 919
1463 6 919
1467 6 919
1468 6 919
1477 6 919
1491 6 919
1496 6 919
1531 6 919
1535 6 919
1565 6 919
1601 6 919
1602 6 919
1613 6 919
1614 6 919
1626 6 919
1641 6 919
1787 6 919
1788 6 919
205 6 919
224 6 919
249 6 919
288 6 919
316 6 919
381 6 919
398 6 919
11 6 919
404 6 919
410 6 919
463 6 919
464 6 919
483 6 919
3184 6 919
3188 6 919
584 6 919
600 6 919
680 6 919
691 6 919
763 6 919
799 6 919
.I 920
.T
Toward Better Documentation Programming Languages
.B
CACM March, 1963
.A
Yngve, V. H.
Sammet, J. E.
.N
CA630301 JB March 14, 1978 1:51 PM
.X
920 5 920
920 5 920
920 5 920
728 5 920
920 6 920
45 6 920
.I 921
.T
Incomplete Elliptic Integrals (Algorithm 73)
.B
CACM February, 1963
.A
Meyer, N. A.
.N
CA630212 JB March 14, 1978 2:03 PM
.X
921 5 921
921 5 921
921 5 921
.I 922
.T
Multint (Algorithm 32)
.B
CACM February, 1963
.A
Thacher Jr., H. C.
.N
CA630211JB March 14, 1978 2:10 PM
.X
922 5 922
922 5 922
922 5 922
.I 923
.T
Gomory (Algorithm 153)
.B
CACM February, 1963
.A
Bauer, F. L.
.N
CA630210 JB March 14, 1978 2:12 PM
.X
923 5 923
923 5 923
923 5 923
.I 924
.T
Nexcom (Algorithm 152)
.B
CACM February, 1963
.A
Hopley, J.
.N
CA630209 JB March 14, 1978 2:12 PM
.X
924 5 924
924 5 924
924 5 924
.I 925
.T
Location Vector Lexicographically Ordered ListAlgorithm 151)
.B
CACM February, 1963
.A
Walter, H. F.
.N
CA630208 JB March 14, 1978 2:17 PM
.X
925 5 925
925 5 925
925 5 925
.I 926
.T
Syminv2 (Algorithm 150)
.B
CACM February, 1963
.A
Rutishauser, H.
.N
CA630207 JB March 14, 1978 2:18 PM
.X
926 5 926
926 5 926
926 5 926
.I 927
.T
Linear Programming Applied Ultraviolet Absorption Spectroscopy
.B
CACM February, 1963
.A
White, W. C.
Shapiro, B.
Pratt, A. W.
.N
CA630206 JB March 14, 1978 2:19 PM
.X
927 5 927
927 5 927
927 5 927
.I 928
.T
Character Manipulation FORTRAN
.B
CACM February, 1963
.A
Lewis, T. S.
.N
CA630205 JB March 14, 1978 2:20 PM
.X
928 5 928
928 5 928
928 5 928
.I 929
.T
Glossary Construction
.B
CACM February, 1963
.A
Grems, M.
.N
CA630204 JB March 14, 1978 2:21 PM
.X
929 4 929
929 5 929
929 5 929
929 5 929
397 5 929
690 5 929
890 6 929
929 6 929
3195 6 929
.I 930
.T
Decimal-to-Binary Conversion Short Fields
.B
CACM February, 1963
.A
Yarbrough, L. D.
.N
CA630203 JB March 14, 1978 2:22 PM
.X
930 5 930
930 5 930
930 5 930
.I 931
.T
Systematic Mistake Analysis Digital Computer Programs
.B
CACM February, 1963
.A
Miller, J. C.
Maloney, C. J.
.N
CA630202 JB March 14, 1978 2:23 PM
.X
1324 4 931
931 4 931
931 4 931
931 4 931
931 5 931
931 5 931
931 5 931
202 5 931
396 5 931
2616 5 931
634 5 931
795 5 931
931 6 931
931 6 931
1548 6 931
1684 6 931
2517 6 931
404 6 931
.I 932
.T
Matrix Inversion Gauss-Jordan Inversion II (Algorithm 120)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630116 JB March 14, 1978 2:27 PM
.X
932 5 932
932 5 932
932 5 932
806 5 932
932 6 932
454 6 932
.I 933
.T
Magic Squares (Algorithm 117 & 118)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630115 JB March 14, 1978 2:31 PM
.X
933 5 933
933 5 933
933 5 933
.I 934
.T
Gauss's Method (Algorithm 107)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630114 JB March 14, 1978 2:32 PM
.X
934 5 934
934 5 934
934 5 934
.I 935
.T
Calculating Primes Means GPS (Algorithm)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630113 JB March 14, 1978 2:33 PM
.X
935 5 935
935 5 935
935 5 935
.I 936
.T
Set Test Matrices (Algorithm 52)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630112 JB March 14, 1978 2:35 PM
.X
936 5 936
936 5 936
936 5 936
.I 937
.T
Inverse Finite Segment Hilbert Matrix (Algorithm 50)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630111 JB March 14, 1978 2:36 PM
.X
937 5 937
937 5 937
937 5 937
.I 938
.T
Invert (Algorithm 42)
.B
CACM January, 1963
.A
Naur, P.
.N
CA630110 JB March 14,1978 2:36 PM
.X
938 5 938
938 5 938
938 5 938
.I 939
.T
Gamma Function (Algorithm 31)
.B
CACM January, 1963
.A
Behrenz, P. G.
.N
CA630109 JB March 14, 1978 2:37 PM
.X
939 5 939
939 5 939
939 5 939
.I 940
.T
Generating Discrete Random Variables Computer
.W
note concerned details
instruct computer choose one many things
assigned probabilities. method uses uniform
variable direct computer memory location;
if done sequence appropriately chosen
conditional probabilities, efficient use memory
space quite fast programs result.
.B
CACM January, 1963
.A
Marsaglia, G.
.N
CA630108 JB March 14, 1978 2:40 PM
.X
940 5 940
940 5 940
940 5 940
1073 5 940
1153 5 940
940 6 940
940 6 940
1153 6 940
.I 941
.T
Recursive Program General n-Dimensional Integral
.W
general program outlined n-dimensional
integration variable limits. program
recursive nature uses Simpson's rule combined
repeated bisection attain required
accuracy. developed Ferranti Mercury Autocode Scheme.
.B
CACM January, 1963
.A
Cadwell, J. H.
.N
CA630107 JB March 14, 1978 2:43 PM
.X
941 5 941
941 5 941
941 5 941
.I 942
.T
FORTRAN Subroutines Time Series Analysis
.W
authors have recently been concerned
time-series study constituted fairly typical
piece applied statistical research, involving extensive
computations moderately large quantity
data. Wehave found many different numerical
processes were required could built
up almost completely small number basic operations,
set FORTRAN subroutines has been
written perform these. main purpose
note describe these subroutines, but since
question general statistical programs
topical [1], we include some general remarks.
.B
CACM January, 1963
.A
Healy, M. J. R.
Bogert, B. P.
.N
CA630106 JB March 14, 1978 2:55 PM
.X
942 5 942
942 5 942
942 5 942
948 5 942
1118 5 942
826 5 942
826 6 942
942 6 942
942 6 942
942 6 942
.I 943
.T
Terms Frequently Combined Problem Description
.B
CACM January, 1963
.A
Grems, M.
.N
CA630105 JB March 14, 1978 2:56 PM
.X
943 5 943
943 5 943
943 5 943
.I 944
.T
Storage Search Properties Tree-Organized Memory System
.W
memory list properties [1] may used
construct numeric, alphabetic alphanumeric
trees. Such trees have information storage retrieval
properties applicable problems involving
large quantities data problems quantity,
word length distribution stored information
not known priori, changes rapidly during processing.
purpose paper examine
storage search properties tree-organized
storage system assuming memory possessing
certain list properties available. prime interest
application symbol table, dictionary
similar file stored searched.
.B
CACM January, 1963
.A
Scidmore, A. K.
Weinberg, B. L.
.N
CA630104 JB March 14, 1978 3:02 PM
.X
2846 4 944
849 4 944
944 4 944
155 5 944
944 5 944
944 5 944
944 5 944
1234 5 944
2451 5 944
849 6 944
944 6 944
944 6 944
1935 6 944
1936 6 944
321 6 944
385 6 944
400 6 944
402 6 944
404 6 944
3184 6 944
729 6 944
.I 945
.T
Arithmetizing Declarations: Application COBOL
.B
CACM January, 1963
.A
Conway, M. E.
Speroni, J.
.N
CA630103 JB March 14, 1978 3:03 PM
.X
1046 4 945
1105 4 945
1139 4 945
1140 4 945
1234 4 945
1263 4 945
1265 4 945
1496 4 945
1781 4 945
1824 4 945
2126 4 945
2546 4 945
464 4 945
584 4 945
631 4 945
653 4 945
680 4 945
763 4 945
795 4 945
799 4 945
945 4 945
945 5 945
945 5 945
945 5 945
404 5 945
799 5 945
945 6 945
399 6 945
82 6 945
404 6 945
.I 946
.T
Suggestions ALGOL 60 (ROME) Issues - Report American
Standards Association Subcommittee X3.4.2
.B
CACM January, 1963
.A
Utman, R. E.
.N
CA630102 JB March 14, 1978 3:05 PM
.X
946 5 946
946 5 946
946 5 946
1949 5 946
196 6 946
946 6 946
.I 947
.T
Supplement ALGOL 60 Report
.B
CACM January, 1963
.A
Woodger, M.
.N
CA630101 JB March 14, 1978 3:05 PM
.X
947 5 947
947 5 947
947 5 947
761 5 947
196 6 947
947 6 947
3184 6 947
.I 948
.T
Note Use Procedures
.B
CACM December, 1964
.A
Healy, M. J. R.
.N
CA641223 JB March 9, 1978 2:32 PM
.X
1118 4 948
826 4 948
948 4 948
942 5 948
948 5 948
948 5 948
948 5 948
.I 949
.T
Integer Signed Constants ALGOL
.W
few remarks given relations between
syntax semantics programming languages.
aim point out that, if true grammar
context-free language should conceived
not only strings-generating device but also
method expressing meaning, then grammar
ALGOL open some criticism.
.B
CACM December, 1964
.A
Petrone, L.
Vandoni, C. E.
.N
CA641222 JB March 9, 1978 2:35 PM
.X
1086 4 949
1102 4 949
1132 4 949
1142 4 949
1234 4 949
1263 4 949
1265 4 949
1270 4 949
1323 4 949
1358 4 949
1379 4 949
1380 4 949
1453 4 949
1464 4 949
1484 4 949
1491 4 949
1498 4 949
1613 4 949
1614 4 949
1781 4 949
1781 4 949
1781 4 949
1825 4 949
1860 4 949
1945 4 949
1945 4 949
2083 4 949
2178 4 949
2179 4 949
2252 4 949
2325 4 949
2341 4 949
2546 4 949
2645 4 949
2652 4 949
2684 4 949
2842 4 949
2929 4 949
2934 4 949
3069 4 949
669 4 949
679 4 949
691 4 949
761 4 949
762 4 949
949 4 949
949 4 949
949 4 949
989 4 949
949 5 949
949 5 949
949 5 949
483 5 949
584 5 949
3184 5 949
.I 950
.T
Parallel Methods Integrating Ordinary Differential Equations
.W
paper dedicated proposition that,
order take full advantage real-time
computations highly parallel computers can
expected available near future, much
numerical analysis have recast more
"parallel" form. meant serial
algorithms ought replaced algorithm which
consist several subtasks which can computed
without knowledge results other subtasks.
example, method proposed "parallelizing"
numerical integration ordinary differential
equation, which process, all standard methods,
entirely serial.
.B
CACM December, 1964
.A
Nievergelt, J.
.N
CA641221 JB March 9, 1978 3:09 PM
.X
950 5 950
950 5 950
950 5 950
.I 951
.T
Rational Chebyshev Approximations
Bessel Function Integrals Kis(x)
.W
second Remes algorithm used approximate
integrals Kis rational functions.
related coefficients approximations
Ki1, Ki2, Ki3 given different precisions.
.B
CACM December, 1964
.A
Gargantini, I.
Pomentale, T.
.N
CA641220 JB March 9, 1978 3:12 PM
.X
1015 4 951
1346 4 951
1440 4 951
1645 4 951
951 4 951
951 5 951
951 5 951
951 5 951
1346 5 951
532 5 951
951 6 951
532 6 951
.I 952
.T
Another use FORTRAN II Chaining
.B
CACM December, 1964
.A
Drath, D. G.
.N
CA641219 JB March 9, 1978 3:13 PM
.X
952 5 952
952 5 952
952 5 952
.I 953
.T
Scanning Text 1401
.B
CACM December, 1964
.A
Baker, J. J.
.N
CA641218 JB March 9, 1978 3:13 PM
.X
953 5 953
953 5 953
953 5 953
2870 5 953
953 6 953
2377 6 953
2632 6 953
.I 954
.T
Note Calculation Probabilities F-Distribution
.B
CACM December, 1964
.A
Smillie, K. W.
Anstey, T. H.
.N
CA641217 JB March 9, 1978 3:14 PM
.X
954 5 954
954 5 954
954 5 954
.I 955
.T
Class Matrices Test Inversion Procedures
.B
CACM December, 1964
.A
Cline, R. E.
.N
CA641216 JB March 9, 1978 3:16 PM
.X
955 5 955
955 5 955
955 5 955
.I 956
.T
Family Test Matrices
.B
CACM December, 1964
.A
Newbery, A. C. R.
.N
CA641215 JB March 9, 1978 3:17 PM
.X
956 5 956
956 5 956
956 5 956
.I 957
.T
Method Partial Rewriting Magnetic Tape
.B
CACM December, 1964
.A
Miller, J. A.
.N
CA641214 JB March 9, 1978 3:18 PM
.X
957 5 957
957 5 957
957 5 957
.I 958
.T
Case too Much Precision
.B
CACM December, 1964
.A
Synge, M. J.
.N
CA641213 JB March 9, 1978 3:23 PM
.X
958 5 958
958 5 958
958 5 958
.I 959
.T
Mark Sense Port-A-Punch Programming Inputs
.B
CACM December, 1964
.A
Lubbert, W. F.
.N
CA641212 JB March 9, 1978 3:24 PM
.X
959 5 959
959 5 959
959 5 959
.I 960
.T
Curve Fitting Format Fortran
.B
CACM December, 1964
.A
Garber, M. J.
.N
CA641211 JB March 9, 1978 3:25 PM
.X
960 5 960
960 5 960
960 5 960
.I 961
.T
Limited Bit Manipulation Using FORTRAN II
.W
Techniques developed manipulating bits
using only FORTRAN II. These techniques allow
individual bits tested, certain fields
shifted, numbers coded BCD converted
Binary.
.B
CACM December, 1964
.A
Oster, C. A.
.N
CA641210 JB March 9, 1978 3:27 PM
.X
961 5 961
961 5 961
961 5 961
.I 962
.T
Double-Precision Squares Root CDC-3600
.W
January 1960, late Hans J. Maehly completed
summary approximations elementary
functions CDC-1604 computer. approximations
techniques suggested Maehly equally
applicable second large computer CDC line,
3600. Unlike 1604, however, 3600
has built-in double-precision floating-point arithmetic.
present work, largely inspired successes
Maehly his associates, concerns extension one
Maehly's ideas double-precision subroutine
3600.
.B
CACM December, 1964
.A
Cody, W. J.
.N
CA641209 JB March 9, 1978 3:31 PM
.X
962 5 962
962 5 962
962 5 962
1440 5 962
1932 5 962
2159 5 962
962 6 962
962 6 962
962 6 962
1566 6 962
1932 6 962
532 6 962
.I 963
.T
Relative Effects Central Processor Input-Output
Speeds Upon Throughput Large Computer
.W
Presented paper technique
determining relative effects internal
speed computer speed input-output
units upon overall speed system. Equations
derived which permit determination these
effects hardware usage measurements.
.B
CACM December, 1964
.A
White, P.
.N
CA641208 JB March 9, 1978 3:34 PM
.X
963 5 963
963 5 963
963 5 963
1653 5 963
963 6 963
1069 6 963
1417 6 963
.I 964
.T
Mechanization Tedious Algebra-the
e Coefficients Theoretical Chemistry
.W
table formulas certain integrals
involving Legendre functions has been constructed
mechanically program which performed algebraic operations.
formulas all rational algebraic
expressions single variable were constructed
recurrence procedure. They interest
molecular quantum chemistry. Trivial coding techniques
were used write relevant programs
FORTRAN. results were photo composed Photon
S-560 system, controlled tapes which
were punched directly computer output, so
avoiding manual keyboarding, transcription errors
keyboarded correction.
.B
CACM December, 1964
.A
Wactlar, H. D.
Barnett, M. P.
.N
CA641207 JB March 9, 1978 3:38 PM
.X
1028 4 964
1121 4 964
1216 4 964
1392 4 964
1396 4 964
1396 4 964
659 4 964
964 4 964
964 4 964
964 4 964
964 5 964
964 5 964
964 5 964
1334 5 964
1396 5 964
284 5 964
1444 5 964
561 5 964
759 5 964
964 6 964
964 6 964
964 6 964
1028 6 964
1029 6 964
1083 6 964
1132 6 964
1214 6 964
1278 6 964
1334 6 964
1365 6 964
1386 6 964
1387 6 964
1388 6 964
1392 6 964
1393 6 964
1394 6 964
1395 6 964
1396 6 964
1397 6 964
1496 6 964
284 6 964
407 6 964
3199 6 964
3200 6 964
3201 6 964
3202 6 964
3203 6 964
3204 6 964
561 6 964
730 6 964
.I 965
.T
Greatest Common Divisor (Algorithm 237 [A1])
.B
CACM December, 1964
.A
Bray, T. A.
.N
CA641206 JB March 9, 1978 3:40 PM
.X
965 5 965
965 5 965
965 5 965
.I 966
.T
Evaluation Determinant (Algorithm 224 [F3])
.B
CACM December, 1964
.A
Hasselblad, V.
Rulifson, J.
.N
CA641205 JB March 9, 1978 3:41 PM
.X
966 5 966
966 5 966
966 5 966
.I 967
.T
Complementary Error Function (Algorithm 181 [S15])
.B
CACM December, 1964
.A
Clausen, I.
Hansson,L.
.N
CA641204 JB March 9, 1978 3:42 PM
.X
967 5 967
967 5 967
967 5 967
1583 5 967
831 6 967
967 6 967
1126 6 967
707 6 967
.I 968
.T
Radical-Inverse Quasi-Random Point Sequence (Algorithm 247 [G5])
.B
CACM December, 1964
.A
Halton, J. H.
Smith, G. B.
.N
CA641203 JB March 9, 19783:43 PM
.X
968 5 968
968 5 968
968 5 968
.I 969
.T
Graycode (Algorithm 246 [Z])
.B
CACM December, 1964
.A
Boothroyd, J.
.N
CA641202 JB March 9, 1978 3:44 PM
.X
969 5 969
969 5 969
969 5 969
2834 5 969
969 6 969
2045 6 969
2417 6 969
2466 6 969
.I 970
.T
Treesort 3 (Algorithm [M1])
.B
CACM December, 1964
.A
Floyd, R. W.
.N
CA641201 JB March 9, 1978 3:45 PM
.X
970 5 970
970 5 970
970 5 970
2042 5 970
2222 5 970
2356 5 970
2679 5 970
2844 5 970
2972 5 970
970 6 970
970 6 970
970 6 970
970 6 970
970 6 970
970 6 970
1059 6 970
1175 6 970
1190 6 970
1228 6 970
1228 6 970
1491 6 970
1800 6 970
1818 6 970
1834 6 970
1969 6 970
1997 6 970
308 6 970
2042 6 970
2042 6 970
2204 6 970
2227 6 970
2597 6 970
2732 6 970
2738 6 970
2742 6 970
2767 6 970
3187 6 970
507 6 970
716 6 970
783 6 970
.I 971
.T
Time Sharing Traffic Control Program
.W
Toronto traffic signal control system consists
variety logically distinct computer
programs, all competing machine time. satisfy
these demands, time-sharing program has been
written whose purpose execute, order
predefined priority, various subprograms within
real-time system. paper more interesting
aspects time-sharing program outlined.
.B
CACM November, 1964
.A
Green, L. E. S.
.N
CA641112 JB March 9, 1978 3:49 PM
.X
971 5 971
971 5 971
971 5 971
.I 972
.T
Executive System Implemented Finite-State Automaton
.W
473L command control system used
Air Force permits many operators access
large data files through use computer. man-machine
interface satisfied several communication
consoles which operators may enter queries
view replies. data link permits remote stations
send messages, status reports inventories directly
computer. information received
over on-line data link used update data files
which stored disk. 473L programming
system divided into Executive Control Program
five components different processing priorities.
These priorities permit system most sensitive
console inputs permit operators
all consoles time share central processor.
Executive Control Program provides
orderly transitions control among programming
system components. major emphasis
paper technique using definition
finite-state automaton organizing Executive
Control Program.
.B
CACM November, 1964
.A
Heistand, R. E.
.N
CA641111 JB March 9, 1978 3:56 PM
.X
1471 4 972
1774 4 972
2911 4 972
560 4 972
972 4 972
972 4 972
972 4 972
972 5 972
972 5 972
972 5 972
271 5 972
273 5 972
276 5 972
.I 973
.T
Estimation Heart Parameters Using Skin Potential Measurements
.W
fundamental problem vector cardiography
estimation state heart
basis skin potential measurements. mathematical
model relating ventricular dipoles surface
potentials sketched. Then shown inverse
problem-that determining electrical heart
parameters basis skin potential measurements-may
viewed nonlinear multipoint boundary
value problem. feasible solution, employing quasilinearization
high-speed digital computers,
given.
.B
CACM November, 1964
.A
Bellman, R.
Collier, C.
Kagiwada, H.
Kalaba, R.
Selvester, R.
.N
CA641110 JB March 9, 1978 4:00 PM
.X
973 5 973
973 5 973
973 5 973
1278 5 973
973 6 973
1028 6 973
1029 6 973
.I 974
.T
Technique Reading Gapless Tapes Makes Electrocardiograph
Analysis Feasible IBM 7090
.W
study arrhythmias higher frequency
components electrocardiogram, long series
patient heart cycles must examined before valid
comparison different heart beats can made.
technique presented automatic analysis
long series heart cycles via digital computer.
.B
CACM November, 1964
.A
Maher, A. S.
.N
CA641109 JB March 9, 1978 4:03 PM
.X
974 5 974
974 5 974
974 5 974
.I 975
.T
New Program Work International
Standard Vocabulary Computers Information
Processing
.B
CACM November, 1964
.A
Traub, J. F.
.N
CA641108 JB March 9, 1978 4:05 PM
.X
975 5 975
975 5 975
975 5 975
1251 5 975
975 6 975
.I 976
.T
Fresnel Integrals (Algorithm 213 [S20])
.B
CACM November, 1964
.A
Gray, M.
.N
CA641107 JB March 9, 1978 4:06 PM
.X
976 5 976
976 5 976
976 5 976
.I 977
.T
Conversions Between Calendar Date
Julian Day Number (Algorithm 199 [Z])
.B
CACM November, 1964
.A
Oppenheim, D. K.
.N
CA641106 JB March 9, 1978 4:08 PM
.X
977 5 977
977 5 977
977 5 977
.I 978
.T
Fresnel Integrals (Algorithm 244 [S20])
.B
CACM November, 1964
.A
Lotsch, H.
.N
CA641105 JB March 9,1978 4:09 PM
.X
978 5 978
978 5 978
978 5 978
.I 979
.T
Logarithm Complex Number (Algorithm 243 [B3])
.B
CACM November, 1964
.A
Collens, D. S.
.N
CA641104 JB March 9, 1978 4:10 PM
.X
979 5 979
979 5 979
979 5 979
.I 980
.T
Multiple-Precision Arithmetic Exact
Calculation 3-j, 6-j 9-j Symbols
.W
Described paper system general-purpose
multiple-precision fixed-point routines
their use subroutines which calculate exactly
quantum-mechanical 3-j, 6-j 9-j symbols
large arguments.
.B
CACM November, 1964
.A
Maer, R. M.
Redlich, M. G.
.N
CA641103 JB March 9, 1978 4:13 PM
.X
980 5 980
980 5 980
980 5 980
.I 981
.T
Rounding Problems Commercial Data Processing
.W
common requirement commercial data processing
sum set numbers, rounded
generally understood manner, equal sum
numbers rounded individually. Four rounding
procedures described accomplish this. particular
procedure appropriate depends upon
whether numbers being accumulated can vary sign,
whether their sum can vary sign, whether
last number being summed can recognized such prior its rounding.
.B
CACM November, 1964
.A
Kelley, T. B.
.N
CA641102 JB March 9, 1978 4:25 PM
.X
981 5 981
981 5 981
981 5 981
.I 982
.T
Inductive Approach Language Translation
.W
possibility natural language translation
means fixed operations example translations
considered. conception sentence translation
which motivates work informally presented,
measurement physical similarity pairs
strings discussed, notion which plays central
role proposed type translator. Experimental
evidence presented support premise
upon which conception based.
.B
CACM November, 1964
.A
Faulk, R. D.
.N
CA641101 JB March 9, 1978 4:28 PM
.X
982 5 982
982 5 982
982 5 982
1592 5 982
982 6 982
1112 6 982
619 6 982
.I 983
.T
Take-up reels One-Inch Perforated Tape
Information Interchange (Proposed American Standard)
.B
CACM October, 1964
.N
CA641019 JB March 9, 1978 4:30 PM
.X
983 5 983
983 5 983
983 5 983
.I 984
.T
Report Input-Output Procedures ALGOL 60 (IFIP)
.B
CACM October, 1964
.N
CA641018 JB March 9, 1978 4:32 PM
.X
984 5 984
984 5 984
984 5 984
1705 5 984
1945 5 984
2034 5 984
823 6 984
914 6 984
915 6 984
917 6 984
984 6 984
984 6 984
984 6 984
986 6 984
989 6 984
990 6 984
1012 6 984
1020 6 984
1084 6 984
1098 6 984
1122 6 984
1138 6 984
1139 6 984
1141 6 984
1200 6 984
1223 6 984
1231 6 984
1265 6 984
1321 6 984
1336 6 984
1396 6 984
1455 6 984
1477 6 984
1487 6 984
1491 6 984
1496 6 984
1565 6 984
1852 6 984
1926 6 984
1947 6 984
483 6 984
584 6 984
669 6 984
680 6 984
763 6 984
.I 985
.T
Report SUBSET ALGOL 60 (IFIP)
.B
CACM October, 1964
.N
CA641017 JB March 9, 1978 4:33 PM
.X
985 5 985
985 5 985
985 5 985
.I 986
.T
Proposed Amendment Proposed American Standard
Specification General-Purpose Paper Cards
Information Processing
.B
CACM October, 1964
.N
CA641016 JB March 9, 1978 4:35 PM
.X
986 5 986
986 5 986
986 5 986
1705 5 986
984 6 986
986 6 986
1020 6 986
1321 6 986
.I 987
.T
FORTRAN vs. Basic FORTRAN (A Programming Language
Information Processing Automatic Data
Processing Systems)
.B
CACM October, 1964
.N
CA641015 JB March 9, 1978 4:36 PM
.X
987 5 987
987 5 987
987 5 987
1613 5 987
1646 5 987
1900 5 987
1955 5 987
2025 5 987
2154 5 987
2365 5 987
2506 5 987
3060 5 987
830 6 987
987 6 987
987 6 987
987 6 987
987 6 987
987 6 987
987 6 987
987 6 987
987 6 987
987 6 987
988 6 987
988 6 987
1072 6 987
1086 6 987
1134 6 987
1179 6 987
1453 6 987
1647 6 987
1754 6 987
1900 6 987
1900 6 987
1924 6 987
2154 6 987
2362 6 987
3184 6 987
680 6 987
.I 988
.T
History Summary FORTRAN Standardization Development ASA
.B
CACM October, 1964
.A
Heising, W. P.
.N
CA641014 JB March 9, 1978 4:37 PM
.X
988 5 988
988 5 988
988 5 988
1845 5 988
1900 5 988
2083 5 988
2154 5 988
2270 5 988
2693 5 988
987 6 988
987 6 988
988 6 988
988 6 988
988 6 988
988 6 988
988 6 988
988 6 988
1900 6 988
2270 6 988
2696 6 988
3184 6 988
.I 989
.T
Method Syntax Specification
.B
CACM October, 1964
.A
Iverson, K. E.
.N
CA641013 JB March 9, 1978 4:39 PM
.X
249 4 989
254 4 989
272 4 989
1086 4 989
1102 4 989
1109 4 989
1132 4 989
1140 4 989
1188 4 989
1234 4 989
1263 4 989
1265 4 989
1270 4 989
1306 4 989
1323 4 989
1358 4 989
1379 4 989
1380 4 989
1453 4 989
1464 4 989
1464 4 989
1484 4 989
1491 4 989
1491 4 989
1498 4 989
1613 4 989
1614 4 989
1767 4 989
1781 4 989
1781 4 989
1781 4 989
1787 4 989
1825 4 989
1860 4 989
1949 4 989
321 4 989
2059 4 989
2083 4 989
2126 4 989
2178 4 989
2179 4 989
2252 4 989
2325 4 989
2341 4 989
2546 4 989
435 4 989
437 4 989
463 4 989
483 4 989
491 4 989
2645 4 989
2652 4 989
2684 4 989
2732 4 989
2842 4 989
2929 4 989
2934 4 989
560 4 989
583 4 989
3069 4 989
3073 4 989
627 4 989
631 4 989
632 4 989
642 4 989
644 4 989
653 4 989
669 4 989
679 4 989
680 4 989
691 4 989
729 4 989
761 4 989
761 4 989
762 4 989
763 4 989
123 4 989
140 4 989
919 4 989
949 4 989
989 4 989
989 4 989
989 4 989
196 5 989
989 5 989
989 5 989
989 5 989
1263 5 989
288 5 989
1453 5 989
1945 5 989
3184 5 989
823 6 989
914 6 989
915 6 989
917 6 989
984 6 989
989 6 989
989 6 989
989 6 989
990 6 989
1012 6 989
1084 6 989
1098 6 989
1122 6 989
1138 6 989
1139 6 989
1141 6 989
1200 6 989
1223 6 989
1265 6 989
1336 6 989
1396 6 989
1455 6 989
1477 6 989
1487 6 989
1491 6 989
1496 6 989
404 6 989
483 6 989
3184 6 989
3184 6 989
584 6 989
669 6 989
680 6 989
763 6 989
.I 990
.T
Constraint-Type Statements Programming Languages
.W
proposal made including programming
language statements which imply relations
between variables but which not explicit assignment
statements. compiler sets up Newtonian
iteration making use purpose routine formal differentiation.
.B
CACM October, 1964
.A
Wilkes, M. V.
.N
CA641012 JB March 9, 1978 4:42 PM
.X
990 5 990
990 5 990
990 5 990
1781 5 990
1945 5 990
2341 5 990
823 6 990
123 6 990
196 6 990
914 6 990
915 6 990
917 6 990
919 6 990
984 6 990
989 6 990
990 6 990
990 6 990
990 6 990
1007 6 990
1012 6 990
1046 6 990
1084 6 990
1098 6 990
1122 6 990
1131 6 990
1138 6 990
1139 6 990
1139 6 990
1140 6 990
1141 6 990
1149 6 990
1198 6 990
1200 6 990
1215 6 990
1223 6 990
1223 6 990
1265 6 990
1265 6 990
1303 6 990
1323 6 990
1336 6 990
1358 6 990
1366 6 990
1396 6 990
1421 6 990
1455 6 990
1460 6 990
1462 6 990
1463 6 990
1467 6 990
1468 6 990
1468 6 990
1466 6 990
1477 6 990
1477 6 990
1487 6 990
1491 6 990
1491 6 990
1496 6 990
1496 6 990
1531 6 990
1535 6 990
1565 6 990
1601 6 990
1602 6 990
1613 6 990
1614 6 990
1626 6 990
1641 6 990
1787 6 990
1788 6 990
205 6 990
224 6 990
249 6 990
288 6 990
316 6 990
381 6 990
398 6 990
11 6 990
404 6 990
410 6 990
463 6 990
464 6 990
483 6 990
483 6 990
3184 6 990
3184 6 990
3188 6 990
584 6 990
584 6 990
600 6 990
669 6 990
680 6 990
680 6 990
691 6 990
763 6 990
763 6 990
799 6 990
.I 991
.T
Gamma Function Controller Accuracy (Algorithm 225 [S14])
.B
CACM October, 1964
.A
Bray, T. A.
.N
CA641011 JB March 9, 1978 4:44 PM
.X
991 5 991
991 5 991
991 5 991
.I 992
.T
Gamma Function (Algorithm 221 [S14])
.B
CACM October, 1964
.A
McCombs, V. K.
.N
CA641010 JB March 9, 1978 4:45 PM
.X
992 5 992
992 5 992
992 5 992
.I 993
.T
Kutta Merson (Algorithm 218 [D2])
.B
CACM October, 1964
.A
Priebe, K. B.
.N
CA641009 JB March 9, 1978 4:46 PM
.X
993 5 993
993 5 993
993 5 993
.I 994
.T
Stringsort (Algorithm 207 [M1])
.B
CACM October, 1964
.A
Blair, C. R.
.N
CA641008 JB March 9, 1978 4:47 PM
.X
994 5 994
994 5 994
994 5 994
.I 995
.T
Steep1 (Algorithm 203 [E4])
.B
CACM October, 1964
.A
Wallack, P.
.N
CA641007 JB March 9, 1978 4:48 PM
.X
995 5 995
995 5 995
995 5 995
.I 996
.T
Permutations Set Repetitions (Algorithm 242 [G6])
.B
CACM October, 1964
.A
Sag, T. W.
.N
CA641006 JB March 9, 1978 4:49 PM
.X
996 5 996
996 5 996
996 5 996
2044 5 996
996 6 996
1558 6 996
2230 6 996
521 6 996
.I 997
.T
Patent Protection Computer Programs
.B
CACM October, 1964
.A
Jacobs, M. C.
.N
CA641005 JB March 9, 1978 4:50 PM
.X
997 5 997
997 5 997
997 5 997
1711 5 997
997 6 997
1001 6 997
.I 998
.T
Computer Programs Patentable
.B
CACM October, 1964
.A
Hamlin, K. B.
.N
CA641004 JB March 9, 1978 4:53 PM
.X
998 5 998
998 5 998
998 5 998
.I 999
.T
Joint Inventorship Computers
.B
CACM October, 1964
.A
Hauptman, G. A.
.N
CA641003 JB March 9, 19784:54 PM
.X
999 5 999
999 5 999
999 5 999
.I 1000
.T
Computer Patent Disclosures
.B
CACM October, 1964
.A
Kates, J. P.
.N
CA641002 JB March 9, 1978 4:55 PM
.X
1000 5 1000
1000 5 1000
1000 5 1000
.I 1001
.T
Copyright Aspects Computer Usage
.W
paper concerned question
constitutes infringement copyright
book other nondramatic literary work work
fed into computer indexed, analyzed,
partially reprinted, otherwise utilized computer
produce eye-readable output. question
copyrightability programs infringement copyrights
programs also discussed. paper
directed primarily discussion present
law. Some aspects proposed new copyright
law also included. General recommendations
made respect proposed revision
copyright law.
.B
CACM October, 1964
.A
Lawlor, R. C.
.N
CA641001 JB March 9, 1978 4:59 PM
.X
1001 5 1001
1001 5 1001
1001 5 1001
1711 5 1001
997 6 1001
1001 6 1001
.I 1002
.T
Rapid Method Digital Filtering
.W
Since much computer time spent time-series
analysis used multiplications,
minimum multiplication method devised digital
filtering, expectation would
useful line, real-time analysis biological
data. filters constructed succession
readily analyzable components manner facilitates
cascading. repertoire frequency
response curves includes relatively good low-pass
band-pass designs. Programs available
implementing both synthesis these filters,
their application computers whose assemblers
allow definition recursive macros.
.B
CACM September, 1964
.A
Whittlesey, J. R. B.
.N
CA640909 JB March 9, 1978 5:03 PM
.X
1002 5 1002
1002 5 1002
1002 5 1002
.I 1003
.T
Computer Analysis Method Thermal Diffusion Biochemical Systems
.W
thermal detection rapid biochemical
reactions necessary correct temperature
data transient heat conduction losses cylindrical
calorimeter. handle complexities arising
varying thermal-relaxation times concentric insulating
layers, computer program developed
which gives temperature distribution system
function radius time. distribution
corrected each step subroutine which calculates
instantaneous chemical state there
action, well heat produced reaction.
program based direct statement
Fourier's law heat conduction chemical rate
equation provide "bookkeeping law" follow
reactants flow heat packets, such
way computer continually stores heat
distribution. computer analysis method here regarded
one which physical laws process
used explicitly program. Usually results
passing much mathematical procedures
conventionally used. program tested against
some known exact solutions heat equation
gave identical results, compared well experimental
data known biochemical reaction.
construction computer programs based direct
statement physical laws principle
general applicability which has been applied
several other physical phenomena.
.B
CACM September, 1964
.A
Davids, N.
Berger, R. L.
.N
CA640908 JB March 9, 1978 5:13 PM
.X
1003 5 1003
1003 5 1003
1003 5 1003
.I 1004
.T
Arctangent (Algorithm [B1])
.B
CACM September, 1964
.A
Mills, K. W.
.N
CA640907 JB March 9, 1978 6:08 PM
.X
1004 5 1004
1004 5 1004
1004 5 1004
.I 1005
.T
Coordinates Ellipsoid (Algorithm 240 [Z])
.B
CACM September, 1964
.A
Dorrer, E.
.N
CA640906 JB March 9, 1978 6:09 PM
.X
1005 5 1005
1005 5 1005
1005 5 1005
.I 1006
.T
Storage Allocation Reference Structure
.W
method proposed discussed which allows
subscripted-variable capability (in FORTRAN
sense) added AUTOCODER-Type assembly systems.
.B
CACM September, 1964
.A
Fitzwater, D. R.
.N
CA640905 JB March 9, 1978 6:11 PM
.X
1006 5 1006
1006 5 1006
1006 5 1006
1788 5 1006
1006 6 1006
1007 6 1006
205 6 1006
3189 6 1006
.I 1007
.T
Extension Existing Compilers Sophisticated Use Macros
.W
description presented application
which macros string concatenation were
employed add new facility BELFAP.
.B
CACM September, 1964
.A
Benett, R. K.
Neumann, H. D.
.N
CA640904 JB March 9, 1978 6:13 PM
.X
1007 5 1007
1007 5 1007
1007 5 1007
1781 5 1007
1788 5 1007
123 6 1007
196 6 1007
919 6 1007
990 6 1007
1006 6 1007
1007 6 1007
1007 6 1007
1046 6 1007
1131 6 1007
1139 6 1007
1140 6 1007
1149 6 1007
1198 6 1007
1215 6 1007
1223 6 1007
1265 6 1007
1303 6 1007
1323 6 1007
1358 6 1007
1366 6 1007
1421 6 1007
1460 6 1007
1462 6 1007
1463 6 1007
1467 6 1007
1468 6 1007
1477 6 1007
1491 6 1007
1496 6 1007
1531 6 1007
1535 6 1007
1565 6 1007
1601 6 1007
1602 6 1007
1613 6 1007
1614 6 1007
1626 6 1007
1641 6 1007
1787 6 1007
1788 6 1007
205 6 1007
205 6 1007
224 6 1007
249 6 1007
288 6 1007
316 6 1007
381 6 1007
398 6 1007
11 6 1007
404 6 1007
410 6 1007
463 6 1007
464 6 1007
483 6 1007
3184 6 1007
3188 6 1007
3189 6 1007
584 6 1007
600 6 1007
680 6 1007
691 6 1007
763 6 1007
799 6 1007
.I 1008
.T
Scheduling Meetings Computer
.W
Computer scheduling papers developed
1960 meeting Federation
American Societies Experimental Biology (FASEB) described.
FASEB meeting largest scientific
meeting held United States each year. technique
developed FASEB can applied schedule
any meeting parallel sessions.
.B
CACM September, 1964
.A
Schultz, C. K.
Brooks, A.
Schwartz, P.
.N
CA640903 JB March 9, 1978 6:16 PM
.X
1008 5 1008
1008 5 1008
1008 5 1008
2052 5 1008
1008 6 1008
1013 6 1008
1504 6 1008
1540 6 1008
.I 1009
.T
Solution Combinatorial Problems Using Generating
Functions Variable-Field Computer
.W
utility generating functions solving
combinatorial problems discussed. Particular
implementation results presented evaluated.
.B
CACM September, 1964
.A
Weinberg, G. M.
.N
CA640902 JB March 9, 1978 6:17 PM
.X
1009 5 1009
1009 5 1009
1009 5 1009
.I 1010
.T
Multiuser Computation Facility Education Research
.W
Present-day computing facilities limited
their value scientific research inability
interact strongly users. full power
research computing instrument should available
many terminals give each user ability generate,
correct operate any procedure he wishes,
either simple complex. Implementation described
small-scale multiuser computer system
permits several users work independently
machine, obtain satisfactory response using
typewriter communication.
.B
CACM September, 1964
.A
Dennis, J. B.
.N
CA640901 JB March 9, 1978 6:22 PM
.X
1010 5 1010
1010 5 1010
1010 5 1010
.I 1011
.T
Logarithm Complex Number (Algorithm 48 [B3])
.B
CACM August, 1964
.A
Collens, D. S.
.N
CA640819 JB March 23, 1978 7:54 PM
.X
1011 5 1011
1011 5 1011
1011 5 1011
.I 1012
.T
Formal Parsing Systems
.W
Automatic syntactic analysis has recently become
important both natural language data processing
syntax-directed compilers. formal parsing system
G = (V,u,T,R) consists two finite disjoint
vocabularies, V T, many-many map, u, V onto
T, recursive set R strings T called
syntactic sentence classes. Every program automatic
syntactic analysis determines formal parsing
system. directed production analyzer (I,T,X,p)
nondeterministic pushdown-store machine internal
vocabulary I, input vocabulary T, all productions
p form: (Z,a) -> aY1 ... Ym Z,
Yi elements set element
set T. Every context-free language can analyzed
directed production analyzer. Kuno-Oettinger
multiple-path syntactic analyzer English
concrete example directed production analyzer
working parsing algorithm. connection
between structures assigned analyzer those
conventional phrase structure grammar examined
paper.
.B
CACM August, 1964
.A
Greibach, S. A.
.N
CA640818 JB March 9, 1978 6:30 PM
.X
1012 5 1012
1012 5 1012
1012 5 1012
1225 5 1012
1350 5 1012
1945 5 1012
823 6 1012
914 6 1012
915 6 1012
917 6 1012
984 6 1012
989 6 1012
990 6 1012
1012 6 1012
1012 6 1012
1012 6 1012
1084 6 1012
1098 6 1012
1122 6 1012
1138 6 1012
1139 6 1012
1141 6 1012
1200 6 1012
1223 6 1012
1225 6 1012
1265 6 1012
1265 6 1012
1336 6 1012
1396 6 1012
1399 6 1012
1455 6 1012
1477 6 1012
1487 6 1012
1491 6 1012
1496 6 1012
483 6 1012
584 6 1012
669 6 1012
680 6 1012
680 6 1012
680 6 1012
763 6 1012
.I 1013
.T
Final Examination Scheduling
.W
method scheduling final examinations
yield minimal number student conflicts
described. "minimization" achieved repetitively
evaluating nonlinear set equations.
Imbeded process random Monte Carlo selection
assignments. such heuristic techniques,
solution may not optimum many solutions
may found which yield locally minimal results.
Computer programs described empirical results given.
.B
CACM August, 1964
.A
Broder, S.
.N
CA640817 JB March 9, 1978 6:33 PM
.X
1013 5 1013
1013 5 1013
1013 5 1013
1609 5 1013
2052 5 1013
1008 6 1013
1013 6 1013
1013 6 1013
1504 6 1013
1540 6 1013
.I 1014
.T
Machine Controls Analysis Variance
.W
major problem using analysis variance,
number factors increases,
exponential rise number interactions. Even
though experimenter may not interested
these interactions impossible ignore them
most experimental designs because problem
getting error terms. natural therefore look
computer handle bulk work involved
computing interactions. program device
get computer do described.
.B
CACM August, 1964
.A
Weldon, R. J.
.N
CA640816 JB March 9, 1978 6:37 PM
.X
1014 4 1014
912 5 1014
1014 5 1014
1014 5 1014
1014 5 1014
.I 1015
.T
Near-Minimax Polynomial Approximations Partitioning Intervals
.W
method near-minimax polynomial approximation
described. by-product, method
provides formula estimate maximum error
associated given degree approximation.
Using formula, partitioning algorithm obtained
dividing basic interval into subintervals
which approximations equal degree give equal maximum error.
.B
CACM August, 1964
.A
Fraser, W.
Hart, J. F.
.N
CA640815 JB March 9, 1978 6:41 PM
.X
1015 4 1015
1346 4 1015
1440 4 1015
1645 4 1015
951 4 1015
1015 5 1015
1015 5 1015
1015 5 1015
532 5 1015
.I 1016
.T
Interchangcable Perforated Tape Variable Block
Formats Positioning Straight Cut (RS-273)
Contouring Contouring/Positioning (RS-274) Numerically
Controlled Machine Tools (Proposed American
Standards)
.B
CACM August, 1964
.N
CA640814 JB March 9, 1978 6:43 PM
.X
1016 5 1016
1016 5 1016
1016 5 1016
.I 1017
.T
Comments Bit-Sequencing ASCII
Serial-by-Bit Data Transmission
.B
CACM August, 1964
.A
Bemer, R. W.
Booth, J.
.N
CA640813 JB March 9, 1978 6:45 PM
.X
1017 5 1017
1017 5 1017
1017 5 1017
.I 1018
.T
Gauss (Algorithm 209 [S15])
.B
CACM August, 1964
.A
Pike, M. C.
.N
CA640812 JB March 9, 1978 6:54 PM
.X
1018 5 1018
1018 5 1018
1018 5 1018
.I 1019
.T
XY move Plotting (Algorithm 162 [J6])
.B
CACM August, 1964
.A
Cavin, D. K.
.N
CA640811 JB March 9, 1978 6:55 PM
.X
1019 5 1019
1019 5 1019
1019 5 1019
.I 1020
.T
Free Field Read (Algorithm 239 [I5])
.B
CACM August, 1964
.A
McKeeman, W. M.
.N
CA640810 JB March 9, 1978 6:56 PM
.X
1020 5 1020
1020 5 1020
1020 5 1020
1705 5 1020
984 6 1020
986 6 1020
1020 6 1020
1321 6 1020
.I 1021
.T
Conjugate Gradient Method (Algorithm 238 [F4])
.B
CACM August, 1964
.A
Reeves, C. M.
.N
CA640809 JB March 9, 1978 6:59 PM
.X
1021 5 1021
1021 5 1021
1021 5 1021
.I 1022
.T
Greatest Common Divisor (Algorithm 237 [A1])
.B
CACM August, 1964
.A
Peck, J. E. L.
.N
CA640808 JB March 9, 1978 7:17 PM
.X
1022 5 1022
1022 5 1022
1022 5 1022
2031 5 1022
1022 6 1022
450 6 1022
.I 1023
.T
Bessel Functions First Kind (Algorithm 236 [S17])
.B
CACM August, 1964
.A
Gautschi, W.
.N
CA640807 JB March 9, 1978 7:19 PM
.X
1023 4 1023
1222 4 1023
1023 5 1023
1023 5 1023
1023 5 1023
1130 5 1023
1909 5 1023
2119 5 1023
134 6 1023
1023 6 1023
1023 6 1023
1284 6 1023
1316 6 1023
2129 6 1023
.I 1024
.T
Note Formation Free List
.B
CACM August, 1964
.A
Waite, W. M.
.N
CA640806 JB March 9, 1978 7:20 PM
.X
1024 4 1024
1024 4 1024
1051 4 1024
1051 4 1024
1098 4 1024
1102 4 1024
1132 4 1024
1214 4 1024
1380 4 1024
1388 4 1024
1390 4 1024
1393 4 1024
1485 4 1024
1486 4 1024
1487 4 1024
1549 4 1024
1549 4 1024
1570 4 1024
1706 4 1024
1826 4 1024
1878 4 1024
1878 4 1024
1946 4 1024
1957 4 1024
378 4 1024
2060 4 1024
2155 4 1024
2168 4 1024
2168 4 1024
2719 4 1024
2723 4 1024
2723 4 1024
2838 4 1024
2842 4 1024
2855 4 1024
2857 4 1024
2879 4 1024
3077 4 1024
3080 4 1024
3106 4 1024
3112 4 1024
627 4 1024
106 4 1024
1024 5 1024
1024 5 1024
1024 5 1024
210 5 1024
731 5 1024
.I 1025
.T
Method Syntax-Checking ALGOL 60
.W
syntax checker designed based syntax
ALGOL described ALGOL 60 Report
[Communications ACM, May, 1960]. Since definition
elements language recursive
seemed most desirable design syntax checker
set mutually recursive processors tied
together subroutines which perform certain bookkeeping
functions. Because recursive nature
language syntax checker problem
recovery after error required much attention.
method devised which permits most programs
checked completely despite errors.
.B
CACM August, 1964
.A
Lietzke, M. P.
.N
CA640805 JB March 9, 1978 7:24 PM
.X
1025 5 1025
1025 5 1025
1025 5 1025
1215 5 1025
1682 5 1025
1025 6 1025
1025 6 1025
1785 6 1025
224 6 1025
763 6 1025
.I 1026
.T
Divide-and-Correct Methods Multiple Precision Division
.W
division problem defined notation
relate problem multiple precision
operation digital computer introduced. basic
divide-and-correct method multiple precision
division formulated its known properties briefly
reviewed. particular interest fact
method produces each step set precisely
three estimates desired result, one
which exact.
.B
CACM August, 1964
.A
Stein, M. L.
.N
CA640804 JB March 9, 1978 7:27 PM
.X
1026 4 1026
1258 4 1026
1292 4 1026
1497 4 1026
107 5 1026
1026 5 1026
1026 5 1026
1026 5 1026
1258 5 1026
1292 5 1026
1497 5 1026
1975 5 1026
2605 5 1026
107 6 1026
107 6 1026
107 6 1026
1026 6 1026
1026 6 1026
1026 6 1026
1026 6 1026
1026 6 1026
1292 6 1026
1292 6 1026
1497 6 1026
1593 6 1026
2286 6 1026
.I 1027
.T
Alternate Checksum Method
.B
CACM August, 1964
.A
Newhall, N. S.
.N
CA640803 JB March 9, 1978 7:28 PM
.X
1027 5 1027
1027 5 1027
1027 5 1027
.I 1028
.T
Investigation New Analytical Method
Numerical Derivative Evaluation
.W
recently proposed analytical approach
numerical derivative evaluation discussed.
technique shown both accurate easy
apply, though certain indicated modifications
required. Its use should greatly facilitate writing
debugging programs requiring derivatives
highly complex functions.
.B
CACM August, 1964
.A
Wilkins, R. D.
.N
CA640802 JB March 9, 1978 7:31 PM
.X
1028 4 1028
1028 4 1028
1216 4 1028
1216 4 1028
1278 4 1028
1347 4 1028
1392 4 1028
1396 4 1028
1396 4 1028
1536 4 1028
964 4 1028
1028 5 1028
1028 5 1028
1028 5 1028
1029 5 1028
1216 5 1028
1278 5 1028
1347 5 1028
1396 5 1028
561 5 1028
964 6 1028
973 6 1028
1028 6 1028
1028 6 1028
1028 6 1028
1028 6 1028
1029 6 1028
1029 6 1028
1029 6 1028
1029 6 1028
1083 6 1028
1132 6 1028
1214 6 1028
1278 6 1028
1278 6 1028
1334 6 1028
1365 6 1028
1386 6 1028
1387 6 1028
1388 6 1028
1392 6 1028
1393 6 1028
1394 6 1028
1395 6 1028
1396 6 1028
1397 6 1028
1496 6 1028
284 6 1028
407 6 1028
3199 6 1028
3200 6 1028
3201 6 1028
3202 6 1028
3203 6 1028
3204 6 1028
561 6 1028
561 6 1028
730 6 1028
.I 1029
.T
Simple Automatic Derivative Evaluation Program
.W
procedure automatic evaluation total/partial
derivatives arbitrary algebraic functions
presented. technique permits computation
numerical values derivatives without developing
analytical expressions derivatives. key
method decomposition given
function, introduction intermediate variables,
into series elementary functional steps.
library elementary function subroutines provided
automatic evaluation differentiation
these new variables. final step process
produces desired function's derivative.
main feature approach its simplicity.
can used quick-reaction tool
derivation analytical derivatives laborious
also debugging tool programs which contain
derivatives.
.B
CACM August, 1964
.A
Wengert, R. E.
.N
CA640801 JB March 9, 1978 7:38 PM
.X
1028 5 1029
1029 5 1029
1029 5 1029
1029 5 1029
1216 5 1029
1278 5 1029
1347 5 1029
1396 5 1029
1536 5 1029
964 6 1029
973 6 1029
1028 6 1029
1028 6 1029
1028 6 1029
1028 6 1029
1029 6 1029
1029 6 1029
1029 6 1029
1029 6 1029
1029 6 1029
1029 6 1029
1083 6 1029
1132 6 1029
1214 6 1029
1278 6 1029
1278 6 1029
1334 6 1029
1365 6 1029
1386 6 1029
1387 6 1029
1388 6 1029
1392 6 1029
1393 6 1029
1394 6 1029
1395 6 1029
1396 6 1029
1397 6 1029
1496 6 1029
284 6 1029
407 6 1029
3199 6 1029
3200 6 1029
3201 6 1029
3202 6 1029
3203 6 1029
3204 6 1029
561 6 1029
561 6 1029
561 6 1029
730 6 1029
.I 1030
.T
Techniques Simulation Computer Logic
.W
simulation digital computer
integral part most computer design automation
systems. evaluation Boolean functions which
characterize computer being simulated constitutes
one major portion simulation system. Four general
procedural classes evaluating these functions
defined. Toward greatly increased efficiency simulation
system, methods presented simultaneously
evaluating many functions one set values
variables,and evaluating simultaneously one
function many sets values variables.
.B
CACM July, 1964
.A
Breuer,M. A.
.N
CA640717 JB March 9, 1978 7:42 PM
.X
1030 4 1030
1886 4 1030
1939 4 1030
1030 5 1030
1030 5 1030
1030 5 1030
1261 5 1030
1939 5 1030
678 5 1030
1030 6 1030
1030 6 1030
678 6 1030
.I 1031
.T
Note Starting Newton-Raphson Method
.W
Determination suitable initial estimate
root equation f(x) = 0 means
computing roots sequence related equations described.
.B
CACM July, 1964
.A
Beyer, W. A.
.N
CA640716 JB March 9, 1978 7:44 PM
.X
1031 5 1031
1031 5 1031
1031 5 1031
.I 1032
.T
Theoretical Considerations Information Retrieval Systems
.W
Information storage retrieval systems composed
three major components: (a) identification
information tagging effective retrieval,
(b) searching strategy, enter file
circumvent scanning nonrelevant material,
(c) file organization make access information
efficient. identification information paper
suggests metalanguage (recently discussed
paper Goffman, Verhoeff Belzer) associated
object language used. searching
strategy, linear model evaluation function
relevancy developed which rewards system
retrieving relevant documents not retrieving
nonrelevant, penalizes system
escaped relevant documents false drops. inadequacies
linear model indicated. Two approaches
file organization discussed. One self-organization
file based its history past
performance, second self-generating subset
file high probability being
relevant.
.B
CACM July, 1964
.A
Belzer, J.
Goffman, W.
.N
CA640715 JB March 9, 1978 7:55 PM
.X
1032 5 1032
1032 5 1032
1032 5 1032
.I 1033
.T
Experimental Personalized Array Translator System
.W
system designed intimate man-machine
interaction general-purpose problem-solving
environment experimentally operational. system
utilizers array-oriented symbolic source language
containing powerful statement types. These include numeric,
Boolean, relational selection operators
operands which can entire arrays. system also
permits simple specification test argument
arrays single statements. completely symbolic
operating system includes display entry
program data. Sequence control aided interrupt
switch which allows user interact
program during execution. addition normal
stored program sequencing, system provides
trace options ability enter any statement
immediate execution. Present implementation
system interpretive translator IBM 1620 computer.
.B
CACM July, 1964
.A
Hellerman, H.
.N
CA640714 JB March 9, 1978 8:02 PM
.X
1033 5 1033
1033 5 1033
1033 5 1033
.I 1034
.T
Autosate
.W
automated data system analysis technique
described. technique designed alleviate
some principal problems beset current analysis-large
data workloads, long span time between
project inception system operational date, lack
explicit directions conducting data system
analysis using results, lack technique
control data system changes throughout
its lifetime. analysis geared determining workload,
relationships storage characteristics
documents information network automatically.
.B
CACM July, 1964
.A
Gatto, O. T.
.N
CA640713 JB March 9, 19788:07 PM
.X
1034 5 1034
1034 5 1034
1034 5 1034
.I 1035
.T
Characteristics FORTRAN CEP Language
.W
FORTRAN CEP languages differs FORTRAN
II mainly because: (1) extends variety
modes real quantities; (2) allows suitable
mixtures, input/output list expression,
quantities occur under different modes; (3)
makes possible address greater number
input/output equipment; (4) removes restrictions
complexity list quantities
transmitted between magnetic core memory
drum magnetic tape units.
.B
CACM July, 1964
.A
Mancino. O. G.
.N
CA640712 JB March 9, 1978 8:11 PM
.X
1035 5 1035
1035 5 1035
1035 5 1035
1305 5 1035
1035 6 1035
.I 1036
.T
Remark Further Generalization ALGOL
.B
CACM July, 1963
.A
Garwick, J. V.
.N
CA640710 JB March 9, 1978 8:12 PM
.X
1036 5 1036
1036 5 1036
1036 5 1036
.I 1037
.T
Reduction Matrix Containing Polynomial
Elements (Algorithm 170 [F3])
.B
CACM July, 1964
.A
Priebe, K. B.
.N
CA640710 JB March 9, 1978 8:13 PM
.X
1037 4 1037
1234 4 1037
1358 4 1037
1491 4 1037
1037 5 1037
1037 5 1037
1037 5 1037
729 5 1037
.I 1038
.T
Crout Equilibration Iteration (Algorithm 135 [F4])
.B
CACM July, 1964
.A
McKeeman, W. M.
.N
CA640709 JB March 9, 1978 8:15 PM
.X
1038 5 1038
1038 5 1038
1038 5 1038
.I 1039
.T
Summation Fourier Series (Algorithm 128 [C6])
.B
CACM July, 1964
.A
Thacher Jr., H. C.
.N
CA640708 JB March 9, 1978 8:16 PM
.X
1039 5 1039
1039 5 1039
1039 5 1039
.I 1040
.T
Romberg Integration(Algorithm 60 [D1])
.B
CACM July, 1964
.A
Thacher Jr., H. C.
.N
CA640707 JB March 9, 1978 8:17 PM
.X
1040 4 1040
1040 4 1040
1040 4 1040
1352 4 1040
2040 4 1040
1040 5 1040
1040 5 1040
1040 5 1040
1352 5 1040
2415 5 1040
587 5 1040
621 5 1040
885 5 1040
834 6 1040
872 6 1040
1040 6 1040
1040 6 1040
1092 6 1040
1241 6 1040
1273 6 1040
1982 6 1040
324 6 1040
2074 6 1040
429 6 1040
570 6 1040
621 6 1040
786 6 1040
.I 1041
.T
Random Permutation (Algorithm 235 [G6])
.B
CACM July, 1964
.A
Durstenfeld, R.
.N
CA640706 JB March 9, 1978 8:18 PM
.X
1041 5 1041
1041 5 1041
1041 5 1041
.I 1042
.T
Poisson-Charlier Polynomials (Algorithm 234 [S23])
.B
CACM July, 1964
.A
Simoes Pereira, J. M. S.
.N
CA640705 JB March 9, 1978 8:19 PM
.X
1042 5 1042
1042 5 1042
1042 5 1042
.I 1043
.T
Talk-A High-Level Source Language Debugging
Technique Real-Time Data Extraction
.W
TALK, meaning Take Look, debugging technique
which aids substantially debugging complex
real-time programming systems interrupting users
program desired points extract previously
specified data. extracted data later edited,
listing associated data its high-level
source language identification.
.B
CACM July, 1964
.A
verSteeg, R. L.
.N
CA640704 JB March 9, 1978 8:24 PM
.X
1043 5 1043
1043 5 1043
1043 5 1043
.I 1044
.T
Automatic Loader Subroutine Nests
.W
method automatic loading library subroutines,
which can adapted operate conjunction
any conventional two-pass assembler described.
method specifically designed cope
nested library structure.
.B
CACM July, 1964
.A
Kanner, H.
.N
CA640703 JB March 9, 1978 8:27 PM
.X
1044 5 1044
1044 5 1044
1044 5 1044
1332 5 1044
1044 6 1044
.I 1045
.T
Programming Analysis Variance Sequences
Operators Isomorphic Mappings
.W
special operator calculus developed Hartley
1956 together new mapping scheme
has been found efficient programming analysis
variance multifactor experiments. operator
calculus mapping scheme described detail.
.B
CACM July, 1964
.A
Peng, K. C.
.N
CA640702 JB March 9, 1978 8:30 PM
.X
1045 5 1045
1045 5 1045
1045 5 1045
1404 5 1045
1045 6 1045
.I 1046
.T
Compiler-Building System Developed Brooker Morris
.W
number articles published during
past two years, R. A. Brooker D. Morris (joined
J.S. Rohl their most recent paper have presented
very interesting programming system they
have developed Ferranti Atlas computer.
present paper describes some major features
their system. expands some points original
authors cover briefly, treats only very
lightly some topics which they devote considerable space.
purpose paper purely expository.
Except some very small details, some comments,
does not intentionally depart add
material published listed references.
.B
CACM July, 1964
.A
Rosen, S.
.N
CA640701 JB March 9, 1978 8:47 PM
.X
1046 4 1046
1105 4 1046
1139 4 1046
1140 4 1046
1234 4 1046
1263 4 1046
1265 4 1046
1496 4 1046
1781 4 1046
1824 4 1046
2126 4 1046
2546 4 1046
464 4 1046
584 4 1046
631 4 1046
653 4 1046
680 4 1046
763 4 1046
795 4 1046
799 4 1046
945 4 1046
1046 5 1046
1046 5 1046
1046 5 1046
1781 5 1046
404 5 1046
123 6 1046
196 6 1046
919 6 1046
990 6 1046
1007 6 1046
1046 6 1046
1131 6 1046
1139 6 1046
1140 6 1046
1149 6 1046
1198 6 1046
1215 6 1046
1223 6 1046
1265 6 1046
1303 6 1046
1323 6 1046
1358 6 1046
1366 6 1046
1421 6 1046
1460 6 1046
1462 6 1046
1463 6 1046
1467 6 1046
1468 6 1046
1477 6 1046
1491 6 1046
1496 6 1046
1531 6 1046
1535 6 1046
1565 6 1046
1601 6 1046
1602 6 1046
1613 6 1046
1614 6 1046
1626 6 1046
1641 6 1046
1787 6 1046
1788 6 1046
205 6 1046
224 6 1046
249 6 1046
288 6 1046
316 6 1046
381 6 1046
398 6 1046
11 6 1046
404 6 1046
410 6 1046
463 6 1046
464 6 1046
483 6 1046
3184 6 1046
3188 6 1046
584 6 1046
600 6 1046
680 6 1046
691 6 1046
763 6 1046
799 6 1046
.I 1047
.T
Generation Test Matrices Similarity Transformations
.W
method obtaining test matrices
prescribed distribution characteristic roots
given. process consists using particularly
simple similarity transformations generate full
matrices canonical forms. matrices generated
also have known characteristic vectors, inverses
determinants.
.B
CACM June, 1964
.A
Ortega, J. M.
.N
CA640620 JB March 9, 1978 8:50 PM
.X
1047 4 1047
1047 5 1047
1047 5 1047
1047 5 1047
1707 5 1047
496 5 1047
1047 6 1047
511 6 1047
.I 1048
.T
Approximate Solution Axially Symmetric Problems
.W
variety physical problems such diverse
fields electrostatic field theory, heat
ideal fluid flow, stress concentration theory
reduce, under assumption axial symmetry,
study elliptic partial differential equation.
Dirichlet-type problems associated
equation studied regions whose boundaries include
nondegenerate portion x-axis exceedingly
accurate numerical methods given approximating solutions.
.B
CACM June, 1964
.A
Greenspan, D.
.N
CA640619 JB March 9, 1978 8:55 PM
.X
1048 5 1048
1048 5 1048
1048 5 1048
.I 1049
.T
Numerical Solution Nonlinear Two-Point
Boundary Problems Finite Difference Methods
.W
Solution nonlinear two-point boundary-value
problems often extremely difficult task.
Quite apart questions reality uniqueness,
there no established numerical technique
problem. present, shooting techniques
easiest method attacking these problems.
these fail, more difficult method finite differences
can often used obtain solution.
paper gives examples discusses finite difference
method non-linear two-point boundary-value
problems.
.B
CACM June, 1964
.A
Holt, J. F.
.N
CA640618 JB March 9, 1978 9:07 PM
.X
1049 4 1049
1049 5 1049
1049 5 1049
1049 5 1049
416 5 1049
.I 1050
.T
Parts Breakdown Technique Using List Structures
.W
List structured parts breakdown proposed
discussed. Implementation facts presented
operating program using these techniques.
.B
CACM June, 1964
.A
Brian, W. J.
.N
CA640617 JB March 9, 1978 9:09 PM
.X
1050 4 1050
1050 4 1050
1050 4 1050
1050 4 1050
1050 4 1050
1102 4 1050
1226 4 1050
1393 4 1050
1549 4 1050
1549 4 1050
1935 4 1050
1936 4 1050
378 4 1050
2017 4 1050
2023 4 1050
2032 4 1050
2257 4 1050
2360 4 1050
2451 4 1050
2452 4 1050
441 4 1050
2723 4 1050
2882 4 1050
3008 4 1050
3112 4 1050
627 4 1050
731 4 1050
731 4 1050
758 4 1050
793 4 1050
798 4 1050
106 5 1050
1050 5 1050
1050 5 1050
1050 5 1050
209 5 1050
367 5 1050
627 5 1050
849 5 1050
.I 1051
.T
Multiword List Items
.W
list concept originally proposed
Newell, Simon Shaw specified single computer
words elements list. report describes
use two more consecutive words one element.
Such use results considerable saving both
space required hold given amount data,
execution time required perform given
process data. Following brief description
standard list structures single-word items,
multiword items introduced. Then variable-length
items described, along corresponding space-utilization
problems. Finally, several examples
given illustrate use multiword lists.
paper attempts draw together various recent
papers which have applied some these concepts different
ways, indicate they relate
more general problems.
.B
CACM June, 1964
.A
Comfort, W. T.
.N
CA640616 JB March 9, 1978 9:15 PM
.X
1024 4 1051
1024 4 1051
1051 4 1051
1051 4 1051
1051 4 1051
1051 4 1051
1051 4 1051
1051 4 1051
1062 4 1051
1098 4 1051
1102 4 1051
1102 4 1051
1132 4 1051
1214 4 1051
1380 4 1051
1388 4 1051
1390 4 1051
1393 4 1051
1485 4 1051
1486 4 1051
1487 4 1051
1549 4 1051
1549 4 1051
1549 4 1051
1552 4 1051
1570 4 1051
1665 4 1051
1706 4 1051
1826 4 1051
1860 4 1051
1878 4 1051
1878 4 1051
1946 4 1051
1957 4 1051
378 4 1051
2060 4 1051
2155 4 1051
2155 4 1051
2168 4 1051
2168 4 1051
2719 4 1051
2723 4 1051
2723 4 1051
2838 4 1051
2842 4 1051
2855 4 1051
2857 4 1051
2879 4 1051
3077 4 1051
3080 4 1051
3106 4 1051
3112 4 1051
627 4 1051
106 4 1051
1051 5 1051
1051 5 1051
1051 5 1051
1211 5 1051
210 5 1051
1549 5 1051
1906 5 1051
378 5 1051
2902 5 1051
406 5 1051
731 5 1051
793 5 1051
794 5 1051
106 6 1051
1051 6 1051
1051 6 1051
1051 6 1051
1051 6 1051
1062 6 1051
1062 6 1051
1184 6 1051
1211 6 1051
1552 6 1051
210 6 1051
1879 6 1051
2435 6 1051
2596 6 1051
2734 6 1051
2747 6 1051
2768 6 1051
406 6 1051
627 6 1051
731 6 1051
753 6 1051
.I 1052
.T
Reducing Truncation Errors Programming
.W
accumulating sum such numerical
integration large number intervals,
sum itself becomes much larger than individual
addends. may produce less accurate sum
number intervals increased. Separate variables
can established accumulators hold
partial sums within various distinct intervals. Thus,
extensive successive truncations eliminated.
.B
CACM June, 1964
.A
Wolfe, J. M.
.N
CA640615 JB March 9, 1978 9:22 PM
.X
1052 5 1052
1052 5 1052
1052 5 1052
1328 5 1052
1333 5 1052
2144 5 1052
1052 6 1052
1052 6 1052
1052 6 1052
.I 1053
.T
Design Implementation General-Purpose Input Routine
.W
general-purpose input routine discussed
advocated FORTRAN. philosophy
such programs examined exemplified.
.B
CACM June, 1964
.A
Hassitt, A.
.N
CA640614 JB March 9, 1978 9:27 PM
.X
1053 4 1053
1053 4 1053
1053 4 1053
1053 4 1053
720 4 1053
1053 5 1053
1053 5 1053
1053 5 1053
1649 5 1053
435 5 1053
474 5 1053
718 5 1053
720 5 1053
1053 6 1053
.I 1054
.T
Gauss-Seidel (Algorithm 220 )
.B
CACM June, 1964
.A
Batson, A. P.
.N
CA640613 JB March 9, 1978 9:28 PM
.X
1054 5 1054
1054 5 1054
1054 5 1054
.I 1055
.T
q-Bessel Functions In(t) (Algorithm 214)
.B
CACM June,1964
.A
Simoes Pereira, J. M. S.
.N
CA640612 JB March 9, 1978 9:29 PM
.X
1055 5 1055
1055 5 1055
1055 5 1055
.I 1056
.T
Shellsort (Algorithm 201)
.B
CACM June, 1964
.A
Batty, M. A.
.N
CA640611 JB March 9, 1978 9:30 PM
.X
1056 5 1056
1056 5 1056
1056 5 1056
.I 1057
.T
Critical Path Scheduling (Algorithm 40)
.B
CACM June, 1964
.A
Hoffman, I. A.
.N
CA640610 JB March 9, 1978 9:32 PM
.X
1057 5 1057
1057 5 1057
1057 5 1057
.I 1058
.T
Simpson's Rule Multiple Integration (Algorithm 233)
.B
CACM June, 1964
.A
Olynyk, F.
.N
CA640609 JB March 9, 1978 9:33 PM
.X
1058 5 1058
1058 5 1058
1058 5 1058
.I 1059
.T
Heapsort (Algorithm 232)
.B
CACM June, 1964
.A
Williams, J. W. J.
.N
CA640608 JB March 9, 1978 9:34 PM
.X
1059 5 1059
1059 5 1059
1059 5 1059
2757 5 1059
2844 5 1059
970 6 1059
1059 6 1059
1059 6 1059
2630 6 1059
2742 6 1059
2767 6 1059
.I 1060
.T
Matrix Inversion (Algorithm 231)
.B
CACM June, 1964
.A
Boothroyd, J.
.N
CA640607 JB March 9, 1978 9:35 PM
.X
1060 5 1060
1060 5 1060
1060 5 1060
.I 1061
.T
Matrix Permutation (Algorithm 230)
.B
CACM June, 1964
.A
Boothroyd, J.
.N
CA640606 JB March 9, 1978 9:36 PM
.X
1061 5 1061
1061 5 1061
1061 5 1061
.I 1062
.T
Symbol Manipulation FORTRAN-SASP Subroutines
.W
set subroutines use FORTRAN
described whose purpose synthesize output
strings (i) input strings which have been analyzed
SHADOW general syntactic analysis subroutine
reported earlier, and/or (ii) packed BCD strings formed
any way. Function-type subroutines included
intermediate manipulations, which performed
strings which stored abbreviated
internal representation. automatic way which
internal representation each newly created
substring stored sequentially block common
storage, manner which storage block
dynamically allocated purpose, discussed.
.B
CACM June, 1964
.A
Bailey, M. J.
Barnett, M. P.
Burleson, P. B.
.N
CA640605 JB March 9, 1978 9:43 PM
.X
1051 4 1062
1062 4 1062
1062 4 1062
1121 4 1062
1139 4 1062
1265 4 1062
1781 4 1062
720 4 1062
759 4 1062
1062 5 1062
1062 5 1062
1062 5 1062
1211 5 1062
2902 5 1062
464 5 1062
794 5 1062
1051 6 1062
1051 6 1062
1062 6 1062
1062 6 1062
1184 6 1062
1211 6 1062
1552 6 1062
1879 6 1062
2435 6 1062
2596 6 1062
2734 6 1062
2747 6 1062
2768 6 1062
.I 1063
.T
One-Inch Perforated Paper Tape Information
Interchange (Proposed American Standard)
.B
CACM June, 1964
.N
CA640604 JB March 9, 1978 9:44 PM
.X
1063 5 1063
1063 5 1063
1063 5 1063
.I 1064
.T
Perforated Tape Code Information
Interchange (Proposed American Standard)
.B
CACM June, 1964
.N
CA640603 JB March 9, 1978 9:46 PM
.X
1064 5 1064
1064 5 1064
1064 5 1064
.I 1065
.T
Bit Sequencing American Standard Code
Information Interchange (ASCII) Serial-by-Bit
Data Transmission (Proposed American Standard)
.B
CACM June, 1964
.N
CA640602 JB March 9, 1978 9:47 PM
.X
1065 5 1065
1065 5 1065
1065 5 1065
.I 1066
.T
Growing Applications Linear Programming
.W
Use linear programming models has grown so
extensively recent years whole concept
organizing computer code has undergone radical
change. no longer adequate merely reduce
mathematical algorithm (i.e. simplex method)
computer code. advanced code must cope
such variety situations respective computer
subprograms must organized into integrated
system. Emphasis paper devoted underlying
principles upon which future linear programming
systems must based. These viewpoints influenced
new demands applications within
petroleum industry placing such systems. Some
components such system are: translation
problem statement terms basic data linear
programming matrix coefficients, data transmission
direct computer entry, data file computer center,
data processing editing prior solving
simplex algorithm, efficient reliable code
solving above-mentioned algorithm,
flexible means summarizing results.
.B
CACM June, 1964
.A
Aronofsky, J. S.
.N
CA640601 JB March 9, 1978 9:55 PM
.X
1066 5 1066
1066 5 1066
1066 5 1066
.I 1067
.T
Picture Generation Standard Line Printer
.W
method described producing gray-toned
pictures line printer utilizing
different degrees blackness standard print characters.
Gray scales 17, 32 64 levels have
been devised. Scanned images blood cells used display technique.
.B
CACM May, 1964
.A
Perry, B.
Mendelsohn, M. L.
.N
CA640522 JB March 9, 1978 11:31 PM
.X
1067 5 1067
1067 5 1067
1067 5 1067
.I 1068
.T
FORTRAN II Load-Time-Saver
.B
CACM May, 1964
.A
Ackermann, A. F.
.N
CA640521 JB March 9, 1978 11:33 PM
.X
1068 4 1068
1945 4 1068
917 5 1068
1068 5 1068
1068 5 1068
1068 5 1068
.I 1069
.T
Method Comparing Internal Operating Speeds Computers
.B
CACM May, 1964
.A
Raichelson, E.
Collins, G.
.N
CA640520 JB March 9, 1978 11:35 PM
.X
1069 5 1069
1069 5 1069
1069 5 1069
1653 5 1069
2989 5 1069
963 6 1069
1069 6 1069
1069 6 1069
1417 6 1069
2138 6 1069
.I 1070
.T
Expand, System Input Card Replication
.B
CACM May, 1964
.A
Warrington, J. A.
Norris, J. H.
.N
CA640519 JB March 9,1978 11:37 PM
.X
1070 5 1070
1070 5 1070
1070 5 1070
.I 1071
.T
Computer-Usage Accounting Generalized Time-Sharing Systems
.W
current development general time-sharing
systems requires revision accounting procedures
computer usage. Since time-sharing system users
operate concurrently, necessary more
precise amount computer time storage
space user actually utilizes. various
cost factors which should considered computer usage
accounting generalized time-sharing systems
discussed.
.B
CACM May, 1964
.A
Rosenberg, A. M.
.N
CA640518 JB March 9, 1978 11:40 PM
.X
1071 4 1071
1071 5 1071
1071 5 1071
1071 5 1071
3196 5 1071
.I 1072
.T
Improved Equivalence Algorithm
.W
algorithm assigning storage basis
EQUIVALENCE, DIMENSION COMMON declarations
presented. algorithm based tree structure,
has reduced computation time 40 percent
over previously published algorithm identifying all
equivalence classes one scan EQUIVALENCE
declarations. method applicable any problem
which necessary identify equivalence
classes, given element pairs defining equivalence relation.
.B
CACM May, 1964
.A
Galler, B. A.
Fisher, M. J.
.N
CA640517 JB March 9, 1978 11:48 PM
.X
1072 4 1072
1781 4 1072
1072 5 1072
1072 5 1072
1072 5 1072
1646 5 1072
316 5 1072
830 6 1072
987 6 1072
1072 6 1072
1179 6 1072
1647 6 1072
680 6 1072
.I 1073
.T
Fast Procedure Generating Exponential Random Variables
.W
very fast method generating exponential
random variables digital computer outlined.
.B
CACM May, 1964
.A
MacLaren, M. D.
Marsaglia, G.
Bray, T. A.
.N
CA640516 JB March 9, 1978 11:50 PM
.X
1073 4 1073
1073 4 1073
1153 4 1073
2137 4 1073
2276 4 1073
940 5 1073
1073 5 1073
1073 5 1073
1073 5 1073
1153 5 1073
2276 5 1073
1073 6 1073
1153 6 1073
.I 1074
.T
Shanks (Algorithm 215)
.B
CACM May, 1964
.A
Schumaker, L.
.N
CA640515 JB March 9, 1978 11:51 PM
.X
1074 5 1074
1074 5 1074
1074 5 1074
.I 1075
.T
Shuttlesort (Algorithm 175)
.B
CACM May, 1964
.A
Juelich, O. C.
.N
CA640514 JB March 9, 1978 11:52 PM
.X
1075 5 1075
1075 5 1075
1075 5 1075
.I 1076
.T
Multiple Integration (Algorithm 146)
.B
CACM May, 1964
.A
Wirth, N.
.N
CA640513 JB March 9, 1978 11:53 PM
.X
1076 5 1076
1076 5 1076
1076 5 1076
.I 1077
.T
Chebyshev Curve Fit (Algorithm 91)
.B
CACM May, 1964
.A
Naur, P.
.N
CA640512 JB March 9, 1978 11:53 PM
.X
1077 5 1077
1077 5 1077
1077 5 1077
.I 1078
.T
Elementary Functions Continued Fractions (Algorithm 229)
.B
CACM May, 1964
.A
Morelock, J. C.
.N
CA640511 JB March 9, 1978 11:55 PM
.X
1078 5 1078
1078 5 1078
1078 5 1078
.I 1079
.T
Q-Bessel Functions (Algorithm 228)
.B
CACM May, 1964
.A
Simoes Pereira, J. M. S.
.N
CA640510 JB March 9, 1978 11:56 PM
.X
1079 5 1079
1079 5 1079
1079 5 1079
.I 1080
.T
Chebyshev Polynomial Coefficients (Algorithm 227)
.B
CACM May, 1964
.A
Cyvin, S. J.
.N
CA640509 JB March 9, 1978 11:57 PM
.X
1080 5 1080
1080 5 1080
1080 5 1080
.I 1081
.T
Normal Distribution Function (Algorithm 226)
.B
CACM May, 1964
.A
Cyvin, S. J.
.N
CA640508 JB March 9, 1978 11:58 PM
.X
1081 5 1081
1081 5 1081
1081 5 1081
1157 5 1081
836 6 1081
1081 6 1081
485 6 1081
714 6 1081
.I 1082
.T
Gamma Function Controlled Accuracy (Algorithm 225)
.B
CACM May, 1964
.A
Cyvin, S. J.
Cyvin, B. N.
.N
CA640507 JB March 9, 1978 11:59 PM
.X
1082 5 1082
1082 5 1082
1082 5 1082
.I 1083
.T
Experiment User-Oriented Computer System
.W
version software-hardware system
purpose facilitating programming
analysis well-formulated problems described. modified
Flexowriter used generate computer-acceptable
input equations computable requests typed
much same manner they would appear
conventional mathematical texts. typing language
rules quite flexible unrestrictive.
While compiler part efficient, system
whole has much broader aspects tool
study problem solving self-teaching systems.
.B
CACM May, 1964
.A
Klerer, M.
May, J.
.N
CA640506 JB March 10, 1978 12:03 AM
.X
1083 4 1083
1083 4 1083
1083 4 1083
1083 4 1083
1396 4 1083
1396 4 1083
679 4 1083
1083 5 1083
1083 5 1083
1083 5 1083
1396 5 1083
1624 5 1083
407 5 1083
3192 5 1083
3193 5 1083
730 5 1083
964 6 1083
1028 6 1083
1029 6 1083
1083 6 1083
1083 6 1083
1132 6 1083
1214 6 1083
1278 6 1083
1334 6 1083
1365 6 1083
1386 6 1083
1387 6 1083
1388 6 1083
1392 6 1083
1393 6 1083
1394 6 1083
1395 6 1083
1396 6 1083
1397 6 1083
1496 6 1083
284 6 1083
407 6 1083
3199 6 1083
3200 6 1083
3201 6 1083
3202 6 1083
3203 6 1083
3204 6 1083
561 6 1083
730 6 1083
.I 1084
.T
Declaring Arbitrarily Coded Alphabets
.W
inability existing programming languages
handle character strings more than
one two alphabets mentioned scheme declaring
additional alphabets proposed. scheme
provides for: many-to-one encodings, right left
justification, collating sequences different
numeric sequence, variations character size (number
bits.) alphabet alphabet, arbitrary
source-language character representation.
.B
CACM May, 1964
.A
Shaw, C. J.
.N
CA640505 JB March 10,1978 12:13 AM
.X
1084 4 1084
1084 4 1084
1084 4 1084
1084 4 1084
1084 4 1084
1084 4 1084
1379 4 1084
1625 4 1084
1945 4 1084
1084 5 1084
1084 5 1084
1084 5 1084
1945 5 1084
603 5 1084
644 5 1084
669 5 1084
791 5 1084
797 5 1084
868 5 1084
823 6 1084
914 6 1084
915 6 1084
917 6 1084
984 6 1084
989 6 1084
990 6 1084
1012 6 1084
1084 6 1084
1098 6 1084
1122 6 1084
1138 6 1084
1139 6 1084
1141 6 1084
1200 6 1084
1223 6 1084
1265 6 1084
1336 6 1084
1396 6 1084
1455 6 1084
1477 6 1084
1487 6 1084
1491 6 1084
1496 6 1084
483 6 1084
584 6 1084
669 6 1084
680 6 1084
763 6 1084
.I 1085
.T
Specification General-Purpose Paper Cards
Information Processing (Proposed American Standard)
.B
CACM May, 1964
.N
CA640504 JB March 10, 1978 12:14 AM
.X
1085 5 1085
1085 5 1085
1085 5 1085
.I 1086
.T
Proposal Input-Output Conventions ALGOL
60-A Report Subcommittee ALGOL
ACM Programming Language Committee
.B
CACM May, 1964
.N
CA640501 JB March 10, 1978 12:18 AM
.X
1086 4 1086
1086 4 1086
1132 4 1086
1234 4 1086
1263 4 1086
1265 4 1086
1270 4 1086
1323 4 1086
1358 4 1086
1379 4 1086
1380 4 1086
1453 4 1086
1464 4 1086
1484 4 1086
1491 4 1086
1496 4 1086
1498 4 1086
1613 4 1086
1614 4 1086
1781 4 1086
1825 4 1086
1860 4 1086
2083 4 1086
2178 4 1086
2179 4 1086
2252 4 1086
2325 4 1086
2341 4 1086
2546 4 1086
2645 4 1086
2652 4 1086
2684 4 1086
2842 4 1086
2929 4 1086
2934 4 1086
3069 4 1086
669 4 1086
679 4 1086
691 4 1086
761 4 1086
949 4 1086
989 4 1086
1086 5 1086
1086 5 1086
1086 5 1086
1137 5 1086
1613 5 1086
3184 5 1086
987 6 1086
1086 6 1086
1134 6 1086
1453 6 1086
3184 6 1086
.I 1087
.T
Problems Automatic Abstracting
.W
variety problems concerning design
operation automatic abstracting system
discussed. purpose general view
several major problem areas. No attempt made
discuss details indicate preferences among alternative solutions.
.B
CACM April, 1964
.A
Edmundson, H. P.
.N
CA640422 JB March 10, 1978 12:21 AM
.X
1087 4 1087
634 4 1087
1087 5 1087
1087 5 1087
1087 5 1087
329 5 1087
.I 1088
.T
Menu Planning Computer
.W
computer code has been developed which plans
menus finding minimum cost combinations
menu items such daily dietary, gastronomic
production requirements can satisfied
sequence days. fast, special integer programming
algorithm described which approximates
theoretical solution problem. If necessary, any
menu can changed on-line then post-optimized.
Up 30 percent saving food cost possible.
FORTRAN program IBM 1410 available
request. considerable amount data processing
must precede implementation system.
.B
CACM April, 1964
.A
Balistfy, J. L.
.N
CA640421 JB March 10, 1978 12:26 AM
.X
1088 5 1088
1088 5 1088
1088 5 1088
1658 5 1088
1088 6 1088
.I 1089
.T
Designing Computer Center
.B
CACM April, 1964
.A
Denison, A.
Popov, G.
.N
CA640420 JB March 10, 1978 12:29 AM
.X
1089 5 1089
1089 5 1089
1089 5 1089
.I 1090
.T
Incomplete Beta Function Ratios (Algorithm 222)
.B
CACM April, 1964
.A
Gautschi, W.
.N
CA640418 JB March 10, 1978 12:32 AM
.X
1090 5 1090
1090 5 1090
1090 5 1090
.I 1091
.T
Hypergeometric Confluent Hypergeometric (Algorithm 191 & 192)
.B
CACM April, 1964
.A
Thacher Jr., H. C.
.N
CA640417 JB March 10, 1978 12:33 AM
.X
1091 5 1091
1091 5 1091
1091 5 1091
.I 1092
.T
Nonrecursive Adaptive Integration (Algorithm 182)
.B
CACM April, 1964
.A
Butler, H. S.
.N
CA640416 JB March 10, 1978 12:34 AM
.X
1092 5 1092
1092 5 1092
1092 5 1092
1352 5 1092
2093 5 1092
834 6 1092
834 6 1092
872 6 1092
872 6 1092
1040 6 1092
1092 6 1092
1092 6 1092
1241 6 1092
1273 6 1092
1298 6 1092
1573 6 1092
324 6 1092
429 6 1092
429 6 1092
570 6 1092
621 6 1092
786 6 1092
.I 1093
.T
Evaluation Determinant (Algorithm 224)
.B
CACM April, 1964
.A
Rotenberg, L. J.
.N
CA640415 JB March 10, 1978 1:12 AM
.X
1093 5 1093
1093 5 1093
1093 5 1093
1946 5 1093
878 6 1093
902 6 1093
1093 6 1093
1177 6 1093
1387 6 1093
1393 6 1093
360 6 1093
731 6 1093
.I 1094
.T
Prime Twins (Algorithm 223)
.B
CACM April, 1964
.A
Shimrat, M.
.N
CA640414 JB March 10, 1978 1:13 AM
.X
1094 5 1094
1094 5 1094
1094 5 1094
.I 1095
.T
Decimal Tables Binary Coded Tables
.B
CACM April, 1964
.A
Griebrok, M.
.N
CA640413 JB March 10, 1978 1:14 AM
.X
1095 5 1095
1095 5 1095
1095 5 1095
.I 1096
.T
Avoiding Matrix Reversals Between 7090 FORTRAN II 7090 FORTRAN IV
.B
CACM April, 1964
.A
Stevens, D.
Benson, B.
.N
CA640412 JB March 10, 1978 1:28 AM
.X
1096 5 1096
1096 5 1096
1096 5 1096
.I 1097
.T
Algorithm Converting Integers Base Base B
.W
little known, simple algorithm integer
conversion between number systems presented
proved.
.B
CACM April, 1964
.A
Gladwin, H. T.
.N
CA640411 JB March 10, 1978 1:30 AM
.X
1097 5 1097
1097 5 1097
1097 5 1097
.I 1098
.T
Comparison List-Processing Computer Languages
(Including Detailed Comparison COMIT,
IPL-V, LISP 1.5, SLIP)
.W
detailed comparison presented COMIT,
IPL-V, LISP 1.5 SLIP - four well-known computer
programming languages which, among them, exhibit all
principal characteristics existing list-processing
languages. Important common features list-processing
languages reviewed: forms data structures
which manipulated, necessity dynamic allocation
storage, use pushdown stores, use
recursive operations. Principal differences between
four languages under consideration detailed:
representations data, both programmer within
machine; methods storage allocation;
programming formalisms special processes available,
including arithmetic facilities; usability
terms availability, documentation, learning aids
debugging facilities. rough comparison
shows all languages discussed have approximately
same speed. Finally, authors give
some heuristics aid selection one these
languages use particular problem applications,
concluding no one languages considered
distinctly superior all possible list-processing
applications.
.B
CACM April, 1964
.A
Bobrow, D. G.
Raphael, B.
.N
CA640410 JB March 10, 1978 1:37 AM
.X
1024 4 1098
1051 4 1098
1098 4 1098
1214 4 1098
1380 4 1098
1388 4 1098
1393 4 1098
1485 4 1098
1487 4 1098
1549 4 1098
1570 4 1098
1878 4 1098
1946 4 1098
1957 4 1098
2168 4 1098
2723 4 1098
2857 4 1098
3112 4 1098
1098 5 1098
1098 5 1098
1098 5 1098
1570 5 1098
1945 5 1098
2314 5 1098
731 5 1098
823 6 1098
914 6 1098
915 6 1098
917 6 1098
984 6 1098
989 6 1098
990 6 1098
1012 6 1098
1084 6 1098
1098 6 1098
1098 6 1098
1098 6 1098
1122 6 1098
1138 6 1098
1139 6 1098
1141 6 1098
1200 6 1098
1223 6 1098
1265 6 1098
1336 6 1098
1396 6 1098
1455 6 1098
1477 6 1098
1487 6 1098
1491 6 1098
1496 6 1098
1626 6 1098
2082 6 1098
2148 6 1098
483 6 1098
584 6 1098
669 6 1098
680 6 1098
731 6 1098
763 6 1098
.I 1099
.T
Professional Computer Work Blind
.W
Developments computer technology have opened
new professional opportunities intelligent
blind. Since there few if any occupations which
blind can participate without serious disadvantage,
opportunities offered them gain entrance into
various occupations through computer use including
programmer, important future rehabilitation
planning. Also immediate interest
fact blind may especially suited programming
work. Because intense training
constant experience locating objects unseen
environment also because superbly trained
memory, blind brings work programming skills
which sighted has had little need acquire.
These qualifications should result fewer debugging
problems make blind valuable addition
any systems group. Before blind could become
serious professional, number aids techniques
had developed can mediate between machines
programmer. paper describes techniques
aids which were designed staff Medical
Computing Center University Cincinnati
College Medicine.
.B
CACM April, 1964
.A
Sterling, T. D.
Lichstein, M.
Scarpino, F.
Stuebing, D.
.N
CA640409 JB March 10, 1978 1:46 AM
.X
1099 5 1099
1099 5 1099
1099 5 1099
1264 5 1099
1740 5 1099
1099 6 1099
1099 6 1099
.I 1100
.T
Status Computer Sciences Curricula Colleges Universities
.B
CACM April, 1964
.A
Atchison, W. F.
Hamblen, J. W.
.N
CA640408 JB March 10, 1978 1:47 AM
.X
1100 5 1100
1100 5 1100
1100 5 1100
1107 5 1100
1205 5 1100
1100 6 1100
1100 6 1100
1104 6 1100
1107 6 1100
68 6 1100
.I 1101
.T
Place Logical Design Switching
Theory Computer Curriculum
.B
CACM April, 1964
.A
Muller, D. E.
.N
CA640407 JB March 10, 1978 1:49 AM
.X
1101 5 1101
1101 5 1101
1101 5 1101
.I 1102
.T
Mechanical Languages: Course Specification
.B
CACM April, 1964
.A
Gorn, S.
.N
CA640406 JB March 10, 1978 1:49 AM
.X
249 4 1102
254 4 1102
272 4 1102
1024 4 1102
1050 4 1102
1051 4 1102
1051 4 1102
1102 4 1102
1102 4 1102
1102 4 1102
1102 4 1102
1102 4 1102
1109 4 1102
1132 4 1102
1140 4 1102
1142 4 1102
1188 4 1102
1306 4 1102
1390 4 1102
1464 4 1102
1486 4 1102
1491 4 1102
1549 4 1102
1549 4 1102
1706 4 1102
1767 4 1102
1781 4 1102
1781 4 1102
1787 4 1102
1826 4 1102
1878 4 1102
1945 4 1102
1949 4 1102
321 4 1102
378 4 1102
378 4 1102
2059 4 1102
2060 4 1102
2126 4 1102
2155 4 1102
2168 4 1102
435 4 1102
437 4 1102
463 4 1102
483 4 1102
491 4 1102
2719 4 1102
2723 4 1102
2732 4 1102
2838 4 1102
2842 4 1102
2855 4 1102
2879 4 1102
560 4 1102
583 4 1102
3008 4 1102
3073 4 1102
3077 4 1102
3080 4 1102
3106 4 1102
627 4 1102
627 4 1102
631 4 1102
632 4 1102
642 4 1102
644 4 1102
653 4 1102
680 4 1102
731 4 1102
761 4 1102
762 4 1102
762 4 1102
763 4 1102
798 4 1102
106 4 1102
123 4 1102
140 4 1102
919 4 1102
949 4 1102
989 4 1102
196 5 1102
1102 5 1102
1102 5 1102
1102 5 1102
209 5 1102
210 5 1102
406 5 1102
483 5 1102
.I 1103
.T
Logic Computer Sciences
.B
CACM April, 1964
.A
Korfhage, R. R.
.N
CA640405 JB March 10, 1978 1:50 AM
.X
1103 5 1103
1103 5 1103
1103 5 1103
.I 1104
.T
Undergraduate Curriculum Numerical Analysis
.B
CACM April, 1964
.A
Forsythe, G. E.
.N
CA640404 JB March 10, 1978 1:51 AM
.X
1104 5 1104
1104 5 1104
1104 5 1104
1205 5 1104
1100 6 1104
1104 6 1104
1107 6 1104
68 6 1104
.I 1105
.T
Introducing Digital Computing
.B
CACM April, 1964
.A
Arden, B. W.
.N
CA640403 JB March 10, 1978 1:53 AM
.X
1046 4 1105
1105 4 1105
1139 4 1105
1140 4 1105
1234 4 1105
1263 4 1105
1265 4 1105
1496 4 1105
1781 4 1105
1824 4 1105
2126 4 1105
2546 4 1105
464 4 1105
584 4 1105
631 4 1105
653 4 1105
680 4 1105
763 4 1105
795 4 1105
799 4 1105
945 4 1105
1105 5 1105
1105 5 1105
1105 5 1105
404 5 1105
.I 1106
.T
Programming Digital Computers
.B
CACM April, 1964
.A
Perlis, A. J.
.N
CA640402 JB March 10, 1978 1:54 AM
.X
1106 5 1106
1106 5 1106
1106 5 1106
.I 1107
.T
Computers Education
.B
CACM April, 1964
.A
Keenan, T. A.
.N
CA640401 JB March 10, 1978 1:54 AM
.X
1107 4 1107
1205 4 1107
1100 5 1107
1107 5 1107
1107 5 1107
1107 5 1107
1205 5 1107
1100 6 1107
1104 6 1107
1107 6 1107
68 6 1107
.I 1108
.T
Digital Data Processor Tracking Partially Illuminated Moon*
.W
study lunar tracking techniques fabrication
breadboard assess feasibility
best technique selected conducted define
tracking system observation sight line
center partially illuminated moon.
data processing portion system presented
detail then described general operation
tracker head assembly data readout,
operation entire system effect data
processing considerations have design
tracker system. system basically consists
optical sensor, digital computer tracker
drive mechanism. three system units, connected
cascade, comprise control loop.
application, optical telescope radial mechanical
scanning mechanism used read out
lunar sight line measurement information. information
sequentially read into special purpose
digital computer extracts measurements
computes error signals drive tracker
appropriate attitude.
.B
CACM March, 1964
.A
Wilcox, H. J.
.N
CA640324 JB March 10, 1978 2:02 AM
.X
1108 5 1108
1108 5 1108
1108 5 1108
.I 1109
.T
Conversion Power Series Chebyshev Polynomials*
.W
Even slowly convergent power series can
rearranged series Chebyshev polynomials if
appropriate sequence transformations used evaluating
coefficients. method illustrated
computing coefficients expansion
logarithm dilogarithm.
.B
CACM March, 1964
.A
Thacher Jr., H. C.
.N
CA640323 JB March 10, 1978 2:05 AM
.X
249 4 1109
254 4 1109
272 4 1109
1102 4 1109
1109 4 1109
1140 4 1109
1188 4 1109
1306 4 1109
1464 4 1109
1491 4 1109
1767 4 1109
1781 4 1109
1787 4 1109
1949 4 1109
321 4 1109
2059 4 1109
2126 4 1109
435 4 1109
437 4 1109
463 4 1109
483 4 1109
491 4 1109
2732 4 1109
560 4 1109
583 4 1109
3073 4 1109
627 4 1109
631 4 1109
632 4 1109
642 4 1109
644 4 1109
653 4 1109
680 4 1109
761 4 1109
762 4 1109
763 4 1109
123 4 1109
140 4 1109
919 4 1109
989 4 1109
196 5 1109
1109 5 1109
1109 5 1109
1109 5 1109
.I 1110
.T
Fourier Series Method Numerical Solution
Class Parabolic Partial Differential
Equations*
.W
Fourier series method described which,
applied certain class parabolic partial
differential equations, reduces problem system
ordinary differential equations. application
given which method shows considerable advantage
over conventional finite difference methods.
.B
CACM March, 1964
.A
Forrington, C. V. D.
.N
CA640322 JB March 10, 1978 2:08 AM
.X
1110 5 1110
1110 5 1110
1110 5 1110
.I 1111
.T
Class Iterative Techniques Factorization Polynomials*
.W
method iteration developed terms
function somewhat arbitrary character.
Sufficient conditions given convergence
process, yielding factors arbitrary degree
polynomials one variable. Both Lin's method
Newton's method occur special cases.
.B
CACM March, 1964
.A
Luther, H. A.
.N
CA640321 JB March 10, 1978 2:10 AM
.X
1111 4 1111
1111 5 1111
1111 5 1111
1111 5 1111
894 5 1111
.I 1112
.T
Technique Computer Detection Correction Spelling Errors*
.W
method described assumes word
which cannot found dictionary has most
one error, which might wrong, missing extra letter
single transposition. unidentified
input word compared dictionary again, testing
each time see if words match-assuming
one these errors occurred. During test run garbled
text, correct identifications were made
over 95 percent these error types.
.B
CACM March, 1964
.A
Damerau, F. J.
.N
CA640320 JB March 10, 1978 2:21 AM
.X
1112 4 1112
1592 4 1112
2111 4 1112
2339 4 1112
440 4 1112
1112 5 1112
1112 5 1112
1112 5 1112
1592 5 1112
2111 5 1112
2339 5 1112
619 5 1112
830 6 1112
982 6 1112
1112 6 1112
1112 6 1112
1112 6 1112
1592 6 1112
1592 6 1112
440 6 1112
619 6 1112
619 6 1112
619 6 1112
.I 1113
.T
Computer-Made Perspective Movies Scientific Communication Tool*
.W
easy program basic transformation
required perspective drawing. fact
plus advent high speed microfilm printers such
General Dynamics Electronics S-C 4020 makes
possible perspective movies direct output
computer. programming such movie
briefly described studying angular motions
satellite containing attitude control system.
movie, domino-shaped box represents satellite
sphere circles latitude
longitude represents earth. cost approximately
three eight minutes IBM 7090 time per
one minute movie.
.B
CACM March, 1964
.A
Zajac, E. E.
.N
CA640319 JB March 10, 1978 2:26 AM
.X
1113 5 1113
1113 5 1113
1113 5 1113
.I 1114
.T
Generating Canonical Prefix Encoding*
.W
Computer programs generating minimum-redundancy
exhaustive prefix encoding described.
One program generates Huffman frequency tree, another
determines structure functions encoding,
third program assigns codes.
.B
CACM March, 1964
.A
Schwartz, E. S.
Kallick, B.
.N
CA640318 JB March 10, 1978 2:28 AM
.X
1114 5 1114
1114 5 1114
1114 5 1114
2346 5 1114
2459 5 1114
1114 6 1114
1114 6 1114
.I 1115
.T
Randomized Binary Searching Tree Structure
.W
more efficient method using tree structures
proposed, which utilizers both plus
minus branches search path. Very significant
gains result search key includes alphabetic
characters.
.B
CACM March, 1964
.A
Clampett Jr., H. A.
.N
CA640317 JB March 10, 1978 2:30 AM
.X
1115 5 1115
1115 5 1115
1115 5 1115
1935 5 1115
849 6 1115
1115 6 1115
.I 1116
.T
Tests Computer Method Constructing School Timetables*
.W
previously proposed computer method constructing
timetables, based iteration involving
Boolean matrices, described. limited tests
method has successfully produced timetables
every trial. References given which relate
timetable problem theorems matrices zeros
ones, theorems bipartite graphs. Some
problems applying method constructing
timetables real situations noted.
.B
CACM March, 1964
.A
Csima, J.
Gotlieb, C. C.
.N
CA640316 JB March 10, 1978 2:34 AM
.X
1116 5 1116
1116 5 1116
1116 5 1116
1367 5 1116
2772 5 1116
2787 5 1116
1116 6 1116
1116 6 1116
1116 6 1116
1429 6 1116
1429 6 1116
.I 1117
.T
Polyphase Sorting Overlapped Rewind*
.W
variation polyphase merge technique
sorting described which permits one tape
time rewound while merge continued
remaining tapes. result overlapping
major portion rewind time. technique
should considered whenever sort written
operate five more tapes cannot read backwards.
savings overlap method appear
increase number available tapes increased.
.B
CACM March, 1964
.A
McAlester, R. L.
.N
CA640315 JB March 10, 1978 2:38 AM
.X
1117 4 1117
1117 4 1117
1117 4 1117
2017 4 1117
2017 4 1117
2146 4 1117
2146 4 1117
677 4 1117
860 4 1117
861 4 1117
1117 5 1117
1117 5 1117
1117 5 1117
636 5 1117
862 5 1117
861 5 1117
.I 1118
.T
FORTRAN Subroutines Time Series Data Reduction*
.B
CACM March, 1964
.A
MacGowan, R. A.
.N
CA640314 JB March 10, 1978 2:39 AM
.X
1118 4 1118
1118 4 1118
826 4 1118
948 4 1118
942 5 1118
1118 5 1118
1118 5 1118
1118 5 1118
826 5 1118
.I 1119
.T
Open Letter X3.4.3 (FORTRAN Standards -- American Association)
.B
CACM March, 1964
.N
CA640313 JB March 10, 1978 2:40 AM
.X
1119 5 1119
1119 5 1119
1119 5 1119
.I 1120
.T
"ALCOR Group Representations ALGOL Symbols,"
Comm. ACM 6 (1963), 597-599. (Corrigenda)
.B
CACM March, 1964
.N
CA640312 JB March 10, 1978 2:42 AM
.X
1120 5 1120
1120 5 1120
1120 5 1120
.I 1121
.T
Comments "A Continued Operation Notation"*
.W
note intended clarify correct
several points recent paper describing some
notations symbol manipulation M.P. Barnett [Comm. ACM 6(August, 1963)].
.B
CACM March, 1964
.A
Barnett, M. P.
Gerard, J. M.
Sambles, A. W.
.N
CA640310 JB March 10, 1978 2:45 AM
.X
1062 4 1121
1121 4 1121
1121 4 1121
1139 4 1121
1265 4 1121
1781 4 1121
659 4 1121
720 4 1121
759 4 1121
964 4 1121
1121 5 1121
1121 5 1121
1121 5 1121
464 5 1121
759 5 1121
.I 1122
.T
Note Some Compiling Algorithms
.W
Two compiling generators arithmetic expressions
discussed: one presently use
experimental compiler, improvement
suggested K. Speierman Burroughs.
.B
CACM March, 1964
.A
Anderson, J. P.
.N
CA640309 JB March 10, 1978 3:33 AM
.X
1122 5 1122
1122 5 1122
1122 5 1122
1551 5 1122
1945 5 1122
823 6 1122
914 6 1122
915 6 1122
917 6 1122
984 6 1122
989 6 1122
990 6 1122
1012 6 1122
1084 6 1122
1098 6 1122
1122 6 1122
1122 6 1122
1138 6 1122
1139 6 1122
1141 6 1122
1200 6 1122
1223 6 1122
1265 6 1122
1336 6 1122
1396 6 1122
1455 6 1122
1477 6 1122
1487 6 1122
1491 6 1122
1496 6 1122
483 6 1122
584 6 1122
669 6 1122
680 6 1122
763 6 1122
.I 1123
.T
Gauss (Algorithm 209)
.B
CACM March, 1964
.A
Gladfelter, G. W.
.N
CA640308 JB March 10, 1978 3:34 AM
.X
1123 5 1123
1123 5 1123
1123 5 1123
.I 1124
.T
Matrix Division (Algorithm 197)
.B
CACM March, 1964
.A
Wells, M.
.N
CA640307 JB March 10, 1978 3:35 AM
.X
1124 5 1124
1124 5 1124
1124 5 1124
.I 1125
.T
Syminv2 (Algorithm 150)
.B
CACM March, 1964
.A
Naur, P.
.N
CA640306 JB March 10, 1978 3:36 AM
.X
1125 5 1125
1125 5 1125
1125 5 1125
.I 1126
.T
ERF (Algorithm 123)
.B
CACM March, 1964
.A
Barton, S. P.
Wagner, J. F.
.N
CA640305 JB March 10, 1978 3:37 AM
.X
1126 5 1126
1126 5 1126
1126 5 1126
1583 5 1126
831 6 1126
967 6 1126
1126 6 1126
707 6 1126
.I 1127
.T
Tridiagonal Matrix (Algorithm 122)
.B
CACM March, 1964
.A
Naur, P.
.N
CA640304 JB March 10, 1978 3:39 AM
.X
1127 5 1127
1127 5 1127
1127 5 1127
.I 1128
.T
Evaluation Determinant (Algorithm 41)
.B
CACM March, 1964
.A
Rotenberg, L. J.
.N
CA640303 JB March 10, 1978 3:40 AM
.X
1128 5 1128
1128 5 1128
1128 5 1128
1319 5 1128
152 6 1128
1128 6 1128
.I 1129
.T
Incomplete Beta Function Ratios (Algorithm 222)
.B
CACM March, 1964
.A
Gautschi, W.
.N
CA640302 JB March 10, 1978 3:41 AM
.X
1129 5 1129
1129 5 1129
1129 5 1129
.I 1130
.T
Gamma Function (Althm 221)
.B
CACM March, 1964
.A
Gautschi, W.
.N
CA640301 JB March 10, 1978 3:42 AM
.X
1023 5 1130
1130 5 1130
1130 5 1130
1130 5 1130
1222 5 1130
1130 6 1130
1130 6 1130
245 6 1130
310 6 1130
.I 1131
.T
Context Ambiguity Parsing*
.B
CACM February, 1964
.A
Ross, D. T.
.N
CA640212 JB March 10, 1978 3:43 AM
.X
1131 5 1131
1131 5 1131
1131 5 1131
1781 5 1131
123 6 1131
196 6 1131
919 6 1131
990 6 1131
1007 6 1131
1046 6 1131
1131 6 1131
1139 6 1131
1140 6 1131
1149 6 1131
1198 6 1131
1215 6 1131
1223 6 1131
1265 6 1131
1303 6 1131
1323 6 1131
1358 6 1131
1366 6 1131
1421 6 1131
1460 6 1131
1462 6 1131
1463 6 1131
1467 6 1131
1468 6 1131
1477 6 1131
1491 6 1131
1496 6 1131
1531 6 1131
1535 6 1131
1565 6 1131
1601 6 1131
1602 6 1131
1613 6 1131
1614 6 1131
1626 6 1131
1641 6 1131
1787 6 1131
1788 6 1131
205 6 1131
224 6 1131
249 6 1131
288 6 1131
316 6 1131
381 6 1131
398 6 1131
11 6 1131
404 6 1131
410 6 1131
463 6 1131
464 6 1131
483 6 1131
3184 6 1131
3188 6 1131
584 6 1131
600 6 1131
680 6 1131
691 6 1131
763 6 1131
799 6 1131
.I 1132
.T
Extension ALGOL Manipulating Formulae*
.B
CACM February, 1964
.A
Perlis, A. J.
Iturriaga, R.
.N
CA640211 JB March 10, 1978 3:45 AM
.X
1024 4 1132
1051 4 1132
1086 4 1132
1102 4 1132
1132 4 1132
1132 4 1132
1234 4 1132
1263 4 1132
1265 4 1132
1270 4 1132
1323 4 1132
1358 4 1132
1379 4 1132
1380 4 1132
1390 4 1132
1453 4 1132
1464 4 1132
1484 4 1132
1486 4 1132
1491 4 1132
1498 4 1132
1549 4 1132
1613 4 1132
1614 4 1132
1706 4 1132
1781 4 1132
1825 4 1132
1826 4 1132
1860 4 1132
1878 4 1132
378 4 1132
2060 4 1132
2083 4 1132
2155 4 1132
2168 4 1132
2178 4 1132
2179 4 1132
2252 4 1132
2325 4 1132
2341 4 1132
2546 4 1132
2645 4 1132
2652 4 1132
2684 4 1132
2719 4 1132
2723 4 1132
2838 4 1132
2842 4 1132
2842 4 1132
2855 4 1132
2879 4 1132
2929 4 1132
2934 4 1132
3069 4 1132
3077 4 1132
3080 4 1132
3106 4 1132
627 4 1132
669 4 1132
679 4 1132
691 4 1132
761 4 1132
106 4 1132
949 4 1132
989 4 1132
1132 5 1132
1132 5 1132
1132 5 1132
1214 5 1132
210 5 1132
1396 5 1132
3184 5 1132
964 6 1132
1028 6 1132
1029 6 1132
1083 6 1132
1132 6 1132
1132 6 1132
1214 6 1132
1278 6 1132
1334 6 1132
1365 6 1132
1386 6 1132
1387 6 1132
1388 6 1132
1392 6 1132
1393 6 1132
1394 6 1132
1395 6 1132
1396 6 1132
1397 6 1132
1496 6 1132
284 6 1132
407 6 1132
3199 6 1132
3200 6 1132
3201 6 1132
3202 6 1132
3203 6 1132
3204 6 1132
561 6 1132
730 6 1132
731 6 1132
.I 1133
.T
Programming Package Some General Modes Arithmetic*
.B
CACM February, 1964
.A
Brooker, R. A.
.N
CA640210 JB March 10, 1978 3:46 AM
.X
1133 5 1133
1133 5 1133
1133 5 1133
.I 1134
.T
Some Effects 6600 Computer Language Structures*
.W
problem compiling efficient 6600 codes
prompted development intermediate language
reflecting structure machine, more
easily manipulated improving object program
efficiency. subject paper intermediate
language methods manipulating it.
Compilations series arithmetic statements
discussed. assumed all functions
exponentials have been removed these statements,
replaced simple variables. purposes
simplicity treatment subscripts ignored.
simplified 6600 structure presented illustrate
compiling method. Several assumptions made
purposes simplification, although there
cases which assumptions violated actual machine.
.B
CACM February, 1964
.A
Allard, R. W.
Wolf, K. A.
Zemlin, R. A.
.N
CA640209 JB March 10, 1978 3:54 AM
.X
1134 4 1134
1134 4 1134
1134 4 1134
1141 4 1134
1179 4 1134
1861 4 1134
364 4 1134
405 4 1134
438 4 1134
561 4 1134
44 4 1134
83 4 1134
1134 5 1134
1134 5 1134
1134 5 1134
1613 5 1134
1947 5 1134
408 5 1134
17 5 1134
77 5 1134
987 6 1134
1086 6 1134
1134 6 1134
1134 6 1134
1223 6 1134
1248 6 1134
1453 6 1134
399 6 1134
3184 6 1134
.I 1135
.T
General Business-Oriented Language Based Decision Expressions*
.W
structure digital compute programming
language which covers wide class business
file processing applications presented. Such
structure, based identifying incorporating
into compiler aspects common all processes
such class, permits writing extremely compact
programs, even comparatively complex applications,
terms tables control expressions which
express only information characteristic particular
application. Furthermore,local changes
process (e.g. changes affecting only one output
files involved) can effected local modifications
program (e.g. modification only one entry
tables). structure also allows inexpensive
preparation loading-speed compilers which translate
source programs into efficient machine codes.
approach adopted here departs conventional mechanical
language design philosophies. stresses
structural analysis class processes represented
languages, opposed emphasizing
formal (i.e., contents-independent) syntactical definitions.
relies exclusively nonprocedural
representation process sets (tables) relations
between data results (there no control
statements such GO TO, etc.), instead using procedure
descriptions (which one-to-one translations
flowcharts). Here invariant pattern procedure
identified characteristic class
all batch file processes. new philosophy has
potential overcome well-known deficiencies
other business-oriented languages fully meets
requirements set CODASYL such languages,
including machine-independence.
.B
CACM February, 1964
.A
Lombardi, L. A.
.N
CA640208 JB March 10, 1978 4:08 AM
.X
1135 4 1135
1136 4 1135
493 4 1135
2710 4 1135
2765 4 1135
2888 4 1135
2906 4 1135
729 4 1135
1135 5 1135
1135 5 1135
1135 5 1135
1959 5 1135
616 5 1135
1135 6 1135
.I 1136
.T
Beginnings Theory Information Handling*
.B
CACM February, 1964
.A
Steel Jr., T. B.
.N
CA640207 JB March 10, 1978 4:10 AM
.X
1135 4 1136
1136 4 1136
1136 4 1136
1136 4 1136
493 4 1136
2710 4 1136
2765 4 1136
2888 4 1136
2906 4 1136
729 4 1136
1136 5 1136
1136 5 1136
1136 5 1136
493 5 1136
616 5 1136
657 5 1136
.I 1137
.T
Format Language*
.B
CACM February, 1964
.A
Perlis, A. J.
.N
CA640206 JB March 10, 1978 4:15 AM
.X
1086 5 1137
1137 5 1137
1137 5 1137
1137 5 1137
1496 5 1137
1137 6 1137
1137 6 1137
1141 6 1137
404 6 1137
3184 6 1137
.I 1138
.T
Formalism Programming Languages*
.B
CACM February, 1964
.A
Iverson, K. E.
.N
CA640205 JB March 10, 1978 4:24 AM
.X
1138 5 1138
1138 5 1138
1138 5 1138
1945 5 1138
823 6 1138
914 6 1138
915 6 1138
917 6 1138
984 6 1138
989 6 1138
990 6 1138
1012 6 1138
1084 6 1138
1098 6 1138
1122 6 1138
1138 6 1138
1139 6 1138
1141 6 1138
1200 6 1138
1223 6 1138
1265 6 1138
1336 6 1138
1396 6 1138
1455 6 1138
1477 6 1138
1487 6 1138
1491 6 1138
1496 6 1138
483 6 1138
584 6 1138
669 6 1138
680 6 1138
763 6 1138
.I 1139
.T
FORTRAN IV Syntax Language*
.B
CACM February, 1964
.A
Leavenworth, B. M.
.N
CA640204 JB March 10, 1978 4:53 AM
.X
267 4 1139
1046 4 1139
1062 4 1139
1105 4 1139
1121 4 1139
1139 4 1139
1139 4 1139
1139 4 1139
1139 4 1139
1139 4 1139
1139 4 1139
1140 4 1139
1141 4 1139
1215 4 1139
1223 4 1139
1234 4 1139
1263 4 1139
1265 4 1139
1265 4 1139
1265 4 1139
1496 4 1139
1647 4 1139
1665 4 1139
1781 4 1139
1781 4 1139
1781 4 1139
1787 4 1139
1792 4 1139
1824 4 1139
1947 4 1139
364 4 1139
2126 4 1139
405 4 1139
2546 4 1139
438 4 1139
464 4 1139
556 4 1139
584 4 1139
3185 4 1139
631 4 1139
653 4 1139
680 4 1139
720 4 1139
759 4 1139
763 4 1139
763 4 1139
763 4 1139
795 4 1139
799 4 1139
799 4 1139
945 4 1139
1139 5 1139
1139 5 1139
1139 5 1139
224 5 1139
1612 5 1139
1781 5 1139
1945 5 1139
399 5 1139
404 5 1139
438 5 1139
464 5 1139
631 5 1139
823 6 1139
123 6 1139
196 6 1139
914 6 1139
915 6 1139
917 6 1139
919 6 1139
984 6 1139
989 6 1139
990 6 1139
990 6 1139
1007 6 1139
1012 6 1139
1046 6 1139
1084 6 1139
1098 6 1139
1122 6 1139
1131 6 1139
1138 6 1139
1139 6 1139
1139 6 1139
1139 6 1139
1140 6 1139
1141 6 1139
1149 6 1139
1198 6 1139
1200 6 1139
1215 6 1139
1223 6 1139
1223 6 1139
1265 6 1139
1265 6 1139
1303 6 1139
1323 6 1139
1336 6 1139
1358 6 1139
1366 6 1139
1396 6 1139
1421 6 1139
1455 6 1139
1460 6 1139
1462 6 1139
1463 6 1139
1467 6 1139
1468 6 1139
1477 6 1139
1477 6 1139
1487 6 1139
1491 6 1139
1491 6 1139
1496 6 1139
1496 6 1139
1531 6 1139
1535 6 1139
1565 6 1139
1601 6 1139
1602 6 1139
1613 6 1139
1614 6 1139
1626 6 1139
1641 6 1139
1787 6 1139
1788 6 1139
205 6 1139
224 6 1139
249 6 1139
288 6 1139
316 6 1139
381 6 1139
398 6 1139
11 6 1139
404 6 1139
410 6 1139
463 6 1139
464 6 1139
483 6 1139
483 6 1139
3184 6 1139
3188 6 1139
584 6 1139
584 6 1139
600 6 1139
669 6 1139
680 6 1139
680 6 1139
691 6 1139
763 6 1139
763 6 1139
799 6 1139
.I 1140
.T
"Structural Connections" Formal Language*
.B
CACM February, 1964
.A
Irons, E. T.
.N
CA640203 JB March 10, 1978 4:55 AM
.X
249 4 1140
254 4 1140
272 4 1140
1046 4 1140
1102 4 1140
1105 4 1140
1109 4 1140
1139 4 1140
1140 4 1140
1140 4 1140
1188 4 1140
1234 4 1140
1263 4 1140
1265 4 1140
1306 4 1140
1464 4 1140
1491 4 1140
1496 4 1140
1767 4 1140
1781 4 1140
1781 4 1140
1787 4 1140
1824 4 1140
1949 4 1140
321 4 1140
2059 4 1140
2126 4 1140
2126 4 1140
2546 4 1140
435 4 1140
437 4 1140
463 4 1140
464 4 1140
483 4 1140
491 4 1140
2732 4 1140
560 4 1140
583 4 1140
584 4 1140
3073 4 1140
627 4 1140
631 4 1140
631 4 1140
632 4 1140
642 4 1140
644 4 1140
653 4 1140
653 4 1140
680 4 1140
680 4 1140
761 4 1140
762 4 1140
763 4 1140
763 4 1140
795 4 1140
799 4 1140
123 4 1140
140 4 1140
919 4 1140
945 4 1140
989 4 1140
196 5 1140
1140 5 1140
1140 5 1140
1140 5 1140
1491 5 1140
1781 5 1140
2061 5 1140
404 5 1140
123 6 1140
196 6 1140
196 6 1140
919 6 1140
990 6 1140
1007 6 1140
1046 6 1140
1131 6 1140
1139 6 1140
1140 6 1140
1140 6 1140
1140 6 1140
1141 6 1140
1149 6 1140
1198 6 1140
1215 6 1140
1223 6 1140
1265 6 1140
1303 6 1140
1303 6 1140
1323 6 1140
1358 6 1140
1366 6 1140
1421 6 1140
1460 6 1140
1462 6 1140
1463 6 1140
1467 6 1140
1468 6 1140
1477 6 1140
1477 6 1140
1491 6 1140
1491 6 1140
1496 6 1140
1531 6 1140
1535 6 1140
1565 6 1140
1601 6 1140
1602 6 1140
1613 6 1140
1614 6 1140
1626 6 1140
1641 6 1140
1787 6 1140
1788 6 1140
205 6 1140
1825 6 1140
224 6 1140
249 6 1140
288 6 1140
316 6 1140
381 6 1140
398 6 1140
11 6 1140
404 6 1140
410 6 1140
463 6 1140
464 6 1140
483 6 1140
3184 6 1140
3184 6 1140
3188 6 1140
584 6 1140
600 6 1140
680 6 1140
691 6 1140
729 6 1140
763 6 1140
773 6 1140
799 6 1140
.I 1141
.T
Bounded Context Syntactic Analysis
.B
CACM February, 1964
.A
Floyd, R. W.
.N
CA640202 JB March 10, 1978 4:56 AM
.X
267 4 1141
1134 4 1141
1139 4 1141
1141 4 1141
1141 4 1141
1215 4 1141
1223 4 1141
1647 4 1141
1781 4 1141
1787 4 1141
1792 4 1141
364 4 1141
364 4 1141
405 4 1141
405 4 1141
438 4 1141
438 4 1141
561 4 1141
44 4 1141
763 4 1141
1141 5 1141
1141 5 1141
1141 5 1141
224 5 1141
1496 5 1141
1683 5 1141
1768 5 1141
1787 5 1141
1945 5 1141
2061 5 1141
77 5 1141
823 6 1141
196 6 1141
914 6 1141
915 6 1141
917 6 1141
984 6 1141
989 6 1141
990 6 1141
1012 6 1141
1084 6 1141
1098 6 1141
1122 6 1141
1137 6 1141
1138 6 1141
1139 6 1141
1140 6 1141
1141 6 1141
1141 6 1141
1141 6 1141
1141 6 1141
1141 6 1141
1141 6 1141
1200 6 1141
1215 6 1141
1223 6 1141
1265 6 1141
1265 6 1141
1336 6 1141
1396 6 1141
1455 6 1141
1477 6 1141
1477 6 1141
1487 6 1141
1491 6 1141
1491 6 1141
1491 6 1141
1491 6 1141
1496 6 1141
1496 6 1141
1781 6 1141
1781 6 1141
1825 6 1141
224 6 1141
404 6 1141
483 6 1141
584 6 1141
669 6 1141
680 6 1141
763 6 1141
763 6 1141
773 6 1141
799 6 1141
.I 1142
.T
Extension ALGOL-Like Languages
.B
CACM February, 1964
.A
Rose, G. F.
.N
CA640201 JB March 10, 1978 4:57 AM
.X
1102 4 1142
1142 4 1142
1781 4 1142
1945 4 1142
762 4 1142
949 4 1142
1142 5 1142
1142 5 1142
1142 5 1142
483 5 1142
.I 1143
.T
Analysis Decay-Type Data*
.W
comparative study has been made variety
numerical techniques fitting experimental
data decay type forms involving sums
exponentials. Statistical errors fitted
parameters also calculated. These methods have been
applied artificially-generated sets data
well results experiments radioactive
tracers both human animal subjects.
Results show values fitted parameters
very sensitive variations fitting
procedure. Therefore great care very sensitive variations
fitting procedure. Therefore great
care must exercised identifying such values
physical constants. Although values functions
derived these fitted parameters which can definitely
associated physical entities generally
more stable under variations fitting techniques,
error bounds can so large no great confidence
can placed even them. would therefore appear
best select uniform technique both running
experiments analyzing data, then
consider significant only relative results
between one subject next.
.B
CACM January, 1964
.A
Worsley, B. H.
.N
CA640112 JB March 10, 1978 5:11 AM
.X
1143 5 1143
1143 5 1143
1143 5 1143
.I 1144
.T
Digital Computer Determination Alpha Source Activity
.W
technique described determining
activity homogeneity alpha source.
believed technique, using digital computer,
has many uses applications field
nuclear physics. technique involves computer
manipulation digital image nuclear
source. Experimental details given.
.B
CACM January, 1964
.A
Robbins, D.
Taylor, W. E.
.N
CA640111 JB March 10, 1978 5:14 AM
.X
1144 5 1144
1144 5 1144
1144 5 1144
.I 1145
.T
GIT-A Heuristic Program Testing Pairs
Directed Line Graphs Isomorphism*
.W
Given pair directed line graphs, problem
ascertaining whether not they isomorphic
one which no efficient algorithmic solution known.
Since straightforward enumerative algorithm
might require 40 years running time very high
speed computer order compare two 15-node
graphs, more sophisticated approach seems called
for. situation similar prevailing
areas such game-playing theorem-proving,
practical algorithms unknown (for interesting
cases), but various practical though only partially
successful techniques available. Git-Graph
Isomorphism Tester-incorporates variety processes
attempt narrow down search
isomorphism, demonstrate none exists. No one
scheme relied upon exclusively solution,
program designed avoid excessive computation
along fruitless lines. GIT has been written
COMIT language successfully tested IBM 7090.
.B
CACM January, 1964
.A
Unger, S. H.
.N
CA640110 JB March 10, 1978 5:24 AM
.X
1145 4 1145
1145 5 1145
1145 5 1145
1145 5 1145
1504 5 1145
3040 5 1145
655 5 1145
1145 6 1145
1145 6 1145
.I 1146
.T
Efficient Composite Formula Multidimensional Quadrature
.W
(2s+1)-point second-degree quadrature formula
integration over s-dimensional hyper-rectangle
presented. All but one points lie
surface weights opposite sign attached
points opposite faces. large volume subdivided
into congruent rectangular subdivisions,
only one point required each interior subdivision
achieve second-degree accuracy.
.B
CACM January, 1964
.A
Thacher Jr., H. C.
.N
CA640109 JB March 10, 1978 5:28 AM
.X
1146 4 1146
1146 5 1146
1146 5 1146
1146 5 1146
386 5 1146
.I 1147
.T
Numerical Solution Boundary Value Problems
Linear Ordinary Differential Equations*
.W
numerical method presented solution
boundary value problems involving linear
ordinary differential equations. method described
noniterative makes use any one-step
numerical integration scheme reduce problem
one boundary values one initial values.
Comments made concerning some numerical results
applying method specific problem.
addition extension algorithm described
more general problems discussed.
.B
CACM January, 1964
.A
Day, J. T.
Collins II, G. W.
.N
CA640108 JB March 10, 1978 5:32 AM
.X
1147 5 1147
1147 5 1147
1147 5 1147
1274 5 1147
1147 6 1147
.I 1148
.T
Example "Significant-Digit" Arithmetic*
.W
Different methods handling summing process
geometric series shown give
results indicating widely differing significances carried
out machine incorporating "significant-digit"
arithmetic.
.B
CACM January, 1964
.A
Miller, R. H.
.N
CA640107 JB March 10, 1978 5:34 AM
.X
1148 4 1148
1148 5 1148
1148 5 1148
1148 5 1148
85 5 1148
3131 5 1148
893 6 1148
1148 6 1148
.I 1149
.T
GARGOYLE , Language Compiler Writing*
.B
CACM January, 1964
.A
Garwick, J. V.
.N
CA640106 JB March 10, 1978 5:35 AM
.X
1149 5 1149
1149 5 1149
1149 5 1149
1781 5 1149
123 6 1149
196 6 1149
919 6 1149
990 6 1149
1007 6 1149
1046 6 1149
1131 6 1149
1139 6 1149
1140 6 1149
1149 6 1149
1198 6 1149
1215 6 1149
1223 6 1149
1265 6 1149
1303 6 1149
1323 6 1149
1358 6 1149
1366 6 1149
1421 6 1149
1460 6 1149
1462 6 1149
1463 6 1149
1467 6 1149
1468 6 1149
1477 6 1149
1491 6 1149
1496 6 1149
1531 6 1149
1535 6 1149
1565 6 1149
1601 6 1149
1602 6 1149
1613 6 1149
1614 6 1149
1626 6 1149
1641 6 1149
1787 6 1149
1788 6 1149
205 6 1149
224 6 1149
249 6 1149
288 6 1149
316 6 1149
381 6 1149
398 6 1149
11 6 1149
404 6 1149
410 6 1149
463 6 1149
464 6 1149
483 6 1149
3184 6 1149
3188 6 1149
584 6 1149
600 6 1149
680 6 1149
691 6 1149
763 6 1149
799 6 1149
.I 1150
.T
Fortran Post-Mortem Procedure
.B
CACM January, 1964
.A
Kahan, W.
Leppik, J. J.
.N
CA640104 JB March 10, 1978 5:37 AM
.X
1150 5 1150
1150 5 1150
1150 5 1150
.I 1151
.T
Note Multiplying Boolean Matrices II
.B
CACM January, 1964
.A
Comstock, D. R.
.N
CA640103 JB March 10, 1978 5:38 AM
.X
1151 4 1151
1265 4 1151
2769 4 1151
1151 5 1151
1151 5 1151
1151 5 1151
635 5 1151
.I 1152
.T
Floating-Point Arithmetic 84-Bit Numbers
.W
classic straightforward technique
presented which not limited size type
number representation used multiple precision arithmetic.
.B
CACM January, 1964
.A
Gregory, R. T.
Raney, J. L.
.N
CA640102 JB March 10, 1978 5:41 AM
.X
1152 5 1152
1152 5 1152
1152 5 1152
1294 5 1152
1152 6 1152
.I 1153
.T
Fast Procedure Generating Normal Random Variables*
.W
technique generating normally distributed
random numbers described. faster
than those currently general use readily
applicable both binary decimal computers.
.B
CACM January, 1964
.A
Marsaglia, G.
MacLaren, M. D.
Bray, T. A.
.N
CA640101 JB March 10, 1978 5:43 AM
.X
1073 4 1153
1153 4 1153
940 5 1153
1073 5 1153
1153 5 1153
1153 5 1153
1153 5 1153
2137 5 1153
2276 5 1153
940 6 1153
1073 6 1153
1153 6 1153
1153 6 1153
1153 6 1153
.I 1154
.T
Multi-Tape Infinite-State Automata -- Survey
.W
survey machines which more powerful
than finite automata less powerful than general
Turing machines presented. felt machines
category closely related
digital computers either finite automata
unrestricted Turing machines. Intermediate machines
can created adjoining infinite-state memory
finite-state machine then performing any
all following: (1) restrict manner
which unbounded portion memory can
accessed, (2) bound number steps allowed
computation some increasing recursive function
length input, (3) restrict total amount
memory available same manner. Examples
all three classes their properties discussed.
.B
CACM December, 1965
.A
Fischer, P. C.
.N
CA651215 JB March 6, 1978 3:24 PM
.X
1154 5 1154
1154 5 1154
1154 5 1154
.I 1155
.T
Experiments Deductive Question-Answering Program
.W
investigation artificial intelligence,
computer experiments deductive question-answering
were run LISP program called DEDUCOM, acronym
DEDUctive COMmunicator. given 68 facts,
DEDUCOM answered 10 questions answerable facts.
fact tells DEDUCOM either some specific information
method answering general kind question.
Some conclusions drawn article are: (1)
DEDUCOM can answer wide variety questions. (2)
human can increase deductive power DEDUCOM
telling more facts. (3) DEDUCOM can write very
simple programs (it hoped ability
forerunner ability self-program, which
way learn). (4)DEDUCOM's search procedure
present has two bad defects: some questions answerable
given facts cannot answered
some other answerable questions can answered only if
relevant facts given "right" order.
(6) present, DEDUCOM's method making logical deductions
predicate calculus has two bad defects:
some facts have changed logically equivalent ones
before being given DEDUCOM, some redundant
facts have given DEDUCOM.
.B
CACM December, 1965
.A
Slagle, J. R.
.N
CA651214 JB March 6, 1978 3:34 PM
.X
1155 4 1155
1456 4 1155
1468 4 1155
1515 4 1155
1699 4 1155
1856 4 1155
2127 4 1155
1155 5 1155
1155 5 1155
1155 5 1155
1324 5 1155
1515 5 1155
2096 5 1155
2127 5 1155
2210 5 1155
1155 6 1155
1155 6 1155
1155 6 1155
1155 6 1155
1324 6 1155
1324 6 1155
1487 6 1155
1527 6 1155
1781 6 1155
1856 6 1155
.I 1156
.T
Hankel Function (Algorithm 124 [S17])
.B
CACM December, 1965
.A
Reilly, G. A.
.N
CA651213 JB March 6, 1978 3:35 PM
.X
1156 5 1156
1156 5 1156
1156 5 1156
.I 1157
.T
Procedure Normal Distribution Functions (Algorithm 272 [S15])
.B
CACM December, 1965
.A
MacLaren, M. D.
.N
CA651212 JB March 6, 1978 3:37 PM
.X
1157 4 1157
1157 4 1157
1157 4 1157
1157 4 1157
1779 4 1157
1920 4 1157
1944 4 1157
1987 4 1157
2548 4 1157
1081 5 1157
1157 5 1157
1157 5 1157
1157 5 1157
485 5 1157
714 5 1157
836 5 1157
.I 1158
.T
Program Structures Parallel Processing
.W
Constructs organizing explicating parallel
program segments discussed extensions
ALGOL 60. constructs serve meta-commands
motivated equipment having multiprocessing
capability.
.B
CACM December, 1965
.A
Anderson, J. P.
.N
CA651211 JB March 6, 1978 3:39 PM
.X
1158 4 1158
1158 5 1158
1158 5 1158
1158 5 1158
1262 5 1158
.I 1159
.T
Machine Independence: Its Technology Economics
.W
survey offered techniques transferring
programs, especially compilers,
one computer another. methods examined,
"bootstrap" technique singled out detailed
discussion, emphasis its economics. considerations
determine applicability bootstrapping
any specific case discussed, attempt
made assign appropriate qualitative weights
them. Finally, reasons given believing
machine-independence problem being substantially
diminished current trends computer design,
process convergence hardware
design rather than any foreseeable software developments
lead its satisfactory resolution.
.B
CACM December, 1965
.A
Halpern, M. I.
.N
CA651210 JB March 6, 1978 3:44 PM
.X
1159 4 1159
1988 4 1159
381 4 1159
1159 5 1159
1159 5 1159
1159 5 1159
14 5 1159
.I 1160
.T
CAT: 7090-3600 Computer-Aided Translation
.W
semi-automatic translation system has been implemented
which converts 7090 FAP language programs
into 3600 assembly language. input system
FAP program deck which has been specially
prepared translation user. output consists
translated COMPASS language program
together comprehensive diagnostic listing which
user must analyze order verify any questionable
areas translation. translation processor
consists three distinct phases: assembly
FAP program, comprehensive analysis assembled
code particular regard actions
instructions upon other instructions upon data,
finally output pass which generates
COMPASS program form macro instructions.
.B
CACM December, 1965
.A
Wilson, D. M.
Moss, D. J.
.N
CA651209 JB March 6, 1978 3:50 PM
.X
1160 4 1160
2034 4 1160
1160 5 1160
1160 5 1160
1160 5 1160
1231 5 1160
.I 1161
.T
1401 Compatibility Feature IBM System/360 Model 30
.W
"second generation" stored-program computers,
which IBM 1400 series part, brought
EDP into mass market first time large
scale. era unfolded, rapid changes
technology led rapid obsolescence data processing
equipment. Program written particular
system required tedious conversion incompatible new
machines came into use. IBM System/360 has
been designed conversion problem specifically
mind. One conversion aids available
Model 30 1401 compatibility feature.
feature, conjunction other aids, permits
smooth inexpensive transition optimum use new system.
.B
CACM December, 1965
.A
McCormack, M. A.
Schansman, T. T.
Womack, K. K.
.N
CA651208 JB March 6, 1978 3:55 PM
.X
1161 5 1161
1161 5 1161
1161 5 1161
.I 1162
.T
Assembly Language Reprogramming
.W
Complete reprogramming compiler language programs
seldom necessary. assembly language
programs which present greatest difficulty. Assembly
languages generally provide one-for-one translation
symbolic numeric version program,
is, assembly language machine language.
meta-language presented here can used specify
mapping any language which conforms
canonical list form into arbitrary stream bits.
bit stream may treated machine
language program, character stream, whatever else
user might desire. Thus, meta-language
can used map one assembly language into another
assembly language one machine
into machine language another.
.B
CACM December, 1965
.A
Graham, M. L.
Ingerman, P. Z.
.N
CA651207 JB March 6, 1978 4:01 PM
.X
1162 5 1162
1162 5 1162
1162 5 1162
1565 5 1162
1162 6 1162
1358 6 1162
1455 6 1162
205 6 1162
.I 1163
.T
Philco/IBM Translation Problem-Oriented, Symbolic Binary Levels
.W
translation system has been developed
eliminate most effort formerly required
reprogram Philco 2000 series codes IBM 7094 operation.
Experience system limited but
highly successful encouraging application
techniques other source object languages.
.B
CACM December, 1965
.A
Olsen, T. M.
.N
CA651206 JB March 6, 1978 4:05 PM
.X
1163 5 1163
1163 5 1163
1163 5 1163
.I 1164
.T
Emulation Large Systems
.W
conversion problem new technique
called emulation discussed. technique
emulation developed includes sections both
Central Processing Unit (CPU) Input/Output
unit (I/O). general treatment followed three
sections describe greater detail
implementation compatibility features using emulation
techniques IBM 7074, 7080 7090
systems IBM System/360.
.B
CACM December, 1965
.A
Tucker, S. G.
.N
CA651205 JB March 6, 1978 4:09 PM
.X
1164 5 1164
1164 5 1164
1164 5 1164
.I 1165
.T
Spectra 70/45 Emulator RCA 301
.W
RCA 301 Emulator System supplied
Spectra 70/45 reprogramming aid.
allows RCA 301 object program run Spectra
70/45 without necessitating changes
RCA 301 object code. Execution rates considerably
better than traditional simulation. Emulator
provides increase throughput capacity
301 user Spectra 70/45. Emulator makes
use both hardware micro-program routines
software routines accomplish its function.
.B
CACM December, 1965
.A
Benjamin, R. I.
.N
CA651204 JB March 6, 1978 4:15 PM
.X
1165 5 1165
1165 5 1165
1165 5 1165
.I 1166
.T
Use Macros Translation Symbolic
Assembly Language One Computer Another
.W
set macro-operations has been prepared
assist translating IBM 7090 symbolic assembly
language programs IBM 7040 machine language programs.
set, inserted beginning
7090 symbolic deck, treats incompatible instruction mnemonics
macro-instructions produce equivalent
7040 instruction sets. Incompatible instructions
categorized into basic operational classes which
can expressed single basic skeleton. Several levels
macro calls required supply arguments
basic skeleton each particular instruction.
Modification execution time address
tag incompatible instruction requires incorporation
address-tag equivalent. I/O handled
generating calls I/O simulation subroutines.
.B
CACM December, 1965
.A
Dellert Jr., G. T.
.N
CA651203 JB March 6, 1978 4:20 PM
.X
1166 5 1166
1166 5 1166
1166 5 1166
.I 1167
.T
Translation Machine Language Programs
.W
Automatic translation machine language
programs becoming highly desirable goal
advent new large-scale computers. pitfalls
make difficult achieve completely automatic
translations analyzed, shown these
primarily semantic nature. semi-automatic
procedure resolving semantic problems suggested.
.B
CACM December, 1965
.A
Gaines, R. S.
.N
CA651202 JB March 6, 1978 4:23 PM
.X
1167 5 1167
1167 5 1167
1167 5 1167
.I 1168
.T
Across Machine Lines COBOL
.W
production large, file-maintenance-and-retrieval
program system written COBOL
described. COBOL language used specifically
enable system operate three IBM computers.
.B
CACM December, 1965
.A
Fredericks, D. S.
Warburtin, C. R.
.N
CA651201 JB March 6, 1978 4:26 PM
.X
1168 5 1168
1168 5 1168
1168 5 1168
.I 1169
.T
Algorithm Minimizing Backboard Wiring Functions
.W
partially exhaustive algorithm presented
solving following problem arising
automatic layout computer. Given ordered set
E1, E2,..., EN N computer components, each
permutation elements E1, E2.., EN, there attached
value integer function F. algorithm
finds local minimum F evaluating set {Delta
F} increments corresponding certain
set exchanges two elements.Then exchange
corresponding least negative increment
{Delta F} performed. process iterated stopped
set increments positive
empty set, which, proved, corresponds
minimum. procedure similar Downhill
Method finding minimum real function F(P),
can applied other placement problems.
Experimental results presented backboards formed
many elements different initial placements.
.B
CACM November, 1965
.A
Pomentale, T.
.N
CA651112 JB March 6, 1978 4:35 PM
.X
1169 5 1169
1169 5 1169
1169 5 1169
.I 1170
.T
Analyzing English Syntax Pattern-Learning Parser
.W
dependency analysis system based pattern
recognition learning logic developed
infer word classes rules syntactic combination
experience text which had been analyzed.
characteristics used form word classes
depth dependency tree each word,
direction its governor same features
each its immediate neighbors. Syntactic rules
combination show relation word its governor
depth pattern sentence.
system tested 400 elementary basic English sentences
including 300 used earlier Knowlton
different learning parser all 400 sentences. After
experience 300 sentences able
generalize 77 percent accuracy next 100.
accumulative learning trials after first
200 sentences averaged probability .9 accurately
parsing each new sentence encountered.
concluded system adequate learning
parse bulk basic English but
further development required before conclusions
its application ordinary English can stored.
system operational available
ARPA/SDC time-shared computing system.
.B
CACM November, 1965
.A
McConlogue, K.
Simmons, R. F.
.N
CA651111 JB March 6, 1978 4:45 PM
.X
1170 5 1170
1170 5 1170
1170 5 1170
.I 1171
.T
Comparison Primal-Simplex Primal-Dual
Algorithms Linear Programming
.W
statistical comparison primal-dual
more commonly used primal-simplex algorithm
solving linear programming problems has been made under
assumption starting full artificial
basis. Under these conditions primal-dual method
shows statistically significant superiority
randomly generated problems. has also been found, via
regression analysis, relevant parameters
determining difference number iterations
between algorithms not only number
constraints number variables but
also ratio latter former.
.B
CACM November, 1965
.A
Mueller, R. K.
Cooper, L.
.N
CA651110 JB March 6, 1978 4:50 PM
.X
1171 5 1171
1171 5 1171
1171 5 1171
.I 1172
.T
Conversion Limited-Entry Decision Tables Computer Programs
.W
Decision tables useful describing
set complex decision rules based given sets
conditions. Algorithms can efficiently convert
tables into computer programs extend
usefulness decision tables computer users.
Two such algorithms, based work done M. S.
Montalbano, described extended here handle
dashes ELSE-decision rules. first algorithm
minimizes computer storage space required
resultant program, second minimizes computer
running time. During conversion process, both pinpoint
any contradictions redundancies among
rules table.
.B
CACM November, 1965
.A
Pollack, S. L.
.N
CA651109 JB March 6, 1978 4:56 PM
.X
1172 5 1172
1172 5 1172
1172 5 1172
1354 5 1172
2053 5 1172
2220 5 1172
2273 5 1172
2453 5 1172
2598 5 1172
2726 5 1172
2856 5 1172
1172 6 1172
1172 6 1172
1172 6 1172
1172 6 1172
1172 6 1172
1172 6 1172
1172 6 1172
1172 6 1172
1237 6 1172
1237 6 1172
1237 6 1172
1237 6 1172
1327 6 1172
1327 6 1172
1327 6 1172
1327 6 1172
1327 6 1172
1327 6 1172
1354 6 1172
1354 6 1172
1354 6 1172
1354 6 1172
1354 6 1172
1354 6 1172
1488 6 1172
1489 6 1172
1489 6 1172
1548 6 1172
1548 6 1172
1548 6 1172
1684 6 1172
250 6 1172
2053 6 1172
2053 6 1172
2053 6 1172
2220 6 1172
2220 6 1172
2220 6 1172
2220 6 1172
2220 6 1172
2221 6 1172
2263 6 1172
2263 6 1172
2453 6 1172
2453 6 1172
2598 6 1172
2691 6 1172
753 6 1172
.I 1173
.T
Performance System Automatic Segmentation
Programs Within ALGOL Compiler (GIER
ALGOL)
.W
GIER ALGOL compiler makes use automatic
system handling transfers program
segments drum store core store program
execution time. logic system
described. performance system discussed,
primarily basis execution times related
two specific programs. discussion concludes
assessment potential gains various
ways improving system.
.B
CACM November, 1965
.A
Naur, P.
.N
CA651108 JB March 6, 1978 5:00 PM
.X
1173 4 1173
1188 4 1173
1173 5 1173
1173 5 1173
1173 5 1173
1774 5 1173
2343 5 1173
642 5 1173
800 6 1173
1173 6 1173
1173 6 1173
1774 6 1173
1845 6 1173
271 6 1173
.I 1174
.T
Inverse Permutation (Algorithm 250 [G6])
.B
CACM November, 1965
.A
Medlock, C. W.
.N
CA651107 JB March 6, 1978 5:01 PM
.X
1174 5 1174
1174 5 1174
1174 5 1174
.I 1175
.T
Quickersort (Algorithm 271 [M1])
.B
CACM November, 1965
.A
Scowen, R. S.
.N
CA651106 JB March 6, 1978 5:02 PM
.X
1175 4 1175
1175 4 1175
1919 4 1175
1919 4 1175
1969 4 1175
1997 4 1175
2017 4 1175
2041 4 1175
2191 4 1175
2216 4 1175
2388 4 1175
2679 4 1175
3054 4 1175
3121 4 1175
1175 5 1175
1175 5 1175
1175 5 1175
1919 5 1175
1969 5 1175
308 5 1175
2118 5 1175
2348 5 1175
2679 5 1175
3054 5 1175
864 5 1175
864 6 1175
970 6 1175
1175 6 1175
1175 6 1175
1175 6 1175
1175 6 1175
1175 6 1175
1175 6 1175
1190 6 1175
1228 6 1175
1880 6 1175
1919 6 1175
1969 6 1175
1969 6 1175
1980 6 1175
1997 6 1175
1997 6 1175
307 6 1175
308 6 1175
308 6 1175
308 6 1175
308 6 1175
309 6 1175
309 6 1175
2017 6 1175
2042 6 1175
2679 6 1175
74 6 1175
3187 6 1175
3187 6 1175
507 6 1175
716 6 1175
776 6 1175
783 6 1175
.I 1176
.T
Finding Eigenvectors Gaussian Elimination (Algorithm 270 [F2])
.B
CACM November, 1965
.A
Newhouse, A.
.N
CA651105 JB March 6, 1978 5:03 PM
.X
1176 5 1176
1176 5 1176
1176 5 1176
.I 1177
.T
Determinant Evaluation (Algorithm 269 [F3])
.B
CACM November, 1965
.A
Pfann, J.
.N
CA651104 JB March 6, 1978 5:05 PM
.X
1177 4 1177
806 4 1177
1177 5 1177
1177 5 1177
1177 5 1177
1931 5 1177
1946 5 1177
454 5 1177
878 6 1177
902 6 1177
1093 6 1177
1177 6 1177
1177 6 1177
1387 6 1177
1393 6 1177
311 6 1177
360 6 1177
731 6 1177
.I 1178
.T
ALGOL 60 Reference Language Editor (Algorithm 268 [R2])
.B
CACM November, 1965
.A
McKeeman, W. M.
.N
CA651103 JB March 6, 1978 5:06 PM
.X
1178 5 1178
1178 5 1178
1178 5 1178
.I 1179
.T
PUFFT-The Purdue University Fast FORTRAN Translator
.W
core resident, compile-and-go system designed
IBM 7090/7094 computer described.
little more than half 32k word core memory
PUFFT provides monitor job sequencing,
translator full FORTRAN IV language, FORTRAN
subroutine library, input--output system
use compile time execute time, rather
elaborate diagnostic message writing routine.
Batches small- medium-sized FORTRAN IV source
language programs processed very high speeds.
Language compatibility has been maintained so
programs may debugged PUFFT system
then recompiled run IBJOB-IBFTC system supplied manufacturer.
.B
CACM November, 1965
.A
Rosen, S.
Spurgeon, A.
Donnelly, J. K.
.N
CA651102 JB March 6, 1978 6:17 PM
.X
1134 4 1179
1179 4 1179
1179 4 1179
1288 4 1179
1544 4 1179
1646 4 1179
1861 4 1179
2111 4 1179
2534 4 1179
2556 4 1179
2650 4 1179
1179 5 1179
1179 5 1179
1179 5 1179
1646 5 1179
1647 5 1179
408 5 1179
830 5 1179
830 6 1179
987 6 1179
1072 6 1179
1179 6 1179
1179 6 1179
1647 6 1179
224 6 1179
680 6 1179
.I 1180
.T
AXLE: Axiomatic Language String Transformations
.W
AXLE language designed data manipulation.
Data arranged linear form workspace
transformed according table axioms, called imperatives.
transformation consists matching
procedure, which decides imperative applicable,
replacement procedure modifies
part workspace. Imperatives applied
accordance definitions symbolic terms,
presented systematically assertion table.
process definition includes special case
recursive assertions. Several complete programs
imperatives given show few applications
language.
.B
CACM November, 1965
.A
Cohen, I.
Wegstein, J. H.
.N
CA651101 JB March 6, 1978 6:22 PM
.X
1180 5 1180
1180 5 1180
1180 5 1180
1395 5 1180
1706 5 1180
1180 6 1180
1180 6 1180
1395 6 1180
210 6 1180
.I 1181
.T
Simple Data Transmission System Using Office Telephone
.W
method has evolved transmitting data
type originating many laboratory situation
direct central computer. method requires almost
no specialized equipment uses any ordinary
telephone "callup" basis. Present applications
include cardiac-output calculations, radio-activity
tracer studies neurophysiology time-sequence studies nerve impulses.
.B
CACM October, 1965
.A
Neilsen, I. R.
.N
CA651014 JB March 6, 1978 6:25 PM
.X
1181 4 1181
1181 5 1181
1181 5 1181
1181 5 1181
698 5 1181
.I 1182
.T
Contextual Correlates Synonymy
.W
Experimental corroboration obtained
hypothesis proportion words common
contexts word contexts word
B function degree which B
similar meaning. shapes functions,
however, indicate similarity context
reliable criterion only detecting pairs
words very similar meaning.
.B
CACM October, 1965
.A
Rubenstein, H.
Goodenough, J. B.
.N
CA651013 JB March 6, 1978 6:29 PM
.X
1182 5 1182
1182 5 1182
1182 5 1182
.I 1183
.T
Note Use Digital Computer
Doing Tedious Algebra Programming
.W
special purpose compiler written
FORTRAN II language made possible writing
very long programs computer. procedure
based straight-forward use FORMAT statements
generating machine-written programs.
.B
CACM October, 1965
.A
Veronis, G.
.N
CA651012 JB March 6, 1978 6:31 PM
.X
1183 5 1183
1183 5 1183
1183 5 1183
.I 1184
.T
Fast Storage Allocator
.W
fast storage bookkeeping method described
which particularly appropriate list-structure
operations other situations involving many sizes
blocks fixed size location.
scheme, used LLLLLL L6 (Bell Telephone Laboratories
Low-Level List Language), makes available
blocks computer registers several different sizes:
smaller blocks obtained successively
splitting larger ones half, larger blocks reconstituted
if their parts simultaneously
free.
.B
CACM October, 1965
.A
Knowlton, K.C.
.N
CA651011 JB March 6, 1978 6:35 PM
.X
1184 5 1184
1184 5 1184
1184 5 1184
1389 5 1184
1552 5 1184
2162 5 1184
2435 5 1184
2596 5 1184
2768 5 1184
2845 5 1184
2902 5 1184
2955 5 1184
1051 6 1184
1062 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1184 6 1184
1211 6 1184
1389 6 1184
1421 6 1184
1552 6 1184
1879 6 1184
1879 6 1184
378 6 1184
2435 6 1184
2435 6 1184
2435 6 1184
2435 6 1184
2435 6 1184
2596 6 1184
2596 6 1184
2598 6 1184
2734 6 1184
2736 6 1184
2747 6 1184
2747 6 1184
2747 6 1184
2768 6 1184
2768 6 1184
2773 6 1184
.I 1185
.T
program Solve Pentomino Problem Recursive Use Macros
.W
coding technique described which certain
macro-instructions given lists arguments
thereby used recursively. discussion covers
primarily example which technique
used solve pentomino problem-the problem
fitting 12 pentominos without overlapping into
plane area formed 60 elemental squares.
.B
CACM October, 1965
.A
Fletcher, J. G.
.N
CA651010 JB March 6, 1978 6:37 PM
.X
1185 5 1185
1185 5 1185
1185 5 1185
1531 5 1185
2707 5 1185
2753 5 1185
1185 6 1185
1185 6 1185
1185 6 1185
1455 6 1185
.I 1186
.T
Recursive Solution Class Combinatorial Problems: Example
.W
Combinatorial problems requiring selection
n elements set m elements may
solved recursion process analogous
computing binomial coefficients. Several specific
problems analyzed, general technique exposed,
ALGOL program developed one
problems.
.B
CACM October, 1965
.A
Lynch,W. C.
.N
CA651009 JB March 6, 1978 6:40 PM
.X
1186 5 1186
1186 5 1186
1186 5 1186
.I 1187
.T
Note ASCII-Octal Code Table (Standards)
.B
CACM October, 1965
.A
Crosby, W. S.
.N
CA651008 JB March 6, 1978 6:42 PM
.X
1187 5 1187
1187 5 1187
1187 5 1187
.I 1188
.T
ALGOL-like Computer Design Language
.W
idea constructing computer design
language making use ALGOL-like programming
language presented. computer designer can benefit
using design language higher level
just computer user can benefit higher level
programming language. purposes requirements
design language enumerated. achieve most
purposes translator required translate
design computer logic into set Boolean equations.
design language presented terms
vocabulary, statements, sequences microprogram.
Included examples identifiers, expressions
both unary binary operators, declaration statements,
transfer statements, terminal statements,
exchange statements, if statements, do statements, go
statements, several sequences microprogram.
.B
CACM October, 1965
.A
Chu, Y.
.N
CA651007 JB March 6, 1978 6:48 PM
.X
249 4 1188
254 4 1188
272 4 1188
1102 4 1188
1109 4 1188
1140 4 1188
1173 4 1188
1188 4 1188
1188 4 1188
1306 4 1188
1464 4 1188
1491 4 1188
1767 4 1188
1781 4 1188
1787 4 1188
1949 4 1188
321 4 1188
2059 4 1188
2126 4 1188
435 4 1188
437 4 1188
463 4 1188
483 4 1188
491 4 1188
2732 4 1188
560 4 1188
583 4 1188
3073 4 1188
627 4 1188
631 4 1188
632 4 1188
642 4 1188
644 4 1188
653 4 1188
680 4 1188
761 4 1188
762 4 1188
763 4 1188
123 4 1188
140 4 1188
919 4 1188
989 4 1188
196 5 1188
1188 5 1188
1188 5 1188
1188 5 1188
642 5 1188
.I 1189
.T
Random Normal Deviate (Algorithm 267 [G5])
.B
CACM October, 1965
.A
Pike, M. C.
.N
CA651006 JB March 6, 1978 6:49 PM
.X
1189 5 1189
1189 5 1189
1189 5 1189
1716 5 1189
1189 6 1189
.I 1190
.T
Pseudo-Random Numbers (Algorithm 266 [G5])
.B
CACM October, 1965
.A
Pike, M. C.
Hill, I. D.
.N
CA651005 JB March 6, 1978 6:51 PM
.X
1190 4 1190
1190 5 1190
1190 5 1190
1190 5 1190
1663 5 1190
2195 5 1190
2679 5 1190
456 5 1190
970 6 1190
1175 6 1190
1190 6 1190
1190 6 1190
1190 6 1190
1228 6 1190
1648 6 1190
1969 6 1190
1997 6 1190
308 6 1190
2042 6 1190
3187 6 1190
507 6 1190
716 6 1190
783 6 1190
.I 1191
.T
Find Precedence Functions (Algorithm 265 [L2])
.B
CACM October, 1965
.A
Wirth, N.
.N
CA651004 JB March 6, 1978 6:52 PM
.X
1191 5 1191
1191 5 1191
1191 5 1191
1836 5 1191
2340 5 1191
1191 6 1191
1191 6 1191
1477 6 1191
1491 6 1191
1491 6 1191
1683 6 1191
1781 6 1191
1836 6 1191
577 6 1191
.I 1192
.T
Interpolation Table (Algorithm 264 [E1])
.B
CACM October, 1965
.A
Stafford, J.
.N
CA651003 JB March 6, 1978 6:52 PM
.X
1192 5 1192
1192 5 1192
1192 5 1192
.I 1193
.T
Gomory 1 (Algorithm 263 [H])
.B
CACM October, 1965
.A
Langmaack, H.
.N
CA651002 JB March 6, 1978 6:54 PM
.X
1193 5 1193
1193 5 1193
1193 5 1193
.I 1194
.T
Establishment ACM Repository Principles
IR System Applied its Operation
.W
history establishment ACM Repository
Moore School, University Pennsylvania,
reviewed briefly. Two principles presented
paramount provision information services:
(1) easy accessibility information files users
unfamiliar file organization, (2) value
service exceeding user costs. These principles serve
guides mechanizing ACM Repository.
main features information system direct
user access via on-line teletypewriter console,
direct user access all details system organization,
unrestricted expandable search vocabulary,
user access through many facets document indexing,
stochastic search through linked index terms
other file relationships. first contribution
ACM Repository consisted 315 documents,
relating primarily early research compilers. These
documents have been cataloged indexed
catalog scheduled appear Computing Reviews.
indexing system described detail.
Main Catalog used describe documents,
inverted lists provided Repository
system retrieval concept coordination.
.B
CACM October, 1965
.A
Rubinoff, M.
White Jr., J. F.
.N
CA651001 JB March 6, 1978 7:03 PM
.X
1194 5 1194
1194 5 1194
1194 5 1194
1681 5 1194
1699 5 1194
1194 6 1194
1194 6 1194
1324 6 1194
1681 6 1194
.I 1195
.T
UPLIFTS-University Pittsburgh Linear File Tandem System
.W
series computer programs has been developed
now operational processing
National Aeronautics Space Administration linear file
system IBM 1401-7090 combined data processing
system. program note-worthy they create
fixed length logical records fixed length
blocks variable length source data, format
output optimization processing
IBM 7090 system. programs completely self-checking
test both validity accuracy
input materials provided National
Aeronautics Space Administration.
.B
CACM September, 1965
.A
Canter, J. D.
Donaghey, C. E.
.N
CA650911 JB March 6, 1978 7:10 PM
.X
1195 5 1195
1195 5 1195
1195 5 1195
.I 1196
.T
Applications Differential Equations General Problem Solving
.W
large class problems leading digital
computer processing can formulated terms
numerical solution systems ordinary differential
equations. Powerful methods existence
solution such systems. good general purpose
routine solution such systems furnishes
powerful tool processing many problems.
true point view ease programming,
ease debugging, minimization computer time.
number examples discussed detail.
.B
CACM September, 1965
.A
Klopfenstein, R. W.
.N
CA650910 JB March 6, 1978 7:16 PM
.X
1196 5 1196
1196 5 1196
1196 5 1196
.I 1197
.T
Finding Zeros Polynomial Q-D Algorithm
.W
method which finds simultaneously all zeros
polynomial, developed H. Rutishauser,
has been tested number polynomials real
coefficients. slowly converging method (the
Quotient-Difference (Q-D) algorithm) provides starting
values Newton Bairstow algorithm
more rapid convergence. Necessary sufficient conditions
existence Q-D scheme
not completely known; however, failure may occur
zeros have equal, nearly equal magnitudes.
Success achieved, most cases tried,
failures usually traceable equal magnitude
difficulty. some cases, computer roundoff may result
errors which spoil scheme. Even if
Q-D algorithm does not give all zeros,
usually find majority them.
.B
CACM September, 1965
.A
Henrich, P.
Watkins, B. O.
.N
CA650908 JB March 6, 1978 7:21 PM
.X
1197 5 1197
1197 5 1197
1197 5 1197
1524 5 1197
879 6 1197
1197 6 1197
311 6 1197
.I 1198
.T
Solution Problem Concurrent Programming Control
.W
number mainly independent sequential-cyclic
processes restricted means communication
each other can made such way any
moment one only one them engaged
"critical section" its cycle.
.B
CACM September, 1965
.A
Dijkstra, E. W.
.N
CA650908 JB March 6, 1978 7:24 PM
.X
1198 5 1198
1198 5 1198
1198 5 1198
1781 5 1198
2150 5 1198
2228 5 1198
2256 5 1198
2317 5 1198
2342 5 1198
2376 5 1198
2618 5 1198
3184 5 1198
123 6 1198
196 6 1198
919 6 1198
990 6 1198
1007 6 1198
1046 6 1198
1131 6 1198
1139 6 1198
1140 6 1198
1149 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1198 6 1198
1215 6 1198
1223 6 1198
1265 6 1198
1303 6 1198
1323 6 1198
1338 6 1198
1338 6 1198
1338 6 1198
1338 6 1198
1338 6 1198
1358 6 1198
1366 6 1198
1421 6 1198
1460 6 1198
1462 6 1198
1463 6 1198
1467 6 1198
1468 6 1198
1477 6 1198
1491 6 1198
1496 6 1198
1531 6 1198
1535 6 1198
1565 6 1198
1572 6 1198
1601 6 1198
1602 6 1198
1613 6 1198
1614 6 1198
1626 6 1198
1641 6 1198
1693 6 1198
1749 6 1198
1749 6 1198
1749 6 1198
1749 6 1198
1749 6 1198
1749 6 1198
1753 6 1198
1781 6 1198
1787 6 1198
1788 6 1198
205 6 1198
224 6 1198
249 6 1198
1877 6 1198
288 6 1198
1960 6 1198
316 6 1198
381 6 1198
398 6 1198
11 6 1198
2126 6 1198
2148 6 1198
2256 6 1198
404 6 1198
410 6 1198
463 6 1198
464 6 1198
483 6 1198
3184 6 1198
3188 6 1198
557 6 1198
584 6 1198
600 6 1198
680 6 1198
691 6 1198
763 6 1198
799 6 1198
.I 1199
.T
Computer Center Simulation Project
.W
Today's computation centers based rapidly
changing technologies hardware software
systems. difficult, therefore, base decisions
experience; most instances, benefits
comparable experience given problem situation
not available. paper, mathematical
model Lockheed Central Computer Center formulated
describes operation computation
center terms information nets, decision processes,
control functions. Experiments performed
model, results experiments,
application results discussed.
.B
CACM September, 1965
.A
Hutchinson, G. K.
.N
CA650907JB March 6, 1978 7:29 PM
.X
1199 5 1199
1199 5 1199
1199 5 1199
.I 1200
.T
Reversible Subroutines Computers Run Backwards
.W
computer design describe which permits
subroutines executed backward well
forward, either their instructions unchanged
replaced conjugate instructions. shown
using concept number new subroutine types
can developed rather unusual properties.
Since these properties analogous certain matrix
operations, parallel nomenclature suggested
their classification.
.B
CACM September, 1965
.A
Reily, E. D.
Federighi, F. D.
.N
CA650906 JB March 6, 19787:33 PM
.X
1200 5 1200
1200 5 1200
1200 5 1200
1945 5 1200
823 6 1200
914 6 1200
915 6 1200
917 6 1200
984 6 1200
989 6 1200
990 6 1200
1012 6 1200
1084 6 1200
1098 6 1200
1122 6 1200
1138 6 1200
1139 6 1200
1141 6 1200
1200 6 1200
1223 6 1200
1265 6 1200
1336 6 1200
1396 6 1200
1455 6 1200
1477 6 1200
1487 6 1200
1491 6 1200
1496 6 1200
483 6 1200
584 6 1200
669 6 1200
680 6 1200
763 6 1200
.I 1201
.T
Generation Permutations Lexico-Graphical
Order (Algorithm 202 [G6])
.B
CACM September, 1965
.A
Elliott, R. W.
.N
CA650905 JB March 6, 1978 7:35 PM
.X
1201 5 1201
1201 5 1201
1201 5 1201
.I 1202
.T
Normal Random (Algorithm 200 [G5])
.B
CACM September, 1965
.A
Pike, M. C.
.N
CA650904 JB March 6, 1978 7:36 PM
.X
1202 5 1202
1202 5 1202
1202 5 1202
.I 1203
.T
Normdey (Algorithm 121 [G5])
.B
CACM September, 1965
.A
Pike, M. C.
.N
CA650903 JB March 6, 19787:37 PM
.X
1203 5 1203
1203 5 1203
1203 5 1203
.I 1204
.T
Character Structure Character Parity Sense
Serial-by-Bit Data Communication American
Standard Code Information Interchange (Proposed American Standard)
.B
CACM September, 1965
.N
CA650902 JB March 6, 1978 7:41 PM
.X
1204 5 1204
1204 5 1204
1204 5 1204
.I 1205
.T
Undergraduate Program Computer Science-Preliminary Recommendations
.B
CACM September, 1965
.A
Report ACM Curriculum Committee Computer Science
.N
CA650901 JB March 6, 1978 7:43 PM
.X
1107 4 1205
1205 4 1205
1205 4 1205
1205 4 1205
1205 4 1205
1100 5 1205
1104 5 1205
1107 5 1205
1205 5 1205
1205 5 1205
1205 5 1205
1413 5 1205
1654 5 1205
1771 5 1205
2478 5 1205
68 5 1205
1205 6 1205
1205 6 1205
1205 6 1205
1205 6 1205
1270 6 1205
1654 6 1205
1771 6 1205
2329 6 1205
.I 1206
.T
Self-Judgment Method Curve Fitting
.W
computer-oriented method processing
communicating numerical data described.
Instrument Reliability Factors (IRF), which exactly
define limits reliability each measured
item information, used compute Maximum
Permitted Error (MPE) associated each values
each ordinate. Self-Judgment Principle (SJP)
used discard wrong information compute
mean values parameters their MPE's terms
IRF. Data compatibility tests any
number different equations can made quickly.
Otherwise intractable problems easily solved,
design many experiments greatly simplified.
computational mathematical techniques
used reduce bias SJP discussed. Inadequacies
statistical graphical methods
curve fitting noted.
.B
CACM August, 1965
.A
DeMaine, P. A. D.
.N
CA650818 JB March 6, 1978 7:50 PM
.X
1206 5 1206
1206 5 1206
1206 5 1206
.I 1207
.T
Remarks Simulation Boolean Functions
.B
CACM August, 1965
.A
Dodd, G. G.
.N
CA650817 JB March 6, 1978 7:52 PM
.X
1207 4 1207
1208 4 1207
3053 4 1207
1207 5 1207
1207 5 1207
1207 5 1207
1329 5 1207
.I 1208
.T
Simulation Computer Logic Fortran Arithmetic
.B
CACM August, 1965
.A
Weingarten, F. W.
.N
CA650816 JB March 6, 1978 7:53 PM
.X
1207 4 1208
1208 4 1208
3053 4 1208
1208 5 1208
1208 5 1208
1208 5 1208
1329 5 1208
1409 5 1208
1208 6 1208
.I 1209
.T
Negative Zero Subscripts Fortran II Programming IBM 1620
.B
CACM August, 1965
.A
Garber, M. S.
.N
CA650815 JB March 6, 1978 7:56 PM
.X
1209 5 1209
1209 5 1209
1209 5 1209
.I 1210
.T
File-Handling Within FORTRAN
.W
note describes some FORTRAN subroutines
facilitate handling tape files. They allow
symbolic naming information files, without violating
casual scientific programmer's idea simplicity.
Some comments two years use these subroutines given.
.B
CACM August, 1965
.A
Harrison, M. C.
.N
CA650814 JB March 6, 1978 7:59 PM
.X
1210 5 1210
1210 5 1210
1210 5 1210
.I 1211
.T
Note Storage Strings
.W
method storing strings described which
uses blocks indefinite size, therefore
completely dynamic. Its relation similar schemes discussed.
.B
CACM August, 1965
.A
Berztiss, A. T.
.N
CA650813 JB March 6, 1978 8:02 PM
.X
1211 4 1211
1211 4 1211
1549 4 1211
1906 4 1211
2902 4 1211
2902 4 1211
1051 5 1211
1062 5 1211
1211 5 1211
1211 5 1211
1211 5 1211
2902 5 1211
1051 6 1211
1062 6 1211
1184 6 1211
1211 6 1211
1552 6 1211
1879 6 1211
2435 6 1211
2596 6 1211
2734 6 1211
2747 6 1211
2768 6 1211
.I 1212
.T
Non-linear Extrapolation Two-Point Boundary Value Problems
.W
suggested convergence properties
usual Picard successive approximation
scheme may improved through use non-linrar extrapolation
techniques. numerical example provided.
.B
CACM August, 1965
.A
Bellman, R.
Kagiada, H.
Kalba, R.
.N
CA650812 JB March 6, 1978 8:05 PM
.X
1212 5 1212
1212 5 1212
1212 5 1212
.I 1213
.T
Dynamic Format Specifications
.W
use implementation two new FORTRAN
format conversions discussed. These format
types give FORTRAN programmer control input/output
specifications execution time.
.B
CACM August, 1965
.A
Ranelletti, J. E.
.N
CA650811 JB March 6, 1978 8:07 PM
.X
1213 5 1213
1213 5 1213
1213 5 1213
.I 1214
.T
Some Experiments Algebraic Manipulation Computer
.W
set subroutines allow algebraic manipulations
IBM 7094 computer has been written
List Processor, SLIP. series four problems increasing
difficulty were solved using these routines.
.B
CACM August, 1965
.A
Lapidus, A.
Goldstein, M.
.N
CA650810 JB March 6, 1978 8:10 PM
.X
1024 4 1214
1051 4 1214
1098 4 1214
1214 4 1214
1214 4 1214
1380 4 1214
1388 4 1214
1393 4 1214
1396 4 1214
1485 4 1214
1487 4 1214
1549 4 1214
1570 4 1214
1878 4 1214
1946 4 1214
1957 4 1214
2168 4 1214
2723 4 1214
2857 4 1214
3112 4 1214
1132 5 1214
1214 5 1214
1214 5 1214
1214 5 1214
1396 5 1214
731 5 1214
964 6 1214
1028 6 1214
1029 6 1214
1083 6 1214
1132 6 1214
1214 6 1214
1278 6 1214
1334 6 1214
1365 6 1214
1386 6 1214
1387 6 1214
1388 6 1214
1392 6 1214
1393 6 1214
1394 6 1214
1395 6 1214
1396 6 1214
1397 6 1214
1496 6 1214
284 6 1214
407 6 1214
3199 6 1214
3200 6 1214
3201 6 1214
3202 6 1214
3203 6 1214
3204 6 1214
561 6 1214
730 6 1214
.I 1215
.T
Some Techniques Used ALCOR ILLINOIS 7090
.W
ALGOL compiler has been written
ALCOR group IBM 7090. Some little known
but significant techniques compiler writing, together
organizational details compiler,
described. Timing estimates indication
compiler requirements also given.
.B
CACM August, 1965
.A
Gries, D.
Paul, M.
Wiehle, H. R.
.N
CA650809 JB March 6, 1978 8:13 PM
.X
267 4 1215
1139 4 1215
1141 4 1215
1215 4 1215
1215 4 1215
1215 4 1215
1223 4 1215
1647 4 1215
1682 4 1215
1781 4 1215
1781 4 1215
1787 4 1215
1787 4 1215
1792 4 1215
1945 4 1215
364 4 1215
405 4 1215
438 4 1215
2603 4 1215
763 4 1215
1025 5 1215
1215 5 1215
1215 5 1215
1215 5 1215
224 5 1215
1498 5 1215
1781 5 1215
1787 5 1215
763 5 1215
123 6 1215
196 6 1215
196 6 1215
919 6 1215
990 6 1215
1007 6 1215
1046 6 1215
1131 6 1215
1139 6 1215
1140 6 1215
1141 6 1215
1149 6 1215
1198 6 1215
1215 6 1215
1215 6 1215
1215 6 1215
1223 6 1215
1265 6 1215
1303 6 1215
1323 6 1215
1358 6 1215
1366 6 1215
1421 6 1215
1460 6 1215
1462 6 1215
1463 6 1215
1467 6 1215
1468 6 1215
1477 6 1215
1491 6 1215
1491 6 1215
1496 6 1215
1496 6 1215
1531 6 1215
1535 6 1215
1565 6 1215
1601 6 1215
1602 6 1215
1613 6 1215
1614 6 1215
1626 6 1215
1641 6 1215
1781 6 1215
1787 6 1215
1788 6 1215
205 6 1215
224 6 1215
224 6 1215
249 6 1215
288 6 1215
316 6 1215
381 6 1215
398 6 1215
11 6 1215
404 6 1215
410 6 1215
463 6 1215
464 6 1215
483 6 1215
3184 6 1215
3184 6 1215
3188 6 1215
584 6 1215
600 6 1215
680 6 1215
691 6 1215
763 6 1215
763 6 1215
799 6 1215
799 6 1215
.I 1216
.T
Symbolic Derivatives Without List Processing, Subroutines, Recursion
.W
routine has been developed which computes
prints out symbolic derivative absolutely
continuous elementary function one several variables.
No use made list-processing languages.
chain rule applied result edited
produce results elegant efficient those
obtained hand computation. subset may imbeded
formula translator introduce differentiation
operator into "algebraic" programming language.
.B
CACM August, 1965
.A
Smith, P. J.
.N
CA650808 JB March 6, 1978 8:18 PM
.X
1028 4 1216
1028 4 1216
1216 4 1216
1216 4 1216
1216 4 1216
1278 4 1216
1278 4 1216
1347 4 1216
1347 4 1216
1392 4 1216
1396 4 1216
1396 4 1216
1396 4 1216
1536 4 1216
964 4 1216
1028 5 1216
1029 5 1216
1216 5 1216
1216 5 1216
1216 5 1216
561 5 1216
.I 1217
.T
Map Partitions into Integers (Algorithm 264 [A1])
.B
CACM August, 1965
.A
McKay, J. K. S.
.N
CA650807 JB March 6, 1978 8:19 PM
.X
1217 5 1217
1217 5 1217
1217 5 1217
.I 1218
.T
Partition Generator (Algorithm 263 [A1])
.B
CACM August, 1965
.A
McKay, J. K. S.
.N
CA650806 JB March 6, 1978 8:20 PM
.X
1218 5 1218
1218 5 1218
1218 5 1218
2103 5 1218
1218 6 1218
.I 1219
.T
Number Restricted Partitions N (Algorithm 262 [A1])
.B
CACM August, 1965
.A
McKay,J. K. S.
.N
CA650805 JB March 6, 1978 8:26 PM
.X
1219 5 1219
1219 5 1219
1219 5 1219
2104 5 1219
2489 5 1219
1219 6 1219
1219 6 1219
2104 6 1219
.I 1220
.T
9-J Symbols (Algorithm 261 [Z])
.B
CACM August, 1965
.A
Gunn, J. H.
.N
CA650804 JB March 6, 1978 8:27 PM
.X
1220 5 1220
1220 5 1220
1220 5 1220
.I 1221
.T
6-J Symbols (Algorithm 260 [Z])
.B
CACM August, 1965
.A
Gunn, J. H.
.N
CA650803 JB March 6, 1978 8:28 PM
.X
1221 5 1221
1221 5 1221
1221 5 1221
.I 1222
.T
Legendre Functions Arguments Larger Than One (Algorithm 259 [S16])
.B
CACM August, 1965
.A
Gautschi, W.
.N
CA650802 JB March 6, 1978 8:30 PM
.X
1023 4 1222
1222 4 1222
1222 4 1222
1222 4 1222
1130 5 1222
1222 5 1222
1222 5 1222
1222 5 1222
245 5 1222
310 5 1222
.I 1223
.T
High Speed Compilation Efficient Object Code
.W
three-pass compiler following properties
briefly described: last two passes
scan intermediate language produced preceding
pass essentially reverse order
which generated, so first pass
only one which hasto read bulky problem-oriented
input. double scan, one either direction, performed
first two passes, allows compiler
remove locally constant expressions recursively
calculable expressions loops do
important part common subexpression recognition.
Optimization such effective use index
registers, although important, not discussed since
object code which would most efficient
highly machine dependent. discussion terms
FORTRAN-like language, although technique
applicable most algebraic languages.
.B
CACM August, 1965
.A
Gear, C. W.
.N
CA650801 JB March 6, 1978 8:45 PM
.X
267 4 1223
1139 4 1223
1141 4 1223
1215 4 1223
1223 4 1223
1223 4 1223
1388 4 1223
1647 4 1223
1781 4 1223
1787 4 1223
1792 4 1223
364 4 1223
405 4 1223
436 4 1223
438 4 1223
763 4 1223
1223 5 1223
1223 5 1223
1223 5 1223
224 5 1223
1781 5 1223
1807 5 1223
1945 5 1223
1947 5 1223
405 5 1223
823 6 1223
123 6 1223
196 6 1223
914 6 1223
915 6 1223
917 6 1223
919 6 1223
984 6 1223
989 6 1223
990 6 1223
990 6 1223
1007 6 1223
1012 6 1223
1046 6 1223
1084 6 1223
1098 6 1223
1122 6 1223
1131 6 1223
1134 6 1223
1138 6 1223
1139 6 1223
1139 6 1223
1140 6 1223
1141 6 1223
1149 6 1223
1198 6 1223
1200 6 1223
1215 6 1223
1223 6 1223
1223 6 1223
1223 6 1223
1223 6 1223
1248 6 1223
1248 6 1223
1265 6 1223
1265 6 1223
1303 6 1223
1323 6 1223
1336 6 1223
1358 6 1223
1366 6 1223
1396 6 1223
1421 6 1223
1455 6 1223
1460 6 1223
1462 6 1223
1463 6 1223
1467 6 1223
1468 6 1223
1477 6 1223
1477 6 1223
1487 6 1223
1491 6 1223
1491 6 1223
1496 6 1223
1496 6 1223
1531 6 1223
1535 6 1223
1551 6 1223
1565 6 1223
1601 6 1223
1602 6 1223
1613 6 1223
1614 6 1223
1626 6 1223
1641 6 1223
1787 6 1223
1788 6 1223
205 6 1223
224 6 1223
249 6 1223
288 6 1223
1947 6 1223
316 6 1223
381 6 1223
398 6 1223
399 6 1223
11 6 1223
404 6 1223
410 6 1223
463 6 1223
464 6 1223
483 6 1223
483 6 1223
3184 6 1223
3188 6 1223
584 6 1223
584 6 1223
600 6 1223
669 6 1223
680 6 1223
680 6 1223
691 6 1223
763 6 1223
763 6 1223
799 6 1223
.I 1224
.T
Determining Computing Center Environment
.W
investigation described which several
generally unavailable parameters descriptive
computing center environment obtained.
actual data collection reduction described,
results one month collection tabulated summarized.
.B
CACM July, 1965
.A
Rosin, R. F.
.N
CA650711 JB March 6, 1978 8:48 PM
.X
1224 5 1224
1224 5 1224
1224 5 1224
1533 5 1224
1604 5 1224
1224 6 1224
1224 6 1224
1410 6 1224
1604 6 1224
.I 1225
.T
Predictive Analyzer Path Elimination Technique
.W
Some characteristic features predictive
analyzer, system syntactic analysis
now operational Harvard IBM 7094, delineated.
advantages disadvantages
system discussed comparison those immediate
constituent analyzer, developed RAND
Corporation Robinson's English grammar. addition,
new technique described repetitive
path elimination predictive analyzer, which can
now claim efficiency both processing time
core storage requirement.
.B
CACM July, 1965
.A
Kuno, S.
.N
CA650710 JB March 6, 1978 8:52 PM
.X
1225 4 1225
1225 4 1225
1350 4 1225
1350 4 1225
1646 4 1225
1781 4 1225
1945 4 1225
1945 4 1225
2650 4 1225
2698 4 1225
2708 4 1225
3093 4 1225
1012 5 1225
1225 5 1225
1225 5 1225
1225 5 1225
1350 5 1225
1659 5 1225
1856 5 1225
2050 5 1225
680 5 1225
1012 6 1225
1225 6 1225
1225 6 1225
1225 6 1225
1225 6 1225
1265 6 1225
1265 6 1225
1324 6 1225
1350 6 1225
1399 6 1225
1553 6 1225
1671 6 1225
1697 6 1225
680 6 1225
.I 1226
.T
Organization Structured Files
.W
data file integral part data processing
system. many systems, selection
organization data within file can
critical system's operating efficiency.
paper provides systems designer information
source which describes ten techniques
may employed organizing structured data.
characteristics organizations described
application independent, thus providing designer
reference which allows him limit number
file organizations he must consider his system.
.B
CACM July, 1965
.A
Dzubak, B. J.
Warburton, C. R.
.N
CA650709 JB March 6, 1978 8:57 PM
.X
1050 4 1226
1226 4 1226
441 4 1226
758 4 1226
1226 5 1226
1226 5 1226
1226 5 1226
367 5 1226
.I 1227
.T
Transport (Algorithm 258 [H])
.B
CACM July, 1965
.A
Bayer, G.
.N
CA650708 JB March 6, 1978 8:58 PM
.X
1227 5 1227
1227 5 1227
1227 5 1227
.I 1228
.T
Treesort 3 (Algorithm 245 [M1])
.B
CACM July, 1965
.A
Abrams, P. S.
.N
CA650707 JB March 6, 1978 8:59 PM
.X
1228 5 1228
1228 5 1228
1228 5 1228
2042 5 1228
2679 5 1228
970 6 1228
970 6 1228
1175 6 1228
1190 6 1228
1228 6 1228
1228 6 1228
1969 6 1228
1997 6 1228
308 6 1228
2042 6 1228
3187 6 1228
507 6 1228
716 6 1228
783 6 1228
.I 1229
.T
Random Permutation (Algorithm 235 [G6])
.B
CACM July, 1965
.A
Pike, M. C.
.N
CA650706 JB March 6, 1978 9:00 PM
.X
1229 5 1229
1229 5 1229
1229 5 1229
.I 1230
.T
Method Hyphenating End Printed Line
.W
description method hyphenation
presented result application several
general rules. character sets considered
routine method briefly outlined.
.B
CACM July, 1965
.A
Rich, R. P.
Stone, A. G.
.N
CA650705 JB March 6, 1978 9:03 PM
.X
1230 5 1230
1230 5 1230
1230 5 1230
.I 1231
.T
Peephole Optimization
.W
Redundant instructions may discarded during
final stage compilation using simple
optimizing technique called peephole optimization.
method described examplesare given.
.B
CACM July, 1965
.A
McKeeman, W. M.
.N
CA650704 JB March 6, 1978 9:05 PM
.X
1160 5 1231
1231 5 1231
1231 5 1231
1231 5 1231
2034 5 1231
984 6 1231
1231 6 1231
1231 6 1231
1565 6 1231
1852 6 1231
1926 6 1231
1947 6 1231
.I 1232
.T
Representation Standard ECMA 7-Bit
Code Punched Cards (ECMA Standard)
.B
CACM July, 1965
.N
CA650703 JB March 6, 1978 9:06 PM
.X
1232 5 1232
1232 5 1232
1232 5 1232
.I 1233
.T
Conventions Use Symbols Preparation
Flowcharts Information Processing
Systems (A Standard Working Paper)
.W
paper intended outline
various conventions which being considered
use flowcharts information processing
systems. conventions applied use
symbols appearing proposed American Standard
Flowchart Symbols not symbols
per se.
.B
CACM July, 1965
.N
CA650702 JB March 6, 1978 9:10 PM
.X
1233 5 1233
1233 5 1233
1233 5 1233
.I 1234
.T
Structure Yet Another ALGOL Compiler
.W
high-speed "top down" method syntax analysis
which completely eliminates "back-up"
source string has been implemented convenient
macro-language. technique simulation
compile time use conventional run-time stack
enables generation code expressions
which minimizes stores, fetches stack-pointer motion
run time, while properly trating recursion
side effects procedures. Block structure
recursion handled without need interpretive
methods run times. "context problem" transmission
recursive procedures parameters
"called name" solved manner which permits
handling common cases simple expressions
array identifiers particular efficiency.
.B
CACM July, 1965
.A
Kanner, H.
Kosinski, P.
Robinson, C. L.
.N
CA650701 JB March 6, 1978 9:29 PM
.X
254 4 1234
1037 4 1234
1046 4 1234
1086 4 1234
1105 4 1234
1132 4 1234
1139 4 1234
1140 4 1234
1234 4 1234
1234 4 1234
1234 4 1234
1234 4 1234
1234 4 1234
1234 4 1234
1234 4 1234
1234 4 1234
1263 4 1234
1263 4 1234
1265 4 1234
1265 4 1234
1270 4 1234
1323 4 1234
1358 4 1234
1358 4 1234
1379 4 1234
1380 4 1234
1453 4 1234
1464 4 1234
1484 4 1234
1491 4 1234
1491 4 1234
1496 4 1234
1498 4 1234
1613 4 1234
1614 4 1234
1781 4 1234
1781 4 1234
1824 4 1234
1825 4 1234
1860 4 1234
321 4 1234
321 4 1234
2083 4 1234
2126 4 1234
2178 4 1234
2179 4 1234
2252 4 1234
2325 4 1234
2341 4 1234
2451 4 1234
2546 4 1234
2546 4 1234
464 4 1234
2645 4 1234
2652 4 1234
2684 4 1234
2842 4 1234
2929 4 1234
2934 4 1234
584 4 1234
3069 4 1234
631 4 1234
653 4 1234
669 4 1234
679 4 1234
680 4 1234
691 4 1234
761 4 1234
763 4 1234
795 4 1234
799 4 1234
945 4 1234
949 4 1234
989 4 1234
944 5 1234
1234 5 1234
1234 5 1234
1234 5 1234
321 5 1234
385 5 1234
400 5 1234
402 5 1234
404 5 1234
3184 5 1234
729 5 1234
.I 1235
.T
Stochastic Approach Grammatical Coding English
.W
computer program described which
assign each word English text its form
class part speech. program operates relatively
high speed only limited storage space.
half word-events corpus identified
through use small dictionary function
words frequently occurring lexical words. Some suffix
tests logical-decision rules employed
code additional words. Finally, remaining words
assigned one class another basis
most probable form classes occur within already
identified contexts. conditional probabilities
used basis coding were empirically derived
separate hand-coded corpus.On preliminary
trials, accuracy coder 91% 93%,
obvious ways improving algorithm being
suggested analysis results.
.B
CACM June, 1965
.A
Stolz, W. S.
Tannenbaum, H.
Carstensen, F. V.
.N
CA650620 JB March 6, 1978 9:35 PM
.X
1235 5 1235
1235 5 1235
1235 5 1235
.I 1236
.T
SMART Automatic Document Retrieval System-An Illustration
.W
fully automatic document retrieval system
operating IBM 7094 described. system
characterized fact several hundred different
methods available analyze documents
search requests. feature used retrieval
process leaving exact sequence
operations initially unspecified, adapting
search strategy needs individual users.
system used not only simulate actual operating
environment, but also test effectiveness
various available processing methods. Results obtained
so far seem indicate some combination
analysis procedures can general relied upon
retrieve wanted information. typical search
request used example present report illustrate
systems operations evaluation procedures.
.B
CACM June, 1965
.A
Salton, G.
Lesk, M. E.
.N
CA650619 JB March 6, 1978 9:41 PM
.X
1236 5 1236
1236 5 1236
1236 5 1236
1457 5 1236
1236 6 1236
.I 1237
.T
Conversion Decision Tables Computer Programs
.W
Several translation procedures conversion
decision tables programs presented
then evaluated terms storage requirements,
execution time compile time. procedures
valuable hand-coding guides algorithms
compiler. Both limited-entry extended-entry
tables analyzed. addition table analysis,
nature table-oriented programming languages
features discussed. presumed reader
familiar nature decision tables
conventional definitions.
.B
CACM June,1965
.A
Press, L. I.
.N
CA650618 JB March 6, 1978 9:45 PM
.X
250 4 1237
1237 4 1237
1237 4 1237
1237 4 1237
1549 4 1237
1564 4 1237
2220 4 1237
2453 4 1237
753 4 1237
1237 5 1237
1237 5 1237
1237 5 1237
1354 5 1237
250 5 1237
1488 5 1237
1994 5 1237
320 5 1237
2053 5 1237
2220 5 1237
2273 5 1237
753 5 1237
1172 6 1237
1172 6 1237
1172 6 1237
1172 6 1237
1237 6 1237
1237 6 1237
1237 6 1237
1237 6 1237
1237 6 1237
1237 6 1237
1327 6 1237
1327 6 1237
1327 6 1237
1327 6 1237
1327 6 1237
1354 6 1237
1354 6 1237
1354 6 1237
1489 6 1237
1548 6 1237
1684 6 1237
250 6 1237
2053 6 1237
2220 6 1237
.I 1238
.T
Technique Integrated Reports Multi-run System
.W
requirements requisition accounting
system San Francisco Overseas Supply Agency
(OSA) included exception reporting OSA itself. simultaneous
satisfaction reporting requirement
accounting requirements posed definite problems
system design, particularly handling
reporting function. practical satisfactory
solution developed expanding basic system
two tailored service runs report production.
These two runs permitted final system
easier debug, easy maintain, efficient production
responsive changing requirements
OSA.
.B
CACM June, 1965
.A
Budea, N.
Kamena, J. G.
Kamena, R. M.
.N
CA650617 JB March 6, 1978 9:49 PM
.X
1238 5 1238
1238 5 1238
1238 5 1238
.I 1239
.T
Graycode (Algorithm 246 [Z])
.B
CACM June, 1965
.A
Allen, W. D.
.N
CA650616 JB March 6, 1978 9:50 PM
.X
1239 5 1239
1239 5 1239
1239 5 1239
.I 1240
.T
Transport (Algorithm 258 [H])
.B
CACM June, 1965
.A
Bayer, G.
.N
CA650615 JB March 6, 1978 9:51 PM
.X
1240 5 1240
1240 5 1240
1240 5 1240
.I 1241
.T
Havie Integrator (Algorithm 257 [D1])
.B
CACM June, 1965
.A
Kubik, R. N.
.N
CA650614 JB March 6, 1978 10:09 PM
.X
1241 5 1241
1241 5 1241
1241 5 1241
1352 5 1241
1356 5 1241
1883 5 1241
2040 5 1241
834 6 1241
872 6 1241
1040 6 1241
1092 6 1241
1241 6 1241
1241 6 1241
1241 6 1241
1241 6 1241
1273 6 1241
1273 6 1241
1352 6 1241
1356 6 1241
324 6 1241
324 6 1241
429 6 1241
570 6 1241
621 6 1241
621 6 1241
786 6 1241
.I 1242
.T
Modified Graeffe Method (Algorithm 256 [C2])
.B
CACM June, 1965
.A
Grau, A. A.
.N
CA650613 JB March 6, 1978 10:10 PM
.X
1242 5 1242
1242 5 1242
1242 5 1242
1667 5 1242
178 6 1242
1242 6 1242
327 6 1242
.I 1243
.T
Testing Understanding Difference Between
Call Name Call Value ALGOL 60
.B
CACM June, 1965
.A
Weil, R. L.
.N
CA650612 JB March 6, 1978 10:11 PM
.X
1243 5 1243
1243 5 1243
1243 5 1243
.I 1244
.T
Bit Manipulation Fortran Language
.B
CACM June, 1965
.A
Tobey, G. D.
.N
CA650611 JB March 6, 1978 10:12 PM
.X
1244 5 1244
1244 5 1244
1244 5 1244
.I 1245
.T
Fortran n-Ary Counter
.B
CACM June, 1965
.A
Kent, W.
.N
CA650610 JB March 6, 1978 10:13 PM
.X
1245 5 1245
1245 5 1245
1245 5 1245
.I 1246
.T
Deeply Nested Iterations
.B
CACM June, 1965
.A
Korphage, R. R.
.N
CA650609 JB March 6, 1978 10:15 PM
.X
1246 5 1246
1246 5 1246
1246 5 1246
.I 1247
.T
Operating Environment Dynamic-Recursive
Computer Programming Systems
.W
Presented paper brief nontechnical
introduction OEDIPUS, computer programming
system which can serve operating environment
dynamic and/or recursive programs programming
systems. available services include dynamic allocation
storage contiguous blocks arbitrary
size, input output hierarchy data types,
public pushdown list automatic recursive
programming, rudimentary compiler subroutine
communication bookkeeping, debugging aids.
.B
CACM June, 1965
.A
Brown, W. S.
.N
CA650608 JB March 6, 1978 10:18 PM
.X
1247 4 1247
1945 4 1247
1247 5 1247
1247 5 1247
1247 5 1247
1336 5 1247
1397 5 1247
2704 5 1247
1247 6 1247
1247 6 1247
1552 6 1247
1749 6 1247
2356 6 1247
2379 6 1247
2673 6 1247
.I 1248
.T
Automatic Simplification Computer Programs
.W
Presented paper problem writing
program which would examine any other program
perform such simplifications can detected
argument-program's form alone, without
having any knowledge supposed do.
.B
CACM June, 1965
.A
Nievergelt, J.
.N
CA650607 JB March 6, 1978 10:24 PM
.X
1248 5 1248
1248 5 1248
1248 5 1248
1625 5 1248
1807 5 1248
1947 5 1248
1134 6 1248
1223 6 1248
1223 6 1248
1248 6 1248
1248 6 1248
1248 6 1248
1551 6 1248
1947 6 1248
399 6 1248
669 6 1248
.I 1249
.T
Recorded Magnetic Tape Information Interchange
(200 CPI, NRZI) (On Revised Proposed
American Standard)
.B
CACM June, 1965
.N
CA650606 JB March 6, 1978 10:26 PM
.X
1249 5 1249
1249 5 1249
1249 5 1249
.I 1250
.T
Graphic Symbols Problem Definition
Analysis-A Standards Working Paper
.B
CACM June, 1965
.N
CA650605 JB March 7, 1978 12:35 PM
.X
1250 5 1250
1250 5 1250
1250 5 1250
.I 1251
.T
American Standard IFIP/ICC Vocabularies compared
.W
"Proposed American Standard Vocabulary
Information Processing" "IFIP/ICC Vocabulary
Terms Used Information Processing" analyzed compared.
.B
CACM June, 1965
.A
Traub, J. F.
.N
CA650604 JB March 7, 1978 12:38 PM
.X
1251 4 1251
975 5 1251
1251 5 1251
1251 5 1251
1251 5 1251
.I 1252
.T
Symbolic Notations Statistical Tables
Approach Towards Automatic System Design
.W
preparation statistical tables
important function data processing systems
some organizations, symbolic notation
description tables has been shown useful
aid documentation. Such notation also provides
first step towards making automatic tedious
time-consuming part system design programming
many computer applications. One notation
described suggestions made implementation larger goal.
.B
CACM June, 1965
.A
Smith, B. W.
.N
CA650603 JB March 7, 1978 12:41 PM
.X
1252 5 1252
1252 5 1252
1252 5 1252
.I 1253
.T
QUIKSCRIPT-A SIMSCRIPT- Like Language G-20
.W
QUIKSCRIPT simulation language based
SIMSCRIPT programmed entirely algebraic
language, 20-GATE. QUIKSCRIPT language, its internal
implementation, major differences between
QUIKSCRIPT SIMSCRIPT presented. paper
not programming guide language, but rather
attempt present its flavor. brief description
SIMSCRIPT included, sufficient description
20-GATE render material understandable
reader familiar algebraic languages.
.B
CACM June, 1965
.A
Tonge, F. M.
Keller, P.
Newell, A.
.N
CA650602 JB March 7, 1978 12:45 PM
.X
1253 5 1253
1253 5 1253
1253 5 1253
.I 1254
.T
Iteration Element
.W
recent addition MAD language has made
iteration structure MAD THROUGH statement
(corresponding ALGOL statement FORTRAN
DO statement) available within expressions.
.B
CACM June, 1965
.A
Galler, B. A.
Fischer, M. J.
.N
CA650601 JB March 7, 1978 12:49 PM
.X
1254 5 1254
1254 5 1254
1254 5 1254
.I 1255
.T
Method Data List Processing Application EEG Analysis
.W
set subroutines discussed, which
designed aid programming computations
indexed lists numbers using machine language
symbolic assembly system. most commonly
performed list operations outlined, logically
arranged into five groups. example,
computation power spectral density autocovariance
function discussed class EEG
signals.
.B
CACM May, 1965
.A
Philpott, C. M.
Lago, G. V.
.N
CA650516 JB March 7, 1978 12:52 PM
.X
1255 5 1255
1255 5 1255
1255 5 1255
.I 1256
.T
Dynamic Variable Formatting
.B
CACM May, 1965
.A
King, D. R.
.N
CA650515 JB March 7, 1978 12:53 PM
.X
1256 5 1256
1256 5 1256
1256 5 1256
.I 1257
.T
DEBUG-An Extension Current On-Line Debugging Techniques
.W
method on-linr assembly-language debugging
which greatly simplifies several bookkeeping
tasks characteristically associated process
has been developed implemented program
UNIVAC M-460 computer Air Force Cambridge Research
Laboratories. program, online
user may insert delete (in symbolic assembly language)
any number lines any point his previously
assembled program core, remainder
program being relocated appropriately.
.B
CACM May, 1965
.A
Evans, T. G.
Darley, D. L.
.N
CA650514 JB March 7, 1978 12:58 PM
.X
1257 5 1257
1257 5 1257
1257 5 1257
1738 5 1257
1257 6 1257
.I 1258
.T
Extended Arithmetic Package
.W
many fields, example algebraic number
theory, arithmetic must carried out degree
precision which exceeds normal hardware capacity
most machines. such cases, extended
arithmetic package provides comprehensive easy-to-use
way performing such arithmetic. Such
package coded IBM 7090. discussing
general problems associated design
extended arithmetic package, specific reference made program.
.B
CACM May, 1965
.A
Blum, B. I.
.N
CA650513 JB March 7, 1978 1:01 PM
.X
1026 4 1258
1258 4 1258
1258 4 1258
1292 4 1258
1292 4 1258
1497 4 1258
1497 4 1258
1975 4 1258
2605 4 1258
107 5 1258
1026 5 1258
1258 5 1258
1258 5 1258
1258 5 1258
.I 1259
.T
Applications Binary Numbers Computer Routines
.W
binary number can thought alternate
form expression either set letters
decimal number. There then three equivalent
expressions, easily translatable one another,
each having different characteristics. Four examples
given which form expression
changed equivalent expression save space gain power.
.B
CACM May, 1965
.A
Weldon, R. J.
Baker, R. L.
.N
CA650512 JB March 7, 1978 1:05 PM
.X
1259 5 1259
1259 5 1259
1259 5 1259
.I 1260
.T
Least-Squares Analysis Resonance Spectra Small Computers
.W
problem analyzing data Mossbauer
effect experiment discussed. using
cut step procedure convergence imposing physical
constraints functional form
calculation possible make analysis
small computer. analysis has been carried out
IBM 1410 computer 40,000 BCD core memory.
.B
CACM May, 1965
.A
Marshall, S. W.
Nelson, J. A.
Wilenzick, R. M.
.N
CA650511 JB March 7, 1978 1:10 PM
.X
1260 5 1260
1260 5 1260
1260 5 1260
.I 1261
.T
Modeling Simulation Digital Networks
.W
simulation digital networks digital
computer provides engineer effective
means analyzing time-quantized logical behavior.
digital network modeled set time-dependent
time-independent Boolean transformations; each transformation
describing input-output relationship
model element comprising network mode.
simplicity utilizing FORTRAN IV Programming
System digital Network Simulator discussed
illustrated. simplicity derived
common modeling technique applicable combinational
sequential digital networks systematic
programming approach.
.B
CACM May, 1965
.A
Larsen, R. P.
Mano, M. M.
.N
CA650510 JB March 7, 1978 1:15 PM
.X
1261 4 1261
1939 4 1261
1030 5 1261
1261 5 1261
1261 5 1261
1261 5 1261
.I 1262
.T
Procedure-Oriented Language Statements Facilitate Parallel Processing
.W
Two statements suggested which allow programmer
writing procedure-oriented language
indicate sections program which executed
parallel. statements DO TOGETHER
HOLD. These serve partly brackets establishing
range parallel operation partly
define each parallel path within range. DO TOGETHERs
may nested. statements should particularly
effective use computing devices capable
attaining some degree compute-compute overlap.
.B
CACM May, 1965
.A
Opler, A.
.N
CA650509 JB March 7, 1978 2:17 PM
.X
1158 5 1262
1262 5 1262
1262 5 1262
1262 5 1262
1262 6 1262
.I 1263
.T
Metalanguage Syntax Specification
.W
Two metalanguages described, one sufficient
table specification ALGOL syntax,
other additional metaoperators adequate used
formal table description Basic FORTRAN.
.B
CACM May, 1965
.A
Burkhardt, W. H.
.N
CA650508 JB March 7, 1978 2:19 PM
.X
1046 4 1263
1086 4 1263
1105 4 1263
1132 4 1263
1139 4 1263
1140 4 1263
1234 4 1263
1234 4 1263
1263 4 1263
1263 4 1263
1263 4 1263
1265 4 1263
1265 4 1263
1270 4 1263
1323 4 1263
1358 4 1263
1379 4 1263
1380 4 1263
1453 4 1263
1453 4 1263
1464 4 1263
1484 4 1263
1491 4 1263
1496 4 1263
1498 4 1263
1613 4 1263
1614 4 1263
1781 4 1263
1781 4 1263
1824 4 1263
1825 4 1263
1860 4 1263
1945 4 1263
2083 4 1263
2126 4 1263
2178 4 1263
2179 4 1263
2252 4 1263
2325 4 1263
2341 4 1263
2546 4 1263
2546 4 1263
464 4 1263
2645 4 1263
2652 4 1263
2684 4 1263
2842 4 1263
2929 4 1263
2934 4 1263
584 4 1263
3069 4 1263
631 4 1263
653 4 1263
669 4 1263
679 4 1263
680 4 1263
691 4 1263
761 4 1263
763 4 1263
795 4 1263
799 4 1263
945 4 1263
949 4 1263
989 4 1263
989 5 1263
1263 5 1263
1263 5 1263
1263 5 1263
1379 5 1263
404 5 1263
3184 5 1263
1263 6 1263
1477 6 1263
3184 6 1263
669 6 1263
761 6 1263
.I 1264
.T
BLNSYS-A 1401 Operating System Braille Capabilities
.W
BLNSYS operating system designed
4K 1401 common optional features two
attached tape drives. Printed output system
executing programs may either English
braille. Even though system written
small machine minimal peripheral equipment,
jobs may batched, so card handling lost
processing time minimum. system
perform any all following users specified
functions: assemble SPS source decks, post list,
produce condensed uncondensed object decks, execute
user's program, list card input program,
list punched output, provide storage dump, execute
program submitted execution uncondensed
object deck under debugging trace control, card-to-braille
conversion, brailled listings 7040 IBSYS
batch output, update duplicate system tape
itself. Input-ouput subroutines also included
system.
.B
CACM May, 1965
.A
Landwehr, J. B.
McLaughlin, C.
Mueller, H.
Lichstein, M.
Pollack, S. V.
.N
CA650507 JB March 7, 1978 2:30 PM
.X
1264 4 1264
1740 4 1264
1099 5 1264
1264 5 1264
1264 5 1264
1264 5 1264
.I 1265
.T
Relative Efficiencies Context-Free Grammar Recognizers
.W
number diverse recognition procedures
have been proposed parsing sentences
respect context-free grammar described
paper means common device. Each procedure
defined giving algorithm obtaining nondeterministic
Turing Machine recognizer
equivalent given context-free grammar. formalization
Turing Machine has been chosen
make possible particularly simple description
parsing procedures considered. attempt has
been made compare recognition efficiencies
procedures defined. few simple grammars
sentences formal comparison has been made. Empirical
comparison recognition more realistic
programming languages such LISP ALGOL has been
made means program which simulates
Turing Machine Univac M-460 computer. Several
algorithms producing grammars equivalent
given context-free grammar have been considered,
increase recognition efficiency they afford
has been empirically investigated.
.B
CACM May, 1965
.A
Griffiths, T. V.
Petrick, S. R.
.N
CA650506 JB March 7, 1978 2:38 PM
.X
1046 4 1265
1062 4 1265
1086 4 1265
1105 4 1265
1121 4 1265
1132 4 1265
1139 4 1265
1139 4 1265
1139 4 1265
1140 4 1265
1151 4 1265
1234 4 1265
1234 4 1265
1263 4 1265
1263 4 1265
1265 4 1265
1265 4 1265
1265 4 1265
1265 4 1265
1265 4 1265
1270 4 1265
1323 4 1265
1358 4 1265
1379 4 1265
1380 4 1265
1453 4 1265
1464 4 1265
1484 4 1265
1491 4 1265
1496 4 1265
1498 4 1265
1613 4 1265
1614 4 1265
1665 4 1265
1781 4 1265
1781 4 1265
1781 4 1265
1824 4 1265
1825 4 1265
1860 4 1265
2083 4 1265
2126 4 1265
2178 4 1265
2179 4 1265
2252 4 1265
2325 4 1265
2341 4 1265
2546 4 1265
2546 4 1265
464 4 1265
2645 4 1265
2652 4 1265
2684 4 1265
2769 4 1265
2842 4 1265
2929 4 1265
2934 4 1265
584 4 1265
3069 4 1265
631 4 1265
653 4 1265
669 4 1265
679 4 1265
680 4 1265
691 4 1265
720 4 1265
759 4 1265
761 4 1265
763 4 1265
763 4 1265
795 4 1265
799 4 1265
945 4 1265
949 4 1265
989 4 1265
1265 5 1265
1265 5 1265
1265 5 1265
1350 5 1265
1399 5 1265
1659 5 1265
1768 5 1265
1781 5 1265
1945 5 1265
2110 5 1265
404 5 1265
464 5 1265
3094 5 1265
3184 5 1265
631 5 1265
635 5 1265
823 6 1265
123 6 1265
196 6 1265
914 6 1265
915 6 1265
917 6 1265
919 6 1265
984 6 1265
989 6 1265
990 6 1265
990 6 1265
1007 6 1265
1012 6 1265
1012 6 1265
1046 6 1265
1084 6 1265
1098 6 1265
1122 6 1265
1131 6 1265
1138 6 1265
1139 6 1265
1139 6 1265
1140 6 1265
1141 6 1265
1141 6 1265
1149 6 1265
1198 6 1265
1200 6 1265
1215 6 1265
1223 6 1265
1223 6 1265
1225 6 1265
1225 6 1265
1265 6 1265
1265 6 1265
1265 6 1265
1265 6 1265
1265 6 1265
1265 6 1265
1265 6 1265
1265 6 1265
1303 6 1265
1323 6 1265
1336 6 1265
1350 6 1265
1358 6 1265
1366 6 1265
1396 6 1265
1399 6 1265
1421 6 1265
1455 6 1265
1460 6 1265
1462 6 1265
1463 6 1265
1467 6 1265
1468 6 1265
1477 6 1265
1477 6 1265
1487 6 1265
1491 6 1265
1491 6 1265
1496 6 1265
1496 6 1265
1531 6 1265
1535 6 1265
1565 6 1265
1601 6 1265
1602 6 1265
1613 6 1265
1614 6 1265
1626 6 1265
1641 6 1265
1671 6 1265
1697 6 1265
1781 6 1265
1781 6 1265
1787 6 1265
1788 6 1265
205 6 1265
224 6 1265
249 6 1265
288 6 1265
316 6 1265
381 6 1265
398 6 1265
11 6 1265
2179 6 1265
2645 6 1265
404 6 1265
410 6 1265
463 6 1265
464 6 1265
483 6 1265
483 6 1265
3184 6 1265
3188 6 1265
584 6 1265
584 6 1265
600 6 1265
669 6 1265
680 6 1265
680 6 1265
680 6 1265
691 6 1265
763 6 1265
763 6 1265
799 6 1265
.I 1266
.T
Considerations Relating Purpose FORTRAN Standardization
(Appendixes ASA FORTRAN Standard)
.B
CACM May, 1965
.N
CA650505 JB March 7, 1978 2:40 PM
.X
1266 5 1266
1266 5 1266
1266 5 1266
.I 1267
.T
Performance Systems Used Data Transmission
Transfer Rate Information Bits -An ASA Tutorial
Standard
.W
Information thruput characteristic
systems performance discussed. discussion
includes pertinent aspects information transfer,
determination transfer rate information
bits (TRIB), residual errors, standard measurement
conditions. paper also presents
orderly arrangement characteristics parameters
affect information thruput, some examples
procedures determining thruput rate terms
TRIB. concludes performance characteristic
involving information rate can best expressed
TRIB conjunction Residual Error Rate.
.B
CACM May, 1965
.N
CA650504 JB March 7, 1978 3:10 PM
.X
1267 5 1267
1267 5 1267
1267 5 1267
.I 1268
.T
Logarithm Complex Number (Algorithm 243 [B3])
.B
CACM May, 1965
.A
Boothroyd, J.
.N
CA650502 JB March 7, 1978 3:11 PM
.X
1268 5 1268
1268 5 1268
1268 5 1268
1858 5 1268
1268 6 1268
1857 6 1268
.I 1269
.T
Computation Fourier Coefficients (Algorithm [C6])
.B
CACM May, 1965
.A
Teijelo, L.
.N
CA650502 JB March 7, 1978 3:12 PM
.X
1269 5 1269
1269 5 1269
1269 5 1269
.I 1270
.T
ALGOL Education: Automatic Grading Programs
.W
Two ALGOL grader programs presented
computer evaluation student ALGOL programs.
One beginner's program; furnishes random data
checks answers. other provides searching
test reliability efficiency integration
procedure. There statement essential
properties computer system, order
grader programs can effectively used.
.B
CACM May, 1965
.A
Forsythe, G. E.
Wirth, N.
.N
CA650501 JB March 7, 1978 3:16 PM
.X
1086 4 1270
1132 4 1270
1234 4 1270
1263 4 1270
1265 4 1270
1270 4 1270
1270 4 1270
1323 4 1270
1358 4 1270
1379 4 1270
1380 4 1270
1453 4 1270
1464 4 1270
1484 4 1270
1491 4 1270
1498 4 1270
1613 4 1270
1614 4 1270
1781 4 1270
1825 4 1270
1860 4 1270
1902 4 1270
2083 4 1270
2178 4 1270
2179 4 1270
2252 4 1270
2325 4 1270
2341 4 1270
2546 4 1270
2645 4 1270
2652 4 1270
2684 4 1270
2842 4 1270
2929 4 1270
2934 4 1270
3069 4 1270
669 4 1270
679 4 1270
691 4 1270
761 4 1270
949 4 1270
989 4 1270
145 5 1270
1270 5 1270
1270 5 1270
1270 5 1270
1413 5 1270
1902 5 1270
3184 5 1270
145 6 1270
1205 6 1270
1270 6 1270
1270 6 1270
.I 1271
.T
Secondary Key Retrieval Using IBM 7090-1301 System
.W
secondary key retrieval method involves
preparation secondary storage lists
primary data records. Search requests satisfied
logical operations appropriate lists, producing
complete set addresses primary records relevant
request. Experimental results presented
comparative analysis given.
.B
CACM April, 1965
.A
Davis, D. R.
Lin, A. D.
.N
CA650420 JB March 7, 1978 3:18 PM
.X
1271 4 1271
1785 4 1271
2543 4 1271
2552 4 1271
911 4 1271
1271 5 1271
1271 5 1271
1271 5 1271
1976 5 1271
332 5 1271
1271 6 1271
.I 1272
.T
Expanding Editing Function Language Data Processing
.W
automatic abstracting, citation indexing,
mechanical translation other such procedures,
editing required whenever automatic method leaves
something desired. paper discusses
economy editing function amount condensation
text language processing operations,
then contends editing can regarded
opportunity rather than unwelcome necessity.
"Heavy editing," which goes beyond mere correction
improvement computer output, exemplified
use concordance preparing survey article
lecture. Other opportunities heavy
editing described, chief among them being interpretation
expansion computer output such
processes factor analysis. Applications described,
such processes factor analysis. Applications
described, such quick, unbiased evaluation
large volume incoming mail telegrams,
yielding summary reports not possible either
humans computers produce alone.
.B
CACM April, 1965
.A
Doule, L. B.
.N
CA650419 JB March 7, 1978 3:26 PM
.X
1272 5 1272
1272 5 1272
1272 5 1272
.I 1273
.T
Remark Romberg Quadrature
.W
modified form Romberg quadrature described,
which less sensitive accumulation
rounding errors than customary one.
.B
CACM April, 1965
.A
Krasun, A. M.
Prager, W.
.N
CA650418 JB March 7, 1978 3:27 PM
.X
1273 5 1273
1273 5 1273
1273 5 1273
1352 5 1273
1982 5 1273
2040 5 1273
1 6 1273
834 6 1273
872 6 1273
1040 6 1273
1092 6 1273
1241 6 1273
1241 6 1273
1273 6 1273
1273 6 1273
1273 6 1273
1352 6 1273
1356 6 1273
1883 6 1273
324 6 1273
324 6 1273
324 6 1273
429 6 1273
570 6 1273
621 6 1273
621 6 1273
786 6 1273
.I 1274
.T
Numerical Solution N-Point Boundary
Value Problem Linear Ordinary Differential
Equations
.W
method numerical solution then-point
boundary value problem homogeneous linear
ordinary differential equations developed.
method requires two Runge-Kutta integrations over
interval under consideration solution
linear system equations n-1 unknowns.
.B
CACM April, 1965
.A
Day, J. T.
.N
CA650417 JB March 7, 1978 3:30 PM
.X
1274 4 1274
1147 5 1274
1274 5 1274
1274 5 1274
1274 5 1274
.I 1275
.T
Code Structures Protection Manipulation
Variable Length Items (Corrigendum)
.B
CACM April, 1965
.A
Ramamoorthy, C. V.
.N
CA650416 JB March 7, 1978 3:31 PM
.X
1275 5 1275
1275 5 1275
1275 5 1275
.I 1276
.T
Still Another Use FORTRAN II Chaining
.B
CACM April, 1965
.N
CA650415 JB March 7, 1978 3:32 PM
.X
1276 5 1276
1276 5 1276
1276 5 1276
.I 1277
.T
Use Cobol Subroutines Fortran Main Programs
.B
CACM April, 1965
.A
Tajiri, K.
.N
CA650414 JB March 7, 1978 3:34 PM
.X
1277 5 1277
1277 5 1277
1277 5 1277
.I 1278
.T
Wengert's Numerical Method Partial Derivatives,
Orbit Determination Quasilinearization
.W
recent article Communications
ACM, R. Wengert suggested technique
machine evaluation partial derivatives function
given analytical form. solving non-linear
boundary-value problems using quasilinearization many
partial derivatives must formed analytically
then evaluated numerically. Wengert's method appears
very attractive programming viewpoint
equations which might not otherwise undertaken.
.B
CACM April, 1965
.A
Bellman, R. E.
Kagiwada, H.
Kalaba, R. E.
.N
CA650413 JB March 7, 1978 3:39 PM
.X
1028 4 1278
1216 4 1278
1216 4 1278
1278 4 1278
1278 4 1278
1278 4 1278
1347 4 1278
1347 4 1278
1396 4 1278
1396 4 1278
1536 4 1278
973 5 1278
1028 5 1278
1029 5 1278
1278 5 1278
1278 5 1278
1278 5 1278
1347 5 1278
1396 5 1278
964 6 1278
1028 6 1278
1028 6 1278
1029 6 1278
1029 6 1278
1083 6 1278
1132 6 1278
1214 6 1278
1278 6 1278
1278 6 1278
1334 6 1278
1365 6 1278
1386 6 1278
1387 6 1278
1388 6 1278
1392 6 1278
1393 6 1278
1394 6 1278
1395 6 1278
1396 6 1278
1397 6 1278
1496 6 1278
284 6 1278
407 6 1278
3199 6 1278
3200 6 1278
3201 6 1278
3202 6 1278
3203 6 1278
3204 6 1278
561 6 1278
730 6 1278
.I 1279
.T
Use Conditional Base Number System
Encoding Sequences Correlated Characters
.W
procedure described relatively
efficient encoding sequences characters which
have predecessor-successor selection rules. procedure
shown assign unique integer each
sequence generate reasonably compact set values.
.B
CACM April, 1965
.A
Brown, R. M.
.N
CA650412 JB March 7, 1978 3:42 PM
.X
1279 5 1279
1279 5 1279
1279 5 1279
.I 1280
.T
Numerical Integration Differential-Difference
Equation Decreasing Time-Lag
.W
Systems which variable time-lags present
common occurrence biology. Variable
flow rates common cause these variable lags.
present no extensive body knowledge exists
concerning effects which these variable lags can
cause. Shown here method reducing some
differential-difference equations ordinary differential
equations which can then studied numerically
ease. Subsequent study deal situations
which multiple-lags lags dependent
solution itself present.
.B
CACM April, 1965
.A
Bellman, R. E.
Buell, J. D.
Kalaba, R. E.
.N
CA650411 JB March 7, 1978 3:46 PM
.X
1280 5 1280
1280 5 1280
1280 5 1280
1364 5 1280
1280 6 1280
.I 1281
.T
Data Input Question Answer
.W
data input scheme time-sharing computer
described paper. Instead using
format statements determine input, computer
asks user required values one
time. computer converses user during
input process, checks errors, provides standard
data, allows editing values input.
.B
CACM April, 1965
.A
Pyle, I. C.
.N
CA650410 JB March 7, 1978 3:48 PM
.X
1281 5 1281
1281 5 1281
1281 5 1281
.I 1282
.T
Use FORTRAN Subroutines COBOL Main Programs
.W
using proper COBOL coding techniques
accounting differences storage allocation
library routines between two languages,
possible write FORTRAN IV subroutines may
called COBOL main programs. Such technique
enables programmer take advantage
most useful properties each language while
minimizing their respective disadvantages.
.B
CACM April, 1965
.A
Shavell, Z. A.
.N
CA650409 JB March 7, 1978 3:52 PM
.X
1282 5 1282
1282 5 1282
1282 5 1282
.I 1283
.T
Matrix Inversion (Algorithm 231 [F1])
.B
CACM April, 1965
.A
Ferring, M.
.N
CA650408 JB March 7, 1978 3:53 PM
.X
1283 5 1283
1283 5 1283
1283 5 1283
.I 1284
.T
Bessel Function Set Integer Orders
.B
CACM April,1965
.A
Stafford, J.
.N
CA650407 JB March 7, 1978 3:54 PM
.X
1284 5 1284
1284 5 1284
1284 5 1284
1909 5 1284
134 6 1284
1023 6 1284
1284 6 1284
1316 6 1284
.I 1285
.T
Eigenvalues Eigenvectors Real Symmetric
Matrix QR Method (Algorithm 254 [F2])
.B
CACM April, 1965
.A
Businger, P. A.
.N
CA650406 JB March 7, 1978 3:55 PM
.X
1285 5 1285
1285 5 1285
1285 5 1285
.I 1286
.T
Eigenvalues Real Symmetric Matrix
QR Method (Algorithm 253 [F2])
.B
CACM April, 1965
.A
Businger, P. A.
.N
CA650405 JB March 7, 1978 3:56 PM
.X
1286 5 1286
1286 5 1286
1286 5 1286
.I 1287
.T
Vector Coupling Clebsch-Gordan Coefficients (Algorithm 252 [Z])
.B
CACM April, 1965
.A
Gunn, J. H.
.N
CA650404 JB March 7, 1978 3:58 PM
.X
1287 5 1287
1287 5 1287
1287 5 1287
.I 1288
.T
CLP-The Cornell List Processor
.W
Presented paper highlights
CLP, teaching language which has been employed
Cornell University constructed serve means
introducing simulation other list-processing
concepts. various advantages CLP discussed examples given.
.B
CACM April, 1965
.A
Conway, R. W.
Delfausse, J. J.
Maxwell, W. L.
Walker, W. E.
.N
CA650403 JB March 7, 1978 4:02 PM
.X
1179 4 1288
1288 4 1288
1544 4 1288
1646 4 1288
2111 4 1288
2534 4 1288
2556 4 1288
2650 4 1288
1288 5 1288
1288 5 1288
1288 5 1288
830 5 1288
.I 1289
.T
Proposed Revised American Standard Code Information Interchange
.B
CACM April, 1965
.N
CA650402 JB March 7, 1978 4:03 PM
.X
1289 5 1289
1289 5 1289
1289 5 1289
.I 1290
.T
Transparent-Mode Control Procedures Data
Communication, Using American Standard Code
Information Interchange -A Tutorial
.W
paper gives considerations Task
Group X3.3.4 area transparent-mode data
communication control philosophy. appearance
paper forecast (underthe name "second-level
control") earlier tutorial paper, "Control Procedures
Data Communications," Task Group document
X3.3.4.44, dated May 1964. present paper elaborates
upon solutions problems transparency
basic ASCII communication control characters
outlined previous paper mentioned above.
Moreover, goes cover additional control problems
handling material such off line encrypted
data non-ASCII codes means systems providing
complete character transparency. does not cover
concepts transparency which normal character
structure modulation rate system may
abandoned. conjunction earlier tutorial
paper, paper expected lead proposal
stand ardizationof data communication control procedures
using American Stand ard Code Information
Interchange.
.B
CACM April, 1965
.N
CA650401 JB March 7, 1978 4:10 PM
.X
1290 5 1290
1290 5 1290
1290 5 1290
.I 1291
.T
Tabular Input Data
.B
CACM March, 1965
.A
George, R.
.N
CA650316 JB March 7, 1978 4:11 PM
.X
1291 5 1291
1291 5 1291
1291 5 1291
.I 1292
.T
Divide-and-Correct Method Variable Precision Division
.W
Described paper divide-and-correct
method variable precision division digital
computers. Unlike earlier methods Stein
Pope, present method uses suitably rounded
form normalized divisor getting estimate
quotient characters. results
correction most plus minus one estimate,
obtain exact quotient character.
believed method widely applicable
division operations variable word-length
character-oriented machines.
.B
CACM March, 1965
.A
Krishnamurthy, E. V.
.N
CA650315JB March 7, 1978 4:16 PM
.X
1026 4 1292
1258 4 1292
1258 4 1292
1292 4 1292
1292 4 1292
1497 4 1292
1497 4 1292
1975 4 1292
2605 4 1292
107 5 1292
1026 5 1292
1292 5 1292
1292 5 1292
1292 5 1292
1497 5 1292
1593 5 1292
1975 5 1292
107 6 1292
1026 6 1292
1026 6 1292
1292 6 1292
1292 6 1292
1292 6 1292
1497 6 1292
1593 6 1292
91 6 1292
.I 1293
.T
Method Randomness
.W
Certain nonrandom properties commonly used
random number generator described analyzed.
.B
CACM March, 1965
.A
Greenberger, M.
.N
CA650314 JB March 7, 1978 4:18 PM
.X
1293 5 1293
1293 5 1293
1293 5 1293
1674 5 1293
1691 5 1293
1293 6 1293
1293 6 1293
1420 6 1293
1631 6 1293
.I 1294
.T
Note Triple-Precision Floating-Point Arithmetic 132-Bit Numbers
.W
recent paper, Gregory Raney described
technique double-precision floating-point
arithmetic. similar technique can developed
triple-precision floating-point arithmetic
purpose note describe technique.
Only multiplication division
algorithms described, since addition-subtraction
algorithm can obtained trivial modification
algorithm Gregory's Raney's paper.
.B
CACM March, 1965
.A
Ikebe, Y.
.N
CA650313 JB March 7, 1978 5:54 PM
.X
1294 4 1294
1152 5 1294
1294 5 1294
1294 5 1294
1294 5 1294
.I 1295
.T
PERT Time Calculations Without Topological Ordering
.W
simplified technique presented PERT
Time calculations without topological ordering.
Each event assigned unique memory location. activity
represented link. link defined
memory location containing address another
memory location. time information
activity carried its link. typical net,
majority activities can described
one 36-bit cell each. remainder use two 36-bit
cells each. links unidirectional; forward
during T(E) calculation (expected completion time
activity);backward during T(L) calculation
(time latest allowable completion activity).
calculations progress through net topologically
even though net not represented topologically core.
.B
CACM March, 1965
.A
Lass, S. E.
.N
CA650312 JB March 7, 1978 6:00 PM
.X
1295 5 1295
1295 5 1295
1295 5 1295
1611 5 1295
1295 6 1295
340 6 1295
.I 1296
.T
Ative (Algorithm 205 [E4])
.B
CACM March, 1965
.A
Wasscher, E. J.
.N
CA650311 JB March 7, 1978 6:01 PM
.X
1296 5 1296
1296 5 1296
1296 5 1296
.I 1297
.T
Steep1 (Algorithm 203 [E4])
.B
CACM March, 1965
.A
Varah, J. M.
.N
CA650310 JB March 7, 1978 6:02 PM
.X
1297 5 1297
1297 5 1297
1297 5 1297
.I 1298
.T
Adaptive Numerical Integration Simpson's Rule (Algorithm 145 [D1])
.B
CACM March, 1965
.A
Pike, M. C.
.N
CA650309 JB March 7, 1978 6:03 PM
.X
1298 5 1298
1298 5 1298
1298 5 1298
2093 5 1298
834 6 1298
872 6 1298
1092 6 1298
1298 6 1298
1573 6 1298
429 6 1298
.I 1299
.T
Solutions Diophantine Equation (Algorithm 139 [A1])
.B
CACM March, 1965
.A
Bowlden, H. J.
.N
CA650308 JB March 7, 1978 6:04 PM
.X
1299 5 1299
1299 5 1299
1299 5 1299
.I 1300
.T
Function Minimization (Algorithm 251[E4])
.B
CACM March, 1965
.A
Wells, M.
.N
CA650307 JB March 7, 1978 6:05 PM
.X
1300 5 1300
1300 5 1300
1300 5 1300
.I 1301
.T
ALGOL I/O Conventions
.B
CACM March, 1965
.A
Zaremba, W. A.
.N
CA650306 JB March 7, 1978 6:06 PM
.X
1301 5 1301
1301 5 1301
1301 5 1301
.I 1302
.T
Parallel Signaling Speeds Data Transmission
(Proposed American Stand ard)
.B
CACM March, 1965
.N
CA650305 JB March 7, 1978 6:08 PM
.X
1302 5 1302
1302 5 1302
1302 5 1302
.I 1303
.T
Correspondence Between ALGOL 60 Church's Lambda-Notation: Part II*
.B
CACM March, 1965
.A
Landin, P. J.
.N
CA650304 JB March 7, 1978 6:09 PM
.X
1303 5 1303
1303 5 1303
1303 5 1303
1469 5 1303
1486 5 1303
1491 5 1303
1781 5 1303
2178 5 1303
2326 5 1303
2470 5 1303
2684 5 1303
3044 5 1303
123 6 1303
196 6 1303
196 6 1303
919 6 1303
990 6 1303
1007 6 1303
1046 6 1303
1131 6 1303
1139 6 1303
1140 6 1303
1140 6 1303
1149 6 1303
1198 6 1303
1215 6 1303
1223 6 1303
1265 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1303 6 1303
1323 6 1303
1323 6 1303
1323 6 1303
1323 6 1303
1358 6 1303
1366 6 1303
1421 6 1303
1460 6 1303
1462 6 1303
1463 6 1303
1467 6 1303
1468 6 1303
1469 6 1303
1477 6 1303
1491 6 1303
1496 6 1303
1531 6 1303
1535 6 1303
1565 6 1303
1601 6 1303
1602 6 1303
1613 6 1303
1614 6 1303
1626 6 1303
1641 6 1303
1787 6 1303
1788 6 1303
205 6 1303
210 6 1303
1834 6 1303
1834 6 1303
224 6 1303
249 6 1303
288 6 1303
316 6 1303
381 6 1303
398 6 1303
2059 6 1303
11 6 1303
2127 6 1303
2192 6 1303
2264 6 1303
404 6 1303
410 6 1303
463 6 1303
464 6 1303
483 6 1303
3184 6 1303
3184 6 1303
3184 6 1303
3184 6 1303
3186 6 1303
3188 6 1303
584 6 1303
600 6 1303
680 6 1303
691 6 1303
729 6 1303
763 6 1303
799 6 1303
.I 1304
.T
Rapid Turnaround Multi-Programming System
.W
paper, basic features, system characteristics
control algorithm multi-programming
system rapid turnaround time described.
.B
CACM March, 1965
.A
Irons, E. T.
.N
CA650303 JB March 7, 1978 6:19 PM
.X
1304 5 1304
1304 5 1304
1304 5 1304
1550 5 1304
1304 6 1304
1472 6 1304
.I 1305
.T
Internal Structure FORTRAN CEP Translator
.W
FORTRAN CEP translator converts source
program written FORTRAN CEP language into
object program written language CEP
computer. paper, after outline
CEP computer, internal structure translator
described. Emphasis compilation
expressions, input/output lists, subscripted variables.
.B
CACM March, 1965
.A
Mancino, O. G.
Cecchi, M. M.
.N
CA650302 JB March 7, 1978 6:23 PM
.X
1305 4 1305
1035 5 1305
1305 5 1305
1305 5 1305
1305 5 1305
.I 1306
.T
Class Unambiguous Computer Languages
.W
Discussed paper concept
fully nested computer language which may one
means designing computer languages which would completely
free ambiguities. Several suggestions
also given here redefinition ALGOL fully nested language.
.B
CACM March, 1965
.A
Johnston, J. B.
.N
CA650301 JB March 7, 1978 6:26 PM
.X
249 4 1306
254 4 1306
272 4 1306
1102 4 1306
1109 4 1306
1140 4 1306
1188 4 1306
1306 4 1306
1306 4 1306
1464 4 1306
1491 4 1306
1767 4 1306
1781 4 1306
1781 4 1306
1787 4 1306
1949 4 1306
321 4 1306
2059 4 1306
2126 4 1306
435 4 1306
437 4 1306
463 4 1306
483 4 1306
491 4 1306
2732 4 1306
560 4 1306
583 4 1306
3073 4 1306
627 4 1306
631 4 1306
632 4 1306
642 4 1306
644 4 1306
653 4 1306
680 4 1306
761 4 1306
762 4 1306
763 4 1306
123 4 1306
140 4 1306
919 4 1306
989 4 1306
196 5 1306
1306 5 1306
1306 5 1306
1306 5 1306
463 5 1306
.I 1307
.T
Lightpen-Controlled Program On-Line Data Analysis
.W
paper describes technique designed
ease use data processing system
person, particular, scientist, intimately
primarily concerned interpreting significance
data handled system. Since such person
often unable spend time necessary master
programming language, essential he aided
composing commands computer.
system described, user not required learn
remember vocabulary language because
vocabulary displayed before him on"menus"
means computer-drive scope. He selects
various vocabulary elements required pointing
light pen. use small unordered set
rewriting rules applied result light pen
selections, user generates only syntactically
correct commands system. He does not have learn
remember grammar. program restricts
user severely particular language he can use,
but method communicating program
makes these restrictions seem quite natural unconstraining.
program has been used successfully
over ten months.
.B
CACM February, 1965
.A
Goodenough, J. B.
.N
CA650217 JB March 7, 1978 10:40 PM
.X
1307 5 1307
1307 5 1307
1307 5 1307
1978 5 1307
1307 6 1307
1589 6 1307
1813 6 1307
.I 1308
.T
Mathematical Model Mechanical part Description
.W
flexibility mathematical model takes
advantage common information requirements
computer-aided engineering drawing, numerical control
tape generation, physical characteristic
computation. judicious control man-machine communication
requirements, improved results over conventional
engineering design processes possible. English-like
input language, tailored use draftsmen
designers, describe part specify
output desired. One approach mathematical
model consists group surface-defining quadric
equations, which created system modular
subprogram. Other subprograms convert mathematical
model into instructions driving automatic
drafting machines numerical controlled machine tools.
Physical part characteristics, such center
gravity, can computed subprograms used
dynamic analysis work. proposed overall system
presented experiments demonstrations discussed.
.B
CACM February, 1965
.A
Luh, J. Y. S.
Krolak, R. J.
.N
CA650216 JB March 7, 1978 10:46 PM
.X
1308 5 1308
1308 5 1308
1308 5 1308
.I 1309
.T
Computer User-Oriented System
.W
computer language system has been developed
which makes possible fast preparation management
reports, regardless computational complexity format
variety. Costs sufficiently low so
individually tailored reports can prepared every
manager. system requires initial preparation
large data banks containing data elementary form.
Use two special languages, EXTRACT MATRAN,
permits selective extraction any data subset, efficient
processing through any computational sequence,
flexible presentation results either tabular
graphical form. Matrix algebra used
fundamental vehicle accomplishing both manipulation computation.
.B
CACM February, 1965
.A
Montillon, G. D.
.N
CA650215 JB March 7, 1978 10:51 PM
.X
1309 4 1309
892 4 1309
1309 5 1309
1309 5 1309
1309 5 1309
656 5 1309
.I 1310
.T
Rapid Braille Transliteration Technique Certain IBM Machines
.B
CACM February, 1965
.A
Weiler, W. J.
Klema, V. C.
.N
CA650214 JB March 7, 1978 10:55 PM
.X
1310 5 1310
1310 5 1310
1310 5 1310
.I 1311
.T
Efficient Autocorrelation
.B
CACM February, 1965
.A
Schmid, L. P.
.N
CA650213 JB March 7, 1978 10:56 PM
.X
1311 5 1311
1311 5 1311
1311 5 1311
.I 1312
.T
Recursion Iteration
.B
CACM February, 1965
.A
Rice, H. G.
.N
CA650212 JB March 7, 1978 10:57 PM
.X
1312 5 1312
1312 5 1312
1312 5 1312
3121 5 1312
1312 6 1312
308 6 1312
309 6 1312
2456 6 1312
2709 6 1312
.I 1313
.T
Construction Nonlinear Programming Test Problems
.B
CACM February, 1965
.A
Rosen, J. B.
Suzuki, S.
.N
CA650211 JB March 7, 1978 10:58 PM
.X
1313 5 1313
1313 5 1313
1313 5 1313
3099 5 1313
3138 5 1313
1313 6 1313
1313 6 1313
2031 6 1313
.I 1314
.T
Organization Symbol Tables
.W
efficient symbol table organization
important feature design any compiler.
During construction Virginia ALGOL 60 compiler
Burroughs B205, primary consideration
symbol table design recognition
identifiers reserved words should rapid
possible. general features technique described.
.B
CACM February, 1965
.A
Batson, A.
.N
CA650210 JB March 7, 1978 11:01 PM
.X
1314 5 1314
1314 5 1314
1314 5 1314
2033 5 1314
1314 6 1314
1785 6 1314
1786 6 1314
.I 1315
.T
Automation Radioisotope Accountability System
.W
Radioisotope Service Veterans Administration
Hospital, Omaha, Nebraska, used manual
system radioisotope accountability three years.
procedure which satisfactory but time-consuming
converted manual fully automated computer
system January, 1963. program purchased
radioisotopes written FORMAT FORTRAN IBM
1620 Computer. second program maintaining
accountability reactor-created radioisotopes written
FORCOM programming language. minimum
amount bookkeeping required reactor operating
staff. United States Atomic Energy Commission
regulations specify records kept. system
provides detailed records each container
radioactive material purchased and/or created Triga
reactor indicating amounts received, used,
and/or transferred health physicist disposal.
Consolidated records contain total amounts
received, used, and/or disposed any specified period
time. Purchased radioisotopes reported
millicuries; reactor-created radioisotopes microcuries.
.B
CACM February, 1965
.A
Lahners, E. L.
.N
CA650209 JB March 7, 1978 11:10 PM
.X
1315 5 1315
1315 5 1315
1315 5 1315
.I 1316
.T
Bessel Functions First Kind (Algorithm 236 [S17])
.B
CACM February, 1965
.A
Gautschi, W.
.N
CA650208 JB March 7,1978 11:11 PM
.X
1316 5 1316
1316 5 1316
1316 5 1316
1909 5 1316
134 6 1316
1023 6 1316
1284 6 1316
1316 6 1316
.I 1317
.T
Poisson-Charlier Polynomials (Algorithm 234 [S23])
.B
CACM February, 1965
.A
Samet, P.A.
.N
CA650207 JB March 7, 1978 11:12 PM
.X
1317 5 1317
1317 5 1317
1317 5 1317
.I 1318
.T
Arccossin (Algorithm 206 [B1])
.B
CACM February, 1965
.A
Bowlden, H. J.
.N
CA650206 JB March 7, 1978 11:14 PM
.X
1318 5 1318
1318 5 1318
1318 5 1318
.I 1319
.T
Crout Equilibration Iteration (Algorithm 135 [F4])
.B
CACM February, 1965
.A
Meissner, L. P.
.N
CA650205 JB March 7, 1978 11:15 PM
.X
1319 4 1319
1319 4 1319
454 4 1319
140 4 1319
152 5 1319
1128 5 1319
1319 5 1319
1319 5 1319
1319 5 1319
.I 1320
.T
Inverse Permutation (Algorithm 250 [G6])
.B
CACM February, 1965
.A
Boonstra, B. H.
.N
CA650204 JB March 7, 1978 11:16 PM
.X
1320 5 1320
1320 5 1320
1320 5 1320
.I 1321
.T
Outreal N (Algorithm [I5])
.B
CACM February, 1965
.A
Wirth, N. E.
.N
CA650203 JB March 7, 1978 11:17 PM
.X
1321 5 1321
1321 5 1321
1321 5 1321
1705 5 1321
984 6 1321
986 6 1321
1020 6 1321
1321 6 1321
.I 1322
.T
Netflow (Algorithm 248 [H])
.B
CACM February, 1965
.A
Briggs, W. A.
.N
CA650202 JB March 7, 1978 11:18 PM
.X
1322 5 1322
1322 5 1322
1322 5 1322
1690 5 1322
1322 6 1322
.I 1323
.T
Correspondence Between ALGOL 60 Church's Lambda-Notation: Part I*
.W
paper describes some semantics
ALGOL 60 can formalized establishing
correspondence between expressions ALGOL 60 expressions
modified form Church's L-notation.
First model computer languages compute behavior
described, based notions functional
application functional abstraction, but also having
analogues imperative language features.
Then model used "abstract object language"
into which ALGOL 60 mapped. Many ALGOL
60's features emerge particular arrangements
small number structural rules, suggesting new
classifications generalizations. correspondence
first described informally, mainly illustrations.
second part paper gives formal description,
i.e. "abstract compiler" into "abstract
objct language." itself presented "purely
functional" notation, one using only
application abstraction.
.B
CACM February, 1965
.A
Landin, P. J.
.N
CA650201 JB March 7, 1978 11:26 PM
.X
1086 4 1323
1132 4 1323
1234 4 1323
1263 4 1323
1265 4 1323
1270 4 1323
1323 4 1323
1323 4 1323
1323 4 1323
1358 4 1323
1358 4 1323
1379 4 1323
1380 4 1323
1380 4 1323
1453 4 1323
1464 4 1323
1484 4 1323
1491 4 1323
1498 4 1323
1613 4 1323
1614 4 1323
1665 4 1323
1781 4 1323
1781 4 1323
1787 4 1323
1825 4 1323
1860 4 1323
1989 4 1323
2083 4 1323
2112 4 1323
2178 4 1323
2179 4 1323
2252 4 1323
2325 4 1323
2341 4 1323
2534 4 1323
2541 4 1323
2546 4 1323
2645 4 1323
2652 4 1323
2684 4 1323
2698 4 1323
2733 4 1323
2820 4 1323
2842 4 1323
2929 4 1323
2934 4 1323
3069 4 1323
3073 4 1323
3155 4 1323
669 4 1323
679 4 1323
691 4 1323
761 4 1323
949 4 1323
989 4 1323
1323 5 1323
1323 5 1323
1323 5 1323
267 5 1323
1781 5 1323
2178 5 1323
2326 5 1323
2684 5 1323
3184 5 1323
799 5 1323
123 6 1323
196 6 1323
919 6 1323
990 6 1323
1007 6 1323
1046 6 1323
1131 6 1323
1139 6 1323
1140 6 1323
1149 6 1323
1198 6 1323
1215 6 1323
1223 6 1323
1265 6 1323
1303 6 1323
1303 6 1323
1303 6 1323
1303 6 1323
1323 6 1323
1323 6 1323
1323 6 1323
1323 6 1323
1358 6 1323
1366 6 1323
1421 6 1323
1460 6 1323
1462 6 1323
1463 6 1323
1467 6 1323
1468 6 1323
1477 6 1323
1491 6 1323
1496 6 1323
1531 6 1323
1535 6 1323
1565 6 1323
1601 6 1323
1602 6 1323
1613 6 1323
1614 6 1323
1626 6 1323
1641 6 1323
1787 6 1323
1788 6 1323
205 6 1323
1834 6 1323
224 6 1323
249 6 1323
288 6 1323
316 6 1323
381 6 1323
398 6 1323
2059 6 1323
11 6 1323
2127 6 1323
2192 6 1323
404 6 1323
410 6 1323
463 6 1323
464 6 1323
483 6 1323
3184 6 1323
3184 6 1323
3184 6 1323
3186 6 1323
3188 6 1323
584 6 1323
600 6 1323
680 6 1323
691 6 1323
763 6 1323
799 6 1323
.I 1324
.T
Answering English questions Computer: Survey
.W
Fifteen experimental English language question-answering
systems which programmed operating
described reviewed. systems range conversation
machine programs which make sentences
pictures systems which translate English
into logical calculi. Systems classified
list-structured data-based, graphic data-based, text-based
inferential. Principles methods
operations detailed discussed. concluded
data-base question-answer has passed
initial research into early developmental
phase. most difficult important research
questions advancement general-purpose language
processors seen concerned measuring,
dealing ambiguities, translating into formal
languages searching large tree structures.
.B
CACM January, 1965
.A
Simmons, R. F.
.N
CA650113 JB March 8, 1978 2:21 PM
.X
1324 4 1324
1324 4 1324
1324 4 1324
892 4 1324
931 4 1324
1155 5 1324
1324 5 1324
1324 5 1324
1324 5 1324
1456 5 1324
1468 5 1324
1515 5 1324
1699 5 1324
1856 5 1324
2127 5 1324
634 5 1324
652 5 1324
653 5 1324
1155 6 1324
1155 6 1324
1194 6 1324
1225 6 1324
1324 6 1324
1324 6 1324
1324 6 1324
1324 6 1324
1324 6 1324
1324 6 1324
1324 6 1324
1487 6 1324
1527 6 1324
1553 6 1324
1681 6 1324
1781 6 1324
1856 6 1324
.I 1325
.T
Remote, On-Line, Real-time Computer Diagnosis
Clinical Electrocardiogram
.W
Presented paper brief report
hardware, software, system configuration
function system remote, online, real-time digital
computer diagnosis clinical electrocardiograms.
seems likely efforts sort lead
satisfactory solution problem
automatic diagnosis electrocardiograms. Current
attempts authors extend diagnostic
capabilities present system particularly concerned
increasing fidelity adaptive
matched filters, development three dimensional pattern analysis,
analysis parallel electrocardiographer-computer
diagnostic interaction, study possibility
introducing major, tree-like branching decisions
early diagnostic process.
.B
CACM January, 1965
.A
Whipple, G. H.
Dickson, J. F.
Horibe, H.
Stark, L.
.N
CA650112 JB March 8, 1978 2:27 PM
.X
1325 4 1325
1325 5 1325
1325 5 1325
1325 5 1325
462 5 1325
.I 1326
.T
Boundary Networks
.W
feasible computer procedure described
determining total partial inclusion
arbitrarily given points lines respect
set general polygonal domains which partition
plane bounded region. scheme computer representation
boundaries domains
algorithm, based scheme, evaluating
inclusion relations specified detail.
method employs several levels selection criteria
purpose reducing number accesses
auxiliary storage devices amount boundary
data which processing required.
.B
CACM January, 1965
.A
Loomis, R. G.
.N
CA650111 JB March 8, 1978 2:31 PM
.X
1326 5 1326
1326 5 1326
1326 5 1326
1630 5 1326
2547 5 1326
2987 5 1326
3165 5 1326
1326 6 1326
1326 6 1326
1326 6 1326
1326 6 1326
1630 6 1326
1925 6 1326
2125 6 1326
2547 6 1326
2633 6 1326
2987 6 1326
421 6 1326
524 6 1326
.I 1327
.T
Use Decision Tables Computer Programming
.W
decision table tabular form displaying
decision logic. Decision tables have many
inherent advantages. technique illustrated
puts these advantages use enables
one program directly decision table. technique
based creation binary image
limited entry decision table computer memory.
binary image given set input conditions
can also created. data image used scan
decision table image arrive proper
course action. There several advantages gained
programming point view: (1) amount
computer memory used drastically reduced, (2) programming
simplified, (3) documentation
brief clear.
.B
CACM January, 1965
.A
Kirk, H. W.
.N
CA650110 JB March 8, 1978 2:36 PM
.X
1327 5 1327
1327 5 1327
1327 5 1327
1354 5 1327
1488 5 1327
2053 5 1327
2220 5 1327
2273 5 1327
2726 5 1327
2856 5 1327
1172 6 1327
1172 6 1327
1172 6 1327
1172 6 1327
1172 6 1327
1172 6 1327
1237 6 1327
1237 6 1327
1237 6 1327
1237 6 1327
1237 6 1327
1327 6 1327
1327 6 1327
1327 6 1327
1327 6 1327
1327 6 1327
1327 6 1327
1327 6 1327
1354 6 1327
1354 6 1327
1354 6 1327
1354 6 1327
1354 6 1327
1488 6 1327
1489 6 1327
1489 6 1327
1548 6 1327
1548 6 1327
1684 6 1327
250 6 1327
2053 6 1327
2053 6 1327
2220 6 1327
2220 6 1327
2220 6 1327
2221 6 1327
2263 6 1327
2453 6 1327
2598 6 1327
.I 1328
.T
Further Remarks Reducing Truncation Errors
.B
CACM January, 1965
.A
Kahan, W.
.N
CA650109 JB March 8, 1978 2:37 PM
.X
1328 4 1328
1333 4 1328
2144 4 1328
1052 5 1328
1328 5 1328
1328 5 1328
1328 5 1328
2282 5 1328
2860 5 1328
3083 5 1328
1328 6 1328
1328 6 1328
1328 6 1328
1973 6 1328
2049 6 1328
2107 6 1328
2203 6 1328
2543 6 1328
2552 6 1328
492 6 1328
.I 1329
.T
Simulation Boolean Functions Decimal computer
.B
CACM January, 1965
.A
Mano, M. M.
.N
CA650108 JB March 8, 1978 2:38 PM
.X
1207 5 1329
1208 5 1329
1329 5 1329
1329 5 1329
1329 5 1329
3053 5 1329
1329 6 1329
1329 6 1329
1329 6 1329
1785 6 1329
1973 6 1329
1992 6 1329
2107 6 1329
2109 6 1329
2412 6 1329
2543 6 1329
2673 6 1329
2707 6 1329
2770 6 1329
.I 1330
.T
Automated Plotting Flow-Charts Small Computer
.B
CACM January, 1965
.A
Anderson, H. E.
.N
CA650107 JB March 8, 1978 2:39 PM
.X
1330 4 1330
1330 4 1330
1348 4 1330
2315 4 1330
1330 5 1330
1330 5 1330
1330 5 1330
528 5 1330
728 5 1330
.I 1331
.T
Code Structures Protection Manipulation Variable-Length Items
.W
items made up variable number
characters, each containing same number
bits, certain control information (partition symbols)
inserted mark their separations. Since
errors identification these control characters
can lead serious trouble, methods protecting
these symbols indicated. 6-bit code assignment
alphanumeric characters fixed word-length
computers given its suitability error detection
variable-length item manipulation shown.
Also indicated its flexibility during certain arithmetic operations.
.B
CACM January, 1965
.A
Ramamoorthy, C. V.
.N
CA650106 JB March 8, 1978 2:48 PM
.X
1331 5 1331
1331 5 1331
1331 5 1331
.I 1332
.T
Subroutine Assembly
.W
description given assembly system,
which requires only one pass does not maintain
table information subroutine library.
.B
CACM January, 1965
.A
Samet, P. A.
.N
CA650105 JB March 8, 1978 2:51 PM
.X
1332 4 1332
1044 5 1332
1332 5 1332
1332 5 1332
1332 5 1332
.I 1333
.T
Reducing Truncation Errors Using Cascading Accumulators
.W
accumulating large number quantities
numerical integration, sum itself
may become much larger than individual addends.
results truncation error. Much
error can eliminated using cascading accumulators
noted recent article Wolfe. simpler
slightly more flexible algorithm presented which
deals also case negative addends.
.B
CACM January, 1965
.A
Ross, D. R.
.N
CA650104 JB March 8, 1978 2:54 PM
.X
1328 4 1333
1333 4 1333
2144 4 1333
1052 5 1333
1333 5 1333
1333 5 1333
1333 5 1333
.I 1334
.T
Mechanization Tedious Algebra:
Newcomb Operators Planetary Theory
.W
computer program has been written generate
tables formulas Newcomb operators
planetary theory. Newcomb operators expressed
polynomials two variables, one which
stands simple differential operator, other
arbitrary integer. polynomials
generated recurrence scheme. program coded
FORTRAN, using simple array manipulation techniques
perform algebraic operations. Formulas over
100 Newcomb operators have been produced
program typeset photographically S-560 Photon system.
.B
CACM January, 1965
.A
Gerard, J. M.
Izsak, I. G.
Barnett, M. P.
.N
CA650103 JB March 8, 1978 2:59 PM
.X
1334 4 1334
1396 4 1334
1444 4 1334
964 5 1334
1334 5 1334
1334 5 1334
1334 5 1334
1396 5 1334
964 6 1334
1028 6 1334
1029 6 1334
1083 6 1334
1132 6 1334
1214 6 1334
1278 6 1334
1334 6 1334
1365 6 1334
1386 6 1334
1387 6 1334
1388 6 1334
1392 6 1334
1393 6 1334
1394 6 1334
1395 6 1334
1396 6 1334
1397 6 1334
1496 6 1334
284 6 1334
407 6 1334
3199 6 1334
3200 6 1334
3201 6 1334
3202 6 1334
3203 6 1334
3204 6 1334
561 6 1334
730 6 1334
.I 1335
.T
Character Set Optical Character
Recognition (Proposed American Stand ard)
.B
CACM January, 1965
.N
CA650102 JB March 8, 1978 3:00 PM
.X
1335 5 1335
1335 5 1335
1335 5 1335
.I 1336
.T
NPL: Highlights New Programming Language
.B
CACM January, 1965
.A
Radin, G.
Rogoway, H. P.
.N
CA650101 JB March 8, 1978 3:01 PM
.X
1247 5 1336
1336 5 1336
1336 5 1336
1336 5 1336
1945 5 1336
823 6 1336
914 6 1336
915 6 1336
917 6 1336
984 6 1336
989 6 1336
990 6 1336
1012 6 1336
1084 6 1336
1098 6 1336
1122 6 1336
1138 6 1336
1139 6 1336
1141 6 1336
1200 6 1336
1223 6 1336
1265 6 1336
1336 6 1336
1336 6 1336
1396 6 1336
1455 6 1336
1477 6 1336
1487 6 1336
1491 6 1336
1496 6 1336
483 6 1336
584 6 1336
669 6 1336
680 6 1336
763 6 1336
.I 1337
.T
EULER: Generalization ALGOL, its Formal Definition
.B
CACM December, 1966
.A
Wirth, N.
Weber, H.
.N
CA661212 JB March 30, 1978 9:11 AM
.X
1337 5 1337
1337 5 1337
1337 5 1337
2423 5 1337
1337 6 1337
2015 6 1337
.I 1338
.T
Additional Comments Problem Concurrent Progamming Control
.B
CACM December, 1966
.A
Knuth, D. E.
.N
CA661211 JB March 30, 1978 9:12 AM
.X
1338 5 1338
1338 5 1338
1338 5 1338
2150 5 1338
2228 5 1338
2256 5 1338
2342 5 1338
2618 5 1338
1198 6 1338
1198 6 1338
1198 6 1338
1198 6 1338
1198 6 1338
1338 6 1338
1338 6 1338
1338 6 1338
1338 6 1338
1338 6 1338
1749 6 1338
1749 6 1338
1749 6 1338
1877 6 1338
2256 6 1338
.I 1339
.T
Contribution Development ALGOL
.B
CACM December, 1966
.A
Wirth, N.
Hoare, C. A. R.
.N
CA661210 JB March 30, 1978 9:13 AM
.X
1339 5 1339
1339 5 1339
1339 5 1339
.I 1340
.T
Multiplexing Slow Peripherals
.W
philosophy monitor which allows slow
output devices multiplexed presented.
.B
CACM December, 1966
.A
Abraham, C.
Lance, G. N.
Pearcey, T.
.N
CA661209 JB March 2, 1978 2:25 PM
.X
1340 5 1340
1340 5 1340
1340 5 1340
.I 1341
.T
Levels Computer Systems
.W
building current computer systems, we tend
break them down into "levels" control,
command communication; using system, we break
our problems down correspondingly. continued
use such structure raises questions its effects
usefulness future systems, particularly
regard such trends time sharing, parallel
programming, and, eventually, systems which learn.
essay some these questions posed,
general attitude we must take pursuing
problem further discussed.
.B
CACM December, 1966
.A
Bryant, P.
.N
CA661208 JB March 2, 1978 2:29 PM
.X
1341 5 1341
1341 5 1341
1341 5 1341
.I 1342
.T
Transportation Problem (Algorithms 293 [H])
.B
CACM December, 1966
.A
Bayer, G.
.N
CA661207a JB March 2, 1978 2:30 PM
.X
1342 5 1342
1342 5 1342
1342 5 1342
.I 1343
.T
Havie Integrator (Algorithm 257 [D1])
.B
CACM December, 1966
.A
Farkas, I.
.N
CA661207b JB March 23, 1978 4:16 PM
.X
1343 5 1343
1343 5 1343
1343 5 1343
.I 1344
.T
Statistical Computations Based Upon Algebraically Specified Models
.W
Based upon machine-readable statistical model
related symbolic specifications, efficient
method performing calculations statistical models
balanced complete nature presented.
Fixes, mixed, random analysis variance models
considered. procedure obtaining variance
components calculated F statistics model terms included.
.B
CACM December, 1966
.A
Schlater, J. E.
Hemerle, W. J.
.N
CA661206 JB March 2, 1978 2:33 PM
.X
1344 5 1344
1344 5 1344
1344 5 1344
.I 1345
.T
Tensor Calculations Computer
.W
FORMAC program has been written which capable
calculating various quantities interest
tensor calculus. Using code, Christoffel symbols
have been calculated 12 basic orthogonal
coordinate systems.
.B
CACM December, 1966
.A
Waltons, J. J.
.N
CA661205 JB March 2, 1978 2:35 PM
.X
1345 5 1345
1345 5 1345
1345 5 1345
1543 5 1345
1664 5 1345
1345 6 1345
1345 6 1345
1543 6 1345
1616 6 1345
1616 6 1345
.I 1346
.T
Application Process Equalization
Maxima Obtain Rational Approximation
Certain Modified Bessel Functions
.W
second Remes algorithm originally established
polynomials, may converge not
approximating functions rational. However,
few results known domain show efficient
algorithm can obtain approximations
small error, much more than polynomial case,
which best approximation can very nearly
approached directly series development.
aim paper investigate limitations
applicability certain extensions
algorithm case approximations rational
well present some numerical results.
.B
CACM December, 1966
.A
Gargantini, L.
.N
CA661204 JB March 2, 1978 2:39 PM
.X
1015 4 1346
1346 4 1346
1346 4 1346
1440 4 1346
1645 4 1346
951 4 1346
951 5 1346
1346 5 1346
1346 5 1346
1346 5 1346
532 5 1346
.I 1347
.T
General Time-Varying Systems Error Sensitivities Program
.W
evaluation, propagation variance
technique, sensitivity time-varying
systems initial condition parameter errors, involves
determination several system-dependent
partial derivative matrices. requirement has led
separate programs each system under investigation.
new program, through utilization Wengert differentiation
technique, automatically determines
required matrices specific system equations supplied
subroutine form execution time, eliminating
need individualized programs, presaging
further development extremely general computer
programs.
.B
CACM December, 1966
.A
Wilkins, R. D.
.N
CA661203 JB March 2, 1978 2:44 PM
.X
1028 4 1347
1216 4 1347
1216 4 1347
1278 4 1347
1278 4 1347
1347 4 1347
1347 4 1347
1347 4 1347
1396 4 1347
1396 4 1347
1396 4 1347
1536 4 1347
1028 5 1347
1029 5 1347
1278 5 1347
1347 5 1347
1347 5 1347
1347 5 1347
.I 1348
.T
FLOWTRACE, Computer Program Flowcharting Programs
.W
FLOWTRACE system produces flowcharts programs
written "almost any" programming language.
One most describe syntax control statements
his language; purpose metalanguage
available. resultant object deck used
flowchart any programs language described.
Several examples FAP SNOBOL flowcharts given.
However, not necessary confine one's
scope existing languages. One may define his own
language any "well-structured" manner.
feature particularly useful desirable
chart only comments within program. Such
approach permits documentation descriptive remarks
avoids inclusion coding details.
.B
CACM December, 1966
.A
Sherman, P. M.
.N
CA661202 JB March 2, 1978 2:49 PM
.X
1330 4 1348
1348 4 1348
2315 4 1348
1348 5 1348
1348 5 1348
1348 5 1348
2315 5 1348
728 5 1348
1348 6 1348
1834 6 1348
1987 6 1348
728 6 1348
.I 1349
.T
Computing Capabilities Western European Universities
.W
report author's trip universities
Western Europe summer 1966 gives
brief descriptions computing activities each institution
visited. Present equipment capabilities
vary moderate large scale; however, many institutions
plan acquire complex time-shared systems
near future. author's opinion, state
art lags behind continent.
lag attributed four principal factors: (a)
handicapping organization academic procedures;
(b) university-government financial relationship;
(c) subordinated organization computing
facility; (d) paucity professional interchange
knowledge. effects these constraints
explicated.
.B
CACM December, 1966
.A
Finerman, A.
.N
CA661201 JB March 2, 1978 2:55 PM
.X
1349 4 1349
1349 4 1349
1349 4 1349
1349 4 1349
689 4 1349
1349 5 1349
1349 5 1349
1349 5 1349
236 5 1349
1862 5 1349
323 5 1349
415 5 1349
83 5 1349
1349 6 1349
.I 1350
.T
Augmented Predictive Analyzer Context-Free
Languages-Its Relative Efficiency
.W
has been proven Greibach given
context-free grammar G, standard-form grammar
Gs can constructed, which generates same languages
generated G whose rules all
form Z --> cY(1) ... Y(m), (m >= O) Z
Y(i) intermediate symbols c terminal
symbol. Since predictive analyzer Harvard uses
standard-form grammar, can accept language
any context-free Grammar G, given equivalent standard-form
grammar Gs. structural descriptions
SD(Gs,X) assigned given sentence X predictive
analyzer, however, usually different
structural descriptions SD(G,X) assigned
same sentence original context-free grammar
G which Gs derived. Section 1, algorithm,
originally due Abbott described standard-form
grammar each whose rules standard form, supplemented
additional information describing its
derivation original context-free grammar.
technique performing SD(Gs,X) SD(G,X)
transformation effectively also described. section
2, augmented predictive analyzer parsing
algorithm arbitrary context-free languages compared
two other parsing algorithms: selective
top-to-bottom algorithm similar Irons' "error correcting
parse algorithm" immediate constituent
analyzer which extension Sakai-Cocke's algorithm
normal grammars. comparison based
upon several criteria efficiency, covering core-storage
requirements, complexities programs
processing time.
.B
CACM November, 1966
.A
Kuno,S.
.N
CA661108 JB March 2, 1978 3:11 PM
.X
1225 4 1350
1225 4 1350
1350 4 1350
1350 4 1350
1350 4 1350
1350 4 1350
1350 4 1350
1399 4 1350
1646 4 1350
1659 4 1350
1659 4 1350
1768 4 1350
1781 4 1350
1781 4 1350
1856 4 1350
1945 4 1350
1945 4 1350
1945 4 1350
2050 4 1350
2110 4 1350
2650 4 1350
2698 4 1350
2708 4 1350
3093 4 1350
3094 4 1350
1012 5 1350
1225 5 1350
1265 5 1350
1350 5 1350
1350 5 1350
1350 5 1350
1399 5 1350
1659 5 1350
680 5 1350
1225 6 1350
1265 6 1350
1350 6 1350
1671 6 1350
1697 6 1350
.I 1351
.T
Automatic Error Bounds Real Zeros Rational Functions
.W
procedure implementing interval arithmetic
version Newton-Raphson method
proposed. procedure require only starting interval
over which zeros given rational function
located. method automatically provides bounds
roundoff error.
.B
CACM November, 1966
.A
Dargel, R. H.
Loscalzo, F. R.
Witt, T. H.
.N
CA661107 JB March 2, 1978 3:31 PM
.X
1351 5 1351
1351 5 1351
1351 5 1351
.I 1352
.T
Automatic Integration Function Parameter
.W
Two efficient methods automatic numerical
integration Romberg integration adaptive
Simpson integration. integrands form f(x)g(x,a)
parameter, shown
Romberg's method more efficient. FORTRAN program
shows achieve greater efficiency.
.B
CACM November, 1966
.A
Rabinowitz, P.
.N
CA661106 JB March 2, 1978 3:35 PM
.X
1040 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1352 4 1352
1356 4 1352
1883 4 1352
1982 4 1352
1982 4 1352
2040 4 1352
2040 4 1352
2040 4 1352
2040 4 1352
2048 4 1352
2048 4 1352
2048 4 1352
2074 4 1352
2074 4 1352
2074 4 1352
2074 4 1352
2093 4 1352
2093 4 1352
2093 4 1352
2093 4 1352
2415 4 1352
2550 4 1352
1040 5 1352
1092 5 1352
1241 5 1352
1273 5 1352
1352 5 1352
1352 5 1352
1352 5 1352
324 5 1352
2040 5 1352
429 5 1352
570 5 1352
621 5 1352
786 5 1352
834 5 1352
872 5 1352
1241 6 1352
1273 6 1352
1352 6 1352
1356 6 1352
324 6 1352
621 6 1352
.I 1353
.T
Techniques Automatic Tolerance Control Linear Programming
.W
technical note, numerical steps
simplex method linear programming
reviewed tolerances needed numerical procedure
defined. Objective criteria given
accomplishing numerical steps method
calculation necessary tolerances.
.B
CACM November, 1966
.A
Clasen, R. J.
.N
CA661105 JB March 2, 1978 3:37 PM
.X
1353 5 1353
1353 5 1353
1353 5 1353
2589 5 1353
1353 6 1353
.I 1354
.T
Conversion Decision Tables Computer
Programs Rule Mark Techniques
.W
rule mask technique one method converting
limited entry decision tables computer
programs. Recent discussion suggest many circumstances
preferred technique
constructing networks trees. drawback
technique hitherto presented its liability
produce object programs longer run time than necessary.
paper modification technique
discussed which takes into account both rule frequencies
relative times evaluating conditions.
can materially improve object program run time.
.B
CACM November, 1966
.A
King, P. J. H.
.N
CA661104 JB March 2, 1978 3:41 PM
.X
1354 4 1354
1354 4 1354
1354 4 1354
1488 4 1354
1488 4 1354
1994 4 1354
2053 4 1354
2053 4 1354
2053 4 1354
2220 4 1354
2220 4 1354
2220 4 1354
2273 4 1354
2273 4 1354
2273 4 1354
2453 4 1354
2598 4 1354
2726 4 1354
2726 4 1354
2856 4 1354
2856 4 1354
1172 5 1354
1237 5 1354
1327 5 1354
1354 5 1354
1354 5 1354
1354 5 1354
1684 5 1354
2053 5 1354
2220 5 1354
2273 5 1354
2453 5 1354
2726 5 1354
2856 5 1354
3113 5 1354
1172 6 1354
1172 6 1354
1172 6 1354
1172 6 1354
1172 6 1354
1172 6 1354
1237 6 1354
1237 6 1354
1237 6 1354
1327 6 1354
1327 6 1354
1327 6 1354
1327 6 1354
1327 6 1354
1354 6 1354
1354 6 1354
1354 6 1354
1354 6 1354
1354 6 1354
1354 6 1354
1354 6 1354
1354 6 1354
1488 6 1354
1489 6 1354
1489 6 1354
1548 6 1354
1548 6 1354
1564 6 1354
1684 6 1354
250 6 1354
2053 6 1354
2053 6 1354
2053 6 1354
2220 6 1354
2220 6 1354
2220 6 1354
2220 6 1354
2221 6 1354
2263 6 1354
2263 6 1354
2453 6 1354
2598 6 1354
2598 6 1354
2691 6 1354
2856 6 1354
753 6 1354
.I 1355
.T
Regular Coulomb Wave Functions (Algorithm 292 )
.B
CACM November, 1966
.A
Gautschi, W.
.N
CA661103a JB March 2, 1978 3:43 PM
.X
1355 4 1355
2619 4 1355
1355 5 1355
1355 5 1355
1355 5 1355
1419 5 1355
.I 1356
.T
Havie Integrator (Algorithm 257 [D1])
.B
CACM November, 1966
.A
Hillstrom, K.
.N
CA661103b JB March 23, 1978 4:19 PM
.X
1352 4 1356
1356 4 1356
1883 4 1356
2040 4 1356
1241 5 1356
1356 5 1356
1356 5 1356
1356 5 1356
2040 5 1356
1241 6 1356
1273 6 1356
1352 6 1356
1356 6 1356
324 6 1356
621 6 1356
.I 1357
.T
Examination Scheduling (Algorithm 286 [H])
.B
CACM November, 1966
.A
Williams, R.
.N
CA661103c JB March 23, 1978 4:20 PM
.X
1357 5 1357
1357 5 1357
1357 5 1357
.I 1358
.T
Syntax Macros Extended Translation
.W
translation approach described which allows
one extended syntax semantics
given high-level base language use new
formalism called syntax-macro. Syntax-macros
define string transformations based syntactic elements
base language. Two types macros
discussed, examples given their use.
conditional generation macros based options
alternatives recognized scan also described.
.B
CACM November, 1966
.A
Leavenworth, B. M.
.N
CA661102 JB March 2, 1978 3:46 PM
.X
1037 4 1358
1086 4 1358
1132 4 1358
1234 4 1358
1234 4 1358
1263 4 1358
1265 4 1358
1270 4 1358
1323 4 1358
1323 4 1358
1358 4 1358
1358 4 1358
1358 4 1358
1358 4 1358
1358 4 1358
1379 4 1358
1380 4 1358
1380 4 1358
1453 4 1358
1464 4 1358
1484 4 1358
1491 4 1358
1491 4 1358
1498 4 1358
1565 4 1358
1613 4 1358
1614 4 1358
1665 4 1358
1781 4 1358
1781 4 1358
1781 4 1358
1781 4 1358
1787 4 1358
1788 4 1358
1825 4 1358
1860 4 1358
1989 4 1358
2083 4 1358
2112 4 1358
2178 4 1358
2179 4 1358
2252 4 1358
2325 4 1358
2341 4 1358
2534 4 1358
2541 4 1358
2546 4 1358
2645 4 1358
2652 4 1358
2684 4 1358
2698 4 1358
2733 4 1358
2820 4 1358
2842 4 1358
2929 4 1358
2934 4 1358
3069 4 1358
3073 4 1358
3155 4 1358
669 4 1358
679 4 1358
691 4 1358
761 4 1358
949 4 1358
989 4 1358
205 5 1358
1358 5 1358
1358 5 1358
1358 5 1358
1460 5 1358
1541 5 1358
1565 5 1358
1781 5 1358
1824 5 1358
2252 5 1358
3184 5 1358
729 5 1358
799 5 1358
123 6 1358
196 6 1358
919 6 1358
990 6 1358
1007 6 1358
1046 6 1358
1131 6 1358
1139 6 1358
1140 6 1358
1149 6 1358
1162 6 1358
1198 6 1358
1215 6 1358
1223 6 1358
1265 6 1358
1303 6 1358
1323 6 1358
1358 6 1358
1358 6 1358
1358 6 1358
1358 6 1358
1358 6 1358
1366 6 1358
1380 6 1358
1421 6 1358
1455 6 1358
1460 6 1358
1462 6 1358
1463 6 1358
1467 6 1358
1468 6 1358
1477 6 1358
1491 6 1358
1496 6 1358
1496 6 1358
1531 6 1358
1535 6 1358
1565 6 1358
1601 6 1358
1602 6 1358
1613 6 1358
1614 6 1358
1614 6 1358
1626 6 1358
1641 6 1358
1781 6 1358
1787 6 1358
1788 6 1358
205 6 1358
205 6 1358
224 6 1358
249 6 1358
288 6 1358
316 6 1358
381 6 1358
398 6 1358
11 6 1358
2155 6 1358
404 6 1358
404 6 1358
410 6 1358
463 6 1358
464 6 1358
483 6 1358
3184 6 1358
3184 6 1358
3188 6 1358
584 6 1358
600 6 1358
680 6 1358
691 6 1358
763 6 1358
799 6 1358
.I 1359
.T
Data Filtering Applied Information Storage Retrieval Applications
.W
Manipulation data strings most complex
processing function information storage
retrieval applications. Data string manipulation
discussed within context interpretive
processing environment controlled use procedural
directives. sequence procedural directives
derived job assumed expressed user-oriented
source language. Each data string
structured data environment (data bank) explicitly
implicitly related format declaration
residing format library. processing mechanics
associated data string manipulation developed
accordance generalized data filtering concept.
results implementation two-part
data filter module satisfies internal processing
functions filtering data strings through format
declarations associated its input output ports.
.B
CACM November, 1966
.A
Larsen, R. P.
.N
CA661101 JB March 2, 1978 3:52 PM
.X
1359 5 1359
1359 5 1359
1359 5 1359
.I 1360
.T
Description Systems Used Data Transmission* (An ASA Tutorial)
.B
CACM October, 1966
.N
CA661007 JB March 2, 1978 3:54 PM
.X
1360 5 1360
1360 5 1360
1360 5 1360
.I 1361
.T
Rectangular Holes Twelve-Row Punched
Cards* (Proposed American Standard)
.B
CACM October, 1966
.N
CA661006 JB March 2, 1978 3:55 PM
.X
1361 5 1361
1361 5 1361
1361 5 1361
.I 1362
.T
Code Extension ASCII* (An ASA Tutorial)
.W
American Standard Code Information
Interchange (ASCII) contains number control
characters associated principle code extension,
is, representation information
which cannot directly represented means characters
Code. manner use these
characters has not previously been completely described.
paper presents set mutually consistent
philosophies regarding code extension applications,
suggests corollary set doctrines
application code extension characters. Distinctions
drawn between code extension such
other concepts "graphic substitution" "syntactic
representation" which often used meet similar
requirements. Also covered certain topics which
not truly concerned code extension but
which often linked discussion code applications.
material paper equally
applicable principle (proposed) ISO international
7-bit code information interchange.
.B
CACM October, 1966
.N
CA661005 JB March 2, 1978 4:02 PM
.X
1362 5 1362
1362 5 1362
1362 5 1362
.I 1363
.T
General Method Systematic Interval Computation
Numerical Integration Initial Value
Problems
.W
procedure given continuously computing
monitoring step size used
self-starting, p-th order numerical integration method
solve initial value problem. procedure
uses estimate truncation error calculate step size.
.B
CACM October, 1966
.A
Martin, W. C.
Paulson, K. C.
Sashkin, L.
.N
CA661004 JB March 2, 1978 4:05 PM
.X
1363 5 1363
1363 5 1363
1363 5 1363
.I 1364
.T
Mathematical Experimentation Time-Lag Modulation
.W
Equations form du/dt = g(u(t),u(h(t)))
arise number scientific contexts.
authors point out some interesting properties
solution u'(t) = -u(t-1-k*sin(wt))+sin(at). These
properties were obtained means numerical solution.
.B
CACM October, 1966
.A
Bellman, R.
Buell, J.
Kalaba, R.
.N
CA661003 JB March 2, 1978 4:08 PM
.X
1364 4 1364
1280 5 1364
1364 5 1364
1364 5 1364
1364 5 1364
.I 1365
.T
Eliminating Monotonous Mathematics FORMAC
.W
FORMAC (FORmula MAnipulation Compiler)
programming system provides powerful tool
performing mathematical analysis. extension
FORTRAN IV which permits use computer
perform tedious algebraic computations arise
many different fields. Among areas
which has been successfully used are: differentiation
complicated expressions, expansion truncated
power series, solution simultaneous equations
literal coefficients, nonlinear maximum likelihood
estimation, tensor analysis, generation coefficients
equations Keplerian motion. These
types analysis-which arose solution specific
practical problems physics, engineering,
astronomy, statistics astronautics-are discussed
paper. addition its usage specific
problem solutions, FORMAC can also used automate
analysis phase certain production programming.
Several such applications presented.
.B
CACM October, 1966
.A
Tobey, R. G.
.N
CA661002 JB March 2, 1978 4:14 PM
.X
1396 5 1365
1365 5 1365
1365 5 1365
1365 5 1365
2229 5 1365
964 6 1365
1028 6 1365
1029 6 1365
1083 6 1365
1132 6 1365
1214 6 1365
1278 6 1365
1334 6 1365
1365 6 1365
1365 6 1365
1386 6 1365
1387 6 1365
1388 6 1365
1392 6 1365
1393 6 1365
1394 6 1365
1395 6 1365
1396 6 1365
1397 6 1365
1496 6 1365
284 6 1365
407 6 1365
3199 6 1365
3200 6 1365
3201 6 1365
3202 6 1365
3203 6 1365
3204 6 1365
561 6 1365
730 6 1365
.I 1366
.T
Computer Simulation-Discussion
Technique Comparison Languages
.W
purpose paper present comparison
some computer simulation languages
some involved comparing software packages
digital computers discussed Part
I. issue obvious: users digital computers
must choose available languages write their
own. Substantial costs can occur, particularly training,
implementation computer time if inappropriate
language chosen.More more computer simulation
languages being developed: comparisons
evaluations existing languages useful designers
implementers well users. second
part devoted computer simulation simulation
languages. computational characteristics
simulation discussed special attention being
paid distinction between continuous discrete
change models. Part III presents detailed comparison
six simulation languages packages: SIMSCRIPT,
CLP, CSL, GASP, CPSS SOL. characteristics
each summarized series tables.
implications analysis designers languages,
users, implementers developed.
conclusion paper packages now
available computer simulation offer features
which none more general-purpose packages do
analysis strengths weaknesses each
suggests ways which both current future simulation
languages packages can improved.
.B
CACM October, 1966
.A
Teichroew, D.
Lubin, J. F.
.N
CA661001 JB March 2, 1978 4:23 PM
.X
1366 5 1366
1366 5 1366
1366 5 1366
1503 5 1366
1781 5 1366
1860 5 1366
2091 5 1366
123 6 1366
196 6 1366
919 6 1366
990 6 1366
1007 6 1366
1046 6 1366
1131 6 1366
1139 6 1366
1140 6 1366
1149 6 1366
1198 6 1366
1215 6 1366
1223 6 1366
1265 6 1366
1303 6 1366
1323 6 1366
1358 6 1366
1366 6 1366
1366 6 1366
1366 6 1366
1366 6 1366
1389 6 1366
1421 6 1366
1421 6 1366
1460 6 1366
1462 6 1366
1463 6 1366
1467 6 1366
1468 6 1366
1477 6 1366
1477 6 1366
1491 6 1366
1491 6 1366
1496 6 1366
1496 6 1366
1531 6 1366
1535 6 1366
1565 6 1366
1601 6 1366
1602 6 1366
1613 6 1366
1614 6 1366
1626 6 1366
1626 6 1366
1641 6 1366
1641 6 1366
1785 6 1366
1786 6 1366
1787 6 1366
1788 6 1366
205 6 1366
224 6 1366
249 6 1366
288 6 1366
316 6 1366
378 6 1366
381 6 1366
398 6 1366
11 6 1366
404 6 1366
410 6 1366
463 6 1366
464 6 1366
483 6 1366
3184 6 1366
3184 6 1366
3188 6 1366
584 6 1366
600 6 1366
680 6 1366
691 6 1366
763 6 1366
799 6 1366
.I 1367
.T
Character Structure Character Parity Sense
Parallel-by-Bit Data Communication ASCII*
(Proposed American Standard)
.B
CACM September, 1966
.N
CA660912 JB March 2, 1978 4:26 PM
.X
1367 4 1367
2772 4 1367
2787 4 1367
1116 5 1367
1367 5 1367
1367 5 1367
1367 5 1367
.I 1368
.T
Systematic Generation Hamiltonian Circuits
.W
combinatorial matrix which may specify
both directed nondirected arcs, paper
describes computer program which generates systematically
exhaustively all Hamiltonian circuits.
Specific application made "traveling salesman" problem.
.B
CACM September, 1966
.A
Roberts, S. M.
.N
CA660911 JB March 2, 1978 4:30 PM
.X
1368 5 1368
1368 5 1368
1368 5 1368
.I 1369
.T
Half Rotations N-Dimensional Euclidean Space
.W
iterative procedure described determining
half rotations n-dimensional Euclidean
space. method variant cyclic Jacobi
procedure utilizers elementary plane rotations
obtain half rotation matrix. Numerical examples given.
.B
CACM September, 1966
.A
McCamon, R. B.
.N
CA660910 JB March 2, 1978 4:32 PM
.X
1369 5 1369
1369 5 1369
1369 5 1369
1961 5 1369
1369 6 1369
1504 6 1369
1847 6 1369
.I 1370
.T
Linear Equations, Exact Solutions (Algorithm 290 [F4])
.B
CACM September, 1966
.A
Boothroyd, J.
.N
CA660909a JB March 2, 1978 4:33 PM
.X
1370 5 1370
1370 5 1370
1370 5 1370
1813 5 1370
1370 6 1370
.I 1371
.T
Logarithm Gamma Function (Algorithm 291 [S14])
.B
CACM September, 1966
.A
Pike, M. C.
Hill, I. D.
.N
CA660909bJB March 23, 1978 4:24 PM
.X
1371 5 1371
1371 5 1371
1371 5 1371
.I 1372
.T
Direct Search (Algorithm 178 [E4])
.B
CACM September, 1966
.A
Bell, M.
Pike, M. C.
.N
CA660909c JB March 23, 1978 4:25 PM
.X
1372 5 1372
1372 5 1372
1372 5 1372
2190 5 1372
1372 6 1372
1849 6 1372
.I 1373
.T
Gamma Function; Gamma Function Range 1
2; Reciprocal Gamma Function Real Argument;
Gamma Function; Logarithm Gamma Function (Algorithms
34[S14]; 54[S14]; 80[S14]; 221[S14]; 291[S14])
.B
CACM September, 1966
.A
Pike, M. C.
Hill, I. D.
.N
CA660909d JB March 23, 1978 4:28 PM
.X
1373 5 1373
1373 5 1373
1373 5 1373
.I 1374
.T
Evaluation Determinant; Determinant
Evaluation (Algorithms 41[F3]; 269[F3])
.B
CACM September, 1966
.A
Bergson, A.
.N
CA660909e JB March 23, 1978 4:29 PM
.X
1374 5 1374
1374 5 1374
1374 5 1374
.I 1375
.T
Function Minimization (Algorithm 251 [E4])
.B
CACM September, 1966
.A
Fletcher, R.
.N
CA660909f JB March 23, 1978 4:31 PM
.X
1375 5 1375
1375 5 1375
1375 5 1375
.I 1376
.T
Modified Graeffee Method (Algorithm 256 [C2])
.B
CACM September, 1966
.A
Stern, G.
.N
CA660909g JB March 23, 1978 4:32 PM
.X
1376 5 1376
1376 5 1376
1376 5 1376
.I 1377
.T
Pseudo-Random Numbers (Algorithm 266 [G5])
.B
CACM September, 1966
.A
Hansson, L.
.N
CA660909h JB March 23, 1978 6:45 PM
.X
1377 5 1377
1377 5 1377
1377 5 1377
.I 1378
.T
Pseudo-Random Numbers (Algorithm 266 [G5])
.B
CACM September, 1966
.A
Hill, I. D.
Pike, M. C.
.N
CA660909i JB March 23, 1978 6:46 PM
.X
1378 5 1378
1378 5 1378
1378 5 1378
.I 1379
.T
Final Solution Dangling Else ALGOL 60 Related Languages
.W
dangling else problem consists class
potential ambiguities ALGOL-like conditional
statements whose basic form "if B1 then if B2 then
S1 else S2" B1 B2 Boolean expressions
S1 S2 basic statements. difficulty
lies whether attach else first if
second one. Existing solutions problem
either ambiguous unnecessarily restrictive.
Let Sand S1 statements. We define S closed
if "S else S1" not statement, open
if "S else S1" statement. Thus unconditional
statement closed statement. Open closed
conditional statements defined syntax equations
such way preserve openness closure.
each case, else must always preceded closed
statement. shown syntax equations
unambiguous, may change statement
types required within syntax equations would
lead either ambiguity unnecessary restriction.
.B
CACM September, 1966
.A
Abrahams, P. W.
.N
CA660908 JB March 2, 1978 6:18 PM
.X
1084 4 1379
1086 4 1379
1132 4 1379
1234 4 1379
1263 4 1379
1265 4 1379
1270 4 1379
1323 4 1379
1358 4 1379
1379 4 1379
1379 4 1379
1379 4 1379
1379 4 1379
1379 4 1379
1380 4 1379
1453 4 1379
1464 4 1379
1484 4 1379
1491 4 1379
1498 4 1379
1613 4 1379
1614 4 1379
1625 4 1379
1693 4 1379
1781 4 1379
1781 4 1379
1825 4 1379
1836 4 1379
1860 4 1379
1945 4 1379
1945 4 1379
2015 4 1379
2060 4 1379
2061 4 1379
2083 4 1379
2091 4 1379
2178 4 1379
2179 4 1379
2179 4 1379
2252 4 1379
2325 4 1379
2341 4 1379
2546 4 1379
2546 4 1379
2645 4 1379
2652 4 1379
2684 4 1379
2698 4 1379
2708 4 1379
2842 4 1379
2929 4 1379
2934 4 1379
3045 4 1379
3069 4 1379
669 4 1379
679 4 1379
691 4 1379
761 4 1379
949 4 1379
989 4 1379
1263 5 1379
1379 5 1379
1379 5 1379
1379 5 1379
1477 5 1379
2167 5 1379
2956 5 1379
3184 5 1379
669 5 1379
761 5 1379
1379 6 1379
1379 6 1379
1392 6 1379
1393 6 1379
2169 6 1379
2651 6 1379
.I 1380
.T
SIMULA-an ALGOL-Based Simulation Language
.W
paper introduction SIMULA,
programming language designed provide systems
analyst unified concepts which facilitate
concise description discrete event systems.
system description also serves source language simulation
program. SIMULA extension ALGOL
60 which most important new concepts
quasi-parallel processing.
.B
CACM September, 1966
.A
Dahl, O. J.
Nygaard, K.
.N
CA660907 JB March 2, 1978 6:21 PM
.X
1024 4 1380
1051 4 1380
1086 4 1380
1098 4 1380
1132 4 1380
1214 4 1380
1234 4 1380
1263 4 1380
1265 4 1380
1270 4 1380
1323 4 1380
1323 4 1380
1358 4 1380
1358 4 1380
1379 4 1380
1380 4 1380
1380 4 1380
1380 4 1380
1380 4 1380
1388 4 1380
1393 4 1380
1453 4 1380
1464 4 1380
1484 4 1380
1485 4 1380
1487 4 1380
1491 4 1380
1498 4 1380
1549 4 1380
1552 4 1380
1570 4 1380
1613 4 1380
1614 4 1380
1665 4 1380
1693 4 1380
1781 4 1380
1781 4 1380
1781 4 1380
1787 4 1380
1825 4 1380
1854 4 1380
1860 4 1380
1860 4 1380
1878 4 1380
1946 4 1380
1957 4 1380
1989 4 1380
2060 4 1380
2083 4 1380
2112 4 1380
2168 4 1380
2178 4 1380
2179 4 1380
2252 4 1380
2325 4 1380
2341 4 1380
2534 4 1380
2541 4 1380
2546 4 1380
2645 4 1380
2652 4 1380
2684 4 1380
2698 4 1380
2723 4 1380
2733 4 1380
2820 4 1380
2842 4 1380
2857 4 1380
2929 4 1380
2934 4 1380
557 4 1380
3069 4 1380
3073 4 1380
3112 4 1380
3155 4 1380
669 4 1380
679 4 1380
691 4 1380
761 4 1380
949 4 1380
989 4 1380
1380 5 1380
1380 5 1380
1380 5 1380
1421 5 1380
1541 5 1380
1846 5 1380
2060 5 1380
2218 5 1380
3112 5 1380
3184 5 1380
731 5 1380
799 5 1380
106 6 1380
1358 6 1380
1380 6 1380
1380 6 1380
1380 6 1380
1380 6 1380
1380 6 1380
1421 6 1380
1424 6 1380
1469 6 1380
1477 6 1380
1484 6 1380
1491 6 1380
1572 6 1380
1572 6 1380
1728 6 1380
1751 6 1380
1752 6 1380
1810 6 1380
1826 6 1380
210 6 1380
1869 6 1380
1879 6 1380
1972 6 1380
2095 6 1380
2110 6 1380
2438 6 1380
2723 6 1380
2736 6 1380
2833 6 1380
2838 6 1380
576 6 1380
731 6 1380
.I 1381
.T
Impact Computers Undergraduate Mathematics Curriculum
.W
use computers permit widespread application
mathematical ideas requiring computation
science technology extremely significant
understanding our current society. Student
interest development intense if properly
utilized should yield much better understanding
mathematical concepts well ideas programming
logical structure which have been introduced
into many fields use computers. present
paper suggests portion undergraduate
mathematical curriculum which preparation use
mathematics persons not professional
mathematicians modified include extensions
clarifications which possible because
computers. early introduction programming
desirable permit continuing use automatic
computation illustrate clarify mathematical concepts.
Following calculus equation stage
intensive introduction numerical analysis should
added current curriculum. addition
providing competence mostly used computing
techniques, would permit more sophisticated
utilization advanced mathematical ideas associated
complex variables transform theories.
.B
CACM September, 1966
.A
Murray, F. J.
.N
CA660905 JB March 2, 1978 6:31 PM
.X
1381 5 1381
1381 5 1381
1381 5 1381
.I 1382
.T
Desired Computer Impact Undergraduate Mathematics
.W
Three matters relating theme
Symposium discussed here. author examines
some projections concerning supply demand
mathematicians United States through
mid-1970s, comments briefly some factors which
may influence professional activities
applied mathematicians over next several years,
discusses broad terms information
may relate undergraduate training mathematicians.
.B
CACM September, 1966
.A
Macon, N.
.N
CA660904 JB March 2, 1978 6:35 PM
.X
1382 5 1382
1382 5 1382
1382 5 1382
.I 1383
.T
Implications Digital Computer
Education Mathematical Sciences
.W
digital computer has profoundly altered
definition interesting mathematics.
importance applied logic human affairs
changed existence "logical engine."
result one should no longer think terms
single discipline mathematics but
terms complex mathematical sciences.
.B
CACM September, 1966
.A
Givens, W.
.N
CA660903 JB March 2, 1978 6:39 PM
.X
1383 5 1383
1383 5 1383
1383 5 1383
2665 5 1383
1383 6 1383
1549 6 1383
.I 1384
.T
Mathematics Undergraduate Computer Scientists
.W
mathematical requirements undergraduate
program Computer Science subject
debate. Association Computing Machinery's
Curriculum Committee, however, believes these
requirements essentially same mathematical
content physical sciences undergraduate
programs. Committee believes these requirements
should assure student broad mathematical
background should enable him take wide variety
courses other scientific disciplines.
Committee's concern develop solid
scientific approach Computer Science.
.B
CACM September,1966
.A
Atchison, W. F.
.N
CA660902 JB March 2, 1978 6:46 PM
.X
1384 5 1384
1384 5 1384
1384 5 1384
.I 1385
.T
Computer Technology Communist China, 1956-1965
.W
Based information translations Communist
Chinese news items periodical literature
1965 period, computer technology China
reviewed under following headings: (1) initial
planning, organization educational aspects computer
technology automation; (2) machine development
progress: two major specific machines 1958-59,
Soviet aid; vacuum 1960-64 due withdrawal
Soviet aid; then presumably all-Chinese-made machines
1965 present; (3) computer applications;
(4) trend automation: control production processes
rather than data processing; (5)
"Yun Ch'ou Hsueh" (Science Operation Programming)
campaign 1958-60, during which attempt
made bring concepts such linear programming
ordinary Chinese workers peasants. Communist
China adjudged have marginal computer capability,
most its machines probably being
binary nature; however, turning point may have been reached mid-1965.
.B
CACM September, 1966
.A
Audette, D. G.
.N
CA660901 JB March 2, 1978 6:59 PM
.X
1385 5 1385
1385 5 1385
1385 5 1385
.I 1386
.T
Symbolic Factoring Polynomials Several Variables
.W
algorithm finding symbolic factors
multi-variate polynomial integer coefficients
presented. algorithm extension technique
used Kronecker proof prime
factoring any polynomial may found finite number
steps. algorithm consists factoring
single-variable instances given polynomial
Kronecker's method introducing remaining
variables interpolation. Techniques implementing
algorithm several examples discussed.
algorithm promises sufficient power used efficiently
online system symbolic mathematics.
.B
CACM August, 1966
.A
Jordan, D. E.
Kain, R. Y.
Clapp, L. C.
.N
CA660812 JB March 2, 1978 7:06 PM
.X
1396 5 1386
1386 5 1386
1386 5 1386
1386 5 1386
964 6 1386
1028 6 1386
1029 6 1386
1083 6 1386
1132 6 1386
1214 6 1386
1278 6 1386
1334 6 1386
1365 6 1386
1386 6 1386
1387 6 1386
1388 6 1386
1392 6 1386
1393 6 1386
1394 6 1386
1395 6 1386
1396 6 1386
1397 6 1386
1496 6 1386
284 6 1386
407 6 1386
3199 6 1386
3200 6 1386
3201 6 1386
3202 6 1386
3203 6 1386
3204 6 1386
561 6 1386
730 6 1386
.I 1387
.T
Solution Systems Polynomial Equations Elimination
.W
elimination procedure described Williams
has been coded LISP FORMAC used
solving systems polynomial equations. found
method very effective case
small systems, yields all solutions without
need initial estimates. method,
itself, appears appropriate, however, solution
large systems equation due explosive
growth intermediate equations hazards
which arise coefficients truncated.
comparison made difficulties found other
problems non-numerical mathematics such
symbolic integration simplification.
.B
CACM August, 1966
.A
Moses, J.
.N
CA660811 JB March 2, 1978 7:11 PM
.X
1396 5 1387
1387 5 1387
1387 5 1387
1387 5 1387
1946 5 1387
878 6 1387
902 6 1387
964 6 1387
1028 6 1387
1029 6 1387
1083 6 1387
1093 6 1387
1132 6 1387
1177 6 1387
1214 6 1387
1278 6 1387
1334 6 1387
1365 6 1387
1386 6 1387
1387 6 1387
1387 6 1387
1388 6 1387
1392 6 1387
1393 6 1387
1393 6 1387
1394 6 1387
1395 6 1387
1396 6 1387
1397 6 1387
1496 6 1387
284 6 1387
360 6 1387
407 6 1387
3199 6 1387
3200 6 1387
3201 6 1387
3202 6 1387
3203 6 1387
3204 6 1387
561 6 1387
730 6 1387
731 6 1387
.I 1388
.T
AUTOMAST: Automatic Mathematical Analysis Symbolic Translation
.W
procedure numerically solving systems
ordinary differential equation shown also
generate symbolic solutions. procedure based
finite Taylor series expansion includes
estimate error final result. computer
program described reads system
such equations then generates expansions
all dependent variables. expansions
determined symbolically, hence any non-numeric parameters
original equations carried automatically
into final expansions. Thus exact influence
any parameters problem solution can
easily displayed.
.B
CACM August, 1966
.A
Ball, W. E.
Berns, R. I.
.N
CA660810 JB March 2, 1978 7:16 PM
.X
1024 4 1388
1051 4 1388
1098 4 1388
1214 4 1388
1223 4 1388
1380 4 1388
1388 4 1388
1388 4 1388
1393 4 1388
1485 4 1388
1487 4 1388
1549 4 1388
1570 4 1388
1878 4 1388
1946 4 1388
1957 4 1388
2168 4 1388
436 4 1388
2723 4 1388
2857 4 1388
3112 4 1388
1388 5 1388
1388 5 1388
1388 5 1388
1396 5 1388
405 5 1388
731 5 1388
964 6 1388
1028 6 1388
1029 6 1388
1083 6 1388
1132 6 1388
1214 6 1388
1278 6 1388
1334 6 1388
1365 6 1388
1386 6 1388
1387 6 1388
1388 6 1388
1392 6 1388
1393 6 1388
1394 6 1388
1395 6 1388
1396 6 1388
1397 6 1388
1496 6 1388
284 6 1388
407 6 1388
3199 6 1388
3200 6 1388
3201 6 1388
3202 6 1388
3203 6 1388
3204 6 1388
561 6 1388
730 6 1388
.I 1389
.T
Programmer's Description L^6
.W
Bell Telephone Laboratories' Low-Linked List Language
L^6 (pronounced "L-six") new programming
language list structure manipulations. contains
many facilities which underlie such list
processors IPL, LISP, COMIT ad SNOBOL, but permits
user get much closer machine code
order write faster-running programs, use storage
more efficiently build wider variety
linked data structures.
.B
CACM August, 1966
.A
Knowlton, K. C.
.N
CA660809 JB March 2, 1978 7:20 PM
.X
1389 4 1389
1552 4 1389
2162 4 1389
2435 4 1389
2596 4 1389
2768 4 1389
2845 4 1389
2902 4 1389
2955 4 1389
1184 5 1389
1389 5 1389
1389 5 1389
1389 5 1389
1860 5 1389
1957 5 1389
2155 5 1389
2162 5 1389
1184 6 1389
1366 6 1389
1389 6 1389
1389 6 1389
1389 6 1389
1389 6 1389
1421 6 1389
1496 6 1389
1626 6 1389
1641 6 1389
1785 6 1389
1786 6 1389
210 6 1389
1860 6 1389
378 6 1389
378 6 1389
2046 6 1389
2060 6 1389
3184 6 1389
731 6 1389
.I 1390
.T
CONVERT
.W
programming language described which
applicable problems conveniently described
transformation rules. meant patterns
may prescribed, each being associated
skeleton, so series such pairs may searched
until pattern found which matches
expression transformed. conditions match
governed code which also allows subexpressions
identified eventually substituted into
corresponding skeleton. primitive patterns
primitive skeletons described, well
principle which allow their elaboration more
complicated patterns skeletons. advantages
language allows one apply transformation
rules lists arrays easily strings, both
patterns skeletons may defined recursively,
consequence programs may stated quite concisely.
.B
CACM August, 1966
.A
Guzman, A.
McIntosh, H. V.
.N
CA660808 JB March 2, 1978 7:32 PM
.X
1024 4 1390
1051 4 1390
1102 4 1390
1132 4 1390
1390 4 1390
1486 4 1390
1549 4 1390
1706 4 1390
1826 4 1390
1878 4 1390
378 4 1390
2060 4 1390
2155 4 1390
2168 4 1390
2719 4 1390
2723 4 1390
2838 4 1390
2842 4 1390
2855 4 1390
2879 4 1390
3077 4 1390
3080 4 1390
3106 4 1390
627 4 1390
106 4 1390
210 5 1390
1390 5 1390
1390 5 1390
1390 5 1390
.I 1391
.T
Computer Experiments Finite Algebra
.W
medium-scale programming system written
MAD FAP IBM 7094 manipulate some
objects modern algebra: finite groups, maps
sets maps, subsets sets subsets,
constant integers truth-values. Designed operate
time-sharing environment, system can
serve teacher's aid undergraduate student
modern algebra, well working scientist
engineer wishing familiarize himself subset.
.B
CACM August, 1966
.A
Maurer, W. D.
.N
CA660807 JB March 2, 1978 7:36 PM
.X
1391 5 1391
1391 5 1391
1391 5 1391
1948 5 1391
1391 6 1391
1559 6 1391
.I 1392
.T
Experience FORMAC Algorithm Design
.W
Various facets design implementation
mathematical expression manipulation algorithms
discussed. Concrete examples provided
FORMAC EXPAND differentiation algorithms,
basic FORMAC utility routine, experiment
extraction skeletal structure expression.
One recurrent theme need avoid excessive
intermediate expression swell order minimize
core storage requirements. Although many details
FORMAC implementation presented, attempt
made stress principles ideas general relevance
design algorithms manipulating
mathematical expressions.
.B
CACM August, 1966
.A
Tobey, R. G.
.N
CA660806 JB March 2, 1978 7:43 PM
.X
1028 4 1392
1216 4 1392
1392 4 1392
1396 4 1392
964 4 1392
1396 5 1392
1392 5 1392
1392 5 1392
1392 5 1392
2167 5 1392
561 5 1392
964 6 1392
1028 6 1392
1029 6 1392
1083 6 1392
1132 6 1392
1214 6 1392
1278 6 1392
1334 6 1392
1365 6 1392
1379 6 1392
1386 6 1392
1387 6 1392
1388 6 1392
1392 6 1392
1392 6 1392
1393 6 1392
1393 6 1392
1394 6 1392
1395 6 1392
1396 6 1392
1397 6 1392
1496 6 1392
284 6 1392
2169 6 1392
407 6 1392
3199 6 1392
3200 6 1392
3201 6 1392
3202 6 1392
3203 6 1392
3204 6 1392
561 6 1392
730 6 1392
.I 1393
.T
PM, System Polynomial Manipulation
.W
PM IBM 7094 program system formal manipulation
polynomials any number variables,
integral coefficients unrestricted size. Some
formal operations which can performed
system sums, differences, products, quotients,
derivatives, substitutions greater common
divisors. PM based REFCO III list processing
system, which described compared
LISP SLIP systems. PM subroutines arithmetic
large integers described constituting
independently useful subsystem. PM compared
ALPAK system several respects, including
choice canonical forms polynomials. new
algorithm polynomial greatest common divisor
calculation mentioned, exaples
included illustrate its superiority.
.B
CACM August, 1966
.A
Collins, G. E.
.N
CA660805 JB March 2, 1978 7:51 PM
.X
1024 4 1393
1050 4 1393
1051 4 1393
1098 4 1393
1214 4 1393
1380 4 1393
1388 4 1393
1393 4 1393
1393 4 1393
1393 4 1393
1485 4 1393
1487 4 1393
1549 4 1393
1549 4 1393
1570 4 1393
1878 4 1393
1946 4 1393
1957 4 1393
2023 4 1393
2168 4 1393
2723 4 1393
2857 4 1393
3112 4 1393
3112 4 1393
627 4 1393
106 5 1393
1393 5 1393
1393 5 1393
1393 5 1393
1396 5 1393
296 5 1393
1946 5 1393
2167 5 1393
2857 5 1393
731 5 1393
878 6 1393
902 6 1393
964 6 1393
1028 6 1393
1029 6 1393
1083 6 1393
1093 6 1393
1132 6 1393
1177 6 1393
1214 6 1393
1278 6 1393
1334 6 1393
1365 6 1393
1379 6 1393
1386 6 1393
1387 6 1393
1387 6 1393
1388 6 1393
1392 6 1393
1392 6 1393
1393 6 1393
1393 6 1393
1393 6 1393
1393 6 1393
1394 6 1393
1395 6 1393
1396 6 1393
1397 6 1393
1496 6 1393
284 6 1393
360 6 1393
2169 6 1393
407 6 1393
3199 6 1393
3200 6 1393
3201 6 1393
3202 6 1393
3203 6 1393
3204 6 1393
561 6 1393
730 6 1393
731 6 1393
731 6 1393
.I 1394
.T
Computation Algebraic Properties Elementary
Particle Reactions Using Digital Computer
.W
large number calculations high-energy
elementary particle physics involve manipulation
complicated algebraic expressions containing both
tensor noncommutative matrix quantities. Many
these calculations take several months complete, although
operations involved follow straightforward
rules. paper program described, which has
been developed LISP solving such problems.
manner which these problems encountered
outlined, their representation computer
discussed. present, six months human work
takes less than fifteen minutes IBM 7090.
Limitations present system future plans also outlined.
.B
CACM August, 1966
.A
Hearn, A. C.
.N
CA660804 JB March 2, 1978 7:58 PM
.X
1396 5 1394
1394 5 1394
1394 5 1394
1394 5 1394
964 6 1394
1028 6 1394
1029 6 1394
1083 6 1394
1132 6 1394
1214 6 1394
1278 6 1394
1334 6 1394
1365 6 1394
1386 6 1394
1387 6 1394
1388 6 1394
1392 6 1394
1393 6 1394
1394 6 1394
1395 6 1394
1396 6 1394
1397 6 1394
1496 6 1394
284 6 1394
407 6 1394
3199 6 1394
3200 6 1394
3201 6 1394
3202 6 1394
3203 6 1394
3204 6 1394
561 6 1394
730 6 1394
.I 1395
.T
Implementation AMBIT, Language Symbol Manipulation
.W
brief description given implementation
technique replacement rule
AMBIT programming language. algorithm "AMBIT
scan" example its application
given. algorithm applicable other members
family string transformation languages
which AMBIT member, provides rationale
design AMBIT language.
.B
CACM August, 1966
.A
Christensen, C.
.N
CA660803 JB March 2, 1978 8:02 PM
.X
1396 4 1395
1395 4 1395
1395 4 1395
1706 4 1395
1180 5 1395
1396 5 1395
1395 5 1395
1395 5 1395
1395 5 1395
1395 5 1395
964 6 1395
1028 6 1395
1029 6 1395
1083 6 1395
1132 6 1395
1180 6 1395
1214 6 1395
1278 6 1395
1334 6 1395
1365 6 1395
1386 6 1395
1387 6 1395
1388 6 1395
1392 6 1395
1393 6 1395
1394 6 1395
1395 6 1395
1395 6 1395
1396 6 1395
1397 6 1395
1496 6 1395
284 6 1395
407 6 1395
3199 6 1395
3200 6 1395
3201 6 1395
3202 6 1395
3203 6 1395
3204 6 1395
561 6 1395
730 6 1395
.I 1396
.T
Survey Formula Manipulation
.W
field formula manipulation surveyed,
particular attention specific capabilities
differentiation, integration supporting capabilities
simplification, displays input/output
editing, precision arithmetic. General systems-both
batch online-are described. Finally, some
programs solve specific applications discussed.
.B
CACM August, 1966
.A
Sammet, J. E.
.N
CA660802 JB March 2, 1978 8:07 PM
.X
1028 4 1396
1028 4 1396
1083 4 1396
1083 4 1396
1214 4 1396
1216 4 1396
1216 4 1396
1216 4 1396
1278 4 1396
1278 4 1396
1334 4 1396
1347 4 1396
1347 4 1396
1347 4 1396
1392 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1396 4 1396
1395 4 1396
1444 4 1396
1536 4 1396
1624 4 1396
1767 4 1396
1781 4 1396
1787 4 1396
1860 4 1396
1945 4 1396
1945 4 1396
1946 4 1396
1946 4 1396
1988 4 1396
2167 4 1396
2167 4 1396
2229 4 1396
2252 4 1396
2857 4 1396
679 4 1396
964 4 1396
964 4 1396
964 5 1396
1028 5 1396
1029 5 1396
1083 5 1396
1132 5 1396
1214 5 1396
1278 5 1396
1334 5 1396
1388 5 1396
1393 5 1396
1396 5 1396
1396 5 1396
1396 5 1396
1396 5 1396
1392 5 1396
1395 5 1396
1397 5 1396
1365 5 1396
284 5 1396
1386 5 1396
1387 5 1396
1394 5 1396
1496 5 1396
1945 5 1396
407 5 1396
561 5 1396
3199 5 1396
3200 5 1396
3201 5 1396
3202 5 1396
3203 5 1396
3204 5 1396
730 5 1396
823 6 1396
914 6 1396
915 6 1396
917 6 1396
964 6 1396
984 6 1396
989 6 1396
990 6 1396
1012 6 1396
1028 6 1396
1029 6 1396
1083 6 1396
1084 6 1396
1098 6 1396
1122 6 1396
1132 6 1396
1138 6 1396
1139 6 1396
1141 6 1396
1200 6 1396
1214 6 1396
1223 6 1396
1265 6 1396
1278 6 1396
1334 6 1396
1336 6 1396
1365 6 1396
1386 6 1396
1387 6 1396
1388 6 1396
1392 6 1396
1393 6 1396
1394 6 1396
1395 6 1396
1396 6 1396
1396 6 1396
1397 6 1396
1455 6 1396
1477 6 1396
1487 6 1396
1491 6 1396
1496 6 1396
1496 6 1396
284 6 1396
407 6 1396
483 6 1396
3199 6 1396
3200 6 1396
3201 6 1396
3202 6 1396
3203 6 1396
3204 6 1396
561 6 1396
584 6 1396
669 6 1396
680 6 1396
730 6 1396
763 6 1396
.I 1397
.T
Proceedings ACM Symposium Symbolic Algebraic Manipulation
.W
ACM Symposium Symbolic Algebraic
Manipulation brought together over four hundred
people interested programming languages designed
manipulation algebraic formulas symbol
strings, their applications, algorithms
their implementation. Twenty-eight papers were
presented, followed lively panel discussion
future directions. Evening meetings were arranged
several interest groups. conference sponsored
ACM Special Interest Committee Symbolic
Algebraic Manipulation. program committee consisted
Chairman Jean E. Sammet, Paul Abrahams,
Thomas E. Cheatham, Max Goldstein, Douglas Mcllroy.
Conference arrangements were made Lewis C.
Clapp, Daniel Bobrow James H. Griesmer.-Robert W. Floyd, Editor
.B
CACM August, 1966
.N
CA660801 JB March 2, 1978 8:17 PM
.X
1397 4 1397
2704 4 1397
1247 5 1397
1396 5 1397
1397 5 1397
1397 5 1397
1397 5 1397
964 6 1397
1028 6 1397
1029 6 1397
1083 6 1397
1132 6 1397
1214 6 1397
1278 6 1397
1334 6 1397
1365 6 1397
1386 6 1397
1387 6 1397
1388 6 1397
1392 6 1397
1393 6 1397
1394 6 1397
1395 6 1397
1396 6 1397
1397 6 1397
1496 6 1397
284 6 1397
407 6 1397
3199 6 1397
3200 6 1397
3201 6 1397
3202 6 1397
3203 6 1397
3204 6 1397
561 6 1397
730 6 1397
.I 1398
.T
Robot Data Screening: Solution Multivariate
Type Problems Biological Social Sciences
.W
new approach outlined toward solution
type multivariate problem
found usually biological social sciences
well medicine. approach uses "logical"
rather than "statistical" criterion which variables
grouped into deterministic model. Algorithm
developed which some variables kept
further analysis while others eliminated.
Criteria acceptance variable well
termination searching process derived
information theory.
.B
CACM July, 1966
.A
Sterling, T.
Gleser, M.
Haberman, S.
Pollack, S.
.N
CA660714JB March 2, 1978 8:26 PM
.X
1398 5 1398
1398 5 1398
1398 5 1398
.I 1399
.T
Top-to-Bottom Recognition Left Recursion
.W
procedure given obtaining structural
descriptions context-free grammar performing
recognition according strongly equivalent,
left-recursion-freegrammar. effect allowing
null strings rewriting rules discussed.
.B
CACM July, 1966
.A
Kurki-Suonio, R.
.N
CA660713 JB March 2, 1978 8:29 PM
.X
1350 4 1399
1399 4 1399
1659 4 1399
1768 4 1399
1781 4 1399
1945 4 1399
2110 4 1399
3094 4 1399
1265 5 1399
1350 5 1399
1399 5 1399
1399 5 1399
1399 5 1399
1012 6 1399
1225 6 1399
1265 6 1399
1399 6 1399
680 6 1399
.I 1400
.T
Free-Text Inputs Utility Routines
.W
Through use some rather simple techniques,
frequently possible produce program
which accept free-text inputs. techniques
discussed related general tape manipulation
routine.
.B
CACM July, 1966
.A
Blum, R. I.
.N
CA660712 JB March 2, 1978 8:32 PM
.X
1400 4 1400
1553 4 1400
1945 4 1400
2127 4 1400
2396 4 1400
2730 4 1400
1400 5 1400
1400 5 1400
1400 5 1400
1487 5 1400
.I 1401
.T
Quasilinearization Calculation Eigenvalues
.W
Several eigenvalue problems systems
ordinary differential equations considered.
They resolved computationally using quasilinerization
technique, quadratically convergent
successive approximation scheme related
Newton-Raphson-Kantorovich method.
.B
CACM July, 1966
.A
Bellman, R., Kagiwada, H.
Kalaba, R.
.N
CA660711 JB March 2, 1978 8:40 PM
.X
1401 5 1401
1401 5 1401
1401 5 1401
1766 5 1401
1401 6 1401
.I 1402
.T
Partial Step Integration
.W
partial step integration equation derived
use Adams Adams-Bashforth method
integration differential equations. method
obtaining functional values points intermediate
integration points yields accuracy comparable
integration does not require storing
additional information interpolation methods.
.B
CACM July, 1966
.A
Glauz, R. D.
.N
CA660710 JB March 2, 1978 9:08 PM
.X
1402 5 1402
1402 5 1402
1402 5 1402
.I 1403
.T
Method Finding m Smallest Values
Monotonic Function Defined Ordered Sets
Positive Integers
.W
minimum value monotonic increasing
function defined partially ordered set S
assumed set minimal points S. observation
used devise efficient method
finding m smallest functional values monotonic
functions defined ordered pairs positive
integers. method easily extended include
monotonic functions defined ordered n-tuples.
Included FORTRAN program which written implement
procedure certain important case.
.B
CACM July, 1966
.A
Sigillito, V. G.
.N
CA660709 JB March 2, 1978 9:13 PM
.X
1403 5 1403
1403 5 1403
1403 5 1403
.I 1404
.T
Computational Aspects Multiple Covariance
Analysis Multifactor Structure
.W
computational procedure analysis
multiple covariance statistics discussed
reference analysis variance. special
operator calculus developed Hartly programming
analysis variance multifactor experiments extended
cover analysis covariance.
extension accomplished utilizing connection
between analysis covariance analysis
variance introducing new operator.
results illustrated numerical example
analysis covariance, which basic computations
shown carried out analysis-of-variance
program.
.B
CACM July, 1966
.A
Peng, K. C.
.N
CA660708 JB March 2, 1978 9:18 PM
.X
1404 4 1404
1045 5 1404
1404 5 1404
1404 5 1404
1404 5 1404
.I 1405
.T
Matrix Triangulation Integer Arithmetic (Algorithm 287 [F1])
.B
CACM July, 1966
.A
Blankinship, W. A.
.N
CA660707a JB March 2, 1978 9:20 PM
.X
1405 5 1405
1405 5 1405
1405 5 1405
.I 1406
.T
Solution simultaneous Linear Diophantine
Equations (Algorithm 288 [F4])
.B
CACM July, 1966
.A
Blankinship, W. A.
.N
CA660707b JB March 23, 1978 7:06 PM
.X
1406 5 1406
1406 5 1406
1406 5 1406
.I 1407
.T
Confidence Interval Ratio (Algorithm 289 [G1])
.B
CACM July, 1966
.A
Hill, I. D.
Pike, M. C.
.N
CA660707c JB March 23, 1978 7:07 PM
.X
1407 5 1407
1407 5 1407
1407 5 1407
.I 1408
.T
Eschenbach Drum Scheme
.W
prime function drum, operating
real time, perform accesses quickly.
usual means increasing capacity incorporate
engineering hardware improvements.
paper problem attacked not changing
drum, but rather modifying manner which
operates. outset, drum given functional
definition. Then simple design scheme (Eschenbach)
introduced which enormously increases rate
accessing drums so defined. shown
enable system perform job employing fewer
less expensive drums. suggested although
design scheme has specific use, method underlying
has more general applicability. question
efficacy drum scheme then raised.
deal this, standard efficiency developed
light realistic real-time circumstances. drum
scheme then modelled manner which permits
analyzed problem queueing theory.
Thus one enabled ascertain whether drum
scheme efficient enough its application. Again,
whereas analysis drum scheme has
specific use, methods underlying have more general applicability.
.B
CACM July, 1966
.A
Weingarten, A.
.N
CA660706 JB March 2, 1978 9:29 PM
.X
1408 5 1408
1408 5 1408
1408 5 1408
2319 5 1408
1408 6 1408
1719 6 1408
1749 6 1408
1751 6 1408
2016 6 1408
2017 6 1408
2080 6 1408
2188 6 1408
2203 6 1408
2204 6 1408
.I 1409
.T
NEBULA: Digital Computer Using 20 Mc Glass Delay Line Memory
.W
Oregon State University has designed constructed
medium-speed serial digital computer
using glass delay lines circulating 22 Mc memory.
design objectives originally conceived
special seminar were: (1) research project
computer design; (2) usable educational
machine;and (3) have easily modifiable hardware
basic research computer systems design.
unusual arrangement information within 22 Mc
memory allows simple interface 340 Kc
arithmetic unit, which results effective zero latency
time provides possibilities associative
memory. arithmetic unit has command structure similar
large parallel machines, uses flip-flop
arithmetic control registers throughout. All hardware
development has been aimed toward concept
easy modification, elaborate console controls
effective man-machine interaction low cost.
.B
CACM July, 1966
.A
Boles, J. A.
Rux, P. T.
Weingarten Jr., F. W.
.N
CA660705 JB March 2, 1978 9:35 PM
.X
1409 4 1409
1208 5 1409
1409 5 1409
1409 5 1409
1409 5 1409
.I 1410
.T
Interarrival Statistics Time Sharing Systems
.W
optimization time-shared system performance
requires description stochastic
processes governing user inputs program activity.
paper provides statistical description
user input process SDC-ARPA general-purpose
Time-Sharing System (TSS). input process
assumed stationary, defined
interarrival time distribution. data obtained
appear justify satisfactorily common assumption
interarrival times serially independent.
data do not appear justify, except very
rough approximation, usual assumption off
exponential distribution interarrival time. much
more satisfactory approximation data can
obtained biphase triphase hyperexponential distribution.
.B
CACM July, 1966
.A
Coffman, E. G.
Wood, R. C.
.N
CA660704 JB March 2, 1978 9:45 PM
.X
1410 5 1410
1410 5 1410
1410 5 1410
1604 5 1410
1951 5 1410
2373 5 1410
1224 6 1410
1410 6 1410
1410 6 1410
1410 6 1410
1604 6 1410
1751 6 1410
1810 6 1410
1951 6 1410
2374 6 1410
.I 1411
.T
Comparison Several Algorithms Computation
Means, Standard Deviations Correlation
Coefficients
.W
Several algorithms computation basic
statistics compared their performance
systematically generated test data. statistics
calculated were mean, standard deviation
correlation coefficient. each statistic, algorithm
included usual computing formulas, correction
due accumulated error term, recursive computation
current value statistic.
usual computing formulas were also evaluated
double precision. Large errors were noted some
calculation using usual computing formulas. most
reliable technique correction initial
estimate use accumulated error term. eliminate
need making two passes data,
suggested initial estimate
mean obtained subset data.
.B
CACM July, 1966
.A
Neely, P. M.
.N
CA660703 JB March 6, 1978 2:54 PM
.X
1411 5 1411
1411 5 1411
1411 5 1411
1619 5 1411
3166 5 1411
1411 6 1411
1411 6 1411
2731 6 1411
2799 6 1411
3159 6 1411
3167 6 1411
.I 1412
.T
Banking Information System Concept
.W
Most large commercial banks have progressed
point their major accounting applications
have been automated more sophisticated usage
data processing equipment being sought. This,
coupled availability equipment well suited
real-time, direct access processing,has led
development within some banks central file
data base approach toward banking information
system. banking information system now serves
two-fold purpose providing real-time responses
inquires individual account stasus providing
more complex combinations information
management use. Both kinds processing draw upon
common store data contained direct access
central file. data base includes indexes which
facilitate cross referencing account information
so all relationships between bank customer may
discerned. introducing banking information
system concept, gradual approach account cross-referencing
file conversion most prudent.
Generally, system must interface other computer
applications already existing within bank.
.B
CACM July, 1966
.A
Head, R. V.
.N
CA660702 JB March 2, 1978 9:53 PM
.X
1412 5 1412
1412 5 1412
1412 5 1412
.I 1413
.T
Vision Technology Education
.W
Educational technology currently quite
fashionable. Here, many other branches
aspects technology, changes possible next generation
two now known ideas, discoveries
inventions. unknown whether potential
become actual and, if so, time
scale. ignorance stems largely ignorance
social response potential technological
change. object paper present vision
potential educational technology raise
questions modes social response
adaptation likely evoked such vision.
.B
CACM July, 1966
.A
Oettinger, A. G.
.N
CA660701 JB March 3, 1978 8:38 AM
.X
1413 4 1413
1413 4 1413
1654 4 1413
1771 4 1413
1902 4 1413
2478 4 1413
1205 5 1413
1270 5 1413
1413 5 1413
1413 5 1413
1413 5 1413
.I 1414
.T
Twelve-Row Punched-Card Code Information
Interchange* (Proposed American Standard)
.B
CACM June, 1966
.N
CA660607 JB March 3, 1978 8:39 AM
.X
1414 5 1414
1414 5 1414
1414 5 1414
.I 1415
.T
Automatic Derivation Microsentences
.W
decomposition long complex English sentences
into shorter kernel-like constituent sentences
(microsentences)has often been suggested avenue
toward conducting automatic retrieval natural
language messages. explore prospects such
step, authors attempted 1963 prepare
general program deriving microsentences longer
sentences had been syntactically analyzed
Harvard Multipath Analysis Program. basic
idea extract subject, verb object
(if any) each clause reassemble these materials
into grammatical microsentence. program
described paper, which designed operate
tree structure output analyzer,
microsentences were produced exhibited.
authors conclude while microsentences
quality achieved do not open up immediate prospects
improving performance automatic
message retrieval systems, they may have practical
value man-machine systems using human monitors
select preferred syntactic interpretation sentence.
.B
CACM June, 1966
.A
Carmody, B. T
Jones Jr., P. E.
.N
CA660606 JB March 3, 1978 8:47 AM
.X
1415 5 1415
1415 5 1415
1415 5 1415
.I 1416
.T
Fortran Technique Simplifying Input Report Generators
.W
Typical report generators allow production
standard forms tabulating magnetic
tape file; extraction nonstandard sets information,
suitable annotation, involves troublesome
forms design. method information extraction involving
calculation suitable FORTRAN FORMAT
statements, which combats problem, described.
.B
CACM June, 1966
.A
Cleary, J. G.
.N
CA660605 JB March 3, 1978 8:53 AM
.X
1416 5 1416
1416 5 1416
1416 5 1416
.I 1417
.T
Economies Scale IBM System/360
.W
Cost functions among five System/360 models
analyzed through examinations instruction
times, program kernels "typical" instruction mix.
Comparisons made between data developed
here Grosch's Law which seems applicable
much data. Sizable economies scale
unquestionably present computing equipment.
.B
CACM June, 1966
.A
Solomon Jr., M. B.
.N
CA660604 JB March 3, 1978 8:57 AM
.X
1417 5 1417
1417 5 1417
1417 5 1417
1653 5 1417
2387 5 1417
2852 5 1417
963 6 1417
1069 6 1417
1417 6 1417
1417 6 1417
1417 6 1417
1771 6 1417
2345 6 1417
2387 6 1417
2479 6 1417
3190 6 1417
.I 1418
.T
Examination Scheduling (Algorithm 286 [ZH])
.B
CACM June, 1966
.A
Peck, J. E. L.
Williams, M. R.
.N
CA660603a JB March 3, 1978 8:58 AM
.X
1418 5 1418
1418 5 1418
1418 5 1418
2350 5 1418
2354 5 1418
2355 5 1418
1418 6 1418
1418 6 1418
1418 6 1418
1521 6 1418
1521 6 1418
1597 6 1418
1597 6 1418
1679 6 1418
1883 6 1418
2040 6 1418
2350 6 1418
2350 6 1418
2354 6 1418
2354 6 1418
2355 6 1418
2355 6 1418
.I 1419
.T
Chebyshev Quadrature (Algorithm 279 [D1])
.B
CACM June, 1966
.A
Hopgood, F. R. A.
Litherland, C.
.N
CA660603b JB March 23, 1978 7:09 PM
.X
1355 5 1419
1419 5 1419
1419 5 1419
1419 5 1419
2619 5 1419
1419 6 1419
1419 6 1419
1429 6 1419
.I 1420
.T
New Uniform Pseudorandom Number Generator
.W
new multiplicative congruential pseudorandom
number generator discussed, which
modulus largest prime within accumulator capacity
multiplier primitive root
prime. generator passes usual statistical
tests addition least significant bits
appear random most significant bits-a
property which generators having modulus 2^k do
not possess.
.B
CACM June, 1966
.A
Hutchinson, D. W.
.N
CA660602 JB March 3, 1978 9:01 AM
.X
1420 5 1420
1420 5 1420
1420 5 1420
1691 5 1420
1293 6 1420
1420 6 1420
1631 6 1420
.I 1421
.T
Contribution Development ALGOL
.W
programming language similar many respects
ALGOL 60, but incorporating large number
improvements based six years experience
language, described detail. Part consists
introduction new language summary
changes made ALGOL 60, together
discussion motives behind there visions. Part II
rigorous definition proposed language.
Part III describes set proposed standard procedures
used language, including facilities
input/output.
.B
CACM June, 1966
.A
Wirth, N.
Hoare, C. A. R.
.N
CA660601 JB March 3, 1978 9:07 AM
.X
1380 5 1421
1421 5 1421
1421 5 1421
1421 5 1421
1552 5 1421
1693 5 1421
1781 5 1421
1854 5 1421
1860 5 1421
2060 5 1421
557 5 1421
123 6 1421
196 6 1421
919 6 1421
990 6 1421
1007 6 1421
1046 6 1421
1131 6 1421
1139 6 1421
1140 6 1421
1149 6 1421
1184 6 1421
1198 6 1421
1215 6 1421
1223 6 1421
1265 6 1421
1303 6 1421
1323 6 1421
1358 6 1421
1366 6 1421
1366 6 1421
1380 6 1421
1389 6 1421
1421 6 1421
1421 6 1421
1421 6 1421
1421 6 1421
1421 6 1421
1421 6 1421
1421 6 1421
1421 6 1421
1460 6 1421
1462 6 1421
1463 6 1421
1467 6 1421
1468 6 1421
1469 6 1421
1471 6 1421
1477 6 1421
1477 6 1421
1477 6 1421
1491 6 1421
1491 6 1421
1491 6 1421
1496 6 1421
1496 6 1421
1531 6 1421
1535 6 1421
1565 6 1421
1601 6 1421
1602 6 1421
1613 6 1421
1614 6 1421
1614 6 1421
1626 6 1421
1626 6 1421
1641 6 1421
1641 6 1421
1748 6 1421
1749 6 1421
1785 6 1421
1786 6 1421
1787 6 1421
1788 6 1421
205 6 1421
210 6 1421
224 6 1421
249 6 1421
1869 6 1421
288 6 1421
316 6 1421
378 6 1421
378 6 1421
381 6 1421
398 6 1421
2110 6 1421
11 6 1421
404 6 1421
410 6 1421
463 6 1421
464 6 1421
483 6 1421
3184 6 1421
3184 6 1421
3184 6 1421
3188 6 1421
584 6 1421
600 6 1421
680 6 1421
691 6 1421
731 6 1421
763 6 1421
799 6 1421
799 6 1421
.I 1422
.T
Eleven-Sixteenths Inch Perforated
Paper Tape (Proposed American Standard)
.B
CACM May, 1966
.N
CA660515 JB March 3, 1978 9:09 AM
.X
1422 5 1422
1422 5 1422
1422 5 1422
.I 1423
.T
Simple Algorithm Computing Generalized Inverse Matrix
.W
generalized inverse matrix important
analysis because provides extension
concept inverse which applies all matrices.
also has many applications numerical
analysis, but not widely used because existing
algorithms fairly complicated require
considerable storage space. simple extension has
been found conventional orthogonalization
method inverting non-singular matrices, which gives
generalized inverse little extra effort
no additional storage requirements. algorithm
gives generalized inverse any m
n matrix A, including special case m+n
non-singular case m>n rank(A)
= n. first case algorithm gives ordinary
inverse A. second case algorithm
yields ordinary least squares transformation matrix
INV(A'A)A' has advantage avoiding
loss significance which results forming product A'A explicitly.
.B
CACM May, 1966
.A
Rust, R.
Burrus, W. R.
Schneeberger, C.
.N
CA660514 JB March 3, 1978 9:22 AM
.X
1423 5 1423
1423 5 1423
1423 5 1423
.I 1424
.T
Automatic Analysis Electronic Digital Circuits Using List Processing
.W
mapping black diagrams digital circuits
list structures described, together
list processing program written Control
Data 3600 which uses mapping automatically
carry out circuit analysis.
.B
CACM May, 1966
.A
Shalla, L.
.N
CA660513 JB March 3, 1978 9:24 AM
.X
1424 5 1424
1424 5 1424
1424 5 1424
1846 5 1424
1380 6 1424
1424 6 1424
1484 6 1424
1572 6 1424
576 6 1424
.I 1425
.T
Flow Diagrams, Turing Machines
Languages Only Two Formation Rules
.W
first part paper, flow diagrams
introduced represent inter al. mappings
set into itself. Although not every diagram
decomposable into finite number given base
diagrams, becomes true semantical level due
suitable extension given set
basic mappings defined it. Two normalization
methods flow diagrams given. first has
three base diagrams; second, only two. second
part paper, second method applied
theory Turing machines. every Turing
machine provided two-way half-tape, there
associated similar machine, doing essentially
same job, but working tape obtained
first one interspersing alternate blank squares.
new machine belongs family, elsewhere
introduced, generated composition iteration
two machines L R. family proper
subfamily whole family Turing machines.
.B
CACM May, 1966
.A
Bohm, C.
Jacopini, G.
.N
CA660512 JB March 3, 1978 9:35 AM
.X
1425 4 1425
1781 4 1425
438 4 1425
762 4 1425
249 5 1425
1425 5 1425
1425 5 1425
1425 5 1425
2709 5 1425
2802 5 1425
3004 5 1425
1425 6 1425
1425 6 1425
1425 6 1425
2138 6 1425
2204 6 1425
2247 6 1425
2356 6 1425
2456 6 1425
2456 6 1425
2477 6 1425
3186 6 1425
.I 1426
.T
Simulation Hospital Admission Policy
.W
study described which simulates different
admission policies large specialized hospital.
objective determine better policies
stabilization admission census rates while
maintaining reasonably full hospital. There types
policies were examined: admission based percentages
discharge rates, discharge rates plus minus
constant, fixed authorizations independent
discharge rates. last type policy produced more stable
simulated results, put into practice,
improvements were realized.
.B
CACM May, 1966
.A
Smith, W. G.
Solomon Jr., M. B.
.N
CA660511 JB March 3, 1978 9:42 AM
.X
1426 5 1426
1426 5 1426
1426 5 1426
.I 1427
.T
Simulation Radioisotope Scans Computer
.W
radioisotope scanning, field which assuming
increasing importance medical diagnosis,
scan two-dimensional pattern made up dots.
Areas increased source activity represented
scan areas increased dot density. study
output scanners various characteristics,
program which simulates radioisotope scans has been
written PDP-1 computer auxiliary disk
storage cathode ray tube display. Past present
research using output simulator has
shown flexibility system important.
structure program can useful
simulation output any quantum-limited system.
.B
CACM May, 1966
.A
Pizer, S. M.
.N
CA660510 JB March 3, 1978 9:47 AM
.X
1427 5 1427
1427 5 1427
1427 5 1427
.I 1428
.T
SHOCK III, Computer System Aid
Management Critically III Patients
.W
SHOCK III, online digital computer system
assist physician, nurse paramedical
personnel monitoring reporting critically ill patients, described.
.B
CACM May, 1966
.A
Rockwell Jr., M. A.
Shubin, H.
Weil, M. H.
Meagher, P. F.
.N
CA660509 JB March 3, 1978 9:49 AM
.X
1428 5 1428
1428 5 1428
1428 5 1428
.I 1429
.T
Matrix Reduction Using Hungarian Method
Generation School Timetables
.W
application Kuhn's Hungarian Method
problem matrix reduction needed
Gotlieb's method timetable generation described.
method suited both hand computer
calculation. Devices improve efficiency
basic algorithm discussed.
.B
CACM May, 1966
.A
Lions, J.
.N
CA660508 JB March 3, 1978 9:52 AM
.X
1429 5 1429
1429 5 1429
1429 5 1429
2619 5 1429
2772 5 1429
2787 5 1429
1116 6 1429
1116 6 1429
1419 6 1429
1429 6 1429
1429 6 1429
1429 6 1429
.I 1430
.T
Multiple Precision Floating-Point Conversion
Decimal-to-Binary Vice Versa
.W
Decimal-to-binary binary-to-decimal floating-point
conversion often performed using
table powers 10^i, (ia positive integer)
converting base 10 base 2, using
table coefficient polynomial approximation
10^x, (0<=x<1) converting base 2
base 10. These tables occupy large storage region
case nonsingle precision conversion.
paper shows single small table suffices
floating-point conversion decimal
binary, vice versa, any useful precision.
.B
CACM May, 1966
.A
Mancino, O. G.
.N
CA660507 JB March 3, 1978 9:56 AM
.X
1430 5 1430
1430 5 1430
1430 5 1430
.I 1431
.T
Storage Mapping Function Data Structures
.W
Some basic facts certain data structures
reviewed efficient algorithm presented
constructing storage mapping function
structure structure's definition.
.B
CACM May, 1966
.A
Deuel, P.
.N
CA660506 JB March 3, 1978 9:58 AM
.X
1431 5 1431
1431 5 1431
1431 5 1431
.I 1432
.T
Incorporation Nonstandard Input/Output Devices into FORTRAN Systems
.W
FORTRAN system may readily modified
handle input/output nonstandard media
same basis which handles standard media.
done providing character-handling subroutine
suited nonstandard medium arranged called
otherwise unused output statement type
unit number. method used control output
alphanumeric information digital graph
plotter.
.B
CACM May, 1966
.A
Cohn, C. E.
.N
CA660505 JB March 3, 1978 10:01 AM
.X
1432 5 1432
1432 5 1432
1432 5 1432
.I 1433
.T
Note Linear Programming Algorithm Design: Combinatorial Problem
.W
linear programming models grow bigger
bigger size, much actual data must
memorized often put magnetic tape disk,
consequently there improportionality fast
rise consumption computer time.To cut down
expense, ever increasing effort made
design more efficient algorithms. paper
meant support effort. attempted
find some characteristics way pivot column
found. number repetitions certain
transfer data tape core memory considered.
After some simplification, problem restated
general way. generating function probability
distribution moment generating
function number repetitions found. Asymptotic
formulas given moments using
result paper S. Narumi [1]. results
may applied write very efficient routines
search extreme value table. Formulas
provide means calculating computer timings
case.
.B
CACM May, 1966
.A
Roes, P. B. M.
.N
CA660504 JB March 3, 1978 10:10 AM
.X
1433 5 1433
1433 5 1433
1433 5 1433
.I 1434
.T
Monte Carlo Algorithm Assigning Students Classes
.W
technique random choice illustrated
application problem assigning students
fixed schedule courses. Using technique
possible reduce eliminate difficulties
result popular section filled closed
before all students requesting requiring
have been scheduled. effectiveness automatic
scheduling retained without loss students
privilege picking favorite instructors.
.B
CACM May, 1966
.A
Macon, N.
Walker, E. E.
.N
CA660503 JB March 3, 1978 10:14 AM
.X
1434 5 1434
1434 5 1434
1434 5 1434
1540 5 1434
2209 5 1434
1434 6 1434
1434 6 1434
1540 6 1434
.I 1435
.T
Design Computer Simulation Experiments Industrial Systems
.W
aim paper provide background
information existing literature experimental
design techniques which may applicable design
computer simulation experiments industrial
systems. Although major emphasis placed analysis
variance techniques, three other techniques
data analysis considered-multiple ranking procedures,
sequential sampling spectral analysis.
paper treats four specific experimental design
problems several techniques solving them.
four experimental design problems are: (1)
problem stochastic convergence, (2) problem
factor selection, (3) problem motive
(4) many response problem.
.B
CACM May, 1966
.A
Burdick, D. S.
Naylor, T. H.
.N
CA660502 JB March 3, 1978 10:20 AM
.X
1435 5 1435
1435 5 1435
1435 5 1435
1517 5 1435
1435 6 1435
.I 1436
.T
Interchange Two Blocks Data (Algorithm 284 [K2])
.B
CACM May, 1966
.A
Fletcher, W.
.N
CA660501a JB March 3, 1978 10:21 AM
.X
1436 5 1436
1436 5 1436
1436 5 1436
.I 1437
.T
Mutual Primal-Dual Method (Algorithm 285 [H])
.B
CACM May, 1966
.A
Aird, T. J.
.N
CA660501b JB March 23, 1978 7:12 PM
.X
1437 5 1437
1437 5 1437
1437 5 1437
.I 1438
.T
Method Locating Zeros Complex Functions
.W
method computing index, winding
number, developed applied problem
finding zeros functions plane into plane.
.B
CACM April, 1966
.A
Cain Jr., G. L.
.N
CA660411 JB March 3, 1978 10:23 AM
.X
1438 5 1438
1438 5 1438
1438 5 1438
.I 1439
.T
Mechanization Curve Fitting Process: DATAN
.W
process fitting curve approximate data
problem creates engineer-programmer
defined. approach has also been defined system
has been written SRU 1107 mechanize
major portion process. techniques developed
accomplish mechanization largely
empirical, dependent their information
only actual data points.
.B
CACM April, 1966
.A
Simonsen, R. H.
Anketell, D. L.
.N
CA660410 JB March 3, 1978 10:26 AM
.X
1439 5 1439
1439 5 1439
1439 5 1439
.I 1440
.T
Starting Approximations Square Root Calculation IBM System/360
.W
Several starting approximations square
root calculation Newton's method presented
form facilitate their use IBM System/360 square
root routines. These approximations include
several range [1/16, 1], which interval
primary interest IBM System/360.
.B
CACM April, 1966
.A
Fike, C. T.
.N
CA660409 JB March 3, 1978 10:32 AM
.X
1015 4 1440
1346 4 1440
1440 4 1440
1440 4 1440
1645 4 1440
1932 4 1440
2159 4 1440
951 4 1440
962 5 1440
1440 5 1440
1440 5 1440
1440 5 1440
1566 5 1440
532 5 1440
1440 6 1440
.I 1441
.T
Methods Numerical Integration Applied
System Having Trivial Function Evaluations
.W
study has been made determine which methods
numerical integration require least
computation time given amount truncation error
applied particular system ordinary
differential equations function evaluations
relatively trivial. Recent methods due Butcher
Gear compared classic Runge-Kutta, Kutta-Nystrom
Adams methods. Some newer one-step
methods due Butcher found slightly superior,
but no one method found have any great
advantage over others application particular problem.
.B
CACM April, 1966
.A
Waters, J.
.N
CA660408 JB March 3, 1978 10:37 AM
.X
1441 5 1441
1441 5 1441
1441 5 1441
.I 1442
.T
Recorded Magnetic Tape Information Interchange
(800 CPI, NRZI)* (Proposed American Standard)
.B
CACM April, 1966
.N
CA660407 JB March 3, 1978 10:39 AM
.X
1442 5 1442
1442 5 1442
1442 5 1442
.I 1443
.T
Method Finding Least Squares Estimate
Intersection Point Two Helices Space
.W
helical trajectories two charged
particles moving away common point
magnetic field reconstructed measurements
tracks, reconstructed tracks perturbed
measurement other errors do not, general,
intersect. method given adjusting
reconstructed tracks least squares manner so they do intersect.
.B
CACM April, 1966
.A
Royston, R. J.
Gregory, J.
.N
CA660406 JB March 3, 1978 10:42 AM
.X
1443 5 1443
1443 5 1443
1443 5 1443
.I 1444
.T
Algorithm Generating Projective Reduction
Formulas Matrix Elements Many-Electron
Wavefunctions
.W
ALGOL procedure given automatically
generating formulas matrix elements arising
variational solution Schrodinger
equation many-electron systems.
.B
CACM April, 1966
.A
Reeves, C. M.
.N
CA660405 JB March 3, 1978 10:44 AM
.X
1334 4 1444
1396 4 1444
1444 4 1444
964 5 1444
1444 5 1444
1444 5 1444
1444 5 1444
.I 1445
.T
Use Computer Teach Introductory Statistics
.W
has always been obvious aid calculation
offered computer forces change
curricula mathematics, statistics, physics,
engineering other courses. Not so obvious
many pedagogic aids computer can offer
teaching subject matter. possibilities
giving student better technical well conceptual
understanding statistics were explored
number years College Medicine
University Cincinnati reported here.
.B
CACM April, 1966
.A
Sterling, T. D.
Pollack, S. V.
.N
CA660404 JB March 3, 1978 10:48 AM
.X
1445 5 1445
1445 5 1445
1445 5 1445
.I 1446
.T
Chebyshev Quadrature (Algorithm 279 [D1])
.B
CACM April, 1966
.A
Hopgood, F. R. A.
Litherland, C.
.N
CA660403a JB March 3, 1978 10:50 AM
.X
1446 5 1446
1446 5 1446
1446 5 1446
.I 1447
.T
Abscissas Weights Gregory Quadrature [D1])
.B
CACM April, 1966
.A
Welsch, J. H.
.N
CA660403b JB March 23, 1978 7:16 PM
.X
1447 5 1447
1447 5 1447
1447 5 1447
.I 1448
.T
Abscissas Weights Romberg Quadrature (Algorithm 281 [D1])
.B
CACM April, 1966
.A
Welsch, J. H.
.N
CA660403c JB March 23, 1978 7:17 PM
.X
1448 5 1448
1448 5 1448
1448 5 1448
.I 1449
.T
Derivatives (Algorithm 282 [S22])
.B
CACM April, 1966
.A
Gautschi, W.
.N
CA660403d JB March 23, 1978 7:18 PM
.X
1449 5 1449
1449 5 1449
1449 5 1449
2129 5 1449
1449 6 1449
.I 1450
.T
Simultaneous Displacement Polynomial
Roots if Real Simple (Algorithm 283 [C2])
.B
CACM April, 1966
.A
Kerner, I. O.
.N
CA660403e JB March 23, 1978 7:19 PM
.X
1450 5 1450
1450 5 1450
1450 5 1450
.I 1451
.T
Runge-Kutta Integration (Algorithm 9 [D2])
.B
CACM April, 1966
.A
Thacher Jr., H. C.
.N
CA660403f JB March 23, 1978 7:21 PM
.X
1451 5 1451
1451 5 1451
1451 5 1451
.I 1452
.T
Kutta-Merson (Algorithm 218 [D2]
.B
CACM April, 1966
.A
Bayer, G.
.N
CA660403g JB March 30, 1978 9:31 AM
.X
1452 5 1452
1452 5 1452
1452 5 1452
1633 5 1452
1452 6 1452
.I 1453
.T
Nonrecursive Method Syntax Specification
.W
use Kleene regular expression notation
describing algebraic language syntax,
particular ALGOL, described paper.
FORTRAN II computer program carrying out
elimination algorithm Gorn,similar Gaussian elimination
linear systems algebraic equations,
described. applied numerous smaller
languages, including some sublanguage ALGOL.
hand calculation result application algorithm
all ALGOL given, thus expressing
Revised ALGOL 1960 syntax completely nonrecursive
terms, far its context-free portion
concerned. description many ways far more
intuitively understood than previous recursive
description, suggested. paper also includes
results machine program, which does not
include simplification algorithm.
.B
CACM April, 1966
.A
Carr III, J. W.
Weiland, J.
.N
CA660402 JB March 3, 1978 11:02 AM
.X
1086 4 1453
1132 4 1453
1234 4 1453
1263 4 1453
1263 4 1453
1265 4 1453
1270 4 1453
1323 4 1453
1358 4 1453
1379 4 1453
1380 4 1453
1453 4 1453
1453 4 1453
1464 4 1453
1484 4 1453
1491 4 1453
1498 4 1453
1613 4 1453
1614 4 1453
1781 4 1453
1825 4 1453
1860 4 1453
1945 4 1453
2083 4 1453
2178 4 1453
2179 4 1453
2252 4 1453
2325 4 1453
2341 4 1453
2546 4 1453
2645 4 1453
2652 4 1453
2684 4 1453
2842 4 1453
2929 4 1453
2934 4 1453
3069 4 1453
669 4 1453
679 4 1453
691 4 1453
761 4 1453
949 4 1453
989 4 1453
989 5 1453
1453 5 1453
1453 5 1453
1453 5 1453
1613 5 1453
3184 5 1453
987 6 1453
1086 6 1453
1134 6 1453
1453 6 1453
3184 6 1453
.I 1454
.T
Simple User-Oriented Compiler Source Language
Programming Automatic Test Equipment
.W
nonprogrammer, difficulty using
language increases rapidly number
nonproblem-oriented conventions. simple language, even
if inelegant, which considers user's background
part problem may more effective than source
language containing subtle more powerful
capabilities. language described paper
used write computer programs which test electronic
equipment. Because testing process contains few
complex ideas, there little need elegance
redundancy highly syntax-oriented language.
simple direct language suffice
problem. eventual users language military
depot personnel cannot he expected
have computer programming skill significant programming
training. nonprogramming-oriented
user, essential create language using familiar
engineering statements; programming-oriented
conventions would have unnecessarily complicated his task.
.B
CACM April, 1966
.A
Scheff, B. H.
.N
CA660401 JB March 3, 1978 11:09 AM
.X
1454 5 1454
1454 5 1454
1454 5 1454
.I 1455
.T
TRAC, Procedure-Describing Language Reactive Typewriter
.W
description TRAC (Text Reckoning
Compiling) language processing algorithm
given. TRAC language developed basis
software package reactive typewriter.
TRAC language, one can write procedures
accepting, naming storing any character string
typewriter; modifying any string any way;
treating any string any time executable
procedure, name, text; printing
out any string. TRAC language based upon
extension generalization character strings
programming concept "macro." Through
ability TRAC accept store definitions
procedures, capabilities language can
indefinitely extended, can deal character
strings, integers Boolean vector variables.
.B
CACM March, 1966
.A
Mooers, C. N.
.N
CA660317 JB March 3, 1978 11:18 AM
.X
1455 5 1455
1455 5 1455
1455 5 1455
1530 5 1455
1531 5 1455
1565 5 1455
1703 5 1455
1945 5 1455
2036 5 1455
823 6 1455
914 6 1455
915 6 1455
917 6 1455
984 6 1455
989 6 1455
990 6 1455
1012 6 1455
1084 6 1455
1098 6 1455
1122 6 1455
1138 6 1455
1139 6 1455
1141 6 1455
1162 6 1455
1185 6 1455
1200 6 1455
1223 6 1455
1265 6 1455
1336 6 1455
1358 6 1455
1396 6 1455
1455 6 1455
1455 6 1455
1455 6 1455
1455 6 1455
1455 6 1455
1455 6 1455
1477 6 1455
1487 6 1455
1491 6 1455
1496 6 1455
1565 6 1455
205 6 1455
483 6 1455
584 6 1455
669 6 1455
680 6 1455
763 6 1455
.I 1456
.T
Storage Retrieval Aspects Meaning Directed Graph Structures
.W
experimental system uses LISP make
conceptual dictionary described. dictionary
associates each English word syntactic information,
definitional material, references
contexts which has been used define other words.
Such relations class inclusion, possession,
active passive actions used definitional
material. resulting structure serves
powerful vehicle research logic question answering.
Examples methods inputting information
answering simple English questions given.
important conclusion that, although LISP
other list processing languages ideally suited
producing complex associative structures, they
inadequate vehicles language processing any
large scale-at east until they can use auxiliary
memory continuous extension core memory.
.B
CACM March, 1966
.A
Simmons, R. F.
.N
CA660316 JB March 3, 1978 11:25 AM
.X
1155 4 1456
1456 4 1456
1468 4 1456
1515 4 1456
1699 4 1456
1856 4 1456
2127 4 1456
1324 5 1456
1456 5 1456
1456 5 1456
1456 5 1456
.I 1457
.T
Data Manipulation Programming Problems
Automatic Information Retrieval
.W
Automatic information retrieval programs require
manipulation variety different
data structures, including linear text, sparse matrices,
tree list structures. main data
manipulations performed automatic information
systems first briefly reviewed. variety
data representations which have been used describe
structured information then examined,
characteristics various processing languages
outlined light procedures requiring
implementation. Advantages these programming languages
retrieval application examined,
suggestions made design programming
facilities aid information retrieval.
.B
CACM March, 1966
.A
Salton, G.
.N
CA660315 JB March 3, 1978 11:35 AM
.X
1457 4 1457
1236 5 1457
1457 5 1457
1457 5 1457
1457 5 1457
.I 1458
.T
Online Programming
.W
transition has been made off line
online programming, there number
changes working conditions noted. These changes
environment make necessary corresponding
changes processes related producing checking
out programs. main, not
programming language itself which must changed
provide facility online user;
system surrounding programming language.
paper online environment its effect
programming discussed.
.B
CACM March, 1966
.A
Schwartz, J. I.
.N
CA660314 JB March 3, 197811:44 AM
.X
1458 4 1458
1523 4 1458
1603 4 1458
1698 4 1458
1747 4 1458
1748 4 1458
1854 4 1458
1877 4 1458
1960 4 1458
2377 4 1458
2378 4 1458
2497 4 1458
2558 4 1458
2625 4 1458
2632 4 1458
2840 4 1458
2941 4 1458
3105 4 1458
3144 4 1458
1458 5 1458
1458 5 1458
1458 5 1458
1471 5 1458
.I 1459
.T
Requirements Real-Time Languages
.W
Real-time languages have different requirements
other programming languages because
special nature their applications, environment
which their object programs executed
environment which they may compiled.
may not language extensions ultimately
advance developments field. Progress may made
attacking special compiling executing
system problems must solved.
.B
CACM March, 1966
.A
Opler, A.
.N
CA660313 JB March 3, 1978 11:48 AM
.X
1459 5 1459
1459 5 1459
1459 5 1459
.I 1460
.T
Evolution Meta-Assembly Program
.W
generalized assembler called "meta-assembler"
described. meta-assembler defined
factors which contributed its evolution presented.
meta-assembler made function
assembly program described. Finally, implication
meta-assemblers compiler design
discussed.
.B
CACM March, 1966
.A
Ferguson, D. E.
.N
CA660312 JB March 3, 1978 11:56 AM
.X
1358 5 1460
1460 5 1460
1460 5 1460
1460 5 1460
1781 5 1460
123 6 1460
196 6 1460
919 6 1460
990 6 1460
1007 6 1460
1046 6 1460
1131 6 1460
1139 6 1460
1140 6 1460
1149 6 1460
1198 6 1460
1215 6 1460
1223 6 1460
1265 6 1460
1303 6 1460
1323 6 1460
1358 6 1460
1366 6 1460
1421 6 1460
1460 6 1460
1460 6 1460
1462 6 1460
1463 6 1460
1467 6 1460
1468 6 1460
1477 6 1460
1491 6 1460
1496 6 1460
1531 6 1460
1535 6 1460
1565 6 1460
1601 6 1460
1602 6 1460
1613 6 1460
1614 6 1460
1626 6 1460
1641 6 1460
1787 6 1460
1788 6 1460
205 6 1460
205 6 1460
224 6 1460
249 6 1460
288 6 1460
316 6 1460
381 6 1460
398 6 1460
11 6 1460
404 6 1460
410 6 1460
463 6 1460
464 6 1460
483 6 1460
3184 6 1460
3184 6 1460
3188 6 1460
584 6 1460
600 6 1460
680 6 1460
691 6 1460
729 6 1460
763 6 1460
799 6 1460
799 6 1460
.I 1461
.T
Discussion Summary Operating Systems
.B
CACM March, 1966
.N
CA660311 JB March 3, 1978 1:26 PM
.X
1461 5 1461
1461 5 1461
1461 5 1461
.I 1462
.T
Multilevel Operating Systems
.W
Basic software all newer computers
built well-established need standard
operating systems. implies all applications-no
matter large, complex time consuming-must
operate under (or, more precisely, top of) standard
system. Large applications require supervisory
monitors which handle problems similar those
operating systems, but different level.
Sometimes, still third even fourth such level
required desirable. leads naturally
concept multilevel systems-similar vertically,
but different horizontally. Proper division
responsibility between levels leads greater efficiency
less logical complexity, while actually
enhancing capability.
.B
CACM March, 1966
.A
Orchard-Hays, W.
.N
CA660310 JB March 3, 1978 1:31 PM
.X
1462 5 1462
1462 5 1462
1462 5 1462
1781 5 1462
123 6 1462
196 6 1462
919 6 1462
990 6 1462
1007 6 1462
1046 6 1462
1131 6 1462
1139 6 1462
1140 6 1462
1149 6 1462
1198 6 1462
1215 6 1462
1223 6 1462
1265 6 1462
1303 6 1462
1323 6 1462
1358 6 1462
1366 6 1462
1421 6 1462
1460 6 1462
1462 6 1462
1463 6 1462
1467 6 1462
1468 6 1462
1477 6 1462
1491 6 1462
1496 6 1462
1531 6 1462
1535 6 1462
1565 6 1462
1601 6 1462
1602 6 1462
1613 6 1462
1614 6 1462
1626 6 1462
1641 6 1462
1787 6 1462
1788 6 1462
205 6 1462
224 6 1462
249 6 1462
288 6 1462
316 6 1462
381 6 1462
398 6 1462
11 6 1462
404 6 1462
410 6 1462
463 6 1462
464 6 1462
483 6 1462
3184 6 1462
3188 6 1462
584 6 1462
600 6 1462
680 6 1462
691 6 1462
763 6 1462
799 6 1462
.I 1463
.T
More Extensible Machines
.W
One most salient characteristics extensible
machines (EM) facility providing
system control over program-to-program program-to-data
linkage (e.g., address connection).
intent paper expand clarify remarks
concerning program-to-program program-to-data
linkage were embodied authors' previous
paper EM concepts, to, finally, trace
employment linkage mechanisms through
various levels programming languages.
.B
CACM March, 1966
.A
Leonard, G. F.
Goodroe, J. R.
.N
CA660309 JB March 3, 1978 1:34 PM
.X
1463 5 1463
1463 5 1463
1463 5 1463
1781 5 1463
123 6 1463
196 6 1463
919 6 1463
990 6 1463
1007 6 1463
1046 6 1463
1131 6 1463
1139 6 1463
1140 6 1463
1149 6 1463
1198 6 1463
1215 6 1463
1223 6 1463
1265 6 1463
1303 6 1463
1323 6 1463
1358 6 1463
1366 6 1463
1421 6 1463
1460 6 1463
1462 6 1463
1463 6 1463
1467 6 1463
1468 6 1463
1477 6 1463
1491 6 1463
1496 6 1463
1531 6 1463
1535 6 1463
1565 6 1463
1601 6 1463
1602 6 1463
1613 6 1463
1614 6 1463
1626 6 1463
1641 6 1463
1787 6 1463
1788 6 1463
205 6 1463
224 6 1463
249 6 1463
288 6 1463
316 6 1463
381 6 1463
398 6 1463
11 6 1463
404 6 1463
410 6 1463
463 6 1463
464 6 1463
483 6 1463
3184 6 1463
3188 6 1463
584 6 1463
600 6 1463
680 6 1463
691 6 1463
763 6 1463
799 6 1463
.I 1464
.T
ALGOL Compiler: Construction Use
Relation Elaborate Operating System
.W
ALGOL translator has been prepared integrated
into IBSYS Operating System. Assembly
"go" features IBSYS permit immediate execution
optional listings, decks debugging information.
Using chain feature IBSYS, links written
MAP FORTRAN well ALGOL may called
ALGOL main program. addition, procedures coded
MAP may included any ALGOL program.
Although assembly plus loading time exceeds compilation
time, total time satisfactory
user gets ease facility which fully compensating.
.B
CACM March, 1966
.A
Boussard, J. C.
.N
CA660308 JB March 3, 1978 1:41 PM
.X
249 4 1464
254 4 1464
272 4 1464
1086 4 1464
1102 4 1464
1109 4 1464
1132 4 1464
1140 4 1464
1188 4 1464
1234 4 1464
1263 4 1464
1265 4 1464
1270 4 1464
1306 4 1464
1323 4 1464
1358 4 1464
1379 4 1464
1380 4 1464
1453 4 1464
1464 4 1464
1464 4 1464
1484 4 1464
1491 4 1464
1491 4 1464
1498 4 1464
1613 4 1464
1614 4 1464
1767 4 1464
1781 4 1464
1781 4 1464
1787 4 1464
1825 4 1464
1860 4 1464
1949 4 1464
321 4 1464
2059 4 1464
2083 4 1464
2126 4 1464
2178 4 1464
2179 4 1464
2252 4 1464
2325 4 1464
2341 4 1464
2546 4 1464
435 4 1464
437 4 1464
463 4 1464
483 4 1464
491 4 1464
2645 4 1464
2652 4 1464
2684 4 1464
2732 4 1464
2842 4 1464
2929 4 1464
2934 4 1464
560 4 1464
583 4 1464
3069 4 1464
3073 4 1464
627 4 1464
631 4 1464
632 4 1464
642 4 1464
644 4 1464
653 4 1464
669 4 1464
679 4 1464
680 4 1464
691 4 1464
761 4 1464
761 4 1464
762 4 1464
763 4 1464
123 4 1464
140 4 1464
919 4 1464
949 4 1464
989 4 1464
989 4 1464
196 5 1464
1464 5 1464
1464 5 1464
1464 5 1464
3184 5 1464
.I 1465
.T
Program Translation Viewed General Data Processing Problem
.W
Efficiency dictates overall effectiveness
compiler increased all means
available. compiler have substantial useful
life needs clear logical structure, reliability
sound data processing techniques. compiler must
based fixed conventions preserve efficiency
reliability; empty options default conventions
violate dictum. Use structure associate
various parts program economy
features promote clarity reliability.
.B
CACM March, 1966
.A
Naur, P.
.N
CA660307 JB March 3, 1978 1:45 PM
.X
1465 5 1465
1465 5 1465
1465 5 1465
.I 1466
.T
Discussion Summary Graphical Languages
.B
CACM March, 1966
.N
CA660306 JB March 3, 1978 1:46 PM
.X
1466 5 1466
1466 5 1466
1466 5 1466
2341 5 1466
990 6 1466
1468 6 1466
1466 6 1466
3184 6 1466
.I 1467
.T
Graphical ServiceSystem Variable Syntax
.W
Man-machine interaction many fields endeavor
should greatly facilitated near
future through use interactive graphical languages.
provide variety display scope communication
procedures, Graphic Service system which functions
generalized graphical language translator,
being developed aid definition
well use new graphical languages.
.B
CACM March, 1966
.A
Roberts, L. G.
.N
CA660305 JB March 3, 1978 1:49 PM
.X
1467 5 1467
1467 5 1467
1467 5 1467
1767 5 1467
1781 5 1467
123 6 1467
196 6 1467
196 6 1467
919 6 1467
990 6 1467
1007 6 1467
1046 6 1467
1131 6 1467
1139 6 1467
1140 6 1467
1149 6 1467
1198 6 1467
1215 6 1467
1223 6 1467
1265 6 1467
1303 6 1467
1323 6 1467
1358 6 1467
1366 6 1467
1421 6 1467
1460 6 1467
1462 6 1467
1463 6 1467
1467 6 1467
1467 6 1467
1468 6 1467
1468 6 1467
1477 6 1467
1491 6 1467
1496 6 1467
1496 6 1467
1531 6 1467
1535 6 1467
1565 6 1467
1601 6 1467
1602 6 1467
1613 6 1467
1614 6 1467
1626 6 1467
1641 6 1467
1787 6 1467
1788 6 1467
205 6 1467
224 6 1467
249 6 1467
288 6 1467
316 6 1467
381 6 1467
398 6 1467
11 6 1467
404 6 1467
410 6 1467
463 6 1467
464 6 1467
483 6 1467
3184 6 1467
3188 6 1467
584 6 1467
600 6 1467
680 6 1467
691 6 1467
763 6 1467
799 6 1467
.I 1468
.T
Syntax-Directed Interpretation Classes Pictures
.W
descriptive scheme classes pictures based
labeling techniques using parallel processing
algorithms proposed author some years ago.
Since then much work has been done applying
bubble chamber pictures. parallel processing
simulator, originally written IBM 7094
system, has now been rewritten CDC 3600 system.
paper descriptive models considering their
specific application bubble chamber pictures.
description generated phase can
embedded larger "conversation" program explained
means certain specific example
has been worked out. partial generative grammar
"handwritten" English letters given,
also few computer-generated outputs using grammar
parallel processing simulator mentioned
earlier.
.B
CACM March, 1966
.A
Narasimhan, R.
.N
CA660304 JB March 3, 1978 1:56 PM
.X
1155 4 1468
1456 4 1468
1468 4 1468
1515 4 1468
1699 4 1468
1856 4 1468
2127 4 1468
1324 5 1468
1468 5 1468
1468 5 1468
1468 5 1468
1767 5 1468
1781 5 1468
2341 5 1468
123 6 1468
196 6 1468
196 6 1468
919 6 1468
990 6 1468
990 6 1468
1007 6 1468
1046 6 1468
1131 6 1468
1139 6 1468
1140 6 1468
1149 6 1468
1198 6 1468
1215 6 1468
1223 6 1468
1265 6 1468
1303 6 1468
1323 6 1468
1358 6 1468
1366 6 1468
1421 6 1468
1460 6 1468
1462 6 1468
1463 6 1468
1467 6 1468
1467 6 1468
1468 6 1468
1468 6 1468
1468 6 1468
1466 6 1468
1477 6 1468
1491 6 1468
1496 6 1468
1496 6 1468
1531 6 1468
1535 6 1468
1565 6 1468
1601 6 1468
1602 6 1468
1613 6 1468
1614 6 1468
1626 6 1468
1641 6 1468
1787 6 1468
1788 6 1468
205 6 1468
224 6 1468
249 6 1468
288 6 1468
316 6 1468
381 6 1468
398 6 1468
11 6 1468
404 6 1468
410 6 1468
463 6 1468
464 6 1468
483 6 1468
3184 6 1468
3184 6 1468
3188 6 1468
584 6 1468
600 6 1468
680 6 1468
691 6 1468
763 6 1468
799 6 1468
.I 1469
.T
Next 700 Programming Languages
.W
family unimplemented computing languages
described intended span differences
application area unified framework. framework
dictates rules uses user-coined
names, conventions characterizing functional
relationships. Within framework
design specific language splits into two independent
parts. One choice written appearances
programs (or more generally, their physical representation).
other choice abstract
entities (such numbers, character-strings, lists
them, functional relations among them) can
referred language. system biased
towards "expressions" rather than "statements."
includes nonprocedural(purely functional) subsystem
aims expand class users' needs
can met single print-instruction, without sacrificing
important properties make
conventional right-hand-side expressions easy construct understand.
.B
CACM March, 1966
.A
Landin, P. J.
.N
CA660303 JB March 3, 1978 2:05 PM
.X
1469 4 1469
1486 4 1469
1491 4 1469
1781 4 1469
2178 4 1469
2326 4 1469
2470 4 1469
2684 4 1469
3044 4 1469
1303 5 1469
1469 5 1469
1469 5 1469
1469 5 1469
2060 5 1469
2294 5 1469
2470 5 1469
3124 5 1469
1303 6 1469
1380 6 1469
1421 6 1469
1469 6 1469
1469 6 1469
1469 6 1469
1469 6 1469
1477 6 1469
1491 6 1469
210 6 1469
1834 6 1469
1869 6 1469
2060 6 1469
2110 6 1469
2264 6 1469
.I 1470
.T
Structure Programming Languages
.W
following identified major components
every programming language: (1) elementary
program statement, (2) mechanisms linking elementary
statements together, (3) means which
program can obtain data inputs. Several alternative
forms each these components described,
compared evaluated. Many examples, frequently
list processing languages, illustrate forms
described. Elementary program statements usually take
form commands, requirements, implicit
specifications. command imperative statement
commands action taken. requirement
describes effect achieved without saying anything
actions taken. implicit
specification similar requirement, but programmer
must understand actions taken
achieve desired effect. Subroutines may entered
explicitly, execute call, function
composition. Explicitly called subroutines generally
require special linkage conventions. execute
subroutine call syntactically indistinguishable
basic instruction programming language.
Function composition convenient alternative
explicit call. three principal ways
getting inputs routines (1) referring
data itself, (2) referring data
"name", (3) referring implicitly means
variables functions. Names useful
entry points into permanent data structures, but can
error-causing distractions other contexts.
author discusses advantages, disadvantages, factors
influencing choice form component
language. He concludes suggesting evolution
programming languages toward one which
permit all most convenient ways structuring
programs, organizing systems, referencing
data.
.B
CACM March, 1966
.A
Raphael, B.
.N
CA660302 JB March 3, 1978 2:20 PM
.X
1470 5 1470
1470 5 1470
1470 5 1470
.I 1471
.T
Programming Semantics Multiprogrammed computations
.W
semantics defined number meta-instructions
which perform operation essential
writing programs multiprogrammed computer
systems. These meta-instructions relate parallel
processing, protection separate computations, program
debugging, sharing among users memory
segments other computing objects, names which
hierarchically structured. language
sophistication contemplated midway between assembly
language advanced algebraic language.
.B
CACM March, 1966
.A
Dennis,J. B.
VanHorn, E. C.
.N
CA660301 JB March 3, 1978 2:25 PM
.X
1471 4 1471
1471 4 1471
1774 4 1471
972 4 1471
276 5 1471
1458 5 1471
1471 5 1471
1471 5 1471
1471 5 1471
1523 5 1471
1603 5 1471
1698 5 1471
1747 5 1471
1748 5 1471
1854 5 1471
1877 5 1471
1960 5 1471
2377 5 1471
2378 5 1471
2497 5 1471
2558 5 1471
2625 5 1471
2632 5 1471
2840 5 1471
2941 5 1471
3105 5 1471
3144 5 1471
800 5 1471
1421 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1471 6 1471
1746 6 1471
1746 6 1471
1748 6 1471
1749 6 1471
1749 6 1471
1749 6 1471
1749 6 1471
1749 6 1471
1753 6 1471
1854 6 1471
2060 6 1471
2080 6 1471
2080 6 1471
2182 6 1471
2298 6 1471
2356 6 1471
2358 6 1471
2358 6 1471
2436 6 1471
2438 6 1471
2491 6 1471
2558 6 1471
2597 6 1471
2624 6 1471
2625 6 1471
2625 6 1471
2626 6 1471
2629 6 1471
2632 6 1471
2632 6 1471
2651 6 1471
2868 6 1471
2939 6 1471
3068 6 1471
.I 1472
.T
Description High Capacity, Fast
Turnaround University Computing Center
.W
operating system UNIVAC 1107 Case
Institute reviewed. system interest
because low turnaround times achieved, high
throughput achieved lack operating
staff. Turnaround times below 5 minutes job volume
above 75,000 per quarter year one reported.
.B
CACM February, 1966
.A
Lynch, W.C.
.N
CA660212 JB March 3, 1978 2:28 PM
.X
1472 5 1472
1472 5 1472
1472 5 1472
1550 5 1472
1304 6 1472
1472 6 1472
.I 1473
.T
Stability Fourth Order Runge-Kutta
Method Solution Systems Differential
Equations
.W
problem region stability
fourth order-Runge-Kutta method solution
systems differential equations studied.
region can characterized means linear
transformation but can not given closed form.
paper, region determined
electronic digital computer Z22.
.B
CACM February, 1966
.A
Karim, A. I. A.
.N
CA660211 JB March 3, 1978 2:31 PM
.X
1473 5 1473
1473 5 1473
1473 5 1473
.I 1474
.T
Tests Probabilistic Models Propagation Roundoff Errors
.W
any prolonged computation generally
assumed accumulated effect roundoff
errors some sense statistical. purpose
paper give precise descriptions certain
probabilistic models roundoff error, then
describe series experiments testing
validity these models. concluded models
general very good. Discrepancies
both rare mild. test techniques can also
used experiment various types special
arithmetic.
.B
CACM February, 1966
.A
Hull, T. E.
Swenson, J. R.
.N
CA660210 JB March 3, 1978 2:37 PM
.X
1474 5 1474
1474 5 1474
1474 5 1474
2525 5 1474
1474 6 1474
.I 1475
.T
Dribble Posting Master File
.W
Many business applications employ sequential
magnetic tape rather than random-access storage
techniques process very small number transactions
against voluminous master file. such
situations, may prove economical avoid creating
new master file during each updating run producing
instead dribble ledger containing only those master
file accounts which have experienced activity.
.B
CACM February, 1966
.A
Head, R. V.
.N
CA660209 JB March 3, 1978 2:41 PM
.X
1475 5 1475
1475 5 1475
1475 5 1475
.I 1476
.T
Control Procedures Data Communication-An ASA Progress Report
.W
Sectional Committee X.3 American Standards
Association, has charged one its task
groups, X3.3.4, responsibility "Define specify
functional control requirements characteristics
governing operation digital data generating
receiving systems interconnected communication
system." effort primarily directed toward systems
employing American Standard Code Information
Interchange (ASCII). paper represents progress
report work group toward proposal
national international standardization
field control procedures. describes both
old new work task group. new work
presented detail, while work has
been presented earlier papers ["Control Procedures
Data Communication," Task Group document X3.3.4/44,
May 1964: "Transparent-Mode Control Procedures Data
Communication," Task Group document X3.3.4/58,
December, 1964: Comm. ACM 8 (Apr. 1965), 203-206; "Control
Procedures Data Communications," Task
Group document X3.3.4/60, March, 1965] retained here
summary form. Many concepts principles
described herein have been submitted International
Organization Standardization via earlier
papers now embodied working papers organization.
.B
CACM February, 1966
.N
CA660208JB March 3, 1978 3:04 PM
.X
1476 5 1476
1476 5 1476
1476 5 1476
.I 1477
.T
EULER: Generalization ALGOL, its Formal Definition: Part II*
.B
CACM February, 1966
.A
Wirth, N.
Weber, H.
.N
CA660207 JB March 3, 1978 3:10 PM
.X
1379 5 1477
1477 5 1477
1477 5 1477
1477 5 1477
1693 5 1477
1781 5 1477
1836 5 1477
1945 5 1477
2015 5 1477
2060 5 1477
2061 5 1477
2091 5 1477
2179 5 1477
2546 5 1477
2698 5 1477
2708 5 1477
3045 5 1477
823 6 1477
123 6 1477
196 6 1477
914 6 1477
915 6 1477
917 6 1477
919 6 1477
984 6 1477
989 6 1477
990 6 1477
990 6 1477
1007 6 1477
1012 6 1477
1046 6 1477
1084 6 1477
1098 6 1477
1122 6 1477
1131 6 1477
1138 6 1477
1139 6 1477
1139 6 1477
1140 6 1477
1140 6 1477
1141 6 1477
1141 6 1477
1149 6 1477
1191 6 1477
1198 6 1477
1200 6 1477
1215 6 1477
1223 6 1477
1223 6 1477
1263 6 1477
1265 6 1477
1265 6 1477
1303 6 1477
1323 6 1477
1336 6 1477
1358 6 1477
1366 6 1477
1366 6 1477
1380 6 1477
1396 6 1477
1421 6 1477
1421 6 1477
1421 6 1477
1455 6 1477
1460 6 1477
1462 6 1477
1463 6 1477
1467 6 1477
1468 6 1477
1469 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1477 6 1477
1487 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1491 6 1477
1496 6 1477
1496 6 1477
1531 6 1477
1535 6 1477
1565 6 1477
1601 6 1477
1602 6 1477
1613 6 1477
1614 6 1477
1614 6 1477
1626 6 1477
1641 6 1477
1781 6 1477
1781 6 1477
1781 6 1477
1787 6 1477
1787 6 1477
1788 6 1477
205 6 1477
1825 6 1477
1825 6 1477
210 6 1477
224 6 1477
249 6 1477
1869 6 1477
288 6 1477
316 6 1477
381 6 1477
398 6 1477
2015 6 1477
2110 6 1477
2110 6 1477
2110 6 1477
2111 6 1477
11 6 1477
2126 6 1477
2534 6 1477
2534 6 1477
2556 6 1477
2556 6 1477
404 6 1477
404 6 1477
410 6 1477
463 6 1477
464 6 1477
483 6 1477
483 6 1477
3184 6 1477
3184 6 1477
3184 6 1477
3184 6 1477
3188 6 1477
577 6 1477
584 6 1477
584 6 1477
600 6 1477
669 6 1477
669 6 1477
680 6 1477
680 6 1477
680 6 1477
680 6 1477
691 6 1477
761 6 1477
763 6 1477
763 6 1477
773 6 1477
799 6 1477
799 6 1477
.I 1478
.T
Exponential Curve Fit (Algorithm 275 [E2])
.B
CACM February, 1966
.A
Deily, G. R.
.N
CA660206a JB March 3, 1978 3:11 PM
.X
1478 5 1478
1478 5 1478
1478 5 1478
2694 5 1478
1478 6 1478
.I 1479
.T
Constrained Exponential Curve Fit (Algorithm 276 [E2])
.B
CACM February, 1966
.A
Deily, G. R.
.N
CA660206b JB March 23, 1978 7:27 PM
.X
1479 5 1479
1479 5 1479
1479 5 1479
.I 1480
.T
Computation Chebyshev Series Coefficients (Algorithm 277[C6])
.B
CACM February, 1966
.A
Smith, L. B.
.N
CA660206c JB March 23, 1978 7:28 PM
.X
1480 5 1480
1480 5 1480
1480 5 1480
1639 5 1480
1480 6 1480
.I 1481
.T
Graph Plotter (Algorithm 278 [J6])
.B
CACM February, 1966
.A
Lloyd, P.
.N
CA660206d JB March 23, 1978 7:30 PM
.X
1481 5 1481
1481 5 1481
1481 5 1481
.I 1482
.T
BUGSYS: Programming System Picture Processing-Not Debugging
.W
BUGSYS picture processing measuring
system depends upon pictorial input
computer's memory. BUGSYS can used many
types applications. particular, authors
have used system analysis linear graphs.
main concept system use
collection programmable pointers, which
visualized family "bugs."
.B
CACM February, 1966
.A
Ledley, R. S.
Jacobsen, J.
Belson, M.
.N
CA660205 JB March 3, 1978 3:16 PM
.X
1482 5 1482
1482 5 1482
1482 5 1482
.I 1483
.T
Comparison FORTRAN Language
Implementation Several Computers
.W
feature-by-feature comparison made five
different implementations FORTRAN IV representing
three different manufacturers. table constructed
showing, possible, use each feature
each implementation. Only those items which
different from, have been added FORTRAN II
shown.
.B
CACM February, 1966
.A
Wright, D. L.
.N
CA660204 JB March 3, 1978 3:19 PM
.X
1483 5 1483
1483 5 1483
1483 5 1483
.I 1484
.T
Language Describing Functions Synchronous Systems*
.W
Before design system started,
exact function desired should specified.
suggested computer-oriented language
used purpose. inadequacies
standard programming languages description
systems discussed, dialect ALGOL which
suitable describing synchronous systems introduced.
These descriptions can used simulation
automatic design system described,
addition communicating system specifications.
.B
CACM February, 1966
.A
Parnas, D. L.
.N
CA660203 JB March 3, 1978 3:23 PM
.X
1086 4 1484
1132 4 1484
1234 4 1484
1263 4 1484
1265 4 1484
1270 4 1484
1323 4 1484
1358 4 1484
1379 4 1484
1380 4 1484
1453 4 1484
1464 4 1484
1484 4 1484
1491 4 1484
1498 4 1484
1613 4 1484
1614 4 1484
1781 4 1484
1825 4 1484
1860 4 1484
2083 4 1484
2178 4 1484
2179 4 1484
2252 4 1484
2325 4 1484
2341 4 1484
2546 4 1484
2645 4 1484
2652 4 1484
2684 4 1484
2842 4 1484
2929 4 1484
2934 4 1484
3069 4 1484
669 4 1484
679 4 1484
691 4 1484
761 4 1484
949 4 1484
989 4 1484
1484 5 1484
1484 5 1484
1484 5 1484
1846 5 1484
3184 5 1484
1380 6 1484
1424 6 1484
1484 6 1484
1572 6 1484
576 6 1484
.I 1485
.T
Structure Programming Languages
.W
paper major components every
programming language identified as: (1)
elementary program statement, (2) mechanisms linking
elementary statements together, (3) means
which program can obtain data inputs. Several
alternative forms each these components
also described, compared evaluated. Many examples,
frequently list processing languages, illustrate
forms described. advantages, disadvantages
factors influencing choice form component
language discussed, paper concludes
suggestion programming languages
evolve toward one which permit all most convenient
ways structuring programs, organizing
systems referencing data.
.B
CACM February, 1966
.A
Raphael, B.
.N
CA660202 JB March 3, 1978 3:46 PM
.X
1024 4 1485
1051 4 1485
1098 4 1485
1214 4 1485
1380 4 1485
1388 4 1485
1393 4 1485
1485 4 1485
1487 4 1485
1549 4 1485
1570 4 1485
1878 4 1485
1946 4 1485
1957 4 1485
2168 4 1485
2723 4 1485
2857 4 1485
3112 4 1485
1485 5 1485
1485 5 1485
1485 5 1485
731 5 1485
.I 1486
.T
Reprogramming Machine
.W
paper description given model
programming system which directed programming
language has library storing user's items.
Rules given transforming programs written
language rearranging items
library so they share their common parts.
Some speculations made mechanical
detection common parts patterns library
items could help user solve his problems,
relationships between behavior
reprogramming machine human intelligent behavior.
.B
CACM February, 1966
.A
Burge, W. H.
.N
CA660201 JB March 3, 1978 3:50 PM
.X
1024 4 1486
1051 4 1486
1102 4 1486
1132 4 1486
1390 4 1486
1469 4 1486
1486 4 1486
1486 4 1486
1491 4 1486
1549 4 1486
1706 4 1486
1781 4 1486
1826 4 1486
1878 4 1486
378 4 1486
2060 4 1486
2155 4 1486
2168 4 1486
2178 4 1486
2326 4 1486
2470 4 1486
2684 4 1486
2719 4 1486
2723 4 1486
2838 4 1486
2842 4 1486
2855 4 1486
2879 4 1486
3044 4 1486
3077 4 1486
3080 4 1486
3106 4 1486
627 4 1486
106 4 1486
1303 5 1486
210 5 1486
1486 5 1486
1486 5 1486
1486 5 1486
.I 1487
.T
ELIZA-A Computer Program Study ofNatural
Language Communication Between Man Machine
.W
ELIZA program operating within MAC
time-sharing system MIT which makes certain
kinds natural language conversation between man
computer possible. Input sentences analyzed
basis decomposition rules which triggered
key words appearing input text. Responses
generated reassembly rules associated selected
decomposition rules. fundamental technical
problems which ELIZA concerned are: (1)the
identification key words, (2) discovery
minimal context, (3) choice appropriate transformations,
(4) generation responses absence
key words, (5) provision editing capability
ELIZA "scripts". discussion some
psychological issues relevant ELIZA approach
well future developments concludes paper.
.B
CACM January, 1966
.A
Weizenbaum, J.
.N
CA660108 JB March 3, 1978 4:00 PM
.X
1024 4 1487
1051 4 1487
1098 4 1487
1214 4 1487
1380 4 1487
1388 4 1487
1393 4 1487
1485 4 1487
1487 4 1487
1549 4 1487
1570 4 1487
1878 4 1487
1946 4 1487
1957 4 1487
2168 4 1487
2723 4 1487
2857 4 1487
3112 4 1487
1400 5 1487
1487 5 1487
1487 5 1487
1487 5 1487
1553 5 1487
1945 5 1487
2127 5 1487
2396 5 1487
2730 5 1487
731 5 1487
823 6 1487
914 6 1487
915 6 1487
917 6 1487
984 6 1487
989 6 1487
990 6 1487
1012 6 1487
1084 6 1487
1098 6 1487
1122 6 1487
1138 6 1487
1139 6 1487
1141 6 1487
1155 6 1487
1200 6 1487
1223 6 1487
1265 6 1487
1324 6 1487
1336 6 1487
1396 6 1487
1455 6 1487
1477 6 1487
1487 6 1487
1487 6 1487
1487 6 1487
1487 6 1487
1487 6 1487
1487 6 1487
1491 6 1487
1496 6 1487
1527 6 1487
1781 6 1487
1856 6 1487
1856 6 1487
2092 6 1487
2127 6 1487
483 6 1487
584 6 1487
669 6 1487
680 6 1487
763 6 1487
.I 1488
.T
Programming Decision Tables FORTRAN, COBOL ALGOL
.W
simple broad-based approach programming
decision tables FORTRAN COBOL developed
presented. inputs standard form, defined
paper, programming any decision
table can done one two FORTRAN statements,
two COBOL statements, if COMPUTE verb
available COBOL processor. shown
method applicable even there
more than two mutually exclusive states one, two
more table conditions. further shown
multi-state conditions decision tables can often
simplify programming. method outlined has
further advantage all possible combinations
conditions considered. shown
suggested procedure easily implemented ALGOL.
.B
CACM January, 1966
.A
Veinott, C. G.
.N
CA660107 JB March 3, 1978 4:08 PM
.X
1354 4 1488
1354 4 1488
1488 4 1488
1488 4 1488
1994 4 1488
2053 4 1488
2053 4 1488
2220 4 1488
2220 4 1488
2273 4 1488
2273 4 1488
2726 4 1488
2856 4 1488
1237 5 1488
1327 5 1488
1488 5 1488
1488 5 1488
1488 5 1488
1548 5 1488
2726 5 1488
1172 6 1488
1327 6 1488
1354 6 1488
1488 6 1488
1488 6 1488
1489 6 1488
1489 6 1488
1548 6 1488
2220 6 1488
2221 6 1488
2263 6 1488
.I 1489
.T
Data, Documentation Decision Tables
.W
business data processing systems,
necessary able define document data,
files, programs decision rules way adequately
represents both (1) their changing information
content, (2) their continuous interaction. Tabular
description makes possible, being notably
objective, through economical cost time
systems must analyzed programs prepared
modified. show quickly tabular techniques
make unfamiliar system manageable, detailed
example self-test provided.
.B
CACM January, 1966
.A
Fisher, D. L.
.N
CA660106 JB March 3, 1978 4:13 PM
.X
1489 5 1489
1489 5 1489
1489 5 1489
1548 5 1489
2220 5 1489
2726 5 1489
1172 6 1489
1172 6 1489
1237 6 1489
1327 6 1489
1327 6 1489
1354 6 1489
1354 6 1489
1488 6 1489
1488 6 1489
1489 6 1489
1489 6 1489
1489 6 1489
1548 6 1489
1548 6 1489
250 6 1489
2220 6 1489
2221 6 1489
2263 6 1489
.I 1490
.T
One Inch Perforated Paper Tape Information
Interchange (Proposed American Standard)
.B
CACM January, 1966
.N
CA660105 JB March 3, 1978 4:14 PM
.X
1490 5 1490
1490 5 1490
1490 5 1490
.I 1491
.T
EULER: Generalization ALGOL, its Formal Definition: Part I*
.W
method defining programming languages
developed which introduces rigorous relationship
between structure meaning. structure
language defined phrase structure syntax,
meaning terms effects which execution
sequence interpretation rules exerts
upon fixed set variables, called Environment.
There exists one-to-one correspondence between
syntactic rules interpretation rules determined
sequence corresponding syntactic reductions
which constitute parse. individual interpretation
rules explained terms elementary
d obvious algorithmic notation. constructive
method evaluating text provided,
certain decidable classes languages their unambiguity
proved. example, generalization
ALGOL described full detail demonstrate
concepts like block-structure, procedures, parameters,
etc. can defined adequately precisely method.
.B
CACM January, 1966
.A
Wirth, N.
Weber, H.
.N
CA660104 JB March 3, 1978 4:22 PM
.X
249 4 1491
254 4 1491
272 4 1491
1037 4 1491
1086 4 1491
1102 4 1491
1109 4 1491
1132 4 1491
1140 4 1491
1188 4 1491
1234 4 1491
1234 4 1491
1263 4 1491
1265 4 1491
1270 4 1491
1306 4 1491
1323 4 1491
1358 4 1491
1358 4 1491
1379 4 1491
1380 4 1491
1453 4 1491
1464 4 1491
1464 4 1491
1469 4 1491
1484 4 1491
1486 4 1491
1491 4 1491
1491 4 1491
1491 4 1491
1491 4 1491
1491 4 1491
1498 4 1491
1613 4 1491
1614 4 1491
1767 4 1491
1781 4 1491
1781 4 1491
1781 4 1491
1781 4 1491
1787 4 1491
1825 4 1491
1860 4 1491
1949 4 1491
321 4 1491
2059 4 1491
2061 4 1491
2083 4 1491
2126 4 1491
2178 4 1491
2178 4 1491
2179 4 1491
2252 4 1491
2325 4 1491
2326 4 1491
2341 4 1491
2470 4 1491
2546 4 1491
435 4 1491
437 4 1491
463 4 1491
483 4 1491
491 4 1491
2645 4 1491
2652 4 1491
2684 4 1491
2684 4 1491
2732 4 1491
2842 4 1491
2929 4 1491
2934 4 1491
560 4 1491
583 4 1491
3044 4 1491
3069 4 1491
3073 4 1491
627 4 1491
631 4 1491
632 4 1491
642 4 1491
644 4 1491
653 4 1491
669 4 1491
679 4 1491
680 4 1491
691 4 1491
761 4 1491
761 4 1491
762 4 1491
763 4 1491
123 4 1491
140 4 1491
919 4 1491
949 4 1491
989 4 1491
989 4 1491
196 5 1491
1140 5 1491
1303 5 1491
1491 5 1491
1491 5 1491
1491 5 1491
1542 5 1491
1683 5 1491
1693 5 1491
1781 5 1491
1787 5 1491
1836 5 1491
1945 5 1491
2060 5 1491
2061 5 1491
2082 5 1491
2091 5 1491
2152 5 1491
2179 5 1491
2340 5 1491
2356 5 1491
2546 5 1491
2603 5 1491
2698 5 1491
2708 5 1491
2824 5 1491
2982 5 1491
2986 5 1491
3045 5 1491
3093 5 1491
3184 5 1491
729 5 1491
823 6 1491
123 6 1491
196 6 1491
196 6 1491
914 6 1491
915 6 1491
917 6 1491
919 6 1491
970 6 1491
984 6 1491
989 6 1491
990 6 1491
990 6 1491
1007 6 1491
1012 6 1491
1046 6 1491
1084 6 1491
1098 6 1491
1122 6 1491
1131 6 1491
1138 6 1491
1139 6 1491
1139 6 1491
1140 6 1491
1140 6 1491
1141 6 1491
1141 6 1491
1141 6 1491
1141 6 1491
1149 6 1491
1191 6 1491
1191 6 1491
1198 6 1491
1200 6 1491
1215 6 1491
1215 6 1491
1223 6 1491
1223 6 1491
1265 6 1491
1265 6 1491
1303 6 1491
1323 6 1491
1336 6 1491
1358 6 1491
1366 6 1491
1366 6 1491
1380 6 1491
1396 6 1491
1421 6 1491
1421 6 1491
1421 6 1491
1455 6 1491
1460 6 1491
1462 6 1491
1463 6 1491
1467 6 1491
1468 6 1491
1469 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1477 6 1491
1487 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1491 6 1491
1496 6 1491
1496 6 1491
1496 6 1491
1531 6 1491
1535 6 1491
1565 6 1491
1601 6 1491
1602 6 1491
1613 6 1491
1614 6 1491
1614 6 1491
1626 6 1491
1641 6 1491
1683 6 1491
1683 6 1491
1683 6 1491
1767 6 1491
1781 6 1491
1781 6 1491
1781 6 1491
1787 6 1491
1787 6 1491
1788 6 1491
205 6 1491
1825 6 1491
1825 6 1491
210 6 1491
1836 6 1491
1836 6 1491
1836 6 1491
224 6 1491
224 6 1491
249 6 1491
1869 6 1491
288 6 1491
316 6 1491
381 6 1491
398 6 1491
2015 6 1491
2110 6 1491
2110 6 1491
2110 6 1491
2111 6 1491
11 6 1491
2126 6 1491
2179 6 1491
2179 6 1491
2227 6 1491
2340 6 1491
2340 6 1491
2340 6 1491
2534 6 1491
2534 6 1491
2556 6 1491
2556 6 1491
2708 6 1491
404 6 1491
404 6 1491
410 6 1491
463 6 1491
464 6 1491
483 6 1491
483 6 1491
3184 6 1491
3184 6 1491
3184 6 1491
3188 6 1491
3198 6 1491
518 6 1491
577 6 1491
584 6 1491
584 6 1491
600 6 1491
669 6 1491
680 6 1491
680 6 1491
680 6 1491
680 6 1491
680 6 1491
691 6 1491
763 6 1491
763 6 1491
763 6 1491
763 6 1491
773 6 1491
799 6 1491
799 6 1491
799 6 1491
.I 1492
.T
Serrev (Algorithm 273 [C1])
.B
CACM January, 1966
.A
Thacher Jr., H. C.
.N
CA660103a JB March 3, 1978 4:23 PM
.X
1492 5 1492
1492 5 1492
1492 5 1492
.I 1493
.T
Generation Hilbert Derived Test Matrix (Algorithm 274 [F1])
.B
CACM January, 1966
.A
Boothroyd, J.
.N
CA660103b JB March 23, 1978 7:32 PM
.X
1493 5 1493
1493 5 1493
1493 5 1493
.I 1494
.T
Complete Elliptic Integral Second Kind (Algorithm 56 [S21])
.B
CACM January, 1966
.A
Larssen, G. M.
.N
CA660103c JB March 23, 1978 7:33 PM
.X
1494 4 1494
1494 5 1494
1494 5 1494
1494 5 1494
1495 5 1494
1494 6 1494
.I 1495
.T
Solution Transcendental Equations Series Reversion
.W
algorithm developed expressing
solution Y, equation F(Y) = G(X) power
series (X - X0) f g given power series,and
root Y0, known Y=X0. algorithm
illustrated equation Y^Y = X, i.e., (1+y)*ln(1+y) = ln(1+x).
.B
CACM January, 1966
.A
Thacher Jr., H. C.
.N
CA660102 JB March 3, 1978 4:27 PM
.X
1495 4 1495
1494 5 1495
1495 5 1495
1495 5 1495
1495 5 1495
1495 6 1495
.I 1496
.T
Formal Semantics Computer Languages
its Application Compiler-Compiler
.W
semantic meta-language has been developed
representing meanings statements
large class computer languages. meta-language
has been basis construction efficient,
functioning compiler-compiler. informal discussion
meta-language based example
complete translator small language presented.
.B
CACM January, 1966
.A
Feldman, J. A.
.N
CA660101 JB March 3, 1978 4:31 PM
.X
1046 4 1496
1086 4 1496
1105 4 1496
1139 4 1496
1140 4 1496
1234 4 1496
1263 4 1496
1265 4 1496
1496 4 1496
1496 4 1496
1496 4 1496
1683 4 1496
1768 4 1496
1781 4 1496
1787 4 1496
1824 4 1496
1945 4 1496
2061 4 1496
2126 4 1496
2546 4 1496
464 4 1496
584 4 1496
631 4 1496
653 4 1496
680 4 1496
763 4 1496
795 4 1496
799 4 1496
945 4 1496
1137 5 1496
1141 5 1496
1396 5 1496
1496 5 1496
1496 5 1496
1496 5 1496
1767 5 1496
1781 5 1496
1787 5 1496
1860 5 1496
1945 5 1496
1988 5 1496
2252 5 1496
404 5 1496
823 6 1496
123 6 1496
196 6 1496
196 6 1496
196 6 1496
914 6 1496
915 6 1496
917 6 1496
919 6 1496
964 6 1496
984 6 1496
989 6 1496
990 6 1496
990 6 1496
1007 6 1496
1012 6 1496
1028 6 1496
1029 6 1496
1046 6 1496
1083 6 1496
1084 6 1496
1098 6 1496
1122 6 1496
1131 6 1496
1132 6 1496
1138 6 1496
1139 6 1496
1139 6 1496
1140 6 1496
1141 6 1496
1141 6 1496
1149 6 1496
1198 6 1496
1200 6 1496
1214 6 1496
1215 6 1496
1215 6 1496
1223 6 1496
1223 6 1496
1265 6 1496
1265 6 1496
1278 6 1496
1303 6 1496
1323 6 1496
1334 6 1496
1336 6 1496
1358 6 1496
1358 6 1496
1365 6 1496
1366 6 1496
1366 6 1496
1386 6 1496
1387 6 1496
1388 6 1496
1389 6 1496
1392 6 1496
1393 6 1496
1394 6 1496
1395 6 1496
1396 6 1496
1396 6 1496
1397 6 1496
1421 6 1496
1421 6 1496
1455 6 1496
1460 6 1496
1462 6 1496
1463 6 1496
1467 6 1496
1467 6 1496
1468 6 1496
1468 6 1496
1477 6 1496
1477 6 1496
1487 6 1496
1491 6 1496
1491 6 1496
1491 6 1496
1496 6 1496
1496 6 1496
1496 6 1496
1496 6 1496
1496 6 1496
1496 6 1496
1496 6 1496
1496 6 1496
1531 6 1496
1535 6 1496
1565 6 1496
1601 6 1496
1602 6 1496
1613 6 1496
1614 6 1496
1626 6 1496
1626 6 1496
1641 6 1496
1641 6 1496
1781 6 1496
1785 6 1496
1786 6 1496
1787 6 1496
1788 6 1496
205 6 1496
224 6 1496
224 6 1496
249 6 1496
284 6 1496
288 6 1496
316 6 1496
378 6 1496
381 6 1496
381 6 1496
398 6 1496
11 6 1496
11 6 1496
14 6 1496
2155 6 1496
404 6 1496
407 6 1496
410 6 1496
463 6 1496
464 6 1496
483 6 1496
483 6 1496
3184 6 1496
3184 6 1496
3184 6 1496
3188 6 1496
3199 6 1496
3200 6 1496
3201 6 1496
3202 6 1496
3203 6 1496
3204 6 1496
561 6 1496
584 6 1496
584 6 1496
600 6 1496
669 6 1496
680 6 1496
680 6 1496
691 6 1496
730 6 1496
763 6 1496
763 6 1496
763 6 1496
799 6 1496
799 6 1496
.I 1497
.T
Normalization Requirement
Divisor Divide- and- Correct Methods
.W
paper presents analysis normalization
requirement divisor divide-and-correct
method. analysis made subject condition
not more than one correction required
obtain true quotient character, trial
estimate got division two-precision
segment every partial remainder suitably rounded
single-precision divisor. (This segmented division
denoted here (2, 1) precision basic division.)
found normalization requirement
could narrowed down smaller range divisors,
provided magnitude character next
leading character divisor known. If,
however, normalization eliminated one
has choose proper higher precision segments operands
basic division. Also considered
possibility eliminating normalization
increase number corrections quotient
estimate got (2, 1) precision basic division.
shown such scheme economical only
small radices.
.B
CACM December, 1967
.A
Krishnamurthy, E. V.
Nandi, S. K.
.N
CA671210 JB February 26, 1978 2:15 PM
.X
1026 4 1497
1258 4 1497
1258 4 1497
1292 4 1497
1292 4 1497
1497 4 1497
1497 4 1497
1497 4 1497
1497 4 1497
1593 4 1497
1975 4 1497
1975 4 1497
2605 4 1497
107 5 1497
1026 5 1497
1292 5 1497
1497 5 1497
1497 5 1497
1497 5 1497
1593 5 1497
1975 5 1497
1026 6 1497
1292 6 1497
1497 6 1497
.I 1498
.T
ALCOR Illinois 7090/7094 Post Mortem Dump
.W
dump technique programs written ALGOL
60 described. technique provides
intelligible analysis unsuccessful computation
process terms original source program.
.B
CACM December, 1967
.A
Bayer, R.
Gries, D.
Paul, M.
Wiehle, H. R.
.N
CA671209 JB February 26, 1978 2:18 PM
.X
1086 4 1498
1132 4 1498
1234 4 1498
1263 4 1498
1265 4 1498
1270 4 1498
1323 4 1498
1358 4 1498
1379 4 1498
1380 4 1498
1453 4 1498
1464 4 1498
1484 4 1498
1491 4 1498
1498 4 1498
1498 4 1498
1613 4 1498
1614 4 1498
1781 4 1498
1781 4 1498
1787 4 1498
1825 4 1498
1860 4 1498
2083 4 1498
2178 4 1498
2179 4 1498
2252 4 1498
2325 4 1498
2341 4 1498
2546 4 1498
2645 4 1498
2652 4 1498
2684 4 1498
2842 4 1498
2929 4 1498
2934 4 1498
3069 4 1498
669 4 1498
679 4 1498
691 4 1498
761 4 1498
949 4 1498
989 4 1498
1215 5 1498
1498 5 1498
1498 5 1498
1498 5 1498
3184 5 1498
.I 1499
.T
Chebyschev Curve-Fit (revised) (Algorithm 318 [E2])
.B
CACM December, 1967
.A
Boothroyd, J.
.N
CA671208a JB February 26, 1978 2:20 PM
.X
1499 5 1499
1499 5 1499
1499 5 1499
.I 1500
.T
Chebyschev Curve-Fit (Algorithm 91 [E2])
.B
CACM December, 1967
.A
Boothroyd, J.
.N
CA671208b JB March 23, 1978 2:11 PM
.X
1500 5 1500
1500 5 1500
1500 5 1500
.I 1501
.T
Eigenvectors 2n x 2n Matrix
.W
has been known eigenvalues
certain 2n x 2n matrix can obtained use
two smaller matrices order n which can easily
constructed. algorithm given obtain
eigenvectors 2n x 2n matrix use
eigenvectors smaller matrices.
.B
CACM December, 1967
.A
Charmonman, S.
.N
CA671207 JB February 26, 1978 2:22 PM
.X
1501 5 1501
1501 5 1501
1501 5 1501
.I 1502
.T
Online Editor
.W
online, interactive system test editing
described detail, remarks
theoretical experimental justification its form.
Emphasis throughout system providing
maximum convenience power user. Notable
features its ability handle any piece
text, content-searching facility, character-by-character
editing operations. editor
can programmed limited extent.
.B
CACM December, 1967
.A
Deutsch, L. P.
Lampson, B. W.
.N
CA671206 JB February 26, 1978 2:25 PM
.X
1502 5 1502
1502 5 1502
1502 5 1502
2299 5 1502
2501 5 1502
2629 5 1502
2915 5 1502
3114 5 1502
1502 6 1502
1502 6 1502
1502 6 1502
1502 6 1502
1502 6 1502
1641 6 1502
1751 6 1502
1900 6 1502
2380 6 1502
2499 6 1502
2745 6 1502
.I 1503
.T
SIMSCRIPT-FORTRAN Case Study
.W
Two programs vehicle dispatching model,
one written 7040 SIMSCRIPT other
7040 FORTRAN IV compared. comparison made
terms basic program design decisions, storage
requirements, computer time used, ease making
changes. SIMSCRIPT program, primary
design considerations center around choice model
variables, model changing events, model testing.
FORTRAN program, basic design problems relate
representation passage time,
allocation storage, organization input
data. comparison these differently designed
programs shows SIMSCRIPT program uses more computer
storage more computer time, but requires
fewer program changes introduce model revisions.
.B
CACM December, 1967
.A
Weinert, A. E.
.N
CA671205 JB February 26, 1978 2:30 PM
.X
1503 4 1503
1781 4 1503
1860 4 1503
2091 4 1503
1366 5 1503
1503 5 1503
1503 5 1503
1503 5 1503
.I 1504
.T
Algorithms Finding Fundamental Set
Cycles Undirected Linear Graph
.W
Given adjacency matrix graph, algorithm
presented paper finds spanning
tree then constructs set fundamental cycles.
Our algorithm slower than algorithm presented
Welch ratio N/3 (N number nodes)
but requires less storage. graphs large
number nodes edges, storage limited our
algorithm superior Welch's; however,
graphs small, machine storage very large,
Welch's algorithm superior. Timing estimates
storage requirements both methods presented.
.B
CACM December, 1967
.A
Gotlieb, C. C.
Corneil, D. G.
.N
CA671204 JB February 26, 19782:35 PM
.X
1504 4 1504
3040 4 1504
1145 5 1504
1504 5 1504
1504 5 1504
1504 5 1504
1847 5 1504
1961 5 1504
2052 5 1504
1008 6 1504
1013 6 1504
1369 6 1504
1504 6 1504
1504 6 1504
1504 6 1504
1540 6 1504
1847 6 1504
.I 1505
.T
System Organization Resource Allocation
.W
paper introduces system resource management
using concepts "process," facility,"
"event." Except processor no attempt has
been made give serious suggestions policy
followed resource allocation. However, basic
framework provided which system analyst
can express solutions resource management problems.
paper divided into tutorial presentation,
description system primitives, small collection
examples use primitives.
.B
CACM December, 1967
.A
Dahm, D. M.
Gerbstadt, F. H.
Pacelli, M. M.
.N
CA671203 JB February 26, 1978 2:40 PM
.X
1505 5 1505
1505 5 1505
1505 5 1505
.I 1506
.T
LACONIQ Monitor: Time Sharing Online Dialogues
.W
LACONIQ (Laboratory Computer Online Inquiry)
Monitor developed primarily support
non-numerical applications such retrieval very
large files means "dialogue" between
system user retrieval application. monitor
designed so could work small
computer (an IBM System 360/30). Therefore techniques
resource allocation were important.
reason use core storage, computational facilities,
input-output were all scheduled. unusual
feature system event-driven rather
than clock-driven. program segments called
into execution remote CRT consoles invariably
run completion rather than "rolled-out"
brought back later time.
.B
CACM December, 1967
.A
Drew, D. L.
.N
CA671202 JB February 26, 1978 2:45 PM
.X
1506 5 1506
1506 5 1506
1506 5 1506
.I 1507
.T
Multiprogramming Environment Online Data Acquis ition Analysis
.W
experimental system acquis ition analysis
large bodies data derived scientific
experiments described. Its architecture implementation
largely based certain objectives
characteristics general data analysis scheme.
Early applications have been oriented towards
investigation data obtained biological research.
Some problems encountered chosen
approach discussed.
.B
CACM December, 1967
.A
Lockemann, P. C.
Knutsen, W. D.
.N
CA671201 JB February 26, 1978 2:48 PM
.X
1507 5 1507
1507 5 1507
1507 5 1507
1712 5 1507
1507 6 1507
.I 1508
.T
Magnetic Tape Labels Information Interchange (Proposed USA Standard)
.B
CACM November, 1967
.N
CA671109 JB February 26, 1978 2:49 PM
.X
1508 5 1508
1508 5 1508
1508 5 1508
.I 1509
.T
Recorded Magnetic Tape Information Interchange
(200 CPI, NRZI) (Proposed USA Standard)
.B
CACM November, 1967
.N
CA671108 JB February 26, 1978 2:52 PM
.X
1509 5 1509
1509 5 1509
1509 5 1509
.I 1510
.T
Finding Solution N Functional Equations
N Unknown (Algorithm 314 [C5])
.B
CACM November, 1967
.A
Dulley, D.B.
Pitteway, L. V.
.N
CA671107a JB February 26, 1978 2:54 PM
.X
1510 5 1510
1510 5 1510
1510 5 1510
.I 1511
.T
Damped Taylor's Series Method Minimizing
Sum Squares Solving Systems
Nonlinear Equations
.B
CACM November, 1967
.A
Spath, H.
.N
CA671107b JB March 23, 1978 2:17 PM
.X
1511 5 1511
1511 5 1511
1511 5 1511
1820 5 1511
1511 6 1511
.I 1512
.T
Solution Simultaneous Non-Linear Equations (Algorithm 316[C5])
.B
CACM November, 1967
.A
Brown, K. M.
.N
CA671107c JB March 23, 1978 2:19 PM
.X
1512 5 1512
1512 5 1512
1512 5 1512
.I 1513
.T
PERMUTATION (Algorithm 317 [G6])
.B
CACM November, 1967
.A
Robinson, C. L.
.N
CA671107d JB March 23, 1978 2:21 PM
.X
1513 5 1513
1513 5 1513
1513 5 1513
.I 1514
.T
Expected Gain Adjust ing Matched Term Retrieval Systems
.W
file adjustment procedure based maximizing
Bayes expected gain proposed matched
term retrieval systems. expected gain its probability
distribution derived function
of: (1) prior proportion omitted terms, (2)
coefficient separation between two distributions
corresponding values adjustment statistic.
example evaluates gain parameters typical
information retrieval system.
.B
CACM November, 1967
.A
Shumway, R. H.
.N
CA671106 JB February 26, 1978 2:59 PM
.X
1514 5 1514
1514 5 1514
1514 5 1514
.I 1515
.T
Computer System Inference Execution Data Retrieval
.W
paper presents RAND project concerned
use computers assistants
logical analysis large collections factual data.
system called Relational Data File developed
purpose. Relational Data File briefly
detailed problems arising its implementation
discussed.
.B
CACM November, 1967
.A
Levien, R. E.
.N
CA671105 JB February 26, 1978 3:02 PM
.X
1155 4 1515
1456 4 1515
1468 4 1515
1515 4 1515
1515 4 1515
1699 4 1515
1856 4 1515
2096 4 1515
2127 4 1515
2127 4 1515
2210 4 1515
1155 5 1515
1324 5 1515
1515 5 1515
1515 5 1515
1515 5 1515
2046 5 1515
2710 5 1515
1515 6 1515
1515 6 1515
2046 6 1515
2715 6 1515
616 6 1515
.I 1516
.T
Automatic Data Compression
.W
"information explosion" noted recent
years makes essential storage requirements
all information kept minimum. fully automatic
rapid three-part compressor which can
used "any" body information greatly reduce
slow external storage requirements increase
rate information transmission through computer
described paper. system
also automatically decode compressed information
item-by-item basis required.
three component compressors, which can used separately
accomplish their specific tasks, discussed:
NUPAK automatic compression numerical data, ANPAK
automatic compression "any" information,
IOPAK further compression information stored tape cards.
.B
CACM November, 1967
.A
Marron, B. A.
DeMaine, P. A. D.
.N
CA671104 JB February 26, 1978 3:08 PM
.X
1516 5 1516
1516 5 1516
1516 5 1516
.I 1517
.T
Methods Analyzing Data Computer Simulation Experiments
.W
paper addresses itself problem
analyzing data generated computer simulations
economic systems. We first turn hypothetical firm,
whose operation represented single-channel,
multistation queueing model. firm seeks maximize
total expected profit coming period
selecting one five operating plans, each
plan incorporates certain marketing strategy,
allocation productive inputs, total cost.
results simulated activity under each
plan subjected F-test, two multiple comparison
methods, multiple ranking method. We
illustrate, compare, evaluate these techniques.
paper adopts position particular
technique analysis (possibly not any one above)
chosen experimenter should expression
his experimental objective: F-test tests homogeneity
plans; multiple comparison methods
quantify their differences; multiple ranking methods
directly identify one best plan best
plans.
.B
CACM November, 1967
.A
Naylor, T. H.
Wertz, K.
Wonnacott, T. H.
.N
CA671103 JB February 26, 1978 3:15 PM
.X
1517 4 1517
1435 5 1517
1517 5 1517
1517 5 1517
1517 5 1517
.I 1518
.T
Experimental Model System/360
.W
problem predicting performance
modern computer systems formidable. One general
technique which can ease problem macroscopic simulation.
paper reports applicability
technique System/360. paper describes
experimental model System/360-its hardware,
software, its environment. measures system performance
produced model consist statistics
relating turnaround time, throughput, hardware utilization,
software utilization, queueing processes.
model mechanized SIMSCRIPT consists
some 1750 statements. auxiliary programs,
Job Generator, creates automatically properties
System/360 jobs get simulated.
.B
CACM November, 1967
.A
Katz, J. H.
.N
CA671102 JB February 26,1978 3:20 PM
.X
1518 5 1518
1518 5 1518
1518 5 1518
1805 5 1518
1912 5 1518
1518 6 1518
1518 6 1518
1572 6 1518
1748 6 1518
.I 1519
.T
GEORGE 3-A General Purpose Time Sharing Operating System
.W
Operating System described which
run wide variety configurations
I.C.T. 1900, can handle large number online console
users while same time running several
off line (background) jobs. system not oriented
towards either mode can either batch
processing system (such ATLAS Supervisor, IBSYS,
GECOS), multiaccess system (resembling,
user, CTSS MULTICS), both simultaneously,
depending installation, which can adjust
Schedulers. Both online users off line jobs use
common Command Language. system includes
Multilevel device-independent File Store.
.B
CACM November, 1967
.A
Oestreicher, M. D.
Bailey, M. J.
Strauss, J. I.
.N
CA671101 JB February 27, 1978 1:47 PM
.X
1519 5 1519
1519 5 1519
1519 5 1519
.I 1520
.T
Absolute Value Square Root Complex Number (Algorithm 312 [A2])
.B
CACM October, 1967
.A
Friedland, P.
.N
CA671012a JB February 27, 1978 1:49 PM
.X
1520 5 1520
1520 5 1520
1520 5 1520
.I 1521
.T
Multi-Dimensional Partition Generator (Algorithm 313 [A1])
.B
CACM October, 1967
.A
Bratley, P.
McKay, J. K. S.
.N
CA671012b JB March 23, 1978 2:26 PM
.X
1521 5 1521
1521 5 1521
1521 5 1521
2354 5 1521
2355 5 1521
1418 6 1521
1418 6 1521
1521 6 1521
1521 6 1521
1597 6 1521
1597 6 1521
1679 6 1521
1883 6 1521
2040 6 1521
2350 6 1521
2350 6 1521
2354 6 1521
2355 6 1521
.I 1522
.T
Chebyschev Quadrature (Algorithm 279 [D1])
.B
CACM October, 1967
.A
Hillstrom, K.
.N
CA671012c JB March 23, 1978 2:31 PM
.X
1522 5 1522
1522 5 1522
1522 5 1522
.I 1523
.T
SHARER, Time Sharing System CDC 6600
.W
time sharing system embedded within
standard batch processing system CDC 6600
described. system general purpose file-based,
providing facilities file input, manipulation,
editing, compilation, conversational execution.
uses simple scheme system extension
machine only one relocation memory bound register.
No attempt made use reentrant code,
simulate segmentation paging. Implementation
time approximately six man-years,
majority code being written FORTRAN.
.B
CACM October, 1967
.A
Harrison, M. C.
Schwartz, J. T.
.N
CA671011 JB February 27, 1978 1:53 PM
.X
1458 4 1523
1523 4 1523
1603 4 1523
1698 4 1523
1747 4 1523
1748 4 1523
1854 4 1523
1877 4 1523
1960 4 1523
2377 4 1523
2378 4 1523
2497 4 1523
2558 4 1523
2625 4 1523
2632 4 1523
2840 4 1523
2941 4 1523
3105 4 1523
3144 4 1523
1471 5 1523
1523 5 1523
1523 5 1523
1523 5 1523
1657 5 1523
2080 5 1523
2357 5 1523
2536 5 1523
1523 6 1523
1523 6 1523
1523 6 1523
1523 6 1523
1829 6 1523
2035 6 1523
.I 1524
.T
Stopping Criterion Polynomial Root Finding
.W
searching root polynomial,
generally difficult know just
accept number adequate approximation root.
paper algorithm presented which
allows one terminate iteration process
basis calculated bounds roundoff error
which occurs evaluating polynomial. stopping
criterion has been tested numerous examples
has been found serve satisfactory means
accepting complex number zero real
polynomial.
.B
CACM October, 1967
.A
Adams, D. A.
.N
CA671009 JB February 27, 1978 1:56 PM
.X
1524 4 1524
1524 4 1524
1524 4 1524
1931 4 1524
2214 4 1524
2544 4 1524
1197 5 1524
1524 5 1524
1524 5 1524
1524 5 1524
311 5 1524
2544 5 1524
879 5 1524
1524 6 1524
311 6 1524
2214 6 1524
.I 1525
.T
Computing Fast Fourier Transform
.W
Cooley Tukey have proposed fast algorithm
computing complex Fourier transform
have shown major time savings using compute
large transforms digital computer. n
power two, computing time algorithm
proportional n log2 n, major improvement over
other methods computing time proportional n^2.
paper, fast Fourier transform algorithm
briefly reviewed fast difference equation methods
accurately computing needed trigonometric
function values given. problem computing
large Fourier transform system virtual
memory considered, solution proposed.
method has been used compute complex Fourier
transforms size n = 2^16 computer 2^15
words core storage; exceeds factor
eight maximum radix two transform size fixed
allocation amount core storage.
method has also been used compute large mixed radix
transforms. scaling plan computing
fast Fourier transform fixed-point arithmetic also given.
.B
CACM October, 1967
.A
Singleton, R. C.
.N
CA671008 JB February 27, 1978 2:03 PM
.X
1525 5 1525
1525 5 1525
1525 5 1525
1668 5 1525
1669 5 1525
1679 5 1525
1728 5 1525
2859 5 1525
1525 6 1525
1525 6 1525
1525 6 1525
1525 6 1525
1525 6 1525
1647 6 1525
1669 6 1525
1676 6 1525
1785 6 1525
.I 1526
.T
Multiprogramming under Page Demand Strategy
.W
model multiprogramming particular
computer system using page demand strategy
developed. Analysis model used predict
performance (measured average usage
CPU) user programs typical those arising
interactive time sharing environment.
effect several hardware modifications also
analyzed. parameter, readily calculated
hardware characteristics program statistics,
proposed gauging effect multiprogramming.
.B
CACM October, 1967
.A
Smith, J. L.
.N
CA671007 JB February 27, 1978 2:07 PM
.X
1526 5 1526
1526 5 1526
1526 5 1526
1892 5 1526
2068 5 1526
2741 5 1526
1526 6 1526
1526 6 1526
1526 6 1526
1572 6 1526
1728 6 1526
1749 6 1526
1751 6 1526
1752 6 1526
2454 6 1526
.I 1527
.T
Grammar Base Question Answering Procedure
.W
subject paper procedure
automatic retrieval certain segments
stored information, either explicitly implicitly represented,
through questions posed natural language
sentences. procedure makes use sentence recognition
device class grammars which
correctly decide between grammatical ungrammatical
sentences natural language.
possible make use recognition device
sort following reason: Much data fully
expressible set sentences natural language,
set which can exhaustively exclusively
generated grammar. Based upon rules grammar,
sentence recognizer evaluate sentences,
questions normal situation. Since recognition
function succeeds just case posed question
drawn set sentences expressing data,
or, more correctly, grammatical terms
grammar set sentences, sentence recognition
itself procedure retrieving information.
recognition function succeeds, its
value represents requested information.
.B
CACM October, 1967
.A
Rosenbaum, P.
.N
CA671006 JB February 27, 1978 2:14 PM
.X
1527 5 1527
1527 5 1527
1527 5 1527
2092 5 1527
2127 5 1527
1155 6 1527
1324 6 1527
1487 6 1527
1527 6 1527
1527 6 1527
1781 6 1527
1856 6 1527
.I 1528
.T
Three Fonts Computer Drawn Letters
.W
Detailed descriptions given three fonts
letters. Letter shapes entirely described
numbers. basic vectors general form
so fonts may easily drawn variety
computers cathode-ray tubes. fonts include both
upper lower case Roman letters, mathematical
signs, upper lower case Greek letters. Design
fonts described. However, principal
contribution paper concerns fonts themselves.
.B
CACM October, 1967
.A
Mathews, M. V.
Lochbaum, C.
Moss, J. A.
.N
CA671005 JB February 27, 1978 2:24 PM
.X
1528 5 1528
1528 5 1528
1528 5 1528
1697 5 1528
1528 6 1528
.I 1529
.T
Decomposition Programming Analysis Matrix Substructure
.W
petroleum blending problem analyzed order
compare primal primal-dual decomposition
algorithms. course analysis, substructure
discovered which has relevance
relative performance two algorithms their
absolute performance compared standard
primal-Simplex solution without decomposition.
.B
CACM October, 1967
.A
Bell, E. J.
.N
CA671004 JB February 27, 1978 2:33 PM
.X
1529 5 1529
1529 5 1529
1529 5 1529
.I 1530
.T
ML/I Macro Processor
.W
general purpose macro processor called ML/I
described. ML/I has been implemented
PDP-7 I.C.T. Atlas 2 computers intended
tool allow users extend any existing programming
language incorporating new statements other
syntactic forms their own choosing their
own notation. allows complete user-oriented
language built up relative ease.
.B
CACM October, 1967
.A
Brown, P. J.
.N
CA671003 JB February 27, 1978 2:38 PM
.X
1530 4 1530
1530 4 1530
1531 4 1530
1565 4 1530
1703 4 1530
1781 4 1530
1852 4 1530
1945 4 1530
2034 4 1530
2036 4 1530
1455 5 1530
1530 5 1530
1530 5 1530
1530 5 1530
1565 5 1530
.I 1531
.T
Remaining Trouble Spots ALGOL 60
.W
paper lists ambiguities remaining
language ALGOL 60, which have been noticed
since publication Revised ALGOL 60 Report 1963.
.B
CACM October, 1967
.A
Knuth, D. E.
.N
CA671002 JB February 27, 1978 2:40 PM
.X
1530 4 1531
1531 4 1531
1531 4 1531
1565 4 1531
1703 4 1531
1945 4 1531
2036 4 1531
2707 4 1531
2753 4 1531
1185 5 1531
1455 5 1531
1531 5 1531
1531 5 1531
1531 5 1531
1781 5 1531
123 6 1531
196 6 1531
919 6 1531
990 6 1531
1007 6 1531
1046 6 1531
1131 6 1531
1139 6 1531
1140 6 1531
1149 6 1531
1198 6 1531
1215 6 1531
1223 6 1531
1265 6 1531
1303 6 1531
1323 6 1531
1358 6 1531
1366 6 1531
1421 6 1531
1460 6 1531
1462 6 1531
1463 6 1531
1467 6 1531
1468 6 1531
1477 6 1531
1491 6 1531
1496 6 1531
1531 6 1531
1535 6 1531
1565 6 1531
1601 6 1531
1602 6 1531
1613 6 1531
1614 6 1531
1626 6 1531
1641 6 1531
1787 6 1531
1788 6 1531
205 6 1531
224 6 1531
249 6 1531
288 6 1531
316 6 1531
381 6 1531
398 6 1531
11 6 1531
404 6 1531
410 6 1531
463 6 1531
464 6 1531
483 6 1531
3184 6 1531
3188 6 1531
584 6 1531
600 6 1531
680 6 1531
691 6 1531
763 6 1531
799 6 1531
.I 1532
.T
Hardware-Software Complementarity
.B
CACM October, 1967
.A
Oettinger, A. G.
.N
CA671001 JB February 27, 1978 2:42 PM
.X
1532 5 1532
1532 5 1532
1532 5 1532
.I 1533
.T
Marovian Model University Michigan Executive System
.W
mathematical model computer's executive
system postulated its parameters estimated
aid extensive data system's operation.
Although simplifying assumptions made,
results predicted model agree reasonable well
actual results. model used study
effects changes executive system
one its compilers. Further applications
model discussed.
.B
CACM September, 1967
.A
Foley, J. D.
.N
CA670911 JB February 27, 1978 2:50 PM
.X
1533 4 1533
1533 4 1533
1604 4 1533
1951 4 1533
2667 4 1533
2668 4 1533
1224 5 1533
1533 5 1533
1533 5 1533
1533 5 1533
1604 5 1533
1916 5 1533
1533 6 1533
666 6 1533
.I 1534
.T
DAD, C.S.I.R.O. Operating System
.W
design implementation C.S.I.R.O.
operating system, DAD, described detail.
system designed Control Data 3600 using
large drum backing store intended
allow integration remote console (display) subsystem
into conventional job stack environment.
use drums, buffering input output
slow peripherals, execution normal
job stack work described. display subsystem
described only integrates into rest
system. techniques found useful development
DAD given, assessment
made validity various design decisions. Performance
figures based several months operation
tabulated.
.B
CACM September, 1967
.A
Austin, B. J.
Holden, T. S.
Hudson, R. H.
.N
CA670910 JB February 27, 1978 2:58 PM
.X
1534 5 1534
1534 5 1534
1534 5 1534
.I 1535
.T
Comment Index Register Allocation
.W
technique presented reduce enumeration
required known procedure optimal
index register allocation straight-line programs.
technique based construction
link diagram, which shows any step future occurrences
indexes which must loaded into index
registers. diagram determines advance required
register configuration certain steps
program, so program subdivided into separate
portions which allocation procedure
may applied independently.
.B
CACM September, 1967
.A
Luccio, F.
.N
CA670909 JB February 27, 1978 3:06 PM
.X
1535 5 1535
1535 5 1535
1535 5 1535
1781 5 1535
2579 5 1535
123 6 1535
196 6 1535
919 6 1535
990 6 1535
1007 6 1535
1046 6 1535
1131 6 1535
1139 6 1535
1140 6 1535
1149 6 1535
1198 6 1535
1215 6 1535
1223 6 1535
1265 6 1535
1303 6 1535
1323 6 1535
1358 6 1535
1366 6 1535
1421 6 1535
1460 6 1535
1462 6 1535
1463 6 1535
1467 6 1535
1468 6 1535
1477 6 1535
1491 6 1535
1496 6 1535
1531 6 1535
1535 6 1535
1535 6 1535
1565 6 1535
1601 6 1535
1602 6 1535
1613 6 1535
1614 6 1535
1626 6 1535
1641 6 1535
1787 6 1535
1788 6 1535
1807 6 1535
205 6 1535
224 6 1535
249 6 1535
288 6 1535
1947 6 1535
316 6 1535
381 6 1535
398 6 1535
11 6 1535
404 6 1535
410 6 1535
463 6 1535
464 6 1535
483 6 1535
3184 6 1535
3188 6 1535
584 6 1535
600 6 1535
680 6 1535
691 6 1535
763 6 1535
799 6 1535
.I 1536
.T
Dynamic Computation Derivatives
.W
shown Wengert's procedure computation
derivatives can implemented conveniently
use compiler-generated complex addition, subtraction,
linkage complex arithmetic subroutines.
Evaluation function derivative proceed
parallel, Wengert's procedure, but
"imaginary" parts variables declared complex bearing
values derivatives real parts.
technique provides simple way compute
derivatives function, without need
deriving programming evaluation
explicit formulas derivatives.
.B
CACM September, 1967
.A
Lesk, A. M.
.N
CA670908 JB February 27, 1978 3:11 PM
.X
1028 4 1536
1216 4 1536
1278 4 1536
1347 4 1536
1396 4 1536
1536 4 1536
1029 5 1536
1536 5 1536
1536 5 1536
1536 5 1536
.I 1537
.T
Prime Number Generator 1 (Algorithm 310 [A1])
.B
CACM September, 1967
.A
Chartres, B. A.
.N
CA670907a JB February 27, 1978 3:12 PM
.X
1537 5 1537
1537 5 1537
1537 5 1537
2120 5 1537
2927 5 1537
1537 6 1537
1537 6 1537
1539 6 1537
1539 6 1537
1538 6 1537
1840 6 1537
1841 6 1537
377 6 1537
.I 1538
.T
Prime Number Generator 2 (Algorithm 311 [A1])
.B
CACM September, 1967
.A
Chartres, B. A.
.N
CA670907b JB March 23, 1978 2:34 PM
.X
1538 5 1538
1538 5 1538
1538 5 1538
2927 5 1538
1537 6 1538
1539 6 1538
1538 6 1538
1840 6 1538
1841 6 1538
.I 1539
.T
Prime Number Generator 1; Prime Number Generator
2 (Algorithm 35[A1]; Algorithm 310[A1]; Algorithm
311[A1])
.B
CACM September, 1967
.A
Chartres, B. A.
.N
CA670907c JB March 23, 1978 2:37 PM
.X
1539 5 1539
1539 5 1539
1539 5 1539
1841 5 1539
1967 5 1539
2120 5 1539
2927 5 1539
1537 6 1539
1537 6 1539
1539 6 1539
1539 6 1539
1539 6 1539
1539 6 1539
1538 6 1539
1840 6 1539
1841 6 1539
1841 6 1539
377 6 1539
377 6 1539
2120 6 1539
.I 1540
.T
Algorithm Class Scheduling Section Preference
.W
algorithm assignment students classes
fixed time schedule allows students
give preference sections within courses given.
If consistent objective balanced
sections, these preferences honored. algorithm
more stochastic than Monte Carlo nature.
Results given compare nonpreference assignment algorithm.
.B
CACM September, 1967
.A
Busam, V. A.
.N
CA670906 JB February 27, 1978 3:15 PM
.X
1540 4 1540
2209 4 1540
1434 5 1540
1540 5 1540
1540 5 1540
1540 5 1540
2052 5 1540
2209 5 1540
1008 6 1540
1013 6 1540
1434 6 1540
1504 6 1540
1540 6 1540
1540 6 1540
.I 1541
.T
Language Modeling Simulating Dynamic Systems
.W
general objective language
facilitate both modeling experimental
aspects simulation studies. ability represent
systems containing highly interactive processes
essential feature. nature language,
role process concept, presented
means extended example.
.B
CACM September, 1967
.A
Parente, R. J.
Krasnow, H. S.
.N
CA670905 JB February 27, 1978 3:18 PM
.X
1541 4 1541
1541 4 1541
1565 4 1541
1781 4 1541
1824 4 1541
1846 4 1541
2060 4 1541
2218 4 1541
2252 4 1541
3112 4 1541
1358 5 1541
1380 5 1541
1541 5 1541
1541 5 1541
1541 5 1541
.I 1542
.T
Microprogrammed Implementation EULER IBM System/360 Model 30
.W
experimental processing system algorithmic
language EULER has been implemented
microprogramming IBM System/360 Model 30 using
second Read-Only Storage unit. system consists
microprogrammed compiler microprogrammed
String Language Interpreter, I/O control
program written 360 machine language. system described
results given terms microprogram
main storage space required compiler interpreter
performance obtained. role microprogramming
stressed, which opens new dimension processing
interpretive code. structure content
higher level language can matched appropriate
interpretive language which can executed
efficiently microprograms existing computer hardware.
.B
CACM September, 1967
.A
Weber, H.
.N
CA670904 JB February 27, 1978 3:44 PM
.X
1542 4 1542
1542 4 1542
1683 4 1542
1693 4 1542
1781 4 1542
1787 4 1542
1836 4 1542
1945 4 1542
2060 4 1542
2061 4 1542
2082 4 1542
2091 4 1542
2152 4 1542
2179 4 1542
2340 4 1542
2356 4 1542
2546 4 1542
2603 4 1542
2698 4 1542
2708 4 1542
2824 4 1542
2982 4 1542
2986 4 1542
3045 4 1542
3093 4 1542
1491 5 1542
1542 5 1542
1542 5 1542
1542 5 1542
2202 5 1542
2527 5 1542
3198 5 1542
1542 6 1542
1542 6 1542
.I 1543
.T
Computer Formulation Equations Motion Using Tensor Notation
.W
means described extending area
application digital computers beyond
numerical data processing stage reducing need
human participation formulation certain
types computer problems. use tensor calculus
computer language designed facilitate
symbolic mathematical computation, method has been
devised whereby digital computer can used
do non-numeric work, is, symbolic algebraic manipulation
differentiation. illustrate
techniques involved, digital computer has been used
derive equations motion point mass
general orthogonal curvilinear coordinate system.
Since operation involves formulation
terms first- second-order differential coefficients,
provides good demonstration computer's
capability do non-numeric work assist
formulation process which normally precedes
numerical data processing stage. Moreover, particular
problem serves illustrate advantages
mathematical techniques employed. program
prepared purpose computer
derive equations motion any coordinate system
requested user. Results presented
following coordinate systems: cylindrical
polar, spherical polar, prolate spheroidal.
.B
CACM September, 1967
.A
Howard, J. C.
.N
CA670903 JB February 27, 1978 3:58 PM
.X
1543 4 1543
1543 4 1543
1664 4 1543
1664 4 1543
1345 5 1543
1543 5 1543
1543 5 1543
1543 5 1543
1616 5 1543
1664 5 1543
1345 6 1543
1543 6 1543
1616 6 1543
.I 1544
.T
Tele-CUPL: Telephone Time Sharing System
.W
general purpose, remote access, computing system
described, employs twelve-key keyboard
telephones terminals. Audio output provided directly
telephone terminals, but system
normally used conjunction remotely located
high speed printing devices. system
compatible extension existing batch processing
system. significant element system
scheme transmitting alphanumeric information single
strokes numeric keyboard. programmed
scanner uses context eliminate ambiguity transmission.
.B
CACM September, 1967
.A
Conway, R. W.
Morgan, H. L.
.N
CA670902 JB February 27, 1978 4:04 PM
.X
1179 4 1544
1288 4 1544
1544 4 1544
1646 4 1544
2111 4 1544
2534 4 1544
2556 4 1544
2650 4 1544
1544 5 1544
1544 5 1544
1544 5 1544
2054 5 1544
830 5 1544
1544 6 1544
.I 1545
.T
Legal Safeguards Insure Privacy Computer Society
.B
CACM September,1967
.A
Westin, A. F.
.N
CA670901 JB February 27, 1978 4:06 PM
.X
1545 5 1545
1545 5 1545
1545 5 1545
.I 1546
.T
Toward Standards Handwritten Zero Oh
.B
CACM August, 1967
.A
Bemer, R. W.
.N
CA670809 JB February 27, 1978 4:08 PM
.X
1546 5 1546
1546 5 1546
1546 5 1546
.I 1547
.T
Gamma Function Arbitrary Precision (Algorithm 309 [S14])
.B
CACM August, 1967
.A
Filho, A. M.S.
Schwachheim, G.
.N
CA670808 JB February 27, 1978 4:10 PM
.X
1547 5 1547
1547 5 1547
1547 5 1547
2224 5 1547
1547 6 1547
.I 1548
.T
Parsing Decision Tables
.W
Reduction size decision tables can
accomplished several techniques. techniques
considered paper parsing decision
tables regard horizontal vertical
data structures, job identity, hardware job priorities,
context relationships. Such parsing
rests upon some conventions linkage decision tables.
.B
CACM August, 1967
.A
Chapin, N.
.N
CA670807 JB February 27, 1978 4:14 PM
.X
1548 4 1548
1548 4 1548
2220 4 1548
2726 4 1548
2726 4 1548
1488 5 1548
1489 5 1548
1548 5 1548
1548 5 1548
1548 5 1548
2220 5 1548
2492 5 1548
2518 5 1548
2598 5 1548
2616 5 1548
2726 5 1548
931 6 1548
1172 6 1548
1172 6 1548
1172 6 1548
1237 6 1548
1327 6 1548
1327 6 1548
1354 6 1548
1354 6 1548
1488 6 1548
1489 6 1548
1489 6 1548
1548 6 1548
1548 6 1548
1548 6 1548
1548 6 1548
1548 6 1548
1548 6 1548
1684 6 1548
1684 6 1548
250 6 1548
2220 6 1548
2220 6 1548
2221 6 1548
2263 6 1548
2263 6 1548
2453 6 1548
2517 6 1548
2691 6 1548
.I 1549
.T
Efficient Machine-Independent Procedure
Garbage Collection Various List Structures
.W
method returning registers free
list essential part any list processing
system. paper, past solutions recovery
problem reviewed compared. new algorithm
presented which offers significant advantages speed
storage utilization. routine implementing
algorithm can written list language
which used, thus insuring degree
machine independence. Finally, application
algorithm number different list structures
appearing literature indicated.
.B
CACM August, 1967
.A
Schorr, H.
Waite, W. M.
.N
CA670806 JB February 27, 1978 4:28 PM
.X
1024 4 1549
1024 4 1549
1050 4 1549
1050 4 1549
1051 4 1549
1051 4 1549
1051 4 1549
1098 4 1549
1102 4 1549
1102 4 1549
1132 4 1549
1211 4 1549
1214 4 1549
1237 4 1549
1380 4 1549
1388 4 1549
1390 4 1549
1393 4 1549
1393 4 1549
1485 4 1549
1486 4 1549
1487 4 1549
1549 4 1549
1549 4 1549
1549 4 1549
1549 4 1549
1549 4 1549
1549 4 1549
1549 4 1549
1564 4 1549
1570 4 1549
1706 4 1549
1826 4 1549
1878 4 1549
1878 4 1549
1906 4 1549
1946 4 1549
1957 4 1549
378 4 1549
2023 4 1549
2060 4 1549
2155 4 1549
2168 4 1549
2168 4 1549
2453 4 1549
2719 4 1549
2723 4 1549
2723 4 1549
2723 4 1549
2838 4 1549
2842 4 1549
2855 4 1549
2857 4 1549
2879 4 1549
2882 4 1549
2902 4 1549
3077 4 1549
3080 4 1549
3106 4 1549
3112 4 1549
3112 4 1549
627 4 1549
627 4 1549
731 4 1549
793 4 1549
106 4 1549
106 5 1549
1051 5 1549
210 5 1549
1549 5 1549
1549 5 1549
1549 5 1549
1869 5 1549
2513 5 1549
2665 5 1549
2723 5 1549
2855 5 1549
406 5 1549
3106 5 1549
627 5 1549
731 5 1549
753 5 1549
1383 6 1549
1549 6 1549
1549 6 1549
1549 6 1549
1549 6 1549
1549 6 1549
1549 6 1549
1570 6 1549
1749 6 1549
1826 6 1549
1826 6 1549
210 6 1549
210 6 1549
210 6 1549
1972 6 1549
1972 6 1549
1972 6 1549
2513 6 1549
2651 6 1549
2665 6 1549
2766 6 1549
2766 6 1549
2833 6 1549
2855 6 1549
2954 6 1549
2998 6 1549
2998 6 1549
627 6 1549
731 6 1549
.I 1550
.T
Comparison Batch Processing Instant Turnaround
.W
study programming efforts students
introductory programming course presented
effects having instant turnaround (a few minutes)
opposed conventional batch processing
turnaround times few hours examined. Among
items compared number computer
runs per trip computation center, program preparation
time, keypunching time, debugging time,
number runs, elapsed time first run
last run each problem. Even though
results influenced fact "bonus points"
were given completion programming problem
less than specified number runs, there
evidence support "Instant" over "Batch".
.B
CACM August, 1967
.A
Smith, L. B.
.N
CA670805 JB February 27, 1978 4:32 PM
.X
1550 4 1550
1550 4 1550
1304 5 1550
1472 5 1550
1550 5 1550
1550 5 1550
1550 5 1550
1908 5 1550
1550 6 1550
1605 6 1550
.I 1551
.T
Compiling Algorithms Arithmetic Expressions
.W
paper deals algorithms concerning arithmetic
expressions used FORTRAN IV compiler
HITAC-5020 computer having n accumulators.
algorithms generate object code which minimizes
frequency storing recovering partial results
arithmetic expressions cases
there several accumulators.
.B
CACM August, 1967
.A
Nakata, I.
.N
CA670804 JB February 27, 1978 4:35 PM
.X
1551 4 1551
1945 4 1551
1122 5 1551
1551 5 1551
1551 5 1551
1551 5 1551
1807 5 1551
1934 5 1551
2175 5 1551
1223 6 1551
1248 6 1551
1551 6 1551
1551 6 1551
1551 6 1551
1613 6 1551
1886 6 1551
1947 6 1551
.I 1552
.T
AED Free Storage Package
.W
most fundamental underlying problem sophisticated
software systems involving elaborate,
changing data structure dynamic storage allocation
flexible problem modeling. Free Storage
Package AED-1 Compiler Systems allows blocks
available storage obtained returned
reuse. total available space partitioned
into hierarchy free storage zones, each
which has its own characteristics. Blocks may
any size, special provisions allow efficient
handling selected sizes, control shattering
garbage collection, sharing physical space
between zones. routines package perform
high level functions automatically, but also allow
access control fine internal details well.
.B
CACM August, 1967
.A
Ross, D. T.
.N
CA670803 JB February 27, 1978 4:40 PM
.X
1051 4 1552
1380 4 1552
1389 4 1552
1552 4 1552
1552 4 1552
1552 4 1552
1665 4 1552
1693 4 1552
1781 4 1552
1854 4 1552
1860 4 1552
1860 4 1552
2060 4 1552
2155 4 1552
2162 4 1552
2435 4 1552
2596 4 1552
2768 4 1552
2845 4 1552
2902 4 1552
2955 4 1552
557 4 1552
1184 5 1552
1421 5 1552
1552 5 1552
1552 5 1552
1552 5 1552
378 5 1552
2704 5 1552
2902 5 1552
1051 6 1552
1062 6 1552
1184 6 1552
1211 6 1552
1247 6 1552
1552 6 1552
1552 6 1552
1749 6 1552
1879 6 1552
2356 6 1552
2379 6 1552
2435 6 1552
2596 6 1552
2673 6 1552
2734 6 1552
2747 6 1552
2768 6 1552
.I 1553
.T
Contextual Understanding Computers
.W
further development computer program
(ELIZA) capable conversing natural language
discussed. importance context both human
machine understanding stressed.
argued adequacy level understanding
achieved particular conversation depends
purpose conversation, absolute
understanding part either humans
machines impossible.
.B
CACM August, 1967
.A
Weizenbaum, J.
.N
CA670802 JB February 27, 19784:44 PM
.X
1400 4 1553
1553 4 1553
1945 4 1553
2127 4 1553
2396 4 1553
2730 4 1553
1487 5 1553
1553 5 1553
1553 5 1553
1553 5 1553
1856 5 1553
1225 6 1553
1324 6 1553
1553 6 1553
.I 1554
.T
Computer Technique Displaying n-Dimensional Hyperobjects
.W
digital computer automatic plotter have
been used generate three-dimensional stereoscopic
movies three-dimensional parallel perspective
projections four-dimensional hyperobjects
rotating four-dimensional space. observed projections
their motions were direct extension
three-dimensional experience, but no profound "feeling"
insight into fourth spatial dimension
obtained. technique can generalized n-dimensions
applied any n-dimensional hyperobject
hypersurface.
.B
CACM August, 1967
.A
Noll, A. M.
.N
CA670801 JB February 27, 1978 4:48 PM
.X
1554 5 1554
1554 5 1554
1554 5 1554
2211 5 1554
1554 6 1554
1741 6 1554
.I 1555
.T
Symmetric Polynomials (Algorithm 305 [C1])
.B
CACM July, 1967
.A
Bratley, P.
McKay, J. K. S.
.N
CA670711a JB February 28, 1978 8:26 AM
.X
1555 5 1555
1555 5 1555
1555 5 1555
.I 1556
.T
Permutations Repetitions (Algorithm 306 [G6])
.B
CACM July, 1967
.A
Bratley, P.
.N
CA670711b JB March 23, 1978 3:14 PM
.X
1556 5 1556
1556 5 1556
1556 5 1556
.I 1557
.T
Symmetric Group Characters (Algorithm 307 [A1])
.B
CACM July, 1967
.A
McKay, J. K. S.
.N
CA670711c JB March 23, 1978 3:15 PM
.X
1557 5 1557
1557 5 1557
1557 5 1557
.I 1558
.T
Generation Permutations Pseudo-Lexicographic
Order (Algorithm [G6])
.B
CACM July, 1967
.A
Ord-Smith, R. J.
.N
CA670711d JB March 23, 1978 3:16 PM
.X
1558 5 1558
1558 5 1558
1558 5 1558
2044 5 1558
996 6 1558
1558 6 1558
2230 6 1558
521 6 1558
.I 1559
.T
Permutation Generator; Permutation Lexicographical
Order; Permute; Generation Permutations
Lexicographical Order (Algorithm 87[G6]; Algorithm
102[G6]; Algorithm 130[G6]; Algorithm 202[G6])
.B
CACM July, 1967
.A
Ord-Smith, R. J.
.N
CA670711e JB March 23, 1978 3:19 PM
.X
1559 5 1559
1559 5 1559
1559 5 1559
1567 5 1559
1948 5 1559
1391 6 1559
1559 6 1559
1559 6 1559
.I 1560
.T
Transport; Transportation Problem (Algorithm 258[H]; Algorithm 293[H])
.B
CACM July, 1967
.A
Sims, L. S.
.N
CA670711f JB March 23, 1978 3:20 PM
.X
1560 5 1560
1560 5 1560
1560 5 1560
.I 1561
.T
Mutual Primal-Dual Method (Algorithm 285 [H])
.B
CACM July, 1967
.A
Spath, H.
.N
CA670711g JB March 23, 1978 3:21 PM
.X
1561 5 1561
1561 5 1561
1561 5 1561
1987 5 1561
1561 6 1561
1581 6 1561
1779 6 1561
1944 6 1561
714 6 1561
.I 1562
.T
Airy Function (Algorithm 301 [S20])
.B
CACM July, 1967
.A
Pitteway, M. L. V.
.N
CA670711h JB March 23, 1978 3:22 PM
.X
1562 5 1562
1562 5 1562
1562 5 1562
.I 1563
.T
Method Finding Hamilton Paths Knight's Tours
.W
use Warnsdorff's rule finding
knight's tour generalized applied
problem finding Hamilton path graph. graph-theoretic
justification method given.
.B
CACM July, 1967
.A
Pohl, I.
.N
CA670710 JB February 28, 1978 8:28 AM
.X
1563 5 1563
1563 5 1563
1563 5 1563
.I 1564
.T
Description Basic Algorithm DETAB/65 Preprocessor
.W
basic algorithm conversion decision
tables into COBOL code contained
generator portion DETAB/65 preprocessor.
generator analyzes decision table produces
simple COBOL conditional statements. Core storage
saved using queueing techniques extensive
indexing also outputting code generated,
line time. only optimization
attempted elimination obviously unnecessary
tests certain conditions decision table.
Since preprocessor language associated
were developed COBOL users, preprocessor
written modular form required COBOL-61.
.B
CACM July, 1967
.A
Callahan, M. D.
Chapman, A. E.
.N
CA670709 JB February 28, 1978 8:33 AM
.X
1237 4 1564
1549 4 1564
1564 4 1564
2453 4 1564
1564 5 1564
1564 5 1564
1564 5 1564
1684 5 1564
753 5 1564
1354 6 1564
1564 6 1564
.I 1565
.T
Language-Independent Macro Processor
.W
macro processor described which can
used almost any source language. provides
all features normally associated macro facility,
plus ability make arbitrary transformations
argument strings. program used
Basser Computing Department, University Sydney,
Sydney, Australia, process text eight different compilers.
.B
CACM July, 1967
.A
Waite, W. M.
.N
CA670708 JB February 28, 1978 8:35 AM
.X
1358 4 1565
1530 4 1565
1531 4 1565
1541 4 1565
1565 4 1565
1565 4 1565
1565 4 1565
1565 4 1565
1703 4 1565
1781 4 1565
1781 4 1565
1788 4 1565
1824 4 1565
1945 4 1565
2036 4 1565
2252 4 1565
1162 5 1565
205 5 1565
1358 5 1565
1455 5 1565
1530 5 1565
1565 5 1565
1565 5 1565
1565 5 1565
1781 5 1565
1852 5 1565
2034 5 1565
123 6 1565
196 6 1565
919 6 1565
984 6 1565
990 6 1565
1007 6 1565
1046 6 1565
1131 6 1565
1139 6 1565
1140 6 1565
1149 6 1565
1198 6 1565
1215 6 1565
1223 6 1565
1231 6 1565
1265 6 1565
1303 6 1565
1323 6 1565
1358 6 1565
1366 6 1565
1421 6 1565
1455 6 1565
1460 6 1565
1462 6 1565
1463 6 1565
1467 6 1565
1468 6 1565
1477 6 1565
1491 6 1565
1496 6 1565
1531 6 1565
1535 6 1565
1565 6 1565
1565 6 1565
1565 6 1565
1565 6 1565
1601 6 1565
1602 6 1565
1613 6 1565
1614 6 1565
1626 6 1565
1641 6 1565
1787 6 1565
1788 6 1565
205 6 1565
224 6 1565
1852 6 1565
249 6 1565
288 6 1565
1926 6 1565
1947 6 1565
316 6 1565
381 6 1565
398 6 1565
11 6 1565
404 6 1565
410 6 1565
463 6 1565
464 6 1565
483 6 1565
3184 6 1565
3188 6 1565
584 6 1565
600 6 1565
680 6 1565
691 6 1565
763 6 1565
799 6 1565
.I 1566
.T
Optimal Starting Values Newton-Raphson Calculation SQRT(x)
.W
problem obtaining starting values
Newton-Raphson calculation SQRT(x)
digital computer considered. shown
conventionally used best uniform approximations
SQRT(x) do not provide optimal starting values.
problem obtaining optimal starting values.
problem obtaining optimal starting values
stated, several basic results proved.
table optimal polynomial starting values given.
.B
CACM July, 1967
.A
Moursund, D. G.
.N
CA670707 JB February 28, 1978 8:53 AM
.X
1566 4 1566
1440 5 1566
1566 5 1566
1566 5 1566
1566 5 1566
1932 5 1566
2094 5 1566
962 6 1566
1566 6 1566
1566 6 1566
.I 1567
.T
Representation Symmetric Polynomials
.W
Relations given between certain symmetric
polynomials light theory
symmetric group. Such approach unifies earlier work
lends insight previously published work
Aaron Booker. generalization Graeffe's root-squaring
technique determination
roots polynomial suggested.
.B
CACM July, 1967
.A
McKay, J. K. S.
.N
CA670706 JB February 28, 1978 8:56 AM
.X
1567 4 1567
1948 4 1567
1559 5 1567
1567 5 1567
1567 5 1567
1567 5 1567
.I 1568
.T
Plotting Function Three Independent Variables
.W
method developed constructing approximate
plot function three independent
variables. plot similar conventional contour
map except there three scales represent
independent variables. Scale values three
independent variables added vectorially,
value function then read
values associated nearby contours.
.B
CACM July,1967
.A
Stineman, R. W.
.N
CA670705 JB February 28, 1978 8:59 AM
.X
1568 5 1568
1568 5 1568
1568 5 1568
.I 1569
.T
Implementing Phrase-Structure Productions PL/I
.W
method described implementing productions
context-free phrase structure grammar
PL/I procedure whose structure statements parallel
structure notation grammar.
.B
CACM July, 1967
.A
Irwin, L.
.N
CA670704 JB February 28, 1978 9:01 AM
.X
1569 5 1569
1569 5 1569
1569 5 1569
.I 1570
.T
String Processing Techniques
.W
internal organization string processing
systems discussed. Six techniques data
structures presented evaluated basis of:
(1) creation strings; (2) examination strings;
(3) alteration strings. Speed operation, storage
requirements, effect paging, programmer
convenience also considered. One techniques,
single-word linked blocks, used example
demonstrating implementation SNOBOL string
processing language IBM System/360.
.B
CACM July, 1967
.A
Madnick, S. E.
.N
CA670703 JB February 28, 1978 9:04 AM
.X
1024 4 1570
1051 4 1570
1098 4 1570
1214 4 1570
1380 4 1570
1388 4 1570
1393 4 1570
1485 4 1570
1487 4 1570
1549 4 1570
1570 4 1570
1570 4 1570
1878 4 1570
1945 4 1570
1946 4 1570
1957 4 1570
2168 4 1570
2314 4 1570
2723 4 1570
2857 4 1570
3112 4 1570
1098 5 1570
1570 5 1570
1570 5 1570
1570 5 1570
1869 5 1570
731 5 1570
1549 6 1570
1570 6 1570
.I 1571
.T
User-Oriented Time-Shared Online System
.W
existing system planned additions within
Data Processing Laboratory Brain
Research Institute UCLA described. system
represents attempt provide research workers
Institute ability interact directly
highly sophisticated digital computing
complex most direct simple fashion possible.
anticipated that, accumulation
experience using present system, significant advances
possible system design through
determination interface parameters between
biological scientist digital computer.
.B
CACM July, 1967
.A
Betyar, L.
.N
CA670702 JB February 28, 1978 9:08 AM
.X
1571 5 1571
1571 5 1571
1571 5 1571
.I 1572
.T
Simulation Time sharing Systems
.W
development new large scale time-sharing
systems has raised number problems
computation center management. Not only necessary
develop appropriate hardware configuration
these systems, but appropriate software adjustments
must made. Unfortunately, these systems often
do not respond changes manner intuition
would suggest, there few guides assist
analysis performance characteristics.
development comprehensive simulation model
assist investigation these questions
described paper. resulting model has
general purpose design can used study
variety time-sharing systems. can also
used assist design development new time-sharing
algorithms techniques. sake
efficiency greater applicability, model
implemented limited FORTRAN subset
compatible most FORTRAN IV compilers. use
simulation demonstrated study
IBM 360/67 time-sharing system.
.B
CACM July, 1967
.A
Nielsen, N. R.
.N
CA670701 JB February 28, 1978 9:15 AM
.X
1572 5 1572
1572 5 1572
1572 5 1572
1805 5 1572
1846 5 1572
1892 5 1572
2188 5 1572
2218 5 1572
2317 5 1572
1198 6 1572
1380 6 1572
1380 6 1572
1424 6 1572
1484 6 1572
1518 6 1572
1526 6 1572
1572 6 1572
1572 6 1572
1572 6 1572
1572 6 1572
1572 6 1572
1572 6 1572
1693 6 1572
1728 6 1572
1728 6 1572
1748 6 1572
1749 6 1572
1751 6 1572
1751 6 1572
1753 6 1572
1752 6 1572
1752 6 1572
1781 6 1572
1810 6 1572
1879 6 1572
2095 6 1572
2126 6 1572
2148 6 1572
576 6 1572
.I 1573
.T
Adaptive Quadrature Procedure
Random Panel Sizes (Algorithm [D1])
.B
CACM June, 1967
.A
Gallaher, L. J.
.N
CA670607a JB February 28, 1978 9:17 AM
.X
1573 5 1573
1573 5 1573
1573 5 1573
2093 5 1573
2550 5 1573
834 6 1573
872 6 1573
1092 6 1573
1298 6 1573
1573 6 1573
1573 6 1573
2074 6 1573
429 6 1573
429 6 1573
.I 1574
.T
Normal Curve Integral (Algorithm 304 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607b JB March 23, 1978 3:27 PM
.X
1574 5 1574
1574 5 1574
1574 5 1574
.I 1575
.T
Incomplete Beta Ratio (Algorithm 179 [S14])
.B
CACM June, 1967
.A
Pike, M. C.
Hill, I. D.
.N
CA670607c JB March 23, 1978 3:29 PM
.X
1575 5 1575
1575 5 1575
1575 5 1575
.I 1576
.T
Eigenvalues Real Symmetric Matrix
QR Method (Algorithm 253 [F2])
.B
CACM June, 1967
.A
Welsch, J. H.
.N
CA670607d JB March 23, 1978 3:30 PM
.X
1576 5 1576
1576 5 1576
1576 5 1576
.I 1577
.T
Eigenvalues Eigenvectors Real Symmetric
Matrix QR Method (Algorithm 254 [F2])
.B
CACM June, 1967
.A
Welsch, J. H.
.N
CA670607e JB March 23, 1978 3:31 PM
.X
1577 5 1577
1577 5 1577
1577 5 1577
.I 1578
.T
Generalized Least Squares Fit Orthogonal
Polynomials (Algorithm 296 [E2])
.B
CACM June, 1967
.A
Makinson, G. J.
.N
CA670607f JB March 23, 1978 3:33 PM
.X
1578 5 1578
1578 5 1578
1578 5 1578
.I 1579
.T
Real Error Function, ERF(x) (Algorithm 123 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607g JB March 23, 1978 3:34 PM
.X
1579 5 1579
1579 5 1579
1579 5 1579
.I 1580
.T
Error Function-Large X (Algorithm 180 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607h JB March 23, 1978 3:35 PM
.X
1580 5 1580
1580 5 1580
1580 5 1580
2334 5 1580
1580 6 1580
.I 1581
.T
Complementary Error Function-Large X (Algorithm 181 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607i JB March 23, 1978 3:37 PM
.X
1581 5 1581
1581 5 1581
1581 5 1581
1987 5 1581
2427 5 1581
1561 6 1581
1581 6 1581
1581 6 1581
1636 6 1581
1779 6 1581
1944 6 1581
714 6 1581
.I 1582
.T
GAUSS (Algorithm 209 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607j JB March 23, 1978 3:38 PM
.X
1582 5 1582
1582 5 1582
1582 5 1582
.I 1583
.T
Normal Distribution Function (Algorithm 226 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607k JB March 23, 1978 3:39 PM
.X
1583 4 1583
1583 4 1583
1583 4 1583
1583 4 1583
967 5 1583
1126 5 1583
1583 5 1583
1583 5 1583
1583 5 1583
707 5 1583
831 5 1583
.I 1584
.T
Procedure Normal Distribution Functions (Algorithm 272 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607l JB March 23, 1978 3:40 PM
.X
1584 5 1584
1584 5 1584
1584 5 1584
.I 1585
.T
Normal Curve Integral (Algorithm 304 [S15])
.B
CACM June, 1967
.A
Hill, I. D.
Joyce, S. A.
.N
CA670607m JB March 23, 1978 3:41 PM
.X
1585 5 1585
1585 5 1585
1585 5 1585
1714 5 1585
1585 6 1585
.I 1586
.T
Generalized Bairstow Algorithm
.W
Bairstow algorithm generalized
case polynomial which itself linear
combination polynomials satisfying three-term recursion.
Convergence properties method
derived.
.B
CACM June, 1967
.A
Golub, G. H.
Robertson, T. N.
.N
CA670606 JB February 28, 1978 9:21 AM
.X
1586 5 1586
1586 5 1586
1586 5 1586
.I 1587
.T
Storage Allocation Certain Iterative Process
.W
method core storage allocation certain
iterative process described estimates
machine time required given. method
applicable iterative processes which input
data items once chosen never again needed.
method input data continuously relocated
space made available apportioned output
tables overflow occurs. Some important
special cases considered which considerable simplification occurs.
.B
CACM June, 1967
.A
Abramowich, J.
.N
CA670605 JB February 28, 1978 9:25 AM
.X
1587 5 1587
1587 5 1587
1587 5 1587
.I 1588
.T
PL/I List Processing
.W
concepts list processing have been introduced
into PL/I language. these new
facilities, possible write PL/I procedures
operate simple complex data list organizations.
Most list-processing languages have suffered their
inability deal directly complex data
structures and/or their inability perform
complete range programming language operations
upon data list structures. These two problems have
been eliminated list-processing facilities
PL/I. basic concepts list processing
philosophy PL/I language extensions
discussed. addition, several detailed list-processing examples provided.
.B
CACM June, 1967
.A
Lawson Jr., H. W.
.N
CA670604 JB February 28, 1978 9:30 AM
.X
1588 5 1588
1588 5 1588
1588 5 1588
.I 1589
.T
DIALOG: Conversational Programming System Graphical Orientation
.W
DIALOG algebraic language online
use graphical input-output console device.
computational aid casual user, which
provides basic facilities graphical numeric
input display, online off line program preparation
storage, hard copy presentation
results. Use system requires minimum experience
instruction, since growth overlaying
system control language has been prevented, there
no processor-oriented statements, like variable
type dimension declarations. Moreover, online
situation processor interacts graphical
keyboard character-by-character basis so
restrict programmer's choice input symbols
those which syntactically correct. DIALOG has been
daily operation IIT Research Institute
since February, 1966.
.B
CACM June, 1967
.A
Cameron, S. H.
Ewing, D.
Liveright, M.
.N
CA670603 JB February 28, 1978 9:36 AM
.X
1589 5 1589
1589 5 1589
1589 5 1589
1978 5 1589
1307 6 1589
1589 6 1589
1813 6 1589
.I 1590
.T
Pitch Period Determination Speech Sounds
.W
computer procedure which determines pitch
periods recognition peak structure
speech waveform described. Speech sounds were
sampled microphone analog-to-digital
converter attached interconnected IBM 7090-PDP-1
system. These utterances were recorded
normal noise level computer room but were not
band-compressed phase-distorted any manner.
sequence operations defined speech wave selects
list points along waveform candidates
pitch markers. These markers validated
error detection correction procedure.About
95 percent pitch periods were recognized correctly
within 1 2 times real-time IBM 7090.
.B
CACM June,1967
.A
Reddy, D. R.
.N
CA670602 JB February 28, 1978 9:42 AM
.X
1590 5 1590
1590 5 1590
1590 5 1590
.I 1591
.T
Model Multifunctional Teaching System
.W
teaching system model incorporated
into operating system large computer
described. model transferred control
operating system execute functions other than
teaching, then recovered control order resume
teaching. teaching system (ABAC-II)
written run under operating system (IBSYS)
IBM 7044 Graphic System. Because teaching
system automatically terminated rescheduled itself,
student studying course presented cathode-ray
display terminal could switch readily between student
mode programmer mode. During latter,
full resources operating system (language processors,
compilers, library user's programs)
were his disposal. He could example, write, assemble,
debug, execute terminal program
written any language processed operating system.
course could therefore include text material
interleaved programming problems which student
could solve without leaving terminal. Exercises
simulation gaming could also provided.
implications teaching system degree
flexibility industrial executive training
well academic education discussed.
addition, advantages type system computer
programming operation also considered.
.B
CACM June, 1967
.A
Engvold, K. J.
Hughes, J. L.
.N
CA670601 JB February 28, 1978 10:24 AM
.X
1591 5 1591
1591 5 1591
1591 5 1591
1680 5 1591
1591 6 1591
.I 1592
.T
String Similarity Misspellings
.W
problem programming computer determine
whether not string characters
misspelling given word considered. numberof
algorithms were evaluated-some proposed
other writers, some author. These techniques
were tested collection misspellings made
students various grade levels. While many
methods were clearly unsatisfactory, some gave
few 2.1 percent incorrect determinations.
.B
CACM June, 1967
.A
Alberga, C. N.
.N
CA670510 JB February 28, 1978 10:28 AM
.X
1112 4 1592
1592 4 1592
1592 4 1592
1592 4 1592
2111 4 1592
2111 4 1592
2339 4 1592
2339 4 1592
440 4 1592
982 5 1592
1112 5 1592
1592 5 1592
1592 5 1592
1592 5 1592
2111 5 1592
2339 5 1592
619 5 1592
830 6 1592
1112 6 1592
1112 6 1592
1592 6 1592
1592 6 1592
440 6 1592
619 6 1592
619 6 1592
.I 1593
.T
Simple Technique Digital Division
.W
simple economical method digital
division described. method suitable
divisors whose leading character either radix less
one unity next character equal
zero; also method direct needs only half
number arithmetic operations needed variant
Harvard iterative method, described Gilman,
which suitable similar divisors.
.B
CACM June, 1967
.A
Nandi, S. K.
Krishnamurthy, E. V.
.N
CA670509 JB February 28, 1978 10:30 AM
.X
214 4 1593
1497 4 1593
1593 4 1593
1593 4 1593
1975 4 1593
1292 5 1593
1497 5 1593
1593 5 1593
1593 5 1593
1593 5 1593
91 5 1593
107 6 1593
1026 6 1593
1292 6 1593
1593 6 1593
.I 1594
.T
Algorithm Generating Permutations
.W
algorithm described which under repeated
application generates all permutations K
elements. Only previously generated permutation,
constant K, temporary index needed.
Starting particular ordering K elements (abcd),
repeated application algorithm
generate K-1 additional permutations K-1 successive
rotations. initial circular ordering
K objects, another circular ordering can obtained
rotating K-1 lowest elements. each
new K-1 circular ordering, another K-2 can obtained
rotating K-2 lowest elements. continuing
manner, applications algorithm generate
all (K-1)! circular orderings, since each
circular ordering yields K permutations
algorithm generates all K! permutations.
.B
CACM May, 1967
.A
Langdon Jr., G. G.
.N
CA670508 JB February 28, 197810:35 AM
.X
1594 5 1594
1594 5 1594
1594 5 1594
2087 5 1594
2189 5 1594
3188 5 1594
1594 6 1594
1594 6 1594
1594 6 1594
2087 6 1594
3191 6 1594
521 6 1594
612 6 1594
.I 1595
.T
Computer Enumeration Finite Topologies
.W
problem enumerating number topologies
which can formed finite point
set considered both theoretically computationally.
Certain fundamental results established,
leading algorithm enumerating finite topologies,
computed results given n <= 7.
interesting side result computational work
unearthing theoretical error which
had been induced into literature; use computer
combinatorics represents, chronologically,
early application, side result underscores
its continuing usefulness area.
.B
CACM May, 1967
.A
Evans, J. W.
Harary, F.
Lynn, M. S.
.N
CA670507 JB February 28, 1978 10:37 AM
.X
1595 5 1595
1595 5 1595
1595 5 1595
.I 1596
.T
Airy Function (Algorithm 301 [S20])
.B
CACM May, 1967
.A
Bond, G.
Pitteway, M. L. V.
.N
CA670506a JB February 28, 1978 10:38 AM
.X
1596 5 1596
1596 5 1596
1596 5 1596
.I 1597
.T
Transpose Vector Stored Array (Algorithm 302 [K2])
.B
CACM May, 1967
.A
Boothroyd, J.
.N
CA670506b JB March 23, 1978 4:00 PM
.X
1597 5 1597
1597 5 1597
1597 5 1597
2354 5 1597
2355 5 1597
1418 6 1597
1418 6 1597
1521 6 1597
1521 6 1597
1597 6 1597
1597 6 1597
1679 6 1597
1883 6 1597
2040 6 1597
2350 6 1597
2350 6 1597
2354 6 1597
2355 6 1597
.I 1598
.T
Least Squares Fit Orthogonal Polynomials (Algorithm 28 [E2])
.B
CACM May, 1967
.A
Makinson, G. J.
.N
CA670506c JB March 23, 1978 4:02 PM
.X
1598 5 1598
1598 5 1598
1598 5 1598
.I 1599
.T
Numerical Solution Polynomial Equation (Algorithm 300 [C2])
.B
CACM May, 1967
.A
Kohfeld, J. J.
.N
CA670506d JB March 23, 1978 4:03 PM
.X
1599 5 1599
1599 5 1599
1599 5 1599
.I 1600
.T
Chebyshev Quadrature (Algorithm 279 [D1])
.B
CACM May, 1967
.A
Hillstrom, K.
.N
CA670506e JB March 23, 1978 4:04 PM
.X
1600 5 1600
1600 5 1600
1600 5 1600
2057 5 1600
2058 5 1600
2392 5 1600
2416 5 1600
1600 6 1600
1600 6 1600
1600 6 1600
1600 6 1600
1894 6 1600
2055 6 1600
2055 6 1600
2058 6 1600
.I 1601
.T
Parallel Numerical Methods Solution Equations
.W
Classical iterative procedures numerical
solution equations provide each stage
single new approximation root question.
technique given development numerical
procedures which provide, each stage, several approximations
solution equation. s8everal
approximations obtained any iteration computationally
independent, making methods interest
parallel processing environment. Convergence
insured extracting "best information"
each iteration. Several families numerical procedures
which use technique procedures
parallel processing environment developed measurements
these statistics reported. These
measurements interpreted parallel processing
environment. such environment procedures
obtained superior standard algorithms.
.B
CACM May, 1967
.A
Shedler, G. S.
.N
CA670505 JB February 28, 1978 10:44 AM
.X
1601 5 1601
1601 5 1601
1601 5 1601
1781 5 1601
123 6 1601
196 6 1601
919 6 1601
990 6 1601
1007 6 1601
1046 6 1601
1131 6 1601
1139 6 1601
1140 6 1601
1149 6 1601
1198 6 1601
1215 6 1601
1223 6 1601
1265 6 1601
1303 6 1601
1323 6 1601
1358 6 1601
1366 6 1601
1421 6 1601
1460 6 1601
1462 6 1601
1463 6 1601
1467 6 1601
1468 6 1601
1477 6 1601
1491 6 1601
1496 6 1601
1531 6 1601
1535 6 1601
1565 6 1601
1601 6 1601
1602 6 1601
1613 6 1601
1614 6 1601
1626 6 1601
1641 6 1601
1787 6 1601
1788 6 1601
205 6 1601
224 6 1601
249 6 1601
288 6 1601
316 6 1601
381 6 1601
398 6 1601
11 6 1601
404 6 1601
410 6 1601
463 6 1601
464 6 1601
483 6 1601
3184 6 1601
3188 6 1601
584 6 1601
600 6 1601
680 6 1601
691 6 1601
763 6 1601
799 6 1601
.I 1602
.T
POSE: Language Posing Problems Computer
.W
language, POSE, described which drastic
departure FORTRAN/ALGOL type, though
does utilize FORTRAN formula logic representations
(and actually contains FORTRAN VI subset).
new language, user need only describe
his problem "equation-like" form. method
solution automatically provided conjunction
translation equation form computer
instruction. way POSE language user can
solve difficult computational problems (like
solution differential equation) without requiring
knowledge numerical methods intricacies
computer subroutine logic. Essentially all clerical
operations now required FORTRAN programming
have been automated so POSE programmer
need not concerned these details.
.B
CACM May, 1967
.A
Schlesinger, S.
Sashkin, L.
.N
CA670504 JB February 28, 1978 10:53 AM
.X
1602 5 1602
1602 5 1602
1602 5 1602
1781 5 1602
123 6 1602
196 6 1602
919 6 1602
990 6 1602
1007 6 1602
1046 6 1602
1131 6 1602
1139 6 1602
1140 6 1602
1149 6 1602
1198 6 1602
1215 6 1602
1223 6 1602
1265 6 1602
1303 6 1602
1323 6 1602
1358 6 1602
1366 6 1602
1421 6 1602
1460 6 1602
1462 6 1602
1463 6 1602
1467 6 1602
1468 6 1602
1477 6 1602
1491 6 1602
1496 6 1602
1531 6 1602
1535 6 1602
1565 6 1602
1601 6 1602
1602 6 1602
1613 6 1602
1614 6 1602
1626 6 1602
1641 6 1602
1787 6 1602
1788 6 1602
205 6 1602
224 6 1602
249 6 1602
288 6 1602
316 6 1602
381 6 1602
398 6 1602
11 6 1602
404 6 1602
410 6 1602
463 6 1602
464 6 1602
483 6 1602
3184 6 1602
3188 6 1602
584 6 1602
600 6 1602
680 6 1602
691 6 1602
763 6 1602
799 6 1602
.I 1603
.T
Multiprogramming Monitor Small Machines
.W
INT, combination hardware/software monitor
designed control wide variety real-time
input/output devices, described. simple hardware
additions provide uniform device machine
interface such elements keyboards graphic input
devices, interval timers. software relieves
user program details input/output timing,
buffering, task scheduling provides
parallel processing capability. User programs communicate
monitor through small set meta-instruction
which consists mostly machine-language subroutine calls.
.B
CACM May, 1967
.A
Hornbuckle, G. D.
.N
CA670503 JB February 28, 1978 10:57 AM
.X
1458 4 1603
1523 4 1603
1603 4 1603
1698 4 1603
1747 4 1603
1748 4 1603
1854 4 1603
1877 4 1603
1960 4 1603
2377 4 1603
2378 4 1603
2497 4 1603
2558 4 1603
2625 4 1603
2632 4 1603
2840 4 1603
2941 4 1603
3105 4 1603
3144 4 1603
1471 5 1603
1603 5 1603
1603 5 1603
1603 5 1603
.I 1604
.T
Further Analysis Computing Center Environment
.W
Empirical distributions program lengths,
execution times, processing times, loading
times over 10,000 jobs serviced university computing
center environment presented. data
subdivided according certain characteristics users
jobs obtain selected empirical conditional
distributions those time properties well statistical
measures other interesting properties.
results interpreted terms properties system studied.
.B
CACM May, 1967
.A
Walter, E. S.
Wallace, V. L.
.N
CA670502 JB February 28, 1978 11:02 AM
.X
1533 4 1604
1604 4 1604
1604 4 1604
1951 4 1604
2373 4 1604
1224 5 1604
1410 5 1604
1533 5 1604
1604 5 1604
1604 5 1604
1604 5 1604
1951 5 1604
2667 5 1604
2668 5 1604
1224 6 1604
1410 6 1604
1604 6 1604
1604 6 1604
1604 6 1604
1604 6 1604
1728 6 1604
1728 6 1604
1761 6 1604
1827 6 1604
1827 6 1604
2677 6 1604
.I 1605
.T
Experimental Comparison Time Sharing Batch Processing
.W
effectiveness program development
MIT Compatible Time-Sharing System (CTSS)
compared IBM IBSYS batch-processing
system means statistically designed
experiment. identical set four programming problems
assigned each group four programming
subjects. Influences external systems, such
sequence problem solution, programmer
problem characteristics, were specified design
factors experiment. Data obtained
six variables (e.g., programmer time, computer time,
elapsed time, etc.) which were considered
definitive "system effectiveness," analysis
variance techniques were employed estimate system
differences these variables after differences due
design factors had been eliminated. Statistical
analysis experimental results provided strong
evidence important system differences, well
critique experimental design itself
implications further experimentation.
.B
CACM May, 1967
.A
Schatzoff, M.
Tsao, R.
Wiig, R.
.N
CA670501 JB February 28, 1978 11:09 AM
.X
1605 5 1605
1605 5 1605
1605 5 1605
1792 5 1605
1908 5 1605
1550 6 1605
1605 6 1605
1605 6 1605
224 6 1605
.I 1606
.T
Chi-Squared Integral (Algorithm 299 [S15])
.B
CACM April, 1967
.A
Hill, I. D.
Pike, M. C.
.N
CA670408a JB February 28, 1978 11:10 AM
.X
1606 5 1606
1606 5 1606
1606 5 1606
2467 5 1606
2793 5 1606
1606 6 1606
1606 6 1606
.I 1607
.T
Coulomb Wave Functions (Algorithm 300 [S22])
.B
CACM April, 1967
.A
Gunn, J. H.
.N
CA670408b JB March 23, 1978 4:06 PM
.X
1607 5 1607
1607 5 1607
1607 5 1607
.I 1608
.T
Numerical Integration Function Has Pole
.W
common need integrate numerically
functions diverge somewhere outside
range integration. Even if divergence occurs quite
far away, integration formulas like Simpson's,
depend fitting polynomial, usually
inaccurate: near pole they very bad.
method described gives formulas integrate
functions kind accurately if
orders positions poles known. Explicit
formulas given easy use
automatic computer. shown they can used
some other singularities well poles.
If integral converges, integration can carried
singularity. accuracy integration
pole second order discussed, and, example,
new formula compared Simpson's.
new formulas useful even far pole,
while near pole their advantage overwhelming.
.B
CACM April, 1967
.A
Eisner, E.
.N
CA670407 JB February 28, 1978 11:20 AM
.X
1608 5 1608
1608 5 1608
1608 5 1608
.I 1609
.T
Scheduling University Course Examinations Computer
.W
new approach problem scheduling
course examinations presented. principle,
examination schedule which requires minimum number
examination periods satisfies constraint
no student required take two examinations
simultaneously can found two steps. First,
course which may have their examinations scheduled
same period grouped together all possible
ways. Then minimum number these groups, such
each course included least once, selected.
removing multiple occurrences courses then scheduling
each group different period minimal
schedule can obtained. Known algorithms carrying
out these procedures prohibitively expensive.
Approximations ideal procedure outlined above
given which yield nonminimal but feasible schedules
very small expenditure time. Results experiments
using these techniques given. These
encouraging indicate further experimentation would worthwhile.
.B
CACM April, 1967
.A
Hall Jr., A. D.
Acton, F. S.
.N
CA670406 JB February 28, 1978 11:22 AM
.X
1609 4 1609
2052 4 1609
1013 5 1609
1609 5 1609
1609 5 1609
1609 5 1609
.I 1610
.T
Method Solution Transportation Problems Tall Matrices
.W
method presented solution
transportation problem having cost matrix
few columns. computer implementation method
shows very fast efficient. Application
indicted personnel classification problem
well classical transportation problem.
example worked out detail.
.B
CACM April, 1967
.A
Dwyer, P. S.
Galler, B. A.
.N
CA670405 JB February 28, 1978 11:25 AM
.X
1610 5 1610
1610 5 1610
1610 5 1610
.I 1611
.T
Scheduling Project Networks
.W
Some basic concepts terminology
project networking developed. Critical
Path Algorithm incorporated C-E-I-R proprietary
scheduling system RAMPS (Resource Allocation
Multi-Project Scheduling) described. error detection
network analysis features algorithm
also described.
.B
CACM April, 1967
.A
Klein, M. M.
.N
CA670404 JB February 28, 1978 11:31 AM
.X
1611 4 1611
1611 4 1611
1295 5 1611
1611 5 1611
1611 5 1611
1611 5 1611
340 5 1611
.I 1612
.T
Top-to-bottom Parsing Rehabilitated?
.W
note concerned efficiency
Top-to-Bottom parsing algorithm used
connection programming language grammars.
shown, instance, retracing unprofitable
paths can often eliminated suitable rearrangement
productions defining grammar.
essential weakness method dealing complicated
syntactic structures which practice
only sparsely occupied, e.g., arithmetic expressions.
.B
CACM April, 1967
.A
Brooker, R. A.
.N
CA670403 JB February 28, 1978 11:32 AM
.X
1612 4 1612
1781 4 1612
1945 4 1612
1139 5 1612
1612 5 1612
1612 5 1612
1612 5 1612
.I 1613
.T
One-Pass Compilation Arithmetic Expressions Parallel Processor
.W
Under assumption processor may have
multiplicity arithmetic units, compiler
such processor should produce object code take
advantage possible parallelism operation.
Most presently known compilation techniques
inadequate such processor because they
produce expression structures must evaluated serially.
technique presented here compiling
arithmetic expressions into structures can
evaluated high degree parallelism.
algorithm variant so-called "top-down"
analysis technique, requires only one pass
input text.
.B
CACM April, 1967
.A
Stone, H. S.
.N
CA670402 JB February 28, 1978 11:36 AM
.X
1086 4 1613
1132 4 1613
1234 4 1613
1263 4 1613
1265 4 1613
1270 4 1613
1323 4 1613
1358 4 1613
1379 4 1613
1380 4 1613
1453 4 1613
1464 4 1613
1484 4 1613
1491 4 1613
1498 4 1613
1613 4 1613
1613 4 1613
1613 4 1613
1613 4 1613
1613 4 1613
1614 4 1613
1646 4 1613
1781 4 1613
1825 4 1613
1860 4 1613
1900 4 1613
1947 4 1613
1955 4 1613
2025 4 1613
2083 4 1613
2154 4 1613
2178 4 1613
2179 4 1613
2252 4 1613
2325 4 1613
2341 4 1613
2365 4 1613
2506 4 1613
2546 4 1613
2645 4 1613
2652 4 1613
2684 4 1613
2842 4 1613
2929 4 1613
2934 4 1613
3060 4 1613
3069 4 1613
669 4 1613
679 4 1613
691 4 1613
761 4 1613
949 4 1613
989 4 1613
987 5 1613
1086 5 1613
1134 5 1613
1453 5 1613
1613 5 1613
1613 5 1613
1613 5 1613
1781 5 1613
2175 5 1613
3184 5 1613
123 6 1613
196 6 1613
919 6 1613
990 6 1613
1007 6 1613
1046 6 1613
1131 6 1613
1139 6 1613
1140 6 1613
1149 6 1613
1198 6 1613
1215 6 1613
1223 6 1613
1265 6 1613
1303 6 1613
1323 6 1613
1358 6 1613
1366 6 1613
1421 6 1613
1460 6 1613
1462 6 1613
1463 6 1613
1467 6 1613
1468 6 1613
1477 6 1613
1491 6 1613
1496 6 1613
1531 6 1613
1535 6 1613
1551 6 1613
1565 6 1613
1601 6 1613
1602 6 1613
1613 6 1613
1613 6 1613
1614 6 1613
1626 6 1613
1641 6 1613
1787 6 1613
1788 6 1613
205 6 1613
224 6 1613
249 6 1613
1886 6 1613
288 6 1613
316 6 1613
381 6 1613
398 6 1613
11 6 1613
404 6 1613
410 6 1613
463 6 1613
464 6 1613
483 6 1613
3184 6 1613
3188 6 1613
584 6 1613
600 6 1613
680 6 1613
691 6 1613
763 6 1613
799 6 1613
.I 1614
.T
Proposal Definitions ALGOL
.W
extension ALGOL proposed adding
new data types operators language.
Definitions may occur any block heading terminate
block. They integral part
program not fixed language. Even
behavior existing operators may redefined.
processing text containing defined contexts features
"replacement rule" eliminates unnecessary
iterations temporary storage. Examples definition sets
given real complex matrices,
complex numbers, file processing, list manipulation.
.B
CACM April, 1967
.A
Galler, B. A.
Perlis, A. J.
.N
CA670401 JB February 28, 1978 11:43 AM
.X
1086 4 1614
1132 4 1614
1234 4 1614
1263 4 1614
1265 4 1614
1270 4 1614
1323 4 1614
1358 4 1614
1379 4 1614
1380 4 1614
1453 4 1614
1464 4 1614
1484 4 1614
1491 4 1614
1498 4 1614
1613 4 1614
1614 4 1614
1614 4 1614
1781 4 1614
1825 4 1614
1860 4 1614
2083 4 1614
2178 4 1614
2179 4 1614
2252 4 1614
2253 4 1614
2325 4 1614
2341 4 1614
2546 4 1614
2557 4 1614
2645 4 1614
2652 4 1614
2684 4 1614
2842 4 1614
2929 4 1614
2934 4 1614
3069 4 1614
669 4 1614
679 4 1614
691 4 1614
761 4 1614
949 4 1614
989 4 1614
1614 5 1614
1614 5 1614
1614 5 1614
1693 5 1614
1781 5 1614
1824 5 1614
1861 5 1614
2126 5 1614
437 5 1614
3184 5 1614
823 6 1614
123 6 1614
196 6 1614
196 6 1614
919 6 1614
990 6 1614
1007 6 1614
1046 6 1614
1131 6 1614
1139 6 1614
1140 6 1614
1149 6 1614
1198 6 1614
1215 6 1614
1223 6 1614
1265 6 1614
1303 6 1614
1323 6 1614
1358 6 1614
1358 6 1614
1366 6 1614
1421 6 1614
1421 6 1614
1460 6 1614
1462 6 1614
1463 6 1614
1467 6 1614
1468 6 1614
1477 6 1614
1477 6 1614
1491 6 1614
1491 6 1614
1496 6 1614
1531 6 1614
1535 6 1614
1565 6 1614
1601 6 1614
1602 6 1614
1613 6 1614
1614 6 1614
1614 6 1614
1614 6 1614
1614 6 1614
1614 6 1614
1626 6 1614
1641 6 1614
1693 6 1614
1781 6 1614
1781 6 1614
1787 6 1614
1788 6 1614
205 6 1614
224 6 1614
249 6 1614
288 6 1614
316 6 1614
381 6 1614
398 6 1614
11 6 1614
404 6 1614
404 6 1614
404 6 1614
408 6 1614
410 6 1614
463 6 1614
464 6 1614
483 6 1614
3184 6 1614
3188 6 1614
584 6 1614
600 6 1614
680 6 1614
691 6 1614
763 6 1614
799 6 1614
.I 1615
.T
Algorithm Generating Root Locus Diagrams
.W
technique using digital computer
draw both ordinary time-lag root locus diagrams
described. Ordinary diagrams drawn much faster
more accurately than ever before. Time-lag
diagrams, which had been impossible obtain, drawn
same speed accuracy ordinary
diagrams.
.B
CACM March, 1967
.A
Krall, A. M.
Fornaro, R.
.N
CA670313 JB February 28, 1978 12:57 PM
.X
1615 5 1615
1615 5 1615
1615 5 1615
.I 1616
.T
Tensor Calculations Computer: Appendix
.W
main text paper [Comm. ACM 9,
12 (Dec. 196), 864], FORMAC program discussed
which capable calculating various quantities
interest tensor calculus. Appendix
intended example program output. Chrisoffel
symbols calculated 12 basic orthogonal
coordinate systems listed.
.B
CACM March, 1967
.A
Walton, J. J.
.N
CA670312 JB February 28, 1978 12:58 PM
.X
1543 5 1616
1616 5 1616
1616 5 1616
1616 5 1616
1664 5 1616
1345 6 1616
1345 6 1616
1543 6 1616
1616 6 1616
1616 6 1616
.I 1617
.T
Eigenvalues Eigenvectors
Symmetric System (Algorithm 297 [F2])
.B
CACM March, 1967
.A
Boothroyd, J.
.N
CA670311a JB February 28, 1978 12:59 PM
.X
1617 5 1617
1617 5 1617
1617 5 1617
.I 1618
.T
Determination Square-Root Positive
Definite Matrix (Algorithm 298 [F1])
.B
CACM March, 1967
.A
Spath, H.
.N
CA670311b JB March 23, 1978 4:09 PM
.X
1618 5 1618
1618 5 1618
1618 5 1618
.I 1619
.T
Error-Free Methods Statistical Computations
.W
Neely has discussed computational error generated
some algorithms used compute various
statistics. present paper methods described
which error-free, simple concept,
usually less costly machine time than those mentioned Neely.
.B
CACM March, 1967
.A
Rodden, B. E.
.N
CA670310 JB February 28, 1978 1:02 PM
.X
1619 4 1619
3166 4 1619
1411 5 1619
1619 5 1619
1619 5 1619
1619 5 1619
.I 1620
.T
Methods Evaluating Polynomial Approximations
Function Evaluation Routines
.W
method nested multiplication commonly
used function evaluation routines evaluate
approximation polynomials. New polynomial evaluation
methods have been developed recent years which
require fewer multiplications than nested multiplication
may therefore preferable use function
evaluation routines. Although some these methods
do not appear practically useful because
rounding-error difficulties, several methods evaluating
low-degree polynomials have been found
satisfactory. Three such methods described illustrated.
.B
CACM March, 1967
.A
File, C. T.
.N
CA670309 JB February 28, 1978 1:08 PM
.X
1620 4 1620
1620 4 1620
819 4 1620
1620 5 1620
1620 5 1620
1620 5 1620
436 5 1620
819 5 1620
.I 1621
.T
Computer Typesetting ALGOL
.W
application computer-aided typesetting
introduced. working method described
publishing ALGOL computerized translation
Hardware into Reference representation, computerized
planning typographical lay-out computerized control
typesetting machine. point made
experts science, technology, programming
guaranteed correct ALGOL documentation without
spending valuable time power typographic considerations proofreading.
.B
CACM March, 1967
.A
Sydow, L. V.
.N
CA670308 JB February 28, 1978 1:12 PMB
.X
1621 5 1621
1621 5 1621
1621 5 1621
.I 1622
.T
Efficient Procedure Generation Closed Subsets
.W
efficient algorithm described generating
subsets set S which satisfy constraints
form: "If s(i) member subset, then
s(j) must also member subset."
algorithm has been programmed WISP language
successfully run IBM 7094 connection
routine detect feedback multidimensional iterative networks.
.B
CACM March, 1967
.A
Waite, W. M.
.N
CA670307 JB February 28, 1978 1:18 PM
.X
1622 5 1622
1622 5 1622
1622 5 1622
.I 1623
.T
Application FORMAC
.W
nonlinear circuit analysis problem stated
way which solved using FORMAC
indicated. solution problem using FORMAC
notable since several other methods
were tried failed. problem straightforward (although
untenable hand) but nevertheless involved
elaborate use FORMAC language. program
fairly large utilized practically every
command. particular, made extensive use
PART command. Several tricks were necessary
order circumvent some shortcomings
FORMAC system. paper more concerned
use programming techniques FORMAC than
actual engineering problem, although readers
may interested problem because stated
general (mathematical) sense could
interest areas other than circuit analysis.
.B
CACM March, 1967
.A
Neidleman, L. D.
.N
CA670306 JB February 28, 1978 1:27 PM
.X
1623 5 1623
1623 5 1623
1623 5 1623
.I 1624
.T
Automatic Dimensioning
.W
Examples algorithm accomplish
automatic storage reservation without need
explicit array declarations described.
.B
CACM March, 1967
.A
Klerer, M.
May, J.
.N
CA670305 JB February 28, 1978 1:28 PM
.X
1396 4 1624
1624 4 1624
1083 5 1624
1624 5 1624
1624 5 1624
1624 5 1624
.I 1625
.T
Automatic Simplification Source-Language Programs
.W
Methods simplification can applied
automatically programs written ALGOL-like
language discussed. simplifications based
form program knowledge obtained
processor, without any understanding
program supposed do. These methods have
been implemented processor called SURE accepts
program written JOVIAL outputs equivalent
JOVIAL program may shorter may executed
faster than original. SURE described,
some problems encountered automatic improvement
source-language level discussed,
further types automatic program improvement suggested.
.B
CACM March, 1967
.A
Clark, E. R.
.N
CA670304 JB February 28, 1978 1:33 PM
.X
1084 4 1625
1379 4 1625
1625 4 1625
1625 4 1625
1807 4 1625
1945 4 1625
1947 4 1625
1248 5 1625
1625 5 1625
1625 5 1625
1625 5 1625
669 5 1625
.I 1626
.T
Structure LISP System Using Two-Level Storage
.W
ideal list-processing system there would
enough core memory contain all data
programs. Described paper number
techniques have been used build LISP
system utilizing drum its principal storage medium,
surprisingly low time penalty use
slow storage device. techniques include
careful segmentation system programs, allocation
virtual memory allow address arithmetic type
determination, special algorithm building
reasonably linearized lists. scheme binding variables
described which good environment
allows complete compatibility between compiled
interpreted programs no special declarations.
.B
CACM March, 1967
.A
Bobrow, D. G.
Murphy, D. L.
.N
CA670303 JB February 28, 1978 1:39 PM
.X
1626 4 1626
1708 4 1626
1781 4 1626
1860 4 1626
2299 4 1626
1626 5 1626
1626 5 1626
1626 5 1626
1641 5 1626
1708 5 1626
1781 5 1626
1826 5 1626
1860 5 1626
2156 5 1626
2168 5 1626
2249 5 1626
2314 5 1626
2719 5 1626
2736 5 1626
2833 5 1626
123 6 1626
196 6 1626
919 6 1626
990 6 1626
1007 6 1626
1046 6 1626
1098 6 1626
1131 6 1626
1139 6 1626
1140 6 1626
1149 6 1626
1198 6 1626
1215 6 1626
1223 6 1626
1265 6 1626
1303 6 1626
1323 6 1626
1358 6 1626
1366 6 1626
1366 6 1626
1389 6 1626
1421 6 1626
1421 6 1626
1460 6 1626
1462 6 1626
1463 6 1626
1467 6 1626
1468 6 1626
1477 6 1626
1491 6 1626
1496 6 1626
1496 6 1626
1531 6 1626
1535 6 1626
1565 6 1626
1601 6 1626
1602 6 1626
1613 6 1626
1614 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1626 6 1626
1641 6 1626
1641 6 1626
1641 6 1626
1708 6 1626
1785 6 1626
1786 6 1626
1787 6 1626
1788 6 1626
205 6 1626
1826 6 1626
1826 6 1626
1826 6 1626
1826 6 1626
210 6 1626
210 6 1626
210 6 1626
224 6 1626
1853 6 1626
1853 6 1626
249 6 1626
1878 6 1626
288 6 1626
1972 6 1626
1972 6 1626
316 6 1626
378 6 1626
381 6 1626
398 6 1626
2082 6 1626
11 6 1626
2148 6 1626
2151 6 1626
2167 6 1626
2210 6 1626
2645 6 1626
2657 6 1626
2736 6 1626
404 6 1626
410 6 1626
463 6 1626
464 6 1626
483 6 1626
3184 6 1626
3184 6 1626
3188 6 1626
584 6 1626
600 6 1626
680 6 1626
691 6 1626
731 6 1626
763 6 1626
799 6 1626
.I 1627
.T
Application Level Changing Multilevel Storage Organization
.W
technique organizing devices computer
storage system described. technique,
called multilevel store, provides means economically
satisfying requirements very large
storage capacities certain data management information
retrieval systems. concept level
changing introduced its application multilevel
store discussed. possible means
physically organizing information efficient
use multilevel store presented.
.B
CACM March, 1967
.A
Morenoff, E.
McLean, J. B.
.N
CA670302 JB February 28, 1978 1:43 PM
.X
1627 5 1627
1627 5 1627
1627 5 1627
.I 1628
.T
Emergence Profession
.W
Computer programming deals enormous
variety activities carried people
great variety backgrounds. seems clear
part but not all activity evolving
toward distinct professional field, but
scope emerging profession, some its
economic, social, educational characteristics
yet no means well defined. paper,
these issues examined some opinions them expressed.
.B
CACM March, 1967
.A
Orden, A.
.N
CA670301 JB February 28, 1978 1:47 PM
.X
1628 5 1628
1628 5 1628
1628 5 1628
1770 5 1628
1628 6 1628
.I 1629
.T
Stat-Pack: Biostatistical Programming Package
.W
package FORTRAN statistical programs use
almost any small medium size (40k characters
8k words) which FORTRAN II compiler exists
described its availability announced.
major design criteria ease use, ease modification,
flexibility input detail output
described.
.B
CACM February, 1967
.A
Shannon, S.
Henschke, C.
.N
CA670213 JB February 28,1978 1:57 PM
.X
1629 5 1629
1629 5 1629
1629 5 1629
.I 1630
.T
Computer Representation Planar Regions Their Skeletons
.W
Any region can regarded union maximal
neighborhoods its points, can specified
centers radii these neighborhoods;
set sort of"skeleton" region.
storage required represent region way
comparable required represented
encoding its boundary. Moreover, skeleton representation
seems have advantages
necessary determine repeatedly whether points inside
outside region, perform set-theoretic
operations regions.
.B
CACM February, 1967
.A
Pfaltz, J. L. Rosenfeld, A.
.N
CA670212 JB February 28, 1978 2:07 PM
.X
1630 4 1630
2547 4 1630
2987 4 1630
3165 4 1630
1326 5 1630
1630 5 1630
1630 5 1630
1630 5 1630
2987 5 1630
1326 6 1630
1630 6 1630
2125 6 1630
2547 6 1630
2633 6 1630
421 6 1630
524 6 1630
.I 1631
.T
Testing Random Number Generator
.W
first 1,000,000 numbers produced
random number generator used General Purpose
Systems Simulator (GPSS) were subjected statistical
tests. tests described results
tests presented. These particular tests indicate
numbers satisfactory.
recommended suitable tests applied all
random numbers used computer simulations.
.B
CACM February, 1967
.A
Gorenstein, S.
.N
CA670211 JB February 28, 1978 2:10 PM
.X
1631 5 1631
1631 5 1631
1631 5 1631
1691 5 1631
1293 6 1631
1420 6 1631
1631 6 1631
.I 1632
.T
Programming Tabular Method Analysis
Variance Factorial Experiments
.W
ease programming tabular method analysis
variance complete factorial experiments
FORTRAN language demonstrated. method,
total sum squares partitioned into
orthogonal single degree freedom sums squares;
main effect interaction sums squares
then obtained appropriate pooling single degree
freedom sums squares. Program segments
accomplish procedure presented. Modifications
handle hierarchical designs replicated
experiments mentioned. FORTRAN II program
IBM 7094 described briefly.
.B
CACM February, 1967
.A
Carmer, S. G.
.N
CA670210 JB February 28, 1978 2:33 PM
.X
1632 5 1632
1632 5 1632
1632 5 1632
.I 1633
.T
Modified Newton Method Polynomials
.W
modified Newton method polynomials
discussed. assumed one has approximations
all roots polynomial. Three variations
described. If roots simple,
shown under appropriate conditions, two
variations cubically convergent.
.B
CACM February, 1967
.A
Ehrlich, L. W.
.N
CA670209 JB February 28, 1978 2:33 PM
.X
1633 4 1633
1452 5 1633
1633 5 1633
1633 5 1633
1633 5 1633
.I 1634
.T
27 bits Not Enough 8-digit Accuracy
.W
inequality 10^8 < 2^27, we likely
conclude we can represent 8-digit decimal
floating-point numbers accurately 27-bit floating-point
numbers. However, we need 28 significant
bits represent some 8-digit numbers accurately.
general, we can show if 10^p < 2^q-1, then
q significant bits always enough p-digit decimal
accuracy. Finally, we can define compact
27-bit floating-point representation give 28
significant bits, numbers practical importance.
.B
CACM February, 1967
.A
Goldberg, I. B.
.N
CA670208 JB February 28, 1978 2:38 PM
.X
1634 5 1634
1634 5 1634
1634 5 1634
1783 5 1634
1843 5 1634
1634 6 1634
1634 6 1634
1783 6 1634
.I 1635
.T
Parameters Pseudo Runge-Kutta Methods
.W
object note present choice
free parameters third- fourth-order
pseudo Runge-Kutta methods involving two points.
choice parameters causes bound principal
part truncation error term near minimum
fourth-order method minimum
third-order method.
.B
CACM February, 1967
.A
Byrne, G. D.
.N
CA670207 JB February 28, 1978 3:20 PM
.X
1635 5 1635
1635 5 1635
1635 5 1635
.I 1636
.T
Invariant Imbeding Numerical Integration
Boundary-Value Problems Unstable Linear
Systems Ordinary Differential Equations
.W
such diverse areas radiative transfer
planetary atmospheres optimal guidance
control, two-point boundary-value problems unstable
systems arise, greatly complicating numerical
solution. invariant imbeding technique presented
which useful overcoming these frequently
encountered instabilities, results
some numerical experiments given.
.B
CACM February, 1967
.A
Belman, R. E.
Kagiwada, H. H.
Kalaba, R. E.
.N
CA670206 JB February 28, 1978 3:28 PM
.X
1636 5 1636
1636 5 1636
1636 5 1636
2427 5 1636
1581 6 1636
1636 6 1636
.I 1637
.T
Problems Statistical Analysis Simulation
Experiments: Comparison Means
Length Sample Records
.W
Research continued into statistical analysis
simulation experiments containing autocorrelated
time series. shown estimate lengths
sample records needed use certain large sample
results measuring stability. Analogies between autocorrelated
data independent observations
described. way test difference mean
two experiments suggested. shown
variance sample mean relates spectrum
generating process, estimation
quantities interest described. results
expand possibilities statistical spectral
analysis applied simulation experiments.
.B
CACM February, 1967
.A
Fishman, G. S.
.N
CA670205 JB February 28, 1978 3:34 PM
.X
1637 5 1637
1637 5 1637
1637 5 1637
.I 1638
.T
Sorting Replacement Selecting
.W
sorting replacement selecting, expected
length sequence beginning i-th
element (i>1) proved 2F, accordance
conjecture E. H. Friend, F number
memory cells used. expected length j-th
sequence determined F times j-th degree
polynomial e, such value polynomial
approaches 2 j approaches infinity. Recursive
formulas obtained both mean standard
deviation length j-th sequence.
mathematical proofs these results based
upon assumption n, number items
sorted, infinite, but shown error
due finiteness n approaches zero rapidly
n increases.
.B
CACM February, 1967
.A
Gasner, B. J.
.N
CA670204 JB February 28, 1978 3:56 PM
.X
1638 4 1638
2176 4 1638
2272 4 1638
1638 5 1638
1638 5 1638
1638 5 1638
1867 5 1638
2272 5 1638
677 5 1638
1638 6 1638
1638 6 1638
677 6 1638
.I 1639
.T
Exponential Curve Fit (Algorithm 295 [E2])
.B
CACM February, 1967
.A
Spath, H.
.N
CA670203a JB February 28, 1978 3:57 PM
.X
1639 4 1639
1480 5 1639
1639 5 1639
1639 5 1639
1639 5 1639
2101 5 1639
2102 5 1639
1639 6 1639
1639 6 1639
.I 1640
.T
Generalized Least Squared Fit Orthogonal
Polynomials (Algorithm 296 [E2])
.B
CACM February, 1967
.A
Makinson, G. J.
.N
CA670203b JB March 23, 1978 4:13 PM
.X
1640 5 1640
1640 5 1640
1640 5 1640
.I 1641
.T
Use Fast Slow Memories List-Processing Languages
.W
scheme described which permitting substantial
increase memory space utilized store
list-structured data. consists reducing one
level nonhomogeneous store composed fast (core)
slow (disk drum) memories. space available
slow memory divided into pages each containing
given number machine words. reduction
one-level memory performed program which
leaves most often called pages fast memory.
new page slow store requested,
page core having longest period inactivity
transferred back slow store.
complete scheme has been implemented connection
LISP embedding into ALGOL, using IBM 7044
32k core memory disks. Gains memory space
were 100-fold. often happens programming
applications price additional space computer
time. Although disks have access time
10^4 times slower than core, tests indicate
actual slow down varied 3 10, depending
number pages available fast store.
.B
CACM February, 1967
.A
Cohen, J.
.N
CA670202 JB February 28, 1978 4:06 PM
.X
1626 5 1641
1641 5 1641
1641 5 1641
1641 5 1641
1708 5 1641
1781 5 1641
1860 5 1641
2299 5 1641
123 6 1641
196 6 1641
919 6 1641
990 6 1641
1007 6 1641
1046 6 1641
1131 6 1641
1139 6 1641
1140 6 1641
1149 6 1641
1198 6 1641
1215 6 1641
1223 6 1641
1265 6 1641
1303 6 1641
1323 6 1641
1358 6 1641
1366 6 1641
1366 6 1641
1389 6 1641
1421 6 1641
1421 6 1641
1460 6 1641
1462 6 1641
1463 6 1641
1467 6 1641
1468 6 1641
1477 6 1641
1491 6 1641
1496 6 1641
1496 6 1641
1502 6 1641
1531 6 1641
1535 6 1641
1565 6 1641
1601 6 1641
1602 6 1641
1613 6 1641
1614 6 1641
1626 6 1641
1626 6 1641
1626 6 1641
1641 6 1641
1641 6 1641
1641 6 1641
1641 6 1641
1641 6 1641
1785 6 1641
1786 6 1641
1787 6 1641
1788 6 1641
205 6 1641
224 6 1641
249 6 1641
288 6 1641
316 6 1641
378 6 1641
381 6 1641
398 6 1641
11 6 1641
404 6 1641
410 6 1641
463 6 1641
464 6 1641
483 6 1641
3184 6 1641
3184 6 1641
3188 6 1641
584 6 1641
600 6 1641
680 6 1641
691 6 1641
763 6 1641
799 6 1641
.I 1642
.T
Time Sharing Computer Small Memory
.W
Techniques make time sharing attractive
computer small central memory presented.
"Small" taken mean only one user program plus
monitor fit into memory any time.
techniques depend having two levels secondary
storage: level 1, several times larger than
main memory quite fast; level 2,
many times larger slower than level 1.
.B
CACM February, 1967
.A
Fisher, R. O.
Shepard, C. D.
.N
CA670201 JB February 28, 1978 4:10 PM
.X
1642 5 1642
1642 5 1642
1642 5 1642
.I 1643
.T
Improvement Iterative Methods Polynomial Factorization
.W
Methods polynomial factorization which
find zeros one time require division
polynomial accepted factor. shown
accuracy division may increased
dividing order both ascending descending
powers variable choosing crossover
point which minimizes very simply calculated error criterion.
.B
CACM January, 1967
.A
Bingham, J. A. C.
.N
CA670112 JB February 28, 1978 4:20 PM
.X
1643 5 1643
1643 5 1643
1643 5 1643
.I 1644
.T
Computation Least Squares Polynomials
.W
Rounding error accumulated during digital computation
least squares polynomial makes
computed polynomial only approximation true least
square polynomial. simple method adjust ing
constant term computed polynomial get
better approximation true least squares
polynomial described.
.B
CACM January, 1967
.A
Goldberg, M.
.N
CA670111 JB February 28, 1978 4:24 PM
.X
1644 5 1644
1644 5 1644
1644 5 1644
.I 1645
.T
Note Computing Approximations Exponential Function
.W
Two methods discussed which result near
minimax rational approximations exponential
function same time retain desirable property
approximation negative values
argument reciprocal approximation
corresponding positive values. These methods
lead approximations which much superior
commonly used convergents Gaussian continued
fraction exponential. Coefficients errors
given intervals [-.5*ln 2, .5*ln 2]
[-ln 2, ln 2].
.B
CACM January, 1967
.A
Cody, W. J.
Ralston, A.
.N
CA670110JB February 28, 1978 4:25 PM
.X
1015 4 1645
1346 4 1645
1440 4 1645
1645 4 1645
951 4 1645
1645 5 1645
1645 5 1645
1645 5 1645
532 5 1645
.I 1646
.T
DITRAN-A Compiler Emphasizing Diagnostics
.W
DITRAN (Diagnostic FORTRAN) implementation
ASA Basic FORTRAN rather extensive
error checking capabilities both compilation time
during execution program. need
improved diagnostic capabilities some objectives
met any compiler discussed. Attention
given design implementation DITRAN
particular techniques employed provide
diagnostic features. handling error messages
general macro approach described. Special
features which provide teaching aids use instructors noted.
.B
CACM January, 1967
.A
Moulton, P. G.
Muller, M. E.
.N
CA670109 JB February 28, 1978 4:30 PM
.X
1179 4 1646
1225 4 1646
1288 4 1646
1350 4 1646
1544 4 1646
1613 4 1646
1646 4 1646
1646 4 1646
1646 4 1646
1646 4 1646
1646 4 1646
1646 4 1646
1647 4 1646
1728 4 1646
1781 4 1646
1900 4 1646
1945 4 1646
1955 4 1646
2025 4 1646
2111 4 1646
2154 4 1646
2365 4 1646
2506 4 1646
2534 4 1646
2556 4 1646
2650 4 1646
2650 4 1646
2698 4 1646
2708 4 1646
3060 4 1646
3093 4 1646
987 5 1646
1072 5 1646
1179 5 1646
1646 5 1646
1646 5 1646
1646 5 1646
1647 5 1646
2887 5 1646
680 5 1646
830 5 1646
1646 6 1646
2111 6 1646
.I 1647
.T
WATFOR-The University Waterloo FORTRAN IV Compiler
.W
WATFOR in-core, load-and-go compiler
which has been implemented within IBM 7040/44
operating system. FORTRAN IV selected source
language order achieve maximum language
compatibility other available compiling systems,
particular IBM 7040/44 FORTRAN IV system.
principal advantage WATFOR compiler
translates FORTRAN IV programs speeds
up 100 statements per second. Since compiler
resides core there virtually no system overhead,
hence large batches "student" programs may processed very
efficiently. compiler also provides
extensive error diagnostics, during both compilation
execution phases program run.
feature makes system attractive
both learners learned users alike.
.B
CACM January, 1967
.A
Shantz, P. W.
German, R. A.
Mitchell, J. G.
.N
CA670108 JB February 28, 1978 4:36 PM
.X
267 4 1647
1139 4 1647
1141 4 1647
1215 4 1647
1223 4 1647
1646 4 1647
1647 4 1647
1647 4 1647
1781 4 1647
1787 4 1647
1792 4 1647
364 4 1647
405 4 1647
438 4 1647
763 4 1647
1179 5 1647
224 5 1647
1646 5 1647
1647 5 1647
1647 5 1647
1647 5 1647
1728 5 1647
830 6 1647
987 6 1647
1072 6 1647
1179 6 1647
1525 6 1647
1647 6 1647
1647 6 1647
1785 6 1647
680 6 1647
.I 1648
.T
Uniform Random (Algorithm 294 [G5])
.B
CACM January, 1967
.A
Strome, W. M.
.N
CA670107 JB February 28, 1978 4:37 PM
.X
1648 5 1648
1648 5 1648
1648 5 1648
1663 5 1648
2349 5 1648
1190 6 1648
1648 6 1648
1648 6 1648
1716 6 1648
1794 6 1648
1894 6 1648
2043 6 1648
501 6 1648
613 6 1648
774 6 1648
.I 1649
.T
Data Directed Input-Output FORTRAN
.W
statement which similar NAMELIST
statement FORTRAN IV has been incorporated
FORTRAN 63 compiler. FORTRAN 63 implementation
allows greater flexibility simplicity
than FORTRAN IV feature. Hollerith names,
location, mode dimensions variable
can discovered means standard FORTRAN statements.
Methods using information illustrated
relation general purpose data directed input
output routines; some other uses such matrix
manipulation discussed.
.B
CACM January, 1967
.A
Hassitt, A.
.N
CA670106 JB February 28, 1978 4:41 PM
.X
1649 4 1649
1053 5 1649
1649 5 1649
1649 5 1649
1649 5 1649
.I 1650
.T
Unifying Computational Method
Analysis Complete Factorial Experiments
.W
computational method which may used
calculation sums squares analysis
variance complete factorial experiments
computation main effect interaction means
described. method elucidated unifying since
one method can used variety purposes
each previously requiring different methods. programming
advantages such method obvious.
following variants discussed: (1) standard
analysis variance; (2) analyses omitting certain
levels one more factors; (3) separate analyses
some levels factor combinations
levels more than one factor. These performed
simultaneously; (4) calculation main effect
interaction means. mean expects data standard
order leaves data order
so many analyses same data can performed
without rearrangement. total sum squares,
excluding replication sum squares, partitioned
into all polynomial partitions their interactions
each one degree freedom. so even
if factors have unequally spaced factor levels.
.B
CACM January, 1967
.A
Cooper, B. E.
.N
CA670105 JB February 28, 1978 4:49 PM
.X
1650 5 1650
1650 5 1650
1650 5 1650
.I 1651
.T
Interpretive Input Routine Linear Programming
.W
descriptive article input code
presented which greatly simplifies data input
any linear programming solution routine, subsequent
use either pedagogical device
solving rather small LP problems. latter (limited)
use derives not all inherent limitations
code itself, but efficiency evaluation:
large LP problems would doubtless benefit
input system more suited bulk data handling than
input code described. user's standpoint,
input appears almost exactly textbook presentation
LP problem (limited only keypunch's
inability write subscripts, etc.). input interpreter
scans column wise, thus no fixed format
data preparation required. user may also, under
very general requirements only, liberally use
editorial comments throughout input deck
aid identification, e.g., row constraints.
article includes examples input, output
solution routine presently use, skeleton
flowchart input interpreter.
.B
CACM January, 1967
.A
Aigner, D. J.
.N
CA670104 JB March 1, 1978 8:58 AM
.X
1651 5 1651
1651 5 1651
1651 5 1651
.I 1652
.T
Code Non-numeric Information Processing
Applications Online Systems
.W
code has been specifically designed simplify
internal information processing operations
within online computer system respect non-numeric
applications, maximize transfer
rate information channel linking system
system user. code has direct application
problems area such information retrieval, document
classification, computer-aided teaching
text editing. code, called IPC (Information Processing
Code), 8-bit code set constructed
so 7, 6, 5 4-bit subsets can easily derived
basic set. code set organized
so simple binary operations can distinguish between
numeric alphabetic, special symbol control
character codes. number usable characters within
basic set size may expanded either
use escape codes included set, suitable
interpretation otherwise unassigned codes
basis requirements local environments.
.B
CACM January, 1967
.A
Morenoff, E.
McLean, J. B.
.N
CA670103 JB March 1, 1978 9:05 AM
.X
1652 5 1652
1652 5 1652
1652 5 1652
.I 1653
.T
System Performance Evaluation: Survey Appraisal
.W
state art system performance
evaluation reviewed evaluation goals
problems examined. Throughput, turnaround,
availability defined fundamental measures
performance; overhead CPU speed placed
perspective. appropriateness instruction
mixes, kernels, simulators, other tools discussed,
well pitfalls which may encountered
using them. Analysis, simulation, synthesis
presented three levels approach evaluation,
requiring successively greater amounts information.
central role measurement performance
evaluation development evaluation methods explored.
.B
CACM January, 1967
.A
Calingaert, P.
.N
CA670102 JB March 1, 1978 9:10 AM
.X
1653 4 1653
1653 4 1653
1653 4 1653
2387 4 1653
2852 4 1653
2989 4 1653
963 5 1653
1069 5 1653
1417 5 1653
1653 5 1653
1653 5 1653
1653 5 1653
2151 5 1653
2318 5 1653
1653 6 1653
1653 6 1653
1747 6 1653
1860 6 1653
.I 1654
.T
University's Educational Program Computer Science
.W
After review power contemporary computers,
computer science defined several
ways. objectives computer science education
stated, asserted North American
university these achieved only through computer
science department. program Stanford
University reviewed example. appendices
include syllabic Ph.D. qualifying examinations
Stanford's Computer Science Department.
.B
CACM January, 1967
.A
Forsythe, G. E.
.N
CA670101 JB March 1, 1978 9:13 AM
.X
1413 4 1654
1654 4 1654
1771 4 1654
2478 4 1654
1205 5 1654
1654 5 1654
1654 5 1654
1654 5 1654
1720 5 1654
1771 5 1654
1205 6 1654
1654 6 1654
1654 6 1654
1771 6 1654
.I 1655
.T
Code Extension Procedures Information
Interchange* (Proposed USA Standard)
.B
CACM December, 1968
.K
standard code, code, information interchange, characters,
shift out, shift in, escape, data link
escape, control functions, standard procedures,
code extension, code table, bit pattern
.C
1.0 2.0 2.43 3.20 3.24 3.50 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.70 3.71 3.72
3.73, 3.74, 3.75, 3.80, 3.81, 3.82, 3.83, 5.0, 5.1, 6.2, 6.21, 6.22
.N
CA681211 JB February 21, 1978 12:16 PM
.X
1655 5 1655
1655 5 1655
1655 5 1655
.I 1656
.T
Procedures Standardization Process* (Proposed USA Standard)
.B
CACM December, 1968
.K
standardization, procedures, criteria
.C
2.3 4.2
.N
CA681210 JB February 21, 1978 12:21 PM
.X
1656 5 1656
1656 5 1656
1656 5 1656
.I 1657
.T
Implementation SHARER2 Time-Sharing System
.W
simple mechanism described execution
part program its own memory
protection. allows such program act
suboperating system. improved version
SHARER time-sharing system using feature described.
.B
CACM December, 1968
.A
Harrison, M. C.
.K
operating system, memory protection, time-sharing,
multiprogramming, monitor, submonitor, suboperating
system
.C
4.32 4.31 4.32
.N
CA681209 JB February 21, 1978 1:27 PM
.X
1657 4 1657
2080 4 1657
2357 4 1657
2536 4 1657
1523 5 1657
1657 5 1657
1657 5 1657
1657 5 1657
.I 1658
.T
Analysis Algorithms Zero-One Programming Problem
.W
paper concerned review examination
several existing algorithms
zero-one programming problem. Computational experience
summarized. machine time storage
requirements several algorithms compared
over several test problems small intermediate
size. Computer experiments still provide little hope
solving problems over 100 variables
reasonable amount machine time.
.B
CACM December, 1968
.A
Gue, R. L.
Liggett, J. C.
Cain, K. C.
.K
operations research, optimization theory, integer
programming, zero-one variables, algorithms
.C
5.39 5.41
.N
CA681208 JB February 21, 1978 1:31 PM
.X
1658 4 1658
1088 5 1658
1658 5 1658
1658 5 1658
1658 5 1658
2226 5 1658
1658 6 1658
1666 6 1658
.I 1659
.T
Computational Linguistics Ph.D. Computer Science Program
.W
report contains recommendations
course curriculum computational linguistics
Ph.D. computer science program. classification
subject areas contained computational linguistics
presented, ten courses these areas described.
basic bibliography computational linguistics
appended.
.B
CACM December, 1968
.A
Kuno, S.
Oettinger, A. G.
.K
computational linguistics, mathematical linguistics,
language computer, language data processing,
computational linguistics course curriculum, computational
linguistics graduate program, computational
linguistics bibliography, computer science curriculum
.C
1.52 3.42 3.43
.N
CA681207 JB February 21, 1978 1:37 PM
.X
1350 4 1659
1350 4 1659
1399 4 1659
1659 4 1659
1659 4 1659
1659 4 1659
1659 4 1659
1659 4 1659
1768 4 1659
1781 4 1659
1856 4 1659
1945 4 1659
2050 4 1659
2110 4 1659
3094 4 1659
1225 5 1659
1265 5 1659
1350 5 1659
1659 5 1659
1659 5 1659
1659 5 1659
1671 5 1659
1697 5 1659
1927 5 1659
3003 5 1659
1659 6 1659
1659 6 1659
1678 6 1659
1771 6 1659
1927 6 1659
1945 6 1659
2097 6 1659
2147 6 1659
2163 6 1659
2187 6 1659
2329 6 1659
2345 6 1659
2367 6 1659
2407 6 1659
2478 6 1659
2479 6 1659
2480 6 1659
2538 6 1659
.I 1660
.T
Index Subject algorithms, 1960-1968
.B
CACM December, 1968
.N
CA681206 JB February 21, 1978 1:39 PM
.X
1660 5 1660
1660 5 1660
1660 5 1660
.I 1661
.T
Multint (Algorithm 32 [D1])
.B
CACM December, 1968
.A
Kolbig, K. S.
.K
numerical integration, multidimensional integration, Gaussian integration
.C
5.16
.N
CA681205 JB February 21, 1978 1:41 PM
.X
1661 5 1661
1661 5 1661
1661 5 1661
.I 1662
.T
Eigenvalues Eigenvectors Real General Matrix [F2])
.B
CACM December, 1968
.A
Grad, J.
Brebner, M. A.
.K
eigenvalues, eigenvectors, latent roots, latent
vectors, Householder's method, QR algorithm, inverse
iteration
.C
5.14
.N
CA681204 JB February 21, 1978 1:42 PM
.X
1662 5 1662
1662 5 1662
1662 5 1662
1968 5 1662
2099 5 1662
2335 5 1662
1662 6 1662
1662 6 1662
1662 6 1662
1707 6 1662
2099 6 1662
.I 1663
.T
Generator Random Numbers Satisfying Poisson distribution [G5])
.B
CACM December, 1968
.A
Snow, R. H.
.K
Poisson distribution, random number generator, Monte Carlo
.C
5.12 5.5
.N
CA681203 JB February 21, 1978 1:45 PM
.X
1663 4 1663
1663 4 1663
2195 4 1663
2349 4 1663
2679 4 1663
1190 5 1663
1648 5 1663
1663 5 1663
1663 5 1663
1663 5 1663
2123 5 1663
1663 6 1663
.I 1664
.T
Algorithm Deriving Equations
Mathematical Physics Symbolic Manipulation
.W
method described whereby digital computer
can used derive equations mathematical
physics any curvilinear coordinate system requested
user. effectiveness technique
demonstrated using derive Navier-Stokes
equations fluid motion continuity
equation. derive these equations method,
user need know only coordinate transformation
equations relating curvilinear coordinates interest
orthogonal Cartesian triad.
program used coordinate transformation equations
supplied input, computer
derive Navier-Stokes equations continuity
equation. equations obtained relative
curvilinear coordinate system specified
transformation equations used input.
paper emphasis theoretical considerations
methodology rather than programming details.
Results presented cylindrical polar
spherical polar coordinate systems.
.B
CACM December, 1968
.A
Howard, J. C.
Tashjian, H.
.K
FORMAC, Navier-Strokes equations, continuity equation,
tensor, tensor equation, curvilinear coordinate
systems, FORTRAN, symbolic manipulation
.C
3.21 3.25 3.29 4.12 4.29
.N
CA681202 JB February 21, 1978 2:02 PM
.X
1543 4 1664
1543 4 1664
1664 4 1664
1664 4 1664
1664 4 1664
1345 5 1664
1543 5 1664
1616 5 1664
1664 5 1664
1664 5 1664
1664 5 1664
.I 1665
.T
Automatic Generation Efficient Lexical
Processors Using Finite State Techniques
.W
practical application theory
finite-state automata automatically generate
lexical processors dealt tutorial article
use AED RWORD system, developed
M.I.T. part AED-1 system. system
accepts input description multicharacter
items words allowable language given terms
subset regular expressions. output
system lexical processor which reads string
characters combines them into items
defined regular expressions. Each output
item identified code number together
pointer block storage containing characters
character count item. processors
produced system based finite-state machines.
Each state "machine" corresponds
unique condition lexical processing character
string. each state character read,
machine changes new state. each transition
appropriate actions taken based
particular character read. system has been operation
since 1966, processors generated have
compared favorably speed carefully hand-coded programs
accomplish same task. Lexical processors
AED-O MAD among many which have been
produced. techniques employed independent
nature items being evaluated. If
word "events" substituted character string,
these processors may described generalized decision-making
mechanisms based upon ordered sequence
events. allows system used
range applications outside area lexical
processing. However convenient these advantages may
be, speed most important consideration.
designing system automatic generation
lexical processor, goal processor which
completely eliminated backup rereading, which nearly
fast hand-coded processors, which would
analyze language detect errors,
which would convenient easy use.
.B
CACM December, 1968
.A
Johnson, W. L.
Porter, J. H.
Ackley, S. I.
Ross, D. T.
.K
character string, compiler, finite-state automata, finite-state
machine, lexical processor, nondeterministic
machine, parsing, plex structure, regular expressions,sequential
machine, syntactic analysis
.C
3.63 3.75 4.12 5.22 5.24 5.31
.N
CA681201 JB February 21, 1978 2:19 PM
.X
1051 4 1665
1139 4 1665
1265 4 1665
1323 4 1665
1358 4 1665
1380 4 1665
1552 4 1665
1665 4 1665
1665 4 1665
1665 4 1665
1665 4 1665
1768 4 1665
1781 4 1665
1787 4 1665
1787 4 1665
1824 4 1665
1825 4 1665
1836 4 1665
1860 4 1665
1861 4 1665
1989 4 1665
2015 4 1665
2110 4 1665
2112 4 1665
2127 4 1665
2155 4 1665
2187 4 1665
2317 4 1665
2534 4 1665
2541 4 1665
2545 4 1665
2698 4 1665
2698 4 1665
2733 4 1665
2733 4 1665
2820 4 1665
3073 4 1665
3155 4 1665
763 4 1665
1665 5 1665
1665 5 1665
1665 5 1665
1781 5 1665
378 5 1665
2746 5 1665
631 5 1665
799 5 1665
1665 6 1665
1739 6 1665
2139 6 1665
2545 6 1665
2786 6 1665
.I 1666
.T
Solution Linear Programs 0-1 Variables
Implicit Enumeration (Algorithm 341 [H])
.B
CACM November, 1968
.A
Byrne, J. L.
Proll, L. G.
.K
linear programming, zero-one variables, partial enumeration
.C
5.41
.N
CA681113 JB February 21, 1978 2:21 PM
.X
1666 5 1666
1666 5 1666
1666 5 1666
2226 5 1666
1658 6 1666
1666 6 1666
.I 1667
.T
Roots Polynomials Root-Squaring
Resultant Routine (Algorithm 340 [C2])
.B
CACM November, 1968
.A
Noltemeier, A.
.K
root finders, roots polynomial equations, polynomial
zeros, root-squaring operations, Graeffe
method, resultant procedure, subresultant procedure,
testing roots, acceptance criteria
.C
5.15
.N
CA681112 JB February 21, 1978 2:24 PM
.X
1667 4 1667
1667 4 1667
1667 4 1667
178 5 1667
1242 5 1667
1667 5 1667
1667 5 1667
1667 5 1667
327 5 1667
.I 1668
.T
Algol Procedure Fast Fourier Transform
Arbitrary Factors (Algorithm 339 [C6])
.B
CACM November, 1968
.A
Singleton, R. C.
.K
fast Fourier transform, multivariate Fourier transform,
Fourier series, harmonic analysis, spectral
analysis, orthogonal polynomials, orthogonal transformation,
virtual core memory, permutation
.C
3.15 3.83 5.12 5.14
.N
CA681111 JB February 21, 1978 2:26 PM
.X
1668 4 1668
1668 4 1668
1669 4 1668
1679 4 1668
1728 4 1668
2859 4 1668
1525 5 1668
1668 5 1668
1668 5 1668
1668 5 1668
1669 5 1668
.I 1669
.T
Algol Procedures Fast Fourier Transform (Algorithm 338 [C6])
.B
CACM November, 1968
.A
Singleton, R. C.
.K
fast Fourier transform, complex Fourier transform,
multivariate Fourier transform, Fourier series,
harmonic analysis, spectral analysis, orthogonal polynomials,
orthogonal transformation, virtual core
memory, permutation
.C
3.15 3.83 5.12 5.14
.N
CA681110 JB February 21, 1978 2:29 PM
.X
1668 4 1669
1669 4 1669
1679 4 1669
1728 4 1669
2859 4 1669
1525 5 1669
1668 5 1669
1669 5 1669
1669 5 1669
1669 5 1669
1525 6 1669
1669 6 1669
.I 1670
.T
Correspondences 8-Bit Hollerith Codes
Computer Environments (A USASI Tutorial Standard)
.B
CACM November, 1968
.K
USA standard, card code, punched card, punched card
code, hole-patterns, hole-patterns assignment,
punched card systems
.C
1.1 1.4 2.0 2.12 2.43 2.44 3.10 3.20 3.30 3.31 3.42 3.50 3.56 3.70 3.72 3.73
3.74, 3.80, 3.81, 4.0, 4.1, 4.2, 4.20, 4.40, 5.0
.N
CA681109 JB February 21, 1978 2:33 PM
.X
1670 5 1670
1670 5 1670
1670 5 1670
.I 1671
.T
Phonological Rule Tester
.W
design implementation system
alleviate problem rule evaluation
linguist area phonology presented.
permits user define, on-line, sets rules
statable within framework presented Sound
Patterns English Chomsky Halle, 1968,
define phonemes bundles specified distinctive
features, define data strings phonemes
associated grammatical structure, test effect
applying rules data, store
both definitions results. rule application
facility described detail implemented
translating linguistic rules rules FLIP,
format-directed list processor embedded LISP.
made system construction easy while providing
sophisticated capabilities linguist.
system written BBN LISP Scientific
Data System 940 computer designed used
on-line interactive fashion, control returned
user after each command executed.
.B
CACM November, 1968
.A
Borrow, D. G.
Fraser, J. B.
.K
phonology, rule tester, linguistics, transformational
grammar, LISP, format-directed list processing,
on-line systems
.C
3.42 4.13 4.22
.N
CA681108 JB February 21, 1978 2:41 PM
.X
1659 5 1671
1671 5 1671
1671 5 1671
1671 5 1671
1225 6 1671
1265 6 1671
1350 6 1671
1671 6 1671
1697 6 1671
.I 1672
.T
Practical Error Coefficients Integration
Periodic Analytic Functions Trapezoidal
Rule
.W
Theoretical practical values error coefficients
useful bounding error integrating
periodic analytic functions trapezoidal rule
tabulated various ranges parameters.
.B
CACM November, 1968
.A
Rabinowitz, P.
.K
theoretical error coefficients, practical error coefficients,
numerical integration, periodic analytic
functions, trapezoidal rule, roundoff error,
truncation error, integration algorithm
.C
5.11 5.16
.N
CA681107 JB February 21, 1978 2:45 PM
.X
1672 4 1672
1672 5 1672
1672 5 1672
1672 5 1672
1784 5 1672
.I 1673
.T
Approximate Solution Initial Boundary Wave
Equation Problems Boundary-Value Techniques
.W
new boundary-value technique proposed
treatment initial-boundary-value problems
linear mildly nonlinear wave equations. Several
illustrative examples offered demonstrate
ease which method can applied.
.B
CACM November, 1968
.A
Greenspan, D.
.K
initial-boundary-value problem, wave equation, boundary-value technique
.C
5.15 5.17
.N
CA681106 JB February 21, 1978 2:48 PM
.X
1673 5 1673
1673 5 1673
1673 5 1673
.I 1674
.T
One-Line Random Number Generators Their Use Combinations
.W
Some one-line random number generators, i.e.
generators requiring single FORTRAN instruction
discussed, some short FORTRAN programs which
mix several such generators described.
aim provide methods incorporating random number
generators directly FORTRAN programs,
means few in-line instructions. advantages
speed (avoiding linkage subroutine),
convenience, versatility. Anyone wishing experiment
generators, either using congruential
generators themselves mixing several generators
provide composite potentially better
statistical properties than library generators
currently available, may wish consider some
simple FORTRAN program discussed here.
.B
CACM November, 1968
.A
Marsaglia, G.
Bray, T. A.
.K
random number generation, Monte Carlo, simulation
.C
5.5
.N
CA681105 JB February 21, 1978 2:54 PM
.X
1674 4 1674
1691 4 1674
1293 5 1674
1674 5 1674
1674 5 1674
1674 5 1674
1794 5 1674
1870 5 1674
2122 5 1674
1674 6 1674
1674 6 1674
1674 6 1674
1691 6 1674
.I 1675
.T
Note Relevance Estimate Its Improvement
.W
paper effect iterating improvement
procedure examined. shown
applications improvement factor beyond first
time ineffectual, factor
but scale factor.
.B
CACM November, 1968
.A
Korfhage, R. R.
.K
information retrieval, relevance, indexing, classification
.C
3.70 3.71 3.74
.N
CA681104 JB February 21, 1978 2:57 PM
.X
1675 5 1675
1675 5 1675
1675 5 1675
.I 1676
.T
LRLTRAN Compiler
.W
Extensive software problems confront organization
which possesses number different
computers which frequently acquires new ones.
maintain cohesion, system must developed,
written high level language, which minimizes machine
dependencies isolates those which necessary.
language compiler language discussed
here. language, called LRLTRAN, heavily
augmented FORTRAN. tree-pass compiler makes use
internally postfix Polish notation (pass
pass II) tree representation referred
"composite blocking table" (pass pass III).
Machine-independent optimization occurs pass II
DO-loop machine-dependent optimization
pass III.
.B
CACM November, 1968
.A
Mendicino, S. F.
Martin, J. T.
Ranelletti, J. E.
Zwakenberg, R. G.
.K
compiler, compiler-compiler, machine independence,
scatter storage technique, Polish processor,
common subsegments, tree representation, optimization
.C
4.12 4.20
.N
CA681103 JB February 21, 1978 3:03 PM
.X
1676 4 1676
1682 4 1676
1728 4 1676
1860 4 1676
1973 4 1676
2018 4 1676
2032 4 1676
2033 4 1676
2107 4 1676
2109 4 1676
2203 4 1676
2251 4 1676
2359 4 1676
2524 4 1676
2543 4 1676
2552 4 1676
2559 4 1676
2991 4 1676
3053 4 1676
1676 5 1676
1676 5 1676
1676 5 1676
1785 5 1676
2859 5 1676
1525 6 1676
1676 6 1676
.I 1677
.T
Storage Organization Programming Systems
.W
system program data representation
has been use Rice University computer
five years described. Each logical entity storage
occupies block consecutive memory locations.
Each block labeled codeword may contain
program, data vector, codewords which
turn label blocks form arrays. storage arrangement
discussed its realized advantages
programming systems: simplicity programmed addressing,
flexibility data structures, efficiency
memory utilization, variability system composition
during execution, means linkage between programs
programs data, basis storage protection.
application labeled blocks may
extended areas time-sharing multimedia storage
control. basis experience rice,
some ideas such extensions presented.
.B
CACM November, 1968
.A
Jodeit, J. G.
.K
storage allocation, storage organization, storage
control, codewords, data representation, program
representation, data structures, storage protection,
addressing mechanisms, paging, segmentation, file
handling
.C
4.30 4.40 6.20
.N
CA681102 JB February 21, 1978 3:11 PM
.X
1677 5 1677
1677 5 1677
1677 5 1677
2064 5 1677
1677 6 1677
.I 1678
.T
Automata, Formal Languages, Abstract Switching,
Computability Ph.D. Computer Science
Program
.W
number courses listed area
describe automata, formal languages, abstract
switching, computability, might available
Ph.D. student computer science. brief
catalog description each course applied
role each courses graduate program
discussed.
.B
CACM November, 1968
.A
McNaughton, R.
.K
Ph.D. computer-science curriculum, Ph.D. computer
science program, automata, formal languages,
switching theory, theory computability
.C
1.5 5.2 6.1
.N
CA681101 JB February 21, 1978 3:16 PM
.X
1678 5 1678
1678 5 1678
1678 5 1678
3003 5 1678
1659 6 1678
1678 6 1678
1927 6 1678
1945 6 1678
2097 6 1678
2147 6 1678
2163 6 1678
2187 6 1678
2329 6 1678
2345 6 1678
2367 6 1678
2407 6 1678
2478 6 1678
2479 6 1678
2480 6 1678
2538 6 1678
.I 1679
.T
Fast Fourier Transform Algorithm Real-Valued Series
.W
new procedure presented calculating
complex, discrete Fourier transform real-valued
time series. procedure described example
number points series
integral power two. algorithm preserves
order symmetry Cooley-Turkey fast
Fourier transform algorithm while effecting two-to-one
reduction computation storage which
can achieved series real. Also discussed
hardware software implementations
algorithm which perform only (N/4) log2 (N/2) complex
multiply add operations, which require
only N real storage locations analyzing each N-point record.
.B
CACM October, 1968
.A
Bergland, G. D.
.K
fast Fourier transform, time series analysis, digital
filtering, spectral analysis, real-time spectrum
analyzers, Fourier analysis, discrete Fourier transform,
digital spectrum analysis, Fourier analysis
algorithm, Fourier synthesis algorithm
.C
3.80 3.81 4.9 5.49 6.22
.N
CA681008 JB February 21, 1978 3:23 PM
.X
1668 4 1679
1669 4 1679
1679 4 1679
1728 4 1679
2859 4 1679
1525 5 1679
1679 5 1679
1679 5 1679
1679 5 1679
2354 5 1679
1418 6 1679
1521 6 1679
1597 6 1679
1679 6 1679
2350 6 1679
2355 6 1679
.I 1680
.T
General-Purpose Display Processing Tutorial System
.W
ADEPT (A display-Expedited Processing Tutorial)
system described. system designed
improve man-computer communications employing
display unit interleave tutoring other
computer operations such simulation, programming,
information retrieval. written FORTRAN
IV (G) IBM System/360, Model 40, IBM 2250
display Unit under Operating System/360. Adept
cataloged program controls standard operating
system terminating rescheduling itself
automatically, relinquishing computer resources allocated
it, surrendering control operating
system perform other jobs. expands power
flexibility computer-assisted instruction
making immediately available students, teachers,
other users, full resources (system-cataloged
programs) operating system. Language processors
compilers, simulation models, mathematical
solution techniques, stored data, all other library
user programs can incorporated into instructional
material without reprogramming. Illustrations various
applications presented their implications
discussed.
.B
CACM October, 1968
.A
Engvold, K. J.
Hughes, J. L.
.K
computer-assisted instruction, tutorial systems,
programming, simulation, modeling, information
retrieval operating systems, graphics, displays, man-machine
interface, on-line computing, graphic programming
.C
1.5 3.3 3.5 3.8 4.0 4.3
.N
CA681007 JB February 21, 1978 3:36 PM
.X
1680 4 1680
1591 5 1680
1680 5 1680
1680 5 1680
1680 5 1680
.I 1681
.T
Easy English,a Language Information
Retrieval Through Remote Typewriter Console
.W
Easy English natural command language
designed simplify communication between man
machine through remote typewriter console. has been developed
retrieval documents computerized
data base, Moore School Information Systems Laboratory
files. Requests formulated standardized
syntactical form (examples which presented),
form then transformed into equivalent
query expressed retrieval system's original Symbolic
Command Language, which briefly described.
Operation easy English detailed illustration
transformations performed upon sample
request up point which request string
sent system. macro flowchart Easy
English included, Appendix provides
printout retrieval demonstration.
.B
CACM October, 1968
.A
Rubinoff, M.
Bergman, S.
Cautin, H.
Rapp, F.
.K
natural language communication, on-line searching,
remote console communication, information retrieval,
man-machine communication, remote terminal communication,
translator, document retrieval, conversational
mode, information retrieval language, symbolic command language
.C
3.74 3.81 4.19
.N
CA681006 JB February 21, 1978 3:59 PM
.X
1681 4 1681
1699 4 1681
1194 5 1681
1681 5 1681
1681 5 1681
1681 5 1681
1699 5 1681
1194 6 1681
1324 6 1681
1681 6 1681
.I 1682
.T
Implementation BASIC System Multiprogramming Environment
.W
implementation remote terminal BASIC system
within context existing multiprogramming
computer system, Burroughs B5500, described.
implementation combines unique mixture
machine language interpretive techniques incremental compiler.
.B
CACM October, 1968
.A
Braden, H. V.
Wulf, W. A.
.K
multiprogramming, incremental compilation, compilers, interpreters
.C
4.1 4.12 4.2 4.22 4.3 4.32
.N
CA681005 JB February 21, 1978 4:04 PM
.X
1215 4 1682
1676 4 1682
1682 4 1682
1682 4 1682
1728 4 1682
1860 4 1682
1973 4 1682
2018 4 1682
2032 4 1682
2033 4 1682
2107 4 1682
2109 4 1682
2203 4 1682
2251 4 1682
2359 4 1682
2524 4 1682
2543 4 1682
2552 4 1682
2559 4 1682
2991 4 1682
3053 4 1682
1025 5 1682
1682 5 1682
1682 5 1682
1682 5 1682
1785 5 1682
2874 5 1682
1682 6 1682
2227 6 1682
2317 6 1682
2683 6 1682
2871 6 1682
521 6 1682
.I 1683
.T
Boolean matrix Methods Detection Simple Precedence Grammars
.W
mechanical procedure derived determining
whether given context-free phrase structure
grammar simple precedence grammar. procedure
consists elementary operations suitably
defined Boolean matrices. Application
procedure operator grammars also given.
.B
CACM October, 1968
.A
Martin, D. F.
.K
syntax analysis, precedence analysis, simple precedence
grammar, simple precedence language, operator
grammar, operator precedence, compilers, bounded-context
syntactic analysis, Boolean matrices, relations
.C
4.12 5.23
.N
CA681004 JB February 21, 1978 4:09 PM
.X
1496 4 1683
1542 4 1683
1683 4 1683
1683 4 1683
1693 4 1683
1768 4 1683
1781 4 1683
1787 4 1683
1787 4 1683
1836 4 1683
1945 4 1683
1945 4 1683
2060 4 1683
2061 4 1683
2061 4 1683
2082 4 1683
2091 4 1683
2152 4 1683
2179 4 1683
2340 4 1683
2356 4 1683
2546 4 1683
2603 4 1683
2698 4 1683
2708 4 1683
2824 4 1683
2982 4 1683
2986 4 1683
3045 4 1683
3093 4 1683
1141 5 1683
1491 5 1683
1683 5 1683
1683 5 1683
1683 5 1683
2221 5 1683
2340 5 1683
2824 5 1683
2986 5 1683
1191 6 1683
1491 6 1683
1491 6 1683
1491 6 1683
1683 6 1683
1683 6 1683
1683 6 1683
1683 6 1683
1836 6 1683
1836 6 1683
2053 6 1683
2179 6 1683
2340 6 1683
2340 6 1683
.I 1684
.T
Ambiguity Limited Entry Decision Tables
.W
use decision tables tool systems
analysis program specification now
becoming accepted. Rules redundancy, contradiction,
completeness limited entry tables were
published 1963. These usually used checking,
preceded if necessary conversion extended
limited entry form. Processors which automatically
translate tables more conventional program
usually base their diagnostic facilities these rules.
paper suggested these rules
unsatisfactory important aspect
checking eliminate ambiguity tables.
Ambiguity defined discussed, procedure
producing checked-out decision tables proposed.
theoretical basis algorithm used established.
importance well-designed diagnostic
facilities decision table processors emphasized.
.B
CACM October, 1968
.A
King, P. J. H.
.K
decision tables, DETAB-65, systems analysis
.C
3.50 4.19 4.49
.N
CA681003 JB February 21, 1978 4:17 PM
.X
1684 4 1684
1684 4 1684
2053 4 1684
2220 4 1684
2273 4 1684
2453 4 1684
2726 4 1684
2856 4 1684
3113 4 1684
1354 5 1684
1564 5 1684
1684 5 1684
1684 5 1684
1684 5 1684
2053 5 1684
2517 5 1684
2518 5 1684
2616 5 1684
3034 5 1684
931 6 1684
1172 6 1684
1237 6 1684
1327 6 1684
1354 6 1684
1548 6 1684
1548 6 1684
1684 6 1684
1684 6 1684
1684 6 1684
1684 6 1684
1684 6 1684
2053 6 1684
2053 6 1684
2221 6 1684
2517 6 1684
2517 6 1684
.I 1685
.T
GAN, System Generating Analyzing Activity Networks
.W
GAN, system generating activity networks,
designed save time preparation
activity networks deal conveniently network
programs. defining description programming
language designed generating activity network
set standard networks presented. Also,
general idea language performing calculations
activity networks (scheduling activity networks)
given.
.B
CACM October, 1968
.A
Schurmann, A.
.K
activity network, management project, standard network,
network generator, network assembler, activity
network analysis, network calculation, network program
.C
3.50 3.53 4.11 4.12 4.29
.N
CA681002 JB February 21, 1978 4:22 PM
.X
1685 4 1685
1685 5 1685
1685 5 1685
1685 5 1685
3059 5 1685
.I 1686
.T
Computer Synthesis Holograms 3-D Display
.W
Optical digital holography reviewed.
mathematical model computational techniques
authors' digital holographic process discussed,
applications computer holography
suggested. Computer holograms have been made three-dimensional
objects which give faithful reconstructions,
even white light. new approach based point
apertures image discussed. Photographs
images reconstructed digital holograms presented.
.B
CACM October, 1968
.A
Lesem, L. B.
Hirsch, P. M.
.K
holography, optics, Fourier transforms, computer
applications, display device, photography, physics,
mathematics, image processing
.C
3.17 3.19 5.19
.N
CA681001 JB February 21, 1978 4:27 PM
.X
1686 5 1686
1686 5 1686
1686 5 1686
2004 5 1686
1686 6 1686
1915 6 1686
.I 1687
.T
Netflow (Algorithm 248 [H])
.B
CACM September, 1968
.A
Bray, T. A.
Witzgall, C.
.K
capacitated network, linear programming, minimum-cost
flow, network flow, out-of-kilter
.C
5.32 5.41
.N
CA680914 JB February 21, 1978 4:29 PM
.X
1687 5 1687
1687 5 1687
1687 5 1687
.I 1688
.T
Netflow (Algorithm 248 [H])
.B
CACM September, 1968
.A
Henderson, J. H.
.K
capacitated network, linear programming, minimum-cost
flow, network flow, out-of-kilter
.C
5.32 5.41
.N
CA680913 JB February 21, 19784:31 PM
.X
1688 5 1688
1688 5 1688
1688 5 1688
.I 1689
.T
Calculation Polynomial its Derivative
Values Horner Scheme (Algorithm 337 [C1])
.B
CACM September, 1968
.A
Pankiewicz, W.
.K
function evaluation, polynomial evaluation,
Algol procedure, Horner's scheme
.C
5.12 4.22
.N
CA680912 JB February 21, 1978 4:33 PM
.X
1689 5 1689
1689 5 1689
1689 5 1689
.I 1690
.T
Netflow (Algorithm 336 [H])
.B
CACM September, 1968
.A
Bray, T. A.
Witzgall, C.
.K
capacitated network, linear programming, minimum-cost
flow, network flow, out-of-kilter
.C
5.32 5.41
.N
CA680911 JB February 21, 1978 4:35 PM
.X
1690 4 1690
1322 5 1690
1690 5 1690
1690 5 1690
1690 5 1690
.I 1691
.T
Comparison Correlational Behavior
Random Number Generators IBM 360
.W
Hutchinson states "new" (prime modulo)
multiplicative congruential pseudorandom generator,
attributed D. H. Lehmer, has passed usual statistical
tests random number generators.
here empirically shown generators type
can produce sequences whose autocorrelation functions
up lag 50 exhibit evidence nonrandomness many
multiplicative constants. alternative generator
proposed Tausworthe, which uses irreducible polynomials
over field characteristic two, shown
free defect. applicability these
two generators IBM 360 then discussed.
Since computer word size can affect generator's statistical
behavior older mixed simple congruential
generators, although extensively tested computers
having 36 more bits per word, may not optimum
generators IBM 360.
.B
CACM September, 1968
.A
Whittlesey, J. R.
.K
random numbers, pseudorandom number generators, autocorrelation
function, serial correlation, digital
shift-register generators, linear recurrence modulo
two, irreducible polynomials, primitive trinomials
modulo two, congruential generators, prime numbers,
statistical tests randomness, IBM 360, 32-bit
versus 36-bit word size
.C
5.5
.N
CA680910 JB February 21, 1978 4:44 PM
.X
1674 4 1691
1691 4 1691
1691 4 1691
1691 4 1691
1293 5 1691
1420 5 1691
1631 5 1691
1691 5 1691
1691 5 1691
1691 5 1691
2115 5 1691
2122 5 1691
1674 6 1691
1691 6 1691
1691 6 1691
1930 6 1691
.I 1692
.T
Numerical Solution Thin Plate Heat Transfer Problem
.W
numerical solution system linear
equations resulting discrete approximation
thin plate heat transfer problem considered.
slow convergence point iterative methods
analyzed shown caused one boundary
conditions. difficulty may removed
standard line iterative technique.
.B
CACM September, 1968
.A
Stewart III, G.W.
Lick, D. W.
.K
heat transfer problem, Poisson equation, boundary
value problem, thin domain, successive overrelaxation
(SOR), block SOR
.C
3.20 5.17
.N
CA680909 JB February 21, 1978 4:48 PM
.X
1692 5 1692
1692 5 1692
1692 5 1692
.I 1693
.T
GPL, Truly General Purpose Language
.W
truly general purpose programming language,
GPL, described which contains facilities
constructing (within language) new data types
well facilities operations performed upon
them. basic language minimal sense
no basic element can derived others
high efficiency object programs. Constructs
like ALGOL 60 for-statements,and if-statements
not basic; they special types procedures.
New "symbols" (underlined words ALGOL 60)
implicitly defined usage other declarations.
part words definable, packed words handled
easily full words. "Address" variables
(pointers) included full generality.
.B
CACM September, 1968
.A
Garwick, J. V.
.K
programming language, general purpose, self-extending, macro, ALGOL
.C
4.20
.N
CA680908 JB February 22, 1978 8:40 AM
.X
1379 4 1693
1380 4 1693
1542 4 1693
1552 4 1693
1683 4 1693
1693 4 1693
1693 4 1693
1693 4 1693
1693 4 1693
1781 4 1693
1781 4 1693
1781 4 1693
1781 4 1693
1787 4 1693
1824 4 1693
1836 4 1693
1836 4 1693
1854 4 1693
1860 4 1693
1861 4 1693
1945 4 1693
1945 4 1693
2015 4 1693
2060 4 1693
2060 4 1693
2060 4 1693
2061 4 1693
2061 4 1693
2082 4 1693
2091 4 1693
2091 4 1693
2126 4 1693
2152 4 1693
2179 4 1693
2179 4 1693
2340 4 1693
2356 4 1693
2546 4 1693
2546 4 1693
2603 4 1693
2698 4 1693
2698 4 1693
2708 4 1693
2708 4 1693
2824 4 1693
2982 4 1693
2986 4 1693
557 4 1693
3045 4 1693
3045 4 1693
3093 4 1693
1421 5 1693
1477 5 1693
1491 5 1693
1614 5 1693
1693 5 1693
1693 5 1693
1693 5 1693
2126 5 1693
2317 5 1693
823 6 1693
196 6 1693
1198 6 1693
1572 6 1693
1614 6 1693
1693 6 1693
1693 6 1693
1749 6 1693
1753 6 1693
1781 6 1693
2126 6 1693
2148 6 1693
404 6 1693
.I 1694
.T
Algorithm Probability
Union Large Number Events
.W
algorithm presented which efficiently evaluates
probability union n independent
not mutually exclusive events. problem
evaluating sums products all
possible combinations n variables minimum time storage space.
.B
CACM September, 1968
.A
Miller, G. D.
.K
algorithm, probability, optimum, storage vs. time
compromise, set union, mutually exclusive events
.C
5.12 5.5 5.6
.N
CA680907 JB February 22, 1978 8:45 AM
.X
1694 5 1694
1694 5 1694
1694 5 1694
.I 1695
.T
PLEXUS-An On-Line System Modeling Neural Networks
.W
description presented PLEXUS, system
which enables user construct specify
neural network, analyze output data produced
network, store retrieve networks
data library. system, operated entirely
digital display unit, interacts directly
user permits easy rapid transitions
between various phases modeling process.
PLEXUS designed complement neurophysiological research
so systematic development neural
models can coordinated experimental work. PLEXUS
networks built up components representing
individual neurons, external stimuli, interconnecting
fibers, each component being relatively
detailed nature. Provision also made use
experimental data input network. Convenient
means specification modification network
extensive error-checking capabilities provided.
Data resulting simulation network may
analyzed variety techniques ranging
examinations gross characteristics data
determination detailed statistical properties.
.B
CACM September, 1968
.A
Dill, J. C.
Randall, D. L.
Richer, I.
.K
biological modeling, data analysis, discrete system
simulation, library systems, modeling, network
simulation, neural networks, neurophysiological
models, on-line simulation, simulation
.C
3.12 3.19 3.29 3.65
.N
CA680906 JB February 22, 1978 8:56 AM
.X
1695 5 1695
1695 5 1695
1695 5 1695
.I 1696
.T
Algorithm Identifying Ergodic Subchains
Transient States Stochastic Matrix
.W
algorithm identifying ergodic subchains
transient states stochastic matrix
presented. Applications Markov renewal programming
construction variable length
codes reviewed, updating procedure dealing
certain sequences stochastic matrices
discussed. Computation times investigated experimentally
compared those another recently
propose method.
.B
CACM September, 1968
.A
Fox, B. L.
Landi, D. M.
.K
stochastic matrix, ergodic, chain identification
.C
5.39 5.5
.N
CA680905 JB February 22, 1978 9:04 AM
.X
1696 5 1696
1696 5 1696
1696 5 1696
.I 1697
.T
Graphical Input/Output Nonstandard Characters
.W
system developed Harvard graphically
inputting outputting nonstandard characters
computer printed. principle, system
can deal any orthography, although present
limited 4000 Chinese characters some mathematical
symbols. New characters can added
repertoire system graphical input
display scope. Text inputting accomplished
via display scope Rand Tablet. organization
operation current system described,
discussion relative merits such system
given. Illustrations computer input
output Chinese characters included.
.B
CACM September, 1968
.A
Hayashl, H.
Duncan, S.
Kuno, S.
.K
Chinese characters, input/output, orthography, Rand
Tablet, PDP-1, automatic typesetting, man-machine
communication, computer graphics, graphical input, on-line editing
.C
3.40 4.41
.N
CA680904 JB February 22, 1978 9:13 AM
.X
1697 4 1697
1528 5 1697
1659 5 1697
1697 5 1697
1697 5 1697
1697 5 1697
1225 6 1697
1265 6 1697
1350 6 1697
1671 6 1697
1697 6 1697
.I 1698
.T
Statistical Model Console Behavior Multiuser Computers
.W
ability computer system communicate
outside world efficiently important
its ability perform computations efficiently.
quite difficult characterize particular
user, but rather easy characterize entire user community.
Based properties community
we have postulated hypothetical "virtual console."
No claim made virtual console behaves
like any actual console, but entire collection
virtual consoles models collection actual
consoles. Using model we answer questions like:
many processes suspended waiting console
input? maximum rate which process can
execute? bounds can set overall buffer
requirements? Answers these similar questions
needed certain aspects operating system
design.
.B
CACM September, 1968
.A
Denning, P. J.
.K
statistical models input-output, operating
system design, input-output design
.C
4.30 4.41 5.5
.N
CA680903 JB February 22, 1978 9:21 AM
.X
1458 4 1698
1523 4 1698
1603 4 1698
1698 4 1698
1747 4 1698
1748 4 1698
1854 4 1698
1877 4 1698
1960 4 1698
2377 4 1698
2378 4 1698
2497 4 1698
2558 4 1698
2625 4 1698
2632 4 1698
2840 4 1698
2941 4 1698
3105 4 1698
3144 4 1698
1471 5 1698
1698 5 1698
1698 5 1698
1698 5 1698
.I 1699
.T
Experimental Evaluation Information
Retrieval Through Teletypewriter
.W
Experiments designed evaluate capabilities
mechanized information retrieval systems,
emphasis interactive (man-machine) language
some mechanical psychological limitations
their design, were conducted Moore School information
Systems Laboratory. basic assumption
research information retrieval system
provides man-machine dialogue remote
inquiry terminal should provide searcher many
tools which would available him were
he actually performing his search library repository
documents. Factors involved evaluation
such system include ease use, learning time,
effectiveness actual retrieval. Three experiments
conclusions resulting them detailed.
.B
CACM September, 1968
.A
Rubinoff, M.
Bergman, S.
Franks, W.
Rubinoff, E.R.
.K
information retrieval testing, information system
evaluation, experimental document retrieval,
document retrieval, document perusal, man-machine communication,
remote console communication, teletypewriter
communication, remote terminal communication, retrieval
command language, symbolic command language,
interactive systems, user learning factors, on-line searching
.C
3.72 3.74 3.79 3.81
.N
CA680902 JB February 22, 1978 9:30 AM
.X
1155 4 1699
1456 4 1699
1468 4 1699
1515 4 1699
1681 4 1699
1699 4 1699
1699 4 1699
1699 4 1699
1856 4 1699
2127 4 1699
1194 5 1699
1324 5 1699
1681 5 1699
1699 5 1699
1699 5 1699
1699 5 1699
.I 1700
.T
PEEKABIT, Computer Offspring Punched
Card PEEKABOO, Natural Language Searching
.W
"peekaboo" idea punched card information
retrieval methods has been mated
idea superimposed punching produce programming
technique which cuts computer run time half
test search 33,000 subject index entries. search
program using device has been operational
since late 1963. item entered store,
18-byte mask created item's meaningful
words using inclusive operation. If, search
time, logical product (using operation)
mask similarly constructed question mask
not equal question mask, then one
more question words not present store item.
equality conclusive; words
store item must unpacked compared question
words. present store made up over 600,000
subject index entries estimated average 60 characters
each. Longer texts, such abstracts, could
handled multiple masks.
.B
CACM September,1968
.A
Hutton, F. C.
.K
peekaboo, superimposed coding, natural language
searching text searching, information compaction,
computer search technique
.C
3.74
.N
CA680901 JB February 22, 1978 9:38 AM
.X
1700 5 1700
1700 5 1700
1700 5 1700
.I 1701
.T
Synchronous Signaling Rates Data
Transmission* (Proposed USA STandard)
.B
CACM August, 1968
.N
CA680813 JB February 22, 1978 9:41 AM
.X
1701 5 1701
1701 5 1701
1701 5 1701
.I 1702
.T
Commentary Mr. Mooers' Paper
.B
CACM August, 1968
.A
Steel Jr., T. B.
.N
CA680812 JB February 22, 1978 9:42 AM
.X
1702 5 1702
1702 5 1702
1702 5 1702
.I 1703
.T
Accommodating Standards Identification Programming Languages
.W
user public wants standardization
reliable identification programming languages
related services. One way achieving these goals
illustrated methods adopted TRAC T-64
interactive language, its related family languages.
Oppressive rigidity usually associated
standardization avoided new accommodation technique
accessible user allow local variations
language. Explicit standardization language
undertaken organizational source
language. Use organizational trademark
(TRAC) published standards, services
relying upon them, provides reliable public identification.
These methods can usefully applied
other programming languages computer services.
.B
CACM August, 1968
.A
Mooers, C. N.
.K
standardization, programming languages, TRAC T-64
language, tranemark, public identification
programming languages, standards which accommodate
.C
2.12 4.2 2.9
.N
CA680811 JB February 22, 1978 9:50 AM
.X
1530 4 1703
1531 4 1703
1565 4 1703
1703 4 1703
1945 4 1703
2036 4 1703
1455 5 1703
1703 5 1703
1703 5 1703
1703 5 1703
.I 1704
.T
Minimum Excess Cost Curve (ALgorithm 217 [H])
.B
CACM August, 1968
.A
Muth, J. F.
.K
critical path scheduling, PERT, cost/time tradeoffs, network flows
.C
3.59 5.41
.N
CA680810 JB February 22, 1978 9:52 AM
.X
1704 5 1704
1704 5 1704
1704 5 1704
.I 1705
.T
Set Basic Input-Output Procedures (Algorithm 335 [15])
.W
means primitives symbol, outsymbol
length, requested journal's
Algorithms Policy [Comm. ACM 10 (Nov. 67), 729] basic
set input-output procedures defined aiming
quality flexibility. Outreal, instance,
written derived procedure; outputs using
fixed point floating point representation,
rounds properly. Variants can easily written
because explicit call procedures decompose
integer decompose real. highly recommended
practice echoing input made easy one subset
derived procedures (ioi, ior, iob, ioa).
documentation output form equivalent ALGOL
statements also provided use made
subset oti, otr, otb, ota. Berkeley style
providing information form output
using prior calls procedures such real format
defined. use parameter outchannel
provide information simultaneous output several
channels suggested. Interrelationship between
declared procedures furnished tabular form.
.B
CACM August, 1968
.A
De Vogelaere, R.
.K
input output, transput, input output procedures,
input echo, quality output, decompose integer,
decompose real, style, Berkeley style, procedures relationship,
output documentation, equivalent ALGOL
statements, ALGOL, ALGOL 60, integer format, real format,out
integer, read real, input output Boolean,
input output array, fixed point representation, floating
point representation, output channel interpretation
.C
4.0 4.41
.N
CA680809 JB February 22, 1978 10:32 AM
.X
1705 4 1705
1705 4 1705
1705 4 1705
1705 4 1705
1945 4 1705
2034 4 1705
984 5 1705
986 5 1705
1020 5 1705
1321 5 1705
1705 5 1705
1705 5 1705
1705 5 1705
.I 1706
.T
CHAMP-Character Manipulation Procedures
.W
new programming language facility symbol
manipulation described. String procedures
may declared called standard ALGOL context.
ALGOL procedures can turn called string
procedures so numeric symbolic processes may
conveniently programmed together. Concatenation
variant SNOBOL's pattern matching make up
set primitive commands. These assembled
together into conditional expressions which
used provide alternative computational patterns.
Arrays strings processed using quantifiers.
class things which may assigned
identifier can restricted procedure expressed
notation. language facilities have
been implemented ALGOL compiler Burroughs B5500.
.B
CACM August, 1968
.A
Storm, E. F.
.K
symbol manipulation, string handling, character
manipulation, conditional expressions, procedures,
structure matching, recursive programming, quantifiers
.C
4.22 4.13
.N
CA680808 JB February 22, 1978 10:39 AM
.X
1024 4 1706
1051 4 1706
1102 4 1706
1132 4 1706
1390 4 1706
1395 4 1706
1486 4 1706
1549 4 1706
1706 4 1706
1706 4 1706
1826 4 1706
1878 4 1706
378 4 1706
2060 4 1706
2155 4 1706
2168 4 1706
2719 4 1706
2723 4 1706
2838 4 1706
2842 4 1706
2855 4 1706
2879 4 1706
3077 4 1706
3080 4 1706
3106 4 1706
627 4 1706
106 4 1706
1180 5 1706
210 5 1706
1706 5 1706
1706 5 1706
1706 5 1706
.I 1707
.T
Generation Positive Test Matrices Known Positive Spectra
.W
Sufficient conditions given real
matrix similar positive matrix.
result used construct similarity transformation
which, applied particular upper triangular
matrix, yields positive matrix preassigned positive spectrum.
.B
CACM August, 1968
.A
Hall, C. A.
Porsching, T. A.
.K
test matrices, positive matrices, similarity
transformation, positive eigenvalues
.C
5.1 5.14
.N
CA680807 JB February 22, 1978 10:42 AM
.X
1707 4 1707
1707 4 1707
1047 5 1707
1707 5 1707
1707 5 1707
1707 5 1707
1876 5 1707
2099 5 1707
511 5 1707
1662 6 1707
1707 6 1707
1707 6 1707
.I 1708
.T
Note Efficiency LISP Computation Paged Machine
.W
problem use two levels storage
programs explored context
LISP system which uses core memory buffer
large virtual memory stored drum. Details
timing given one particular problem.
.B
CACM August, 1968
.A
Borrow, D. G.
Murphy, D. L.
.K
storage management, list processor implementation,
LISP, paging, secondary storage utilization,
efficiency paged computation
.C
3.7 4.1 4.2
.N
CA680806 JB February 22, 1978 10:45 AM
.X
1626 4 1708
1708 4 1708
1708 4 1708
1781 4 1708
1781 4 1708
1826 4 1708
1860 4 1708
1860 4 1708
2156 4 1708
2168 4 1708
2249 4 1708
2299 4 1708
2314 4 1708
2719 4 1708
2736 4 1708
2833 4 1708
1626 5 1708
1641 5 1708
1708 5 1708
1708 5 1708
1708 5 1708
2249 5 1708
1626 6 1708
1708 6 1708
1853 6 1708
.I 1709
.T
Modification Efroymson's Technique Stepwise Regression Analysis
.W
computational technique conventionally used
stepwise multiple linear regression requires
storage n X n matrix data. number
variables, n, large, requirement
taxes storage capacity presently used machinery.
near symmetry matrices involved permits
modification requiring only half storage computations
conventional algorithm
additional storage allows analysis problems containing
more variables. Alternatively, permits
analysis problems containing same number
variables but all computations performed
double precision.
.B
CACM August, 1968
.A
Breaux, H. J.
.K
multiple linear regression, statistical recurrence
formulas, correlation, linear statistical models,
statistical computer programs, curve fitting
.C
4.0 4.40 5.0 5.5 5.10 5.13
.N
CA680805 JB February 22, 1978 10:52 AM
.X
1709 5 1709
1709 5 1709
1709 5 1709
.I 1710
.T
ASP-A Ring Implemented Associative Structure Package
.W
ASP general purpose Associative Data
Structure Package which arbitrary number
data items arbitrary number relationships
between these data items may represented.
special picture language described which has proved
very useful drawing ASP structures paper.
ASP structures built manipulated means
series macro calls, which outlined
Appendix. Emphasis philosophy system
rather than particular implementation, though
sufficient information included enable
reader produce his own implementation ASP.
.B
CACM August, 1968
.A
Lang, C. A.
Gray, J. C.
.K
associative, data structure, ring structure lists,
list structure, set languages, modeling, graphics
.C
4.20 4.22
.N
CA680804 JB February 22, 1978 11:02 AM
.X
1710 5 1710
1710 5 1710
1710 5 1710
1853 5 1710
2003 5 1710
1710 6 1710
1710 6 1710
1767 6 1710
2105 6 1710
.I 1711
.T
Your Computer Needs Lawyer
.W
Possible liability negligence, other
torts (such slander credit) liability
under theories express implied warranty (guarantees)
discussed, legal complications
explained, so users, operators, owners, leasors
computers may alerted potential legal
problems. Focus also trouble spots contracting
data processing services, automating record
keeping operations, deciding whether not automate
certain operations, complying
statutes regulation relating record keeping.
Information given patents, copyrights
trade secret protection programs, problem
using copyrighted material information storage
retrieval systems, including pending
copyright patent revision bills.
.B
CACM August, 1968
.A
Banzhaf III, J. F.
.K
law, legal, lawyer, liability, torts, negligence,
contracts, warrantees, guarantees, accounting,
regulations, simulation, income tax, copyrights, patents,
trade secrets, standard care, slander
credit, crime, criminals, record keeping records, evidence, copying
.C
1.3 2.11 2.12 2.2 3.33
.N
CA680803 JB February 22, 1978 11:12 AM
.X
1711 4 1711
1711 4 1711
997 5 1711
1001 5 1711
1711 5 1711
1711 5 1711
1711 5 1711
.I 1712
.T
Recovery Disk Contents After System Failure
.W
method discussed which, after system
malfunction, contents disk files can
restored their status time failure.
.B
CACM August, 1968
.A
Lockemann, P. C.
Knutsen, W. D.
.K
data acquisitition, disk file organization,
error recovery, file organization
.C
3.73
.N
CA680802 JB February 22, 1978 11:14 AM
.X
1712 4 1712
1507 5 1712
1712 5 1712
1712 5 1712
1712 5 1712
3164 5 1712
1712 6 1712
.I 1713
.T
Overcoming High-Priority Paralysis
Multiprogramming Systems: Case His tory
.W
High-priority paralysis degradation
can occur multiprogramming systems
scheduling based primarily preassigned priorities.
can alleviated modifying scheduling
algorithm maximize number programs active
one time. case his tory given paper
indicates two general methods which simultaneity can
increased. Possible refinements scheduling
algorithm future improvements considered briefly.
.B
CACM August, 1968
.A
Stevens, D. F.
.K
multiprogram scheduling, dynamic priority assignment scheduling
.C
4.30 4.32 4.39
.N
CA680801 JB February 22, 1978 11:19 AM
.X
1713 4 1713
1713 4 1713
1901 4 1713
1901 4 1713
491 4 1713
491 4 1713
168 5 1713
185 5 1713
1713 5 1713
1713 5 1713
1713 5 1713
3072 5 1713
1713 6 1713
2219 6 1713
2245 6 1713
2375 6 1713
.I 1714
.T
Procedure Normal Distribution (Algorithm 272 [S15])
.B
CACM July, 1968
.A
MacLaren, M. D.
.K
normal distribution function, error function,
normal function, normal curve integral
.C
5.5 5.12
.N
CA680715 JB February 22, 1978 11:21 AM
.X
1714 4 1714
1585 5 1714
1714 5 1714
1714 5 1714
1714 5 1714
.I 1715
.T
Direct Search (Algorithm 178 [E4])
.B
CACM July, 1968
.A
De Vogelaere, R.
.K
function minimization, search, direct search
.C
5.19
.N
CA680714 JB February 22, 1978 11:24 AM
.X
1715 5 1715
1715 5 1715
1715 5 1715
1815 5 1715
1715 6 1715
.I 1716
.T
Normal Random Deviates (Algorithm 334 [G5])
.B
CACM July, 1968
.A
Bell, J. R.
.K
normal deviates, normal distribution, random number,
random number generator, simulation, probability
distribution, frequency distribution, random
.C
5.5 5.13
.N
CA680713 JB February 22, 1978 11:26 AM
.X
1716 4 1716
1189 5 1716
1716 5 1716
1716 5 1716
1716 5 1716
2349 5 1716
2565 5 1716
1648 6 1716
1716 6 1716
1716 6 1716
1794 6 1716
1894 6 1716
2043 6 1716
2276 6 1716
501 6 1716
613 6 1716
774 6 1716
.I 1717
.T
Generating Prime Implicants Via Ternary Encoding Decimal Arithmetic
.W
Decimal arithmetic, ternary encoding cubes,
topological considerations used
algorithm obtain extremals prime implicants
Boolean functions. algorithm, which has
been programmed FORTRAN language, generally requires
less memory than other minimization procedures,
treats DON'T CARE terms efficient manner.
.B
CACM July, 1968
.A
Dietmeyer, D. L.
Duley, J. R.
.K
prime implicants, extremal, switching function,
minimization, cubical complexes, ternary encoding
.C
3.24 6.1
.N
CA680712 JB February 22, 1978 11:30 AM
.X
1717 5 1717
1717 5 1717
1717 5 1717
.I 1718
.T
"Logical" Arithmetic Computers
Two's Complement Binary Arithmetic
.W
Algorithms presented multiplication
division unsigned integer operands which
digits normally reserved signs participate
significant arithmetic digits positive weight.
.B
CACM July, 1968
.A
Ehrman, J. R.
.K
binary arithmetic, unsigned operand arithmetic,
maximum significance arithmetic, full-precision
arithmetic
.C
3.15 5.11
.N
CA680711 JB February 22, 1978 11:34 AM
.X
1718 5 1718
1718 5 1718
1718 5 1718
1965 5 1718
2200 5 1718
1718 6 1718
1718 6 1718
.I 1719
.T
Methodology Calculating
Optimizing Real-Time System Performance
.W
continually increasing size, complexity,
number types, cost data processing systems
causing serious re-examination within government
industry criteria methods
calculating optimizing data processing system cost
performance. Real-time data processing systems
typified automated airline reservation system
discussed paper. Criteria evaluating
performance described; methodology calculating
optimizing outlined; method
illustrated carrying out portion performance
calculation optimization drum-oriented
message switching system.
.B
CACM July, 1968
.A
Stimler, S.
Brons, K. A.
.K
real-time system analysis, real-time system design,
real-time system performance criteria, real-time
system cost performance ratio
.C
3.27 3.80 3.81 3.89 6.9
.N
CA680710 JB February 22, 1978 11:40 AM
.X
1719 5 1719
1719 5 1719
1719 5 1719
2319 5 1719
1408 6 1719
1719 6 1719
1749 6 1719
1751 6 1719
2016 6 1719
2017 6 1719
2080 6 1719
2188 6 1719
2203 6 1719
2204 6 1719
.I 1720
.T
Master's Level Computer Science Curricula
.W
results survey course work done
master's degree candidates 25 US universities
presented, some general comments concerning
emphasis these programs given.
.B
CACM July, 1968
.A
Elliott, R. W.
.K
surveys, education, computer science curricula
.C
1.52
.N
CA680709 JB February 22, 1978 11:44 AM
.X
1720 4 1720
1720 4 1720
1771 4 1720
1927 4 1720
2147 4 1720
2163 4 1720
2345 4 1720
2478 4 1720
2594 4 1720
2852 4 1720
2899 4 1720
3130 4 1720
1654 5 1720
1720 5 1720
1720 5 1720
1720 5 1720
1771 5 1720
2163 5 1720
1720 6 1720
1771 6 1720
1927 6 1720
2181 6 1720
.I 1721
.T
Determination Intersection Points Two
Plane Curves Means Differential Equations
.W
new method proposed calculate intersection
points two plane curves. theory
singular points off system two differential equations
used developing method. intersection
point determined identified such singular
point appropriate modifications applied
system ensure singular point stable,
i.e. all integrals which start neighborhood
singular point always approach point
if integral parameter tends infinity.
addition method described systematically searching
all intersection points prescribed
rectangular area.
.B
CACM July, 1968
.A
Kuiken, H. K.
.K
plane curves, intersection points, intersections
plane curves, integration, differential equations,
matrix iteration, singular points, nonlinear differential
equations, eigenvalues, complex roots, roots,
stationary points, Runge Kutta, stable singularity, unstable singularity
.C
2.0 3.10 3.20 3.50 5.10
.N
CA680708 JB February 22, 1978 11:51 AM
.X
1721 5 1721
1721 5 1721
1721 5 1721
.I 1722
.T
Methods Convergence Improvement Some Improper Integrals
.W
numerical integration improper
integral first kind, customary
truncate integral change yielded last
iteration less than some predetermined constant.
efficiency such integration schemes can often
improved use recent advances theory
nonlinear transformations; however, several important
integrals, e.g. integrals whose integrands
rational polynomials, these transformations fail
yield much improvement. paper, several
methods convergence improvement developed which greatly
improve convergence some improper integrals,
including integrals rational polynomials.
.B
CACM July, 1968
.A
McWilliams, G. V.
Thompson, R. W.
.K
approximation, nonlinear, improper integral, convergence
improvement, numerical integration, rational
polynomials, truncation
.C
3.15 5.13 5.16 5.19
.N
CA680707 JB February 22, 1978 11:58 AM
.X
1722 5 1722
1722 5 1722
1722 5 1722
.I 1723
.T
Computer Construction Project Networks
.W
Project networks used PERT CPM.
algorithm given constructing project
networks directly project precedence relations.
algorithm creates "dummy" activities
topologically orders arcs nodes. number
nodes created minimal given precedence
relations. has been experimentally programmed
FORTRAN II IBM 7094.
.B
CACM July, 1968
.A
Fisher, A. C.
Liebman, J. S.
Nemhauser, G. L.
.K
project networks, PERT, CPM, topological
ordering, network construction computer
.C
5.32
.N
CA680706 JB February 22, 1978 12:07 PM
.X
1723 4 1723
758 4 1723
1723 5 1723
1723 5 1723
1723 5 1723
2515 5 1723
441 5 1723
1723 6 1723
.I 1724
.T
Generalized Partial Pass Block Sort
.W
design partial pass block sort
arbitrary range key number work files
described. design generalization Partial
Pass Column Sort Ashenhurst Amphisbaenic
Sort Nagler. power sort tabulated
various sizes input file number work
files. consideration given problem combining
block sort internal sorts,
best use direct access storage devices.
.B
CACM July, 1968
.A
Bayes, A.
.K
block sort, partial pass sort, direct access devices,
column sort, chaining, reverse chaining,
sort, amphisbaenic
.C
5.31
.N
CA680705 JB February 22, 1978 12:12 PM
.X
1724 5 1724
1724 5 1724
1724 5 1724
.I 1725
.T
Simple Proof Lewin's Ordered-Retrieval
Theorem Associative Memories
.W
efficient method ordered retrieval binary
words associative memory, described
Lewin, based use special readout circuits
which indicate digit values present
individual digit columns memory. Thus
circuits indicate whether individual digit
columns contain digits both values, only one
value, contain no digits all (i.e.
memory empty). use these circuits, which
paper termed column value indicators,
reduces considerably number memory accesses necessary
retrieve order number distinct
words memory. Lewin proves that, readout
described method m distinct binary
words, 2m - 1 memory accesses necessary. (Thus he
proves number necessary memory accesses
his method, unlike those other methods, independent
word length.) paper very
simple proof theorem derived some elementary
aspects structure sets binary
numbers presented.
.B
CACM July, 1968
.A
Wolinsky, A.
.K
associative memories, content-addressed memories,
ordered lists, ordered information retrieval,
ordered retrieval theorem, column digit values, digit
value variety, column sensing arrangement, digit
value readout, digit variety readout, memory access, memory
access frequency, ordered retrieval efficiency,
access frequency proof, retrieval theorem proof
.C
3.74 3.79 5.29 5.31 6.31 6.36
.N
CA680704 JB February 22, 1978 12:24 PM
.X
1725 5 1725
1725 5 1725
1725 5 1725
.I 1726
.T
Preliminary Investigation Techniques
Automated Reading Unformatted Text
.W
Methods converting unstructured printed
material into computer code experimentally
investigated. operator-controlled mode, depending
human demarcation various regions
page guiding scanner, implemented
means joystick CRT display. mode,
which some performance figures obtained, thought
suitable processing very complicated
material, such technical journals. simpler material,
instance "claims" sections patents,
applications utmost accuracy not necessary,
unsupervised mode advocated. Here,
textual portions page located during
rapid prescan rudimentary form frequency
analysis. These areas then rescanned higher
resolution suitable character recognition.
Error rates order 0.1 percent obtained
simple problem involving photographs telephone
company meter boards. Other matters related
design general purpose page reader, such
segmentation printed text, possibility
time-sharing scanner, interactive man-machine
operation, facsimile reproduction illustrations, discussed.
.B
CACM July, 1968
.A
Nagy, G.
.K
pattern recognition, character recognition, text
reading, information retrieval, unformatted text
operator-controlled reader, online reader,
text-image discrimination, reading machine
.C
3.63 3.79 3.89 6.29 6.35
.N
CA680703 JB February 22, 1978 2:52 PM
.X
1726 5 1726
1726 5 1726
1726 5 1726
2370 5 1726
1726 6 1726
.I 1727
.T
One Way Estimating Frequencies Jumps Program
.W
segmentation program useful
have reasonable estimation values
S(ij), S(ij) mean value number
jumps i-th instruction j-th
instruction run time. cases
S(ij) estimated directly, structure
whole program must generally taken into account;
therefore very difficult programmer
and/or translator obtain good estimation
S(ij). easier estimate not S(ij) but
quantities P(ij)=S(ij)*C(i)/SUM[S(ij), j=1,N],
C(i) arbitrary positive constant each
i. Although P(ij) are, each i, proportional
S(ij), estimation P(ij) easier, because
we must estimate only "probabilities" events
instruction executed after instruction
I(i). estimation can often done without considering
structure whole program.
first part paper, using theory
Markov chains, algorithm computation
S(ij) P(ij) found, some ways
obtaining estimates P(ij) given.
second part variant algorithm derived,
avoiding necessity computation involving
large matrices.
.B
CACM July, 1968
.A
Kral, J.
.K
object program reduction, supervisor calls decreasing,
jump frequencies estimation, control transfers
estimation, optimal program segmentation, Markov chain
program correspondence, program graph, one-entry
subgraph, locally estimated jump frequencies, supervisor
overhead decreasing, program segmentation algorithm,
jump frequencies, program segmentation problem
.C
4.11 4.19 4.39 4.49
.N
CA680702 JB February 22, 1978 3:05 PM
.X
1727 5 1727
1727 5 1727
1727 5 1727
.I 1728
.T
Further Experimental Data Behavior
Programs Paging Environment
.W
Results summarized empirical study
directed measurement program operating
behavior those multiprogramming systems which
programs organized into fixed length pages.
data collected interpretive execution
number paged programs used describe
frequency page faults, i.e. frequency those
instants which executing program requires
page data instructions not main (core) memory.
These data used also evaluation
page replacement algorithms assessing
effects performance changes amount
storage allocated executing programs.
.B
CACM JUly, 1968
.A
Coffman, E. G.
Varian, L. C.
.K
paging systems, paging, dynamic program behavior, program
behavior, virtual memory systems, single-level
storage, one-level storage, operating system simulation,
operating systems, supervisor simulation, machine
language program interpretation
.C
4.13 4.32 4.39 4.9
.N
CA680701 JB February 22, 1978 3:13 PM
.X
1646 4 1728
1668 4 1728
1669 4 1728
1676 4 1728
1679 4 1728
1682 4 1728
1728 4 1728
1728 4 1728
1728 4 1728
1860 4 1728
1973 4 1728
2018 4 1728
2032 4 1728
2033 4 1728
2107 4 1728
2109 4 1728
2203 4 1728
2251 4 1728
2359 4 1728
2524 4 1728
2543 4 1728
2552 4 1728
2559 4 1728
2859 4 1728
2991 4 1728
3053 4 1728
1525 5 1728
1647 5 1728
1728 5 1728
1728 5 1728
1728 5 1728
1785 5 1728
1892 5 1728
1924 5 1728
2095 5 1728
2218 5 1728
2297 5 1728
2374 5 1728
2526 5 1728
2667 5 1728
2668 5 1728
2862 5 1728
2863 5 1728
1380 6 1728
1526 6 1728
1572 6 1728
1572 6 1728
1604 6 1728
1604 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1728 6 1728
1751 6 1728
1751 6 1728
1751 6 1728
1751 6 1728
1754 6 1728
1754 6 1728
1752 6 1728
1752 6 1728
1761 6 1728
1810 6 1728
1827 6 1728
1827 6 1728
1879 6 1728
1879 6 1728
1901 6 1728
1901 6 1728
2095 6 1728
2373 6 1728
2677 6 1728
2863 6 1728
.I 1729
.T
Minit Algorithm Linear Programming (Algorithm 333 [H])
.B
CACM June, 1968
.A
Salazar, R. C.
Sen, S.K.
.K
linear programming, dual simplex method, primal problem, dual problem
.C
5.41
.N
CA680616 JB February 22, 19783:15 PM
.X
1729 5 1729
1729 5 1729
1729 5 1729
2784 5 1729
1729 6 1729
309 6 1729
2783 6 1729
.I 1730
.T
Jacobi Polynomials (Algorithm 332 [S22])
.B
CACM June, 1968
.A
Witte, B. F. W.
.K
Jacobi polynomials, orthogonal polynomials,
three-term recurrences, special functions
.C
5.12
.N
CA680615 JB February 22, 1978 3:17 PM
.X
1730 5 1730
1730 5 1730
1730 5 1730
.I 1731
.T
Gaussian Quadrature Formulas (Algorithm 331 [D1])
.B
CACM June, 1968
.A
Gautschi, W.
.K
quadrature, Gaussian quadrature, numerical integration,
weight function, orthogonal polynomials
.C
5.16
.N
CA680614 JB February 22, 1978 3:20 PM
.X
1731 5 1731
1731 5 1731
1731 5 1731
.I 1732
.T
Factorial Analysis Variance (Algorithm 330 [G1])
.B
CACM June, 1968
.A
Oliver,I.
.K
factorial variance analysis, variance, statistical analysis
.C
5.5
.N
CA680613 JB February 22, 1978 3:21 PM
.X
1732 5 1732
1732 5 1732
1732 5 1732
.I 1733
.T
Distribution Indistinguishable Objects
into Distinguishable slots (Algorithm [G6])
.B
CACM June, 1968
.A
Fenichel, R. R.
.K
object distributions, combinations, distribution numbers
.C
5.39
.N
CA680612 JB February 22, 1978 3:58 PM
.X
1733 5 1733
1733 5 1733
1733 5 1733
.I 1734
.T
Chebyshev Solution Overdetermined
Linear System (Algorithm 328 [F4])
.B
CACM June, 1968
.A
Bartels, R. H.
Goulub, H. G.
.K
Chebyshev solutions, overdetermined linear
systems, linear equations, exchange algorithm
.C
5.13 5.14 5.41
.N
CA680611 JB February 22, 1978 4:01 PM
.X
1734 5 1734
1734 5 1734
1734 5 1734
2143 5 1734
1734 6 1734
.I 1735
.T
Futures Market Computer time
.W
auction method described allocating
computer time allows price computer
time fluctuate demand relative priority
users controlled so more important
projects get better access. auction free
periodic fluctuation computer use often associated
monthly time allocation schemes.
.B
CACM June, 1968
.A
Sutherland, I. E.
.K
computer scheduling, auction, time allocation, operating efficiency
.C
2.40
.N
CA680610 JB February 22, 1978 4:04 PM
.X
1735 5 1735
1735 5 1735
1735 5 1735
2020 5 1735
1735 6 1735
.I 1736
.T
Heading Format Data Transmission (A USAAI Tutorial -- Standards)
.B
CACM June, 1968
.K
data transmission heading format, heading format,
message format, data transmission, message headings
.C
3.57 3.81 6.39
.N
CA680609 JB February 22, 1978 4:07 PM
.X
1736 5 1736
1736 5 1736
1736 5 1736
.I 1737
.T
Global Parser Context-Free Phrase Structure Grammars
.B
CACM June, 1968
.A
Unger, S. H.
.N
CA680608 JB February 22, 1978 4:08 PM
.X
1737 5 1737
1737 5 1737
1737 5 1737
.I 1738
.T
Writing Outline Debugging Program Experienced User
.W
Presently available online debugging routines
often unsatisfactory experienced
user because they require unnecessarily rigid complicated
typing formats, make difficult
user correct typing errors, consume excessive
memory intricate features. debugging
program prime importance program
simple, flexible, highly efficient use.
Communication between user debugging program
can improved using certain techniques
applicable most online debugging programs. These
techniques presented illustrated
their use OPAK (octal package), debugging program coded
PDP-5/8 SDS-930. compromise
between economy utility program core storage incorporation
elegant debugging features discussed.
.B
CACM June, 1968
.A
Brady, P. T.
.K
debugging, utility program, programming languages
.C
4.42
.N
CA680607 JB February 22, 1978 4:14 PM
.X
1738 4 1738
1257 5 1738
1738 5 1738
1738 5 1738
1738 5 1738
.I 1739
.T
Regular Expression Search Algorithm
.W
method locating specific character strings
embedded character text described
implementation method form compiler
discussed. compiler accepts regular
expression source language produces IBM 7094
program object language. object program
then accepts text searched input produces
signal every time embedded string
text matches given regular expression. Examples,
problems, solution also presented.
.B
CACM June, 1968
.A
Thompson, K.
.K
search, match, regular expression
.C
3.74 4.49 5.32
.N
CA680606 JB February 22, 1978 4:18 PM
.X
1739 5 1739
1739 5 1739
1739 5 1739
2545 5 1739
2746 5 1739
1665 6 1739
1739 6 1739
1739 6 1739
1781 6 1739
2139 6 1739
2341 6 1739
2545 6 1739
2786 6 1739
.I 1740
.T
Inexpensive Braille Terminal Device
.W
active use time-shared facilities
blind programmers requires braille terminal
system. Details given construction
brailler model 33 teletype modifying
print head increasing resiliency platen.
description programming needed drive
brailler presented.
.B
CACM June, 1968
.A
Anderson, G. B.
Rogers, D. W.
.K
blind communication, blind programming aid, braille,
braille computer communication, braille output,
braille teletype, braille terminal, braille type head,
embosser, tactile computer communication, tactile
teletype, tactile terminal
.C
4.41 6.35
.N
CA680605 JB February 22, 1978 4:23 PM
.X
1264 4 1740
1740 4 1740
1099 5 1740
1740 5 1740
1740 5 1740
1740 5 1740
2279 5 1740
1740 6 1740
.I 1741
.T
BRAD: Brookhaven Raster Display
.W
multiconsole computer display system has
been designed provides very rich displays
low unit cost. Each BRAD (Brookhaven Raster Display)
console can plot tens thousands points,
up 4000 characters 30 frames per second. After
initial display system investment $50,000
each display, teletype, costs less than $3,000.
technique employed programmatically
generating binary image desired display
computer. image written rotating drum
memory. Independent read heads continuously display
picture, which generated swept horizontal
lines. standard TV monitor serves display device.
technique has two drawbacks. computer
must compute any image displayed. Also, "pointing"
interaction more difficult.
because pointing function gives only coordinates
point screen. inverse
map generation process required calculate
coordinates point screen.
inverse map generation process required
calculate coordinates selected point
input space.
.B
CACM June, 1968
.A
Ophir, D.
Rankowitz, S.
Shepherd, B. J.
Spinrad, R. J.
.K
computer display, computer graphics, computer raster
display, TV display console, digital TV display,
swept raster computer display, swept raster TV computer
display, TV graphics terminal, multiconsole computer
graphics, inexpensive graphic terminal
.C
2.0 4.49 6.35
.N
CA680604 JB February 22, 1978 4:35 PM
.X
1741 5 1741
1741 5 1741
1741 5 1741
1891 5 1741
2211 5 1741
2421 5 1741
2674 5 1741
2687 5 1741
1554 6 1741
1741 6 1741
1741 6 1741
1741 6 1741
1741 6 1741
1741 6 1741
1915 6 1741
2004 6 1741
2004 6 1741
2211 6 1741
2421 6 1741
2687 6 1741
.I 1742
.T
Design Display Processors
.W
flexibility power needed data
channel computer display considered.
work efficiently, such channel must have sufficient number
instructions best understood
small processor rather than powerful channel.
found successive improvements
display processor design lie circular path,
making improvements one can return original
simple design plus one new general purpose computer
each trip around. degree physical separation
between display parent computer key factor display processor design.
.B
CACM June, 1968
.A
Myer, T. H.
.K
display processor design, display system, computer
graphics, graphic terminal, displays, graphics,
display generator, display channel, display programming,
graphical interaction, remote displays
.C
2.44 6.22 6.29 6.35
.N
CA680603 JB February 22, 1978 4:41 PM
.X
1742 5 1742
1742 5 1742
1742 5 1742
.I 1743
.T
Reliable Full-Duplex file Transmission over Half-Duplex Telephone Lines
.W
field-proven scheme achieving reliable
duplex transmission over half-duplex communication
line presented, demonstrate difficulty
problem, another similar scheme, which
only slightly unreliable, also presented. flowchart
reliable scheme some interesting
examples given.
.B
CACM June, 1968
.A
Lynch, W. C.
.K
telephone communication, half duplex, transmission,
error correction, full duplex, telephone errors
.C
3.81 4.41 6.35
.N
CA680602 JB February 22, 1978 4:45 PM
.X
1743 5 1743
1743 5 1743
1743 5 1743
1907 5 1743
1743 6 1743
.I 1744
.T
Stable Numerical Methods Obtaining Chebyshev
Solution Overdetermined System
Equations
.W
implementation Stiefel's exchange algorithm
determining Chebyshev solution
overdetermined system linear equations presented,
uses Gaussian LU decomposition row
interchanges. implementation computationally more
stable than those usually given literature.
generalization Stiefel's algorithm developed which
permits occasional exchange two equations
simultaneously.
.B
CACM June, 1968
.A
Bartels, R. H.
Golub, G. H.
.K
Chebyshev solutions, overdetermined linear
systems, linear equations,exchange algorithm
.C
5.13 5.14 5.41
.N
CA680601 JB February 22, 1978 4:50 PM
.X
1744 5 1744
1744 5 1744
1744 5 1744
1905 5 1744
1744 6 1744
.I 1745
.T
Position Paper Computing Communications
.W
effective operation free enterprise
creating envisioned information service industry
dependent upon three accomplishments: (1) restructuring
our information processing industry
so clear division costs made among computing,
communications, development information
services; (2) wide use multiaccess system concepts
so information services may share
use computer installations so cost their
construction reasonable; (3) development
public, message-switched communications services so
adequate provisions made information
security.
.B
CACM May, 1968
.A
Dennis, J. B.
.K
information networks, information systems, computing
free enterprise, computing economics,
computer installation management, government regulation,
communications services, distributed data base,
program leasing
.C
2.3 2.40 3.80 4.30
.N
CA680511 JB February 23, 1978 8:49 AM
.X
1745 5 1745
1745 5 1745
1745 5 1745
.I 1746
.T
Protection Information Processing Utility
.W
One critical problems design
information processing utility permits
flexible sharing user information privacy.
One solution problem discussed.
.B
CACM May, 1968
.A
Graham, R.M.
.K
protection, privacy, information processing utility,
time-sharing, multi-user, multiprogramming,
multiprocessing, security, shared information, controlled
access, reliable operation, segmentation
.C
4.32 4.39
.N
CA680510 JB February 23, 1978 8:52 AM
.X
1746 5 1746
1746 5 1746
1746 5 1746
1753 5 1746
2358 5 1746
2377 5 1746
2372 5 1746
2626 5 1746
2840 5 1746
1471 6 1746
1471 6 1746
1746 6 1746
1746 6 1746
1746 6 1746
1746 6 1746
1746 6 1746
1746 6 1746
1749 6 1746
1751 6 1746
1753 6 1746
274 6 1746
2358 6 1746
2358 6 1746
2377 6 1746
2436 6 1746
2625 6 1746
2626 6 1746
2629 6 1746
2629 6 1746
.I 1747
.T
Three Criteria Designing Computing Systems Facilitate Debugging
.W
designer computing system should adopt
explicit criteria accepting rejecting
proposed system features. Three possible criteria
kind input recordability, input specifiability,
asynchronous reproducibility output. These criteria
imply user can, if he desires, either
know control all influences affecting content
extent his computer's output. define
scope criteria, notion abstract
machine programming language notion
virtual computer explained. Examples applications
criteria concern reading
time-of-day clock, synchronization parallel
processes, protection multiprogrammed systems,
assignment capability indexes.
.B
CACM May, 1968
.A
Van Horn, E. C.
.K
computer design, computer design criteria, computer
systems, computer systems design, input equipment,
input equipment design, operating systems, operating
systems design, multiprogramming, multiprogrammed
systems, multiprogrammed system design, virtual computers,
programming languages, programming language
design, program semantics, programming language semantics,
determinism, reproducibility, repeatability,
deterministic computers, protection, memory protection,
information security, information privacy, computing
reliability, debugging, program debugging, program testing,
parallel processing, parallel programming,
multiprocessing
.C
2.11 4.12 4.13 4.20 4.30 4.42 4.43 5.24 6.20 6.35
.N
CA680509 JB February 23, 1978 9:06 AM
.X
1458 4 1747
1523 4 1747
1603 4 1747
1698 4 1747
1747 4 1747
1748 4 1747
1854 4 1747
1877 4 1747
1960 4 1747
2377 4 1747
2378 4 1747
2497 4 1747
2558 4 1747
2625 4 1747
2632 4 1747
2840 4 1747
2941 4 1747
3105 4 1747
3144 4 1747
1471 5 1747
1747 5 1747
1747 5 1747
1747 5 1747
2151 5 1747
1653 6 1747
1747 6 1747
1860 6 1747
.I 1748
.T
Scheduling Philosophy Multiprocessing Systems
.W
collection basic ideas presented, which
have been evolved various workers over
past four years provide suitable framework
design analysis multiprocessing systems.
notions process state vector discussed,
nature basic operations processes
considered. Some connections between processes
protection analyzed. very general
approach priority-oriented scheduling described,
its relationship conventional interrupt
systems explained. Some aspects time-oriented
scheduling considered. implementation
scheduling mechanism analyzed detail
feasibility embodying hardware established.
Finally, several methods interlocking execution
independent processes presented compared.
.B
CACM May, 1968
.A
Lampson, B. W.
.K
time-sharing, multiprocessing, process, scheduling,
interlocks, protection, priority, interrupt
systems
.C
4.31 4.32 6.21
.N
CA680508 JB February 23, 1978 9:13 AM
.X
1458 4 1748
1523 4 1748
1603 4 1748
1698 4 1748
1747 4 1748
1748 4 1748
1854 4 1748
1877 4 1748
1960 4 1748
2377 4 1748
2378 4 1748
2497 4 1748
2558 4 1748
2625 4 1748
2632 4 1748
2840 4 1748
2941 4 1748
3105 4 1748
3144 4 1748
1471 5 1748
1748 5 1748
1748 5 1748
1748 5 1748
1805 5 1748
1828 5 1748
1854 5 1748
2187 5 1748
1421 6 1748
1471 6 1748
1518 6 1748
1572 6 1748
1748 6 1748
1748 6 1748
1748 6 1748
1748 6 1748
1749 6 1748
1749 6 1748
1781 6 1748
.I 1749
.T
Structure "THE"-Multiprogramming System
.W
multiprogramming system described
which all activities divided over number
sequential processes. These sequential processes placed
various hierarchical levels, each
which one more independent abstractions have been
implemented. hierarchical structure proved
vital verification logical soundness
design correctness its implementation.
.B
CACM May, 1968
.A
Dijkstra, E. W.
.K
operating system, multiprogramming system, system
hierarchy, system structure, real-time debugging,
program verification, synchronizing primitives, cooperating
sequential processes, system levels, input-output
buffering, multiprogramming, processor sharing, multiprocessing
.C
4.30 4.32
.N
CA680507 JB February 23, 1978 9:20 AM
.X
1749 5 1749
1749 5 1749
1749 5 1749
1828 5 1749
1854 5 1749
1877 5 1749
1960 5 1749
2150 5 1749
2317 5 1749
2319 5 1749
2342 5 1749
2376 5 1749
2377 5 1749
2379 5 1749
2424 5 1749
2482 5 1749
2618 5 1749
2632 5 1749
2704 5 1749
2723 5 1749
2738 5 1749
2740 5 1749
2741 5 1749
2867 5 1749
3184 5 1749
1198 6 1749
1198 6 1749
1198 6 1749
1198 6 1749
1198 6 1749
1198 6 1749
1247 6 1749
1338 6 1749
1338 6 1749
1338 6 1749
1408 6 1749
1421 6 1749
1471 6 1749
1471 6 1749
1471 6 1749
1471 6 1749
1471 6 1749
1526 6 1749
1549 6 1749
1552 6 1749
1572 6 1749
1693 6 1749
1719 6 1749
1746 6 1749
1748 6 1749
1748 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1749 6 1749
1751 6 1749
1753 6 1749
1781 6 1749
1826 6 1749
210 6 1749
1854 6 1749
1877 6 1749
1877 6 1749
1877 6 1749
1960 6 1749
2016 6 1749
2017 6 1749
2080 6 1749
2080 6 1749
2080 6 1749
2080 6 1749
2126 6 1749
2148 6 1749
2188 6 1749
2203 6 1749
2204 6 1749
2228 6 1749
2228 6 1749
2247 6 1749
2247 6 1749
2256 6 1749
2356 6 1749
2356 6 1749
2358 6 1749
2379 6 1749
2379 6 1749
2454 6 1749
2651 6 1749
2673 6 1749
2777 6 1749
557 6 1749
627 6 1749
731 6 1749
.I 1750
.T
Considerations Design Multiple
Computer System Extended Core Storage
.W
use large quantities addressable
(but not executable) fast random access memory
heighten multiprogramming performance multicomputer system
discussed. general design
hardware arrangement software components
functions such system based
planned configuration dual CDC 6600's share one
million words extended core storage.
generalization such design, special emphasis
placed estimating expected gains compared
traditional configuration separate independent
computers without extended core storage.
observation made use conventional, slower
speed, random access storage devices place
faster memory.
.B
CACM May, 1968
.A
Fuchel, K.
Heller, S.
.K
multiple computer systems, extended core storage,
multiprogrammed operating systems, multiprocessor
operating systems, control data corporation 6600, operating system ECS
.C
4.30 4.32
.N
CA680506 JB February 23, 1978 9:27 AM
.X
1750 5 1750
1750 5 1750
1750 5 1750
2988 5 1750
1750 6 1750
.I 1751
.T
Working Set Model Program Behavior
.W
Probably most basic reason behind absence
general treatment resource allocation
modern computer systems adequate model
program behavior. paper new model,
"working set model," developed. working set
pages associated process, defined
collection its most recently used pages, provides
knowledge vital dynamic management
paged memories. "Process" "working set" shown
manifestations same ongoing computational
activity; then "processor demand" "memory demand"
defined; resource allocation formulated
problem balancing demands against available equipment.
.B
CACM May, 1968
.A
Denning, P. J.
.K
general operating system concepts, multiprocessing,
multiprogramming, operating systems, program
behavior, program models, resource allocation, scheduling, storage allocation
.C
4.30 4.32
.N
CA680505 JB February 23, 1978 9:33 AM
.X
1751 4 1751
1892 4 1751
2128 4 1751
2218 4 1751
1751 5 1751
1751 5 1751
1751 5 1751
1752 5 1751
1892 5 1751
1901 5 1751
2085 5 1751
2095 5 1751
2218 5 1751
2277 5 1751
2319 5 1751
2329 5 1751
2358 5 1751
2373 5 1751
2380 5 1751
2434 5 1751
2499 5 1751
2501 5 1751
2582 5 1751
2669 5 1751
2828 5 1751
2863 5 1751
2881 5 1751
2928 5 1751
2996 5 1751
3006 5 1751
3067 5 1751
168 6 1751
185 6 1751
1380 6 1751
1408 6 1751
1410 6 1751
1502 6 1751
1526 6 1751
1572 6 1751
1572 6 1751
1719 6 1751
1728 6 1751
1728 6 1751
1728 6 1751
1728 6 1751
1746 6 1751
1749 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1751 6 1751
1753 6 1751
1754 6 1751
1754 6 1751
1754 6 1751
1752 6 1751
1752 6 1751
1810 6 1751
1810 6 1751
1879 6 1751
1879 6 1751
1884 6 1751
1884 6 1751
274 6 1751
1901 6 1751
1901 6 1751
1924 6 1751
1951 6 1751
2004 6 1751
2016 6 1751
2017 6 1751
2017 6 1751
2017 6 1751
2080 6 1751
2095 6 1751
2130 6 1751
2188 6 1751
2203 6 1751
2204 6 1751
2277 6 1751
2358 6 1751
2374 6 1751
2374 6 1751
2374 6 1751
2373 6 1751
2373 6 1751
2373 6 1751
2373 6 1751
2380 6 1751
2522 6 1751
2569 6 1751
2595 6 1751
2595 6 1751
2595 6 1751
2682 6 1751
2751 6 1751
2841 6 1751
2863 6 1751
2863 6 1751
2864 6 1751
3006 6 1751
.I 1752
.T
Resource Management Medium Scale Time-Sharing Operating system
.W
Task scheduling resource balancing
medium size virtual memory paging machine
discussed relation combined batch processing
time-sharing environment. synopsis given
task scheduling paging algorithms were implemented,
results comparative simulation
given tracing development algorithms
through six predecessor versions. Throughout
discussion particular emphasis placed balancing
system performance relative characteristics
all system resources. Simulation results relative
alternate hardware characteristics
effects program mix loading variations also presented.
.B
CACM May, 1968
.A
Oppenheimer, G.
Weizer, N.
.K
time-sharing, operating systems, resource management,
task scheduling, paging, system simulation,
memory management, virtual memories
.C
4.30 4.31 4.32
.N
CA680504 JB February 23, 1978 9:39 AM
.X
1751 5 1752
1752 5 1752
1752 5 1752
1752 5 1752
1892 5 1752
2128 5 1752
2218 5 1752
1380 6 1752
1526 6 1752
1572 6 1752
1572 6 1752
1728 6 1752
1728 6 1752
1751 6 1752
1751 6 1752
1752 6 1752
1752 6 1752
1752 6 1752
1752 6 1752
1810 6 1752
1879 6 1752
2095 6 1752
.I 1753
.T
Virtual Memory, Processes, Sharing MULTICS
.W
Some basic concepts involved design
MULTICS operating system introduced.
MULTICS concepts processes, address space, virtual
memory defined use paging
segmentation explained. means which users
may share procedures data discussed
mechanism which symbolic references dynamically
transformed into virtual machine addresses
described detail.
.B
CACM May, 1968
.A
Daley, R. C.
Dennis, J. B.
.K
virtual memory, information sharing, shared procedures,
data sharing, dynamic linking, segmentation,
paging, multiprogramming, storage management,
storage hierarchies, file maintenance
.C
3.73 4.32
.N
CA680503 JB February 23, 1978 9:44 AM
.X
1753 4 1753
2358 4 1753
2377 4 1753
2372 4 1753
2626 4 1753
2840 4 1753
1746 5 1753
1753 5 1753
1753 5 1753
1753 5 1753
2317 5 1753
2358 5 1753
2625 5 1753
1198 6 1753
1471 6 1753
1572 6 1753
1693 6 1753
1746 6 1753
1749 6 1753
1751 6 1753
1753 6 1753
1753 6 1753
1753 6 1753
1781 6 1753
274 6 1753
2126 6 1753
2148 6 1753
2358 6 1753
2438 6 1753
.I 1754
.T
Dynamic Storage Allocation Systems
.W
many recent computer system designs, hardware
facilities have been provided easing
problems storage allocation. method characterizing
dynamic storage allocation systems-according
functional capabilities provided underlying
techniques used-is presented. basic purpose
paper provide useful perspective
which utility various hardware facilities
may assessed. brief survey storage allocation
facilities several representative computer
systems included appendix.
.B
CACM May, 1968
.A
Randell, B.
Kuehner, C. J.
.K
segmentation, paging, multiprogramming, storage
allocation, storage management, virtual memories,
storage fragmentation, storage hierarchies, addressing mechanisms
.C
4.30 6.20
.N
CA680502 JB February 23, 1978 9:49 AM
.X
1754 4 1754
1754 4 1754
2358 4 1754
488 4 1754
274 5 1754
1754 5 1754
1754 5 1754
1754 5 1754
1879 5 1754
1884 5 1754
1901 5 1754
376 5 1754
2095 5 1754
2277 5 1754
2297 5 1754
2365 5 1754
168 6 1754
185 6 1754
987 6 1754
1728 6 1754
1728 6 1754
1751 6 1754
1751 6 1754
1751 6 1754
1754 6 1754
1754 6 1754
1754 6 1754
1754 6 1754
1754 6 1754
1754 6 1754
1754 6 1754
1879 6 1754
1924 6 1754
2362 6 1754
.I 1755
.T
Proceedings ACM Symposium Operating system Principles
.B
CACM May, 1968
.A
ACM Special Interest Committee
.N
CA680501 JB February 23, 1978 9:56 AM
.X
1755 5 1755
1755 5 1755
1755 5 1755
.I 1756
.T
Hollerith Punched Card Code* (Proposed USA Standard)
.B
CACM April, 1968
.K
USA Standard, card code, punched card, punched card
code, hole-patterns, hole-patterns assignment,
punched card systems
.C
1.4 2.0 2.2 2.43 2.9 3.15 3.24 3.50 3.57 3.7 3.80 3.81 3.82 4.11 4.12
.N
CA680414 JB February 23, 1978 10:14 AM
.X
1756 5 1756
1756 5 1756
1756 5 1756
.I 1757
.T
Data Code Calendar Date Machine-to-Machine
Data Interchange* (Proposed USA Standard)
.B
CACM April, 1968
.K
USA Standard, data code, calendar date, machine-to-machine
data interchange, recording calendar
date, data group identifier
.C
2.0 2.11 2.19 2.3 2.40 2.43 2.49 3.50 3.52 3.53 3.55 3.56 3.59 3.70 3.71 3.73
3.74, 3.79, 3.81, 4.1, 4.9
.N
CA680413 JB February 23, 1978 10:18 AM
.X
1757 5 1757
1757 5 1757
1757 5 1757
.I 1758
.T
Symmetric Polynomials, (Algorithm 305 [C1])
.B
CACM April, 1968
.A
McKay, S.
.K
symmetric polynomials, symmetric sum, unitary
symmetric functions, Schur functions
.C
5.39
.N
CA680412 JB February 23, 1978 10:19 AM
.X
1758 5 1758
1758 5 1758
1758 5 1758
.I 1759
.T
Transportation Problem (Algorithm 293 [H])
.B
CACM April, 1968
.A
Bayer, G.
.K
transportation problem, linear programming
.C
5.41
.N
CA680411 JB February 23, 1978 10:20 AM
.X
1759 5 1759
1759 5 1759
1759 5 1759
.I 1760
.T
Normal Curve Integral (Algorithm 304 [S15])
.B
CACM April, 1968
.A
Bergson, A.
.K
normal curve integral, probability, special functions
.C
5.5 5.12
.N
CA680410 JB February 23, 1978 10:22 AM
.X
1760 5 1760
1760 5 1760
1760 5 1760
1838 5 1760
1760 6 1760
.I 1761
.T
Chi-Squared Integral (Algorithm 299 [S15])
.B
CACM April, 1968
.A
O'Brien, W. M.
Wood, J.
.K
chi-squared integral, probability, special functions
.C
5.5 5.12
.N
CA680409 JB February 23, 1978 10:24 AM
.X
1761 5 1761
1761 5 1761
1761 5 1761
2668 5 1761
1604 6 1761
1728 6 1761
1761 6 1761
1827 6 1761
2677 6 1761
.I 1762
.T
Dilogarithm (Algorithm 327 [S22])
.B
CACM April, 1968
.A
Kolbig, K. S.
.K
dilogarithm function, special functions
.C
5.12
.N
CA680408 JB February 23, 1978 10:25 AM
.X
1762 5 1762
1762 5 1762
1762 5 1762
.I 1763
.T
Roots Low-Order Polynomial Equations (Algorithm 326 [C2])
.B
CACM April, 1968
.A
Nonweiler, T. F.
.K
root finders, polynomial equation roots, quadratic
equation roots, cubic equation roots, biquadratic
equation roots, polynomial zeros
.C
5.15
.N
CA680407 JB February 23, 1978 10:27 AM
.X
1763 5 1763
1763 5 1763
1763 5 1763
.I 1764
.T
Panel Discussion Computer Appreciation
.W
Session 19 ACM 20 th Anniversary Conference
August 31, 1967, entitled Education,
Design Experiments, Computer Appreciation. Its second
half consisted panel discussion computer
appreciation, organized chaired Elliot I. Organick.
four panelists were Charles H. Davidson,
Bernard A. Galler, Richard, W. Hamming, Alan J. Perlis.
After making prepared statements, panelists
were joined discussion Andries van Dam Arthur
B.Kohn, had presented papers first
half. transcript panel discussion,
condensed Dr. Organick edited him
panelists. Some remarks referred papers van
Dam Kahn discussion during first
half session. Pertinent papers included references.
.B
CACM April, 1968
.A
Organick, E. I.
.K
computer appreciation, students' liberal arts courses,
survey courses, beginning programming, course
content, computer courses dropout rates, college versus
precollege, teaching social responsibility
.C
1.1 1.51 1.52
.N
CA680406 JB February 23, 1978 10:34 AM
.X
1764 5 1764
1764 5 1764
1764 5 1764
.I 1765
.T
Expenditures, Sources Funds, Utilization
Digital Computers Research Instruction
Higher Education: 1964-65 Projections 1968-69
.W
Southern Regional Education Board published
complete report survey conducted
determine funding characterize utilization
computers used research instruction
institutions higher education United States.
sampling survey described estimates
total population presented.
.B
CACM April, 1968
.A
Hamblen, J. W.
.K
computing centers, research, instruction, utilization,
expenditures, support, sources funds,
higher education, post secondary education, colleges, universities
.C
1.52 2.45
.N
CA680405 JB February 23, 1978 11:07 AM
.X
1765 5 1765
1765 5 1765
1765 5 1765
.I 1766
.T
Quasilinearization Estimation
Differential Operators Eigenvalues
.W
Given linear ordinary differential operator
containing several unknown constants number
its eigenvalues, values unknown constants
estimated. precise formulation provided,
effective numerical procedure solution indicated.
results some computational experiments
given.
.B
CACM April, 1968
.A
Bellman, R. E.
Kagiwada, H. H.
Kalaba, R. E.
Vasudenvan, R.
.K
quasilinearization, eigenvalues, differential operators,
nonlinear boundary-value problems, inverse
problems,differential equations, system identification
.C
3.15 3.17 5.17
.N
CA680404 JB February 23, 1978 11:12 AM
.X
1766 4 1766
1401 5 1766
1766 5 1766
1766 5 1766
1766 5 1766
.I 1767
.T
General Purpose Graphic Language
.W
Interactive use computers graphic terminals
permit many new problems solved
using machines. order handle variety applications,
expedient develop general purpose
graphic language useful number graphic
devices. system has been designed produce
such language quickly cheaply. model graphic
language which has been developed system
presented.
.B
CACM April, 1968
.A
Kulsrud, H. E.
.K
graphic language, interactive, incremental compilation,
language design, metacompiler, syntax specified
language
.C
4.12 4.22
.N
CA680403 JB February 23, 1978 11:17 AM
.X
249 4 1767
254 4 1767
272 4 1767
1102 4 1767
1109 4 1767
1140 4 1767
1188 4 1767
1306 4 1767
1396 4 1767
1464 4 1767
1491 4 1767
1767 4 1767
1767 4 1767
1767 4 1767
1767 4 1767
1781 4 1767
1781 4 1767
1781 4 1767
1781 4 1767
1787 4 1767
1787 4 1767
1860 4 1767
1945 4 1767
1949 4 1767
1988 4 1767
321 4 1767
2059 4 1767
2126 4 1767
2252 4 1767
2341 4 1767
435 4 1767
437 4 1767
463 4 1767
483 4 1767
491 4 1767
2732 4 1767
560 4 1767
583 4 1767
3073 4 1767
627 4 1767
631 4 1767
632 4 1767
642 4 1767
644 4 1767
653 4 1767
680 4 1767
761 4 1767
762 4 1767
763 4 1767
123 4 1767
140 4 1767
919 4 1767
989 4 1767
196 5 1767
1468 5 1767
1467 5 1767
1496 5 1767
1767 5 1767
1767 5 1767
1767 5 1767
2002 5 1767
2003 5 1767
2152 5 1767
1491 6 1767
1710 6 1767
1767 6 1767
1767 6 1767
1767 6 1767
1937 6 1767
2105 6 1767
.I 1768
.T
Global Parser Context-Free Phrase Structure Grammars
.W
algorithm analyzing any context-free phrase
structure grammar generating program
which can then parse any sentence language (or
indicate given sentence invalid)
described. parser "top-to-bottom" type
recursive . number heuristic procedures
whose purpose shorten basic algorithm quickly
ascertaining certain substrings
input sentence cannot correspond target nonterminal
symbols included. Both generating
algorithm parser have been implemented RCA
SNOBOL have been tested successfully number
artificial grammars subset ALGOL.
number routines extracting data
grammar, such minimum lengths N-derivable strings
possible prefixes, given may
interest apart their application particular context.
.B
CACM April, 1968
.A
Unger, S. H.
.K
parser, syntax-directed compiler, context-free
grammars, syntactic analysis, translators
.C
3.42 4.12 5.24
.N
CA680402 JB February 23, 1978 11:27 AM
.X
1350 4 1768
1399 4 1768
1496 4 1768
1659 4 1768
1665 4 1768
1683 4 1768
1768 4 1768
1768 4 1768
1768 4 1768
1781 4 1768
1787 4 1768
1787 4 1768
1824 4 1768
1825 4 1768
1836 4 1768
1861 4 1768
1945 4 1768
1945 4 1768
2015 4 1768
2061 4 1768
2110 4 1768
2110 4 1768
2127 4 1768
2187 4 1768
2317 4 1768
2545 4 1768
2698 4 1768
2733 4 1768
3094 4 1768
1141 5 1768
1265 5 1768
1768 5 1768
1768 5 1768
1768 5 1768
1781 5 1768
.I 1769
.T
Expanding World Computers
.W
onward sweep automatic processing
information impeded nine principal barriers:
geography, cost, problem complexity, man-machine communication,
inadequate sensors, lack understanding,
distance, time, size. main incentive breaching
these barriers universal need
processing information, ever more urgent greater
part human work activity changes production
service. Computer developments hardware, programming,
time-sharing, education, data communication,
displays judged effectively they remove these
barriers, their barrier-smashing potentialities
indicate continued rapid expansion. Problem-oriented
languages particularly effective over entire
front. Online computers time-sharing also rate high
measure. Education increased understanding
basic all progress computer. complex
but powerful tool most important one
available governments scientists use studying
problems being created population
explosion, analyzing possible solutions.
.B
CACM April, 1968
.A
Harder, E. L.
.K
barriers, philosophy, developments, computer-aided design,
problem-oriented languages, data communication,
education, computer science, forecast, survey, introduction
.C
1.0 1.3 2.1 3.24 4.0 6.20 6.30
.N
CA680401 JB February 23, 1978 11:36 AM
.X
1769 5 1769
1769 5 1769
1769 5 1769
.I 1770
.T
Rules Ethics Information Processing
.W
background motivation adoption
ACM Council November 11, 1966,
set Guidelines Professional Conduct Information
Processing described. brief his tory
given ethical codes other professions. Some
reasons against adoption ethical rules
considered, several sections ACM Guidelines
analyzed. purpose inform
important aspect our profession,
well stimulate thought interest.
.B
CACM March, 1968
.A
Parker, D. B.
.K
ethics, professional conduct, code ethics, ACM
guidelines, professionalism, professional societies,
unethical conduct
.C
1.3 2.2
.N
CA680302 JB February 23, 1978 11:41 AM
.X
1770 4 1770
1628 5 1770
1770 5 1770
1770 5 1770
1770 5 1770
.I 1771
.T
CURRICULUM 68 -- Recommendations Academic
Programs Computer Science -- Report
ACM Curriculum Committee Computer science
.W
report contains recommendations academic
programs computer science which were developed
ACM Curriculum Committee Computer Science.
classification subject areas contained
computer science presented twenty-two courses
these areas described. Prerequisites,
catalog descriptions, detailed outlines, annotated
bibliographies these courses included.
Specific recommendations which have evolved
Committee's 1965 Preliminary Recommendations
given undergraduate programs. Graduate programs computer
science discussed some recommendations
presented development master's degree programs.
Ways developing guidelines doctoral
programs discussed, but no specific recommendations
made. importance service courses,
minors, continuing education computer science
emphasized. Attention given organization,
staff requirements, computer resources, other facilities
needed implement computer science educational
programs.
.B
CACM March, 1968
.K
computer science courses, computer science curriculum,
computer science education, computer science
academic programs, computer science graduate programs,
computer science undergraduate programs, computer
science course bibliographies
.C
1.52
.N
CA680301 JB February 23, 1978 11:52 AM
.X
1413 4 1771
1654 4 1771
1720 4 1771
1771 4 1771
1771 4 1771
2478 4 1771
1205 5 1771
1654 5 1771
1720 5 1771
1771 5 1771
1771 5 1771
1771 5 1771
1927 5 1771
2147 5 1771
2163 5 1771
2345 5 1771
2478 5 1771
2594 5 1771
2852 5 1771
2899 5 1771
3130 5 1771
1205 6 1771
1417 6 1771
1654 6 1771
1659 6 1771
1720 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1771 6 1771
1927 6 1771
2155 6 1771
2181 6 1771
2181 6 1771
2204 6 1771
2329 6 1771
2345 6 1771
2387 6 1771
2479 6 1771
2538 6 1771
3003 6 1771
3186 6 1771
.I 1772
.T
USASCSOCR Dual Case Keyboard Arrangement* (Proposed USA Standard)
.B
CACM February, 1968
.N
CA680210 JB February 23, 1978 11:54 AM
.X
1772 5 1772
1772 5 1772
1772 5 1772
.I 1773
.T
General Purpose Alphanumeric Keyboard Arrangement
Information Interchange* (Proposed USA
Standard)
.B
CACM February, 1968
.N
CA680209 JB February 23, 1978 11:56 AM
.X
1773 5 1773
1773 5 1773
1773 5 1773
.I 1774
.T
Program Overlay Techniques
.W
general features program overlay systems
described. Three main types -- automatic,
semiautomatic nonautomatic -- classified,
programming techniques explained function
machine hardware other system features.
implementation semiautomatic overlay facility
multiprogrammed system CDC 6600 described
detail, special reference real time
applications.
.B
CACM February, 1968
.A
Pankhurst, R. J.
.K
loaders, multiprogramming, overlay techniques,
storage allocation segmentation
.C
4.39
.N
CA680208 JB February 23, 1978 11:59 AM
.X
1471 4 1774
1774 4 1774
1774 4 1774
1774 4 1774
2343 4 1774
560 4 1774
972 4 1774
1173 5 1774
271 5 1774
1774 5 1774
1774 5 1774
1774 5 1774
2343 5 1774
800 5 1774
1173 6 1774
1774 6 1774
1845 6 1774
.I 1775
.T
Adjustment Inverse Symmetric Matrix
Two Symmetric Elements Changed (Algorithm
325 [F1])
.B
CACM February, 1968
.A
Zielke, G.
.K
symmetric matrix, matrix inverse, matrix
perturbation, matrix modification
.C
5.14
.N
CA680207 JB February 23, 1978 12:01 PM
.X
1775 5 1775
1775 5 1775
1775 5 1775
.I 1776
.T
Maxflow (Algorithm 324 [H])
.B
CACM February, 1968
.A
Bayer, G.
.K
network,liner programming, maximum flow
.C
5.41
.N
CA680206 JB February 23, 1978 12:02 PM
.X
1776 5 1776
1776 5 1776
1776 5 1776
.I 1777
.T
Generation Permutations Lexicographic Order (Algorithm 323 [G6])
.B
CACM February, 1968
.A
Ord-Smith, R. J.
.K
permutations, lexicographic order, lexicographic
generation, permutation generation
.C
5.39
.N
CA680205 JB February 23, 1978 12:04 PM
.X
1777 5 1777
1777 5 1777
1777 5 1777
1814 5 1777
1777 6 1777
.I 1778
.T
F-Distribution (Algorithm 322 [S14])
.B
CACM February, 1968
.A
Dorrer, E.
.K
Fisher's F-distribution, Student's t-distribution
.C
5.5
.N
CA680204 JB February 23, 1978 12:06 PM
.X
1778 5 1778
1778 5 1778
1778 5 1778
1920 5 1778
1778 6 1778
714 6 1778
.I 1779
.T
t-Test Probabilities (Algorithm [S14])
.B
CACM February, 1968
.A
Morris, J.
.K
T-test, Student's t-statistic, distribution function
.C
5.5
.N
CA680203 JB February 23, 1978 1:33 PM
.X
1157 4 1779
1779 4 1779
1920 4 1779
1944 4 1779
1987 4 1779
2548 4 1779
1779 5 1779
1779 5 1779
1779 5 1779
1944 5 1779
1987 5 1779
714 5 1779
1561 6 1779
1581 6 1779
1779 6 1779
1779 6 1779
1944 6 1779
714 6 1779
714 6 1779
.I 1780
.T
Harmonic Analysis Symmetrically
Distributed Data (Algorithm 320 [C6])
.B
CACM February, 1968
.A
Hunter, D. B.
.K
harmonic analysis, cosine series, sine series, function
approximation, curve fitting, trigonometric
series
.C
5.13
.N
CA680202 JB February 23, 1978 1:34 PM
.X
1780 5 1780
1780 5 1780
1780 5 1780
.I 1781
.T
Translator Writing systems
.W
critical review recent efforts automate
writing translators programming languages
presented. formal study syntax its application
translator writing discussed
Section II. Various approaches automating post syntactic
(semantic) aspects translator writing
discussed Section III, several related topics Section IV.
.B
CACM February, 1968
.A
Feldman, J.
Gries, D.
.K
compiler, compiler-compiler, translator, translator
writing systems, metacompiler, syntax, semantics,
syntax-directed, meta-assembler, macroprocessor,
parser, syntactic analysis, generator
.C
4.1 4.10 4.12 4.22 5.23
.N
CA680201 JB February 23, 1978 2:02 PM
.X
249 4 1781
254 4 1781
267 4 1781
272 4 1781
1046 4 1781
1062 4 1781
1072 4 1781
1086 4 1781
1102 4 1781
1102 4 1781
1105 4 1781
1109 4 1781
1121 4 1781
1132 4 1781
1139 4 1781
1139 4 1781
1139 4 1781
1140 4 1781
1140 4 1781
1141 4 1781
1142 4 1781
1188 4 1781
1215 4 1781
1215 4 1781
1223 4 1781
1225 4 1781
1234 4 1781
1234 4 1781
1263 4 1781
1263 4 1781
1265 4 1781
1265 4 1781
1265 4 1781
1270 4 1781
1306 4 1781
1306 4 1781
1323 4 1781
1323 4 1781
1350 4 1781
1350 4 1781
1358 4 1781
1358 4 1781
1358 4 1781
1358 4 1781
1379 4 1781
1379 4 1781
1380 4 1781
1380 4 1781
1380 4 1781
1396 4 1781
1399 4 1781
1425 4 1781
1453 4 1781
1464 4 1781
1464 4 1781
1469 4 1781
1484 4 1781
1486 4 1781
1491 4 1781
1491 4 1781
1491 4 1781
1491 4 1781
1496 4 1781
1498 4 1781
1498 4 1781
1503 4 1781
1530 4 1781
1541 4 1781
1542 4 1781
1552 4 1781
1565 4 1781
1565 4 1781
1612 4 1781
1613 4 1781
1614 4 1781
1626 4 1781
1646 4 1781
1647 4 1781
1659 4 1781
1665 4 1781
1683 4 1781
1693 4 1781
1693 4 1781
1693 4 1781
1693 4 1781
1708 4 1781
1708 4 1781
1767 4 1781
1767 4 1781
1767 4 1781
1767 4 1781
1768 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1781 4 1781
1787 4 1781
1787 4 1781
1787 4 1781
1787 4 1781
1787 4 1781
1787 4 1781
1787 4 1781
1788 4 1781
1788 4 1781
1792 4 1781
1807 4 1781
1824 4 1781
1824 4 1781
1824 4 1781
1825 4 1781
1826 4 1781
1836 4 1781
1836 4 1781
1852 4 1781
1854 4 1781
1860 4 1781
1860 4 1781
1860 4 1781
1860 4 1781
1860 4 1781
1860 4 1781
1861 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1945 4 1781
1947 4 1781
1949 4 1781
1988 4 1781
1988 4 1781
1988 4 1781
1989 4 1781
321 4 1781
364 4 1781
2015 4 1781
2034 4 1781
2059 4 1781
2060 4 1781
2060 4 1781
2060 4 1781
2061 4 1781
2061 4 1781
2061 4 1781
2083 4 1781
2082 4 1781
2091 4 1781
2091 4 1781
2091 4 1781
2110 4 1781
2112 4 1781
2126 4 1781
2126 4 1781
2126 4 1781
2150 4 1781
2152 4 1781
2156 4 1781
2168 4 1781
2175 4 1781
2178 4 1781
2178 4 1781
2178 4 1781
2179 4 1781
2179 4 1781
2179 4 1781
2228 4 1781
2249 4 1781
2252 4 1781
2252 4 1781
2252 4 1781
2256 4 1781
2299 4 1781
2314 4 1781
2317 4 1781
2325 4 1781
2326 4 1781
2326 4 1781
2341 4 1781
2341 4 1781
2341 4 1781
2340 4 1781
2356 4 1781
2342 4 1781
2376 4 1781
2470 4 1781
2534 4 1781
2534 4 1781
405 4 1781
2541 4 1781
2546 4 1781
2546 4 1781
2546 4 1781
2546 4 1781
435 4 1781
437 4 1781
438 4 1781
438 4 1781
2579 4 1781
463 4 1781
464 4 1781
483 4 1781
491 4 1781
2603 4 1781
2603 4 1781
2618 4 1781
2645 4 1781
2650 4 1781
2652 4 1781
2684 4 1781
2684 4 1781
2684 4 1781
2698 4 1781
2698 4 1781
2698 4 1781
2698 4 1781
2708 4 1781
2708 4 1781
2708 4 1781
2708 4 1781
2719 4 1781
2732 4 1781
2733 4 1781
2736 4 1781
2820 4 1781
2824 4 1781
2833 4 1781
2842 4 1781
2929 4 1781
2934 4 1781
2982 4 1781
2986 4 1781
557 4 1781
560 4 1781
583 4 1781
584 4 1781
3044 4 1781
3045 4 1781
3045 4 1781
3069 4 1781
3073 4 1781
3073 4 1781
3093 4 1781
3093 4 1781
3094 4 1781
3155 4 1781
3184 4 1781
627 4 1781
631 4 1781
631 4 1781
632 4 1781
637 4 1781
642 4 1781
644 4 1781
653 4 1781
653 4 1781
669 4 1781
669 4 1781
679 4 1781
680 4 1781
680 4 1781
691 4 1781
720 4 1781
729 4 1781
759 4 1781
761 4 1781
761 4 1781
762 4 1781
762 4 1781
762 4 1781
763 4 1781
763 4 1781
763 4 1781
795 4 1781
799 4 1781
123 4 1781
140 4 1781
919 4 1781
945 4 1781
949 4 1781
949 4 1781
949 4 1781
989 4 1781
989 4 1781
989 4 1781
123 5 1781
196 5 1781
919 5 1781
990 5 1781
1007 5 1781
1046 5 1781
1131 5 1781
1139 5 1781
1140 5 1781
1149 5 1781
1198 5 1781
1215 5 1781
1223 5 1781
1265 5 1781
1303 5 1781
1323 5 1781
205 5 1781
1358 5 1781
224 5 1781
249 5 1781
1366 5 1781
288 5 1781
1421 5 1781
1460 5 1781
1462 5 1781
1463 5 1781
1468 5 1781
1467 5 1781
1477 5 1781
1491 5 1781
1496 5 1781
1531 5 1781
1535 5 1781
1565 5 1781
1601 5 1781
1602 5 1781
1613 5 1781
1614 5 1781
1626 5 1781
1641 5 1781
1665 5 1781
1768 5 1781
1781 5 1781
1781 5 1781
1781 5 1781
1787 5 1781
1788 5 1781
1824 5 1781
1825 5 1781
1836 5 1781
1861 5 1781
316 5 1781
381 5 1781
398 5 1781
2015 5 1781
2110 5 1781
2127 5 1781
2187 5 1781
2317 5 1781
2545 5 1781
2698 5 1781
2733 5 1781
404 5 1781
410 5 1781
463 5 1781
464 5 1781
483 5 1781
11 5 1781
584 5 1781
3184 5 1781
3188 5 1781
600 5 1781
680 5 1781
691 5 1781
763 5 1781
799 5 1781
196 6 1781
1141 6 1781
1141 6 1781
1155 6 1781
1191 6 1781
1198 6 1781
1215 6 1781
1265 6 1781
1265 6 1781
1324 6 1781
1358 6 1781
1477 6 1781
1477 6 1781
1477 6 1781
1487 6 1781
1491 6 1781
1491 6 1781
1491 6 1781
1496 6 1781
1527 6 1781
1572 6 1781
1614 6 1781
1614 6 1781
1693 6 1781
1739 6 1781
1748 6 1781
1749 6 1781
1753 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
1781 6 1781
224 6 1781
1856 6 1781
378 6 1781
2110 6 1781
2126 6 1781
2148 6 1781
2179 6 1781
2341 6 1781
2423 6 1781
2556 6 1781
2786 6 1781
404 6 1781
408 6 1781
3184 6 1781
577 6 1781
631 6 1781
680 6 1781
763 6 1781
799 6 1781
799 6 1781
799 6 1781
799 6 1781
.I 1782
.T
Numerical Integration Formula Useful Fourier Analysis
.W
numerical integration formula presented which
uses unequal sampling intervals. intervals
equally spaced log scale. Such formulation
useful Fourier analysis improve accuracy
ease usage. complete set formulas
numerical Fourier analysis given.
.B
CACM January, 1968
.A
Meisel, W. S.
.K
numerical integration, Fourier analysis, integration
.C
5.16
.N
CA680112 JB February 23, 1978 2:05 PM
.X
1782 5 1782
1782 5 1782
1782 5 1782
.I 1783
.T
In-and-Out Conversions
.W
Byan in-and-out conversion we mean floating-point
number one base converted into
floating-point number another base then converted
back floating-point number original
base. all combinations rounding truncation
conversions question considered
many significant digits needed intermediate
base allow such in-and-out conversions return
original number (when possible), least significant digit.
.B
CACM January, 1968
.A
Matula, D. W.
.K
floating-point numbers, significance,
base conversion, rounding, truncation
.C
3.15 5.11
.N
CA680111 JB February 23, 1978 2:14 PM
.X
1783 4 1783
1843 4 1783
1634 5 1783
1783 5 1783
1783 5 1783
1783 5 1783
1843 5 1783
1634 6 1783
1783 6 1783
.I 1784
.T
Practical Error Coefficients Estimating
Quadrature Errors Analytic Functions
.W
All published error coefficients estimating
quadrature errors analytic functions were
computed assumption quadrature rule
exact polynomials up given degree.
Since these rules use rounded values abscissas
weights since true values integrals
some polynomials question have infinite
binary expression, quadrature rule not
exact. Hence these errors must taken into consideration
computing practical error coefficients.
.B
CACM January, 1968
.A
Rabinowitz, P.
.K
numerical integration, quadrature, truncation
error, theoretical error coefficients, practical
error coefficients, integration analytical functions, roundoff error
.C
5.11 5.16
.N
CA680110 JB February 23, 1978 2:22 PM
.X
1672 5 1784
1784 5 1784
1784 5 1784
1784 5 1784
1784 6 1784
.I 1785
.T
Scatter Storage Techniques
.W
Scatter storage techniques method
implementing symbol tables assemblers
compilers reviewed number ways using
them more effectively presented. Many
most useful variants techniques documented.
.B
CACM January, 1968
.A
Morris, R.
.K
scatter storage, hash addressing, searching,
file searching, file addressing, storage layout
.C
3.73 3.74
.N
CA680109 JB February 23, 1978 2:26 PM
.X
1271 4 1785
1785 4 1785
1785 4 1785
1785 4 1785
2203 4 1785
2203 4 1785
2543 4 1785
2552 4 1785
2552 4 1785
2860 4 1785
911 4 1785
911 4 1785
911 5 1785
1676 5 1785
1682 5 1785
1728 5 1785
1785 5 1785
1785 5 1785
1785 5 1785
1860 5 1785
1973 5 1785
332 5 1785
2018 5 1785
2032 5 1785
2033 5 1785
2107 5 1785
2109 5 1785
2203 5 1785
2251 5 1785
2359 5 1785
2524 5 1785
2543 5 1785
2552 5 1785
2559 5 1785
2991 5 1785
492 5 1785
3053 5 1785
849 6 1785
911 6 1785
911 6 1785
1025 6 1785
1314 6 1785
1329 6 1785
1366 6 1785
1389 6 1785
1421 6 1785
1496 6 1785
1525 6 1785
1626 6 1785
1641 6 1785
1647 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1785 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1786 6 1785
1973 6 1785
1973 6 1785
1973 6 1785
1973 6 1785
1992 6 1785
332 6 1785
332 6 1785
378 6 1785
2018 6 1785
2107 6 1785
2107 6 1785
2107 6 1785
2107 6 1785
2107 6 1785
2107 6 1785
2107 6 1785
2109 6 1785
2109 6 1785
2109 6 1785
2109 6 1785
2109 6 1785
2109 6 1785
2203 6 1785
2203 6 1785
2203 6 1785
2412 6 1785
2543 6 1785
2673 6 1785
2707 6 1785
2770 6 1785
492 6 1785
3184 6 1785
.I 1786
.T
Improved Hash Code Scatter Storage
.W
Introduced hash coding method based
fixed-point division rather than multiplication
logical operations. new method allows
hash table have almost any length. Also new
method handling collisions discussed. Known
quadratic search, method faster than random
search free "clusters" build up linear search.
.B
CACM January, 1968
.A
Maurer, W. D.
.K
hash code, hash table, scatter storage, searching
.C
3.74 4.11 4.12 4.9
.N
CA680108 JB February 23, 1978 2:31 PM
.X
1786 5 1786
1786 5 1786
1786 5 1786
1860 5 1786
1973 5 1786
1992 5 1786
2018 5 1786
2033 5 1786
2107 5 1786
2109 5 1786
2203 5 1786
2251 5 1786
2543 5 1786
2573 5 1786
2770 5 1786
911 6 1786
1314 6 1786
1366 6 1786
1389 6 1786
1421 6 1786
1496 6 1786
1626 6 1786
1641 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1785 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1786 6 1786
1869 6 1786
1973 6 1786
1973 6 1786
1973 6 1786
1992 6 1786
332 6 1786
378 6 1786
2018 6 1786
2018 6 1786
2018 6 1786
2107 6 1786
2107 6 1786
2107 6 1786
2107 6 1786
2107 6 1786
2107 6 1786
2109 6 1786
2109 6 1786
2109 6 1786
2109 6 1786
2109 6 1786
2109 6 1786
2673 6 1786
492 6 1786
3184 6 1786
.I 1787
.T
Use Transition Matrices Compiling
.W
algorithms described which constructs
suitable BNF grammar efficient left-right
recognizer sentences corresponding language.
type recognizer, used number
compilers, operates pushdown stack
transition matrix. Two examples illustrate
such recognizers may used effectively other
purposes besides usual syntax checking.
.B
CACM January, 1968
.A
Gries, D.
.K
transition matrices, compilation, translation,
grammar, context-free language, formal language,
parsing
.C
4.12 5.23
.N
CA680107 JB February 23, 1978 2:35 PM
.X
249 4 1787
254 4 1787
267 4 1787
272 4 1787
1102 4 1787
1109 4 1787
1139 4 1787
1140 4 1787
1141 4 1787
1188 4 1787
1215 4 1787
1215 4 1787
1223 4 1787
1306 4 1787
1323 4 1787
1358 4 1787
1380 4 1787
1396 4 1787
1464 4 1787
1491 4 1787
1496 4 1787
1498 4 1787
1542 4 1787
1647 4 1787
1665 4 1787
1665 4 1787
1683 4 1787
1683 4 1787
1693 4 1787
1767 4 1787
1767 4 1787
1768 4 1787
1768 4 1787
1781 4 1787
1781 4 1787
1781 4 1787
1781 4 1787
1781 4 1787
1781 4 1787
1781 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1787 4 1787
1792 4 1787
1824 4 1787
1825 4 1787
1836 4 1787
1836 4 1787
1860 4 1787
1861 4 1787
1945 4 1787
1945 4 1787
1945 4 1787
1945 4 1787
1949 4 1787
1988 4 1787
1989 4 1787
321 4 1787
364 4 1787
2015 4 1787
2059 4 1787
2060 4 1787
2061 4 1787
2061 4 1787
2082 4 1787
2091 4 1787
2110 4 1787
2112 4 1787
2126 4 1787
2127 4 1787
2152 4 1787
2179 4 1787
2187 4 1787
2252 4 1787
2317 4 1787
2340 4 1787
2356 4 1787
2534 4 1787
405 4 1787
2541 4 1787
2545 4 1787
2546 4 1787
435 4 1787
437 4 1787
438 4 1787
463 4 1787
483 4 1787
491 4 1787
2603 4 1787
2603 4 1787
2698 4 1787
2698 4 1787
2698 4 1787
2708 4 1787
2732 4 1787
2733 4 1787
2733 4 1787
2820 4 1787
2824 4 1787
2982 4 1787
2986 4 1787
560 4 1787
583 4 1787
3045 4 1787
3073 4 1787
3073 4 1787
3093 4 1787
3155 4 1787
627 4 1787
631 4 1787
632 4 1787
642 4 1787
644 4 1787
653 4 1787
680 4 1787
761 4 1787
762 4 1787
763 4 1787
763 4 1787
123 4 1787
140 4 1787
919 4 1787
989 4 1787
196 5 1787
1141 5 1787
1215 5 1787
224 5 1787
1491 5 1787
1496 5 1787
1781 5 1787
1787 5 1787
1787 5 1787
1787 5 1787
2534 5 1787
2708 5 1787
763 5 1787
799 5 1787
830 6 1787
123 6 1787
196 6 1787
919 6 1787
990 6 1787
1007 6 1787
1046 6 1787
1131 6 1787
1139 6 1787
1140 6 1787
1149 6 1787
1198 6 1787
1215 6 1787
1223 6 1787
1265 6 1787
1303 6 1787
1323 6 1787
1358 6 1787
1366 6 1787
1421 6 1787
1460 6 1787
1462 6 1787
1463 6 1787
1467 6 1787
1468 6 1787
1477 6 1787
1477 6 1787
1491 6 1787
1491 6 1787
1496 6 1787
1531 6 1787
1535 6 1787
1565 6 1787
1601 6 1787
1602 6 1787
1613 6 1787
1614 6 1787
1626 6 1787
1641 6 1787
1787 6 1787
1787 6 1787
1787 6 1787
1788 6 1787
205 6 1787
224 6 1787
249 6 1787
288 6 1787
1959 6 1787
1973 6 1787
316 6 1787
381 6 1787
398 6 1787
2111 6 1787
2111 6 1787
11 6 1787
2182 6 1787
2534 6 1787
2556 6 1787
404 6 1787
410 6 1787
463 6 1787
464 6 1787
483 6 1787
3184 6 1787
3188 6 1787
584 6 1787
600 6 1787
680 6 1787
680 6 1787
691 6 1787
763 6 1787
799 6 1787
799 6 1787
.I 1788
.T
Toward General Processor Programming Languages
.W
Many efforts have been made develop better
way implementing higher level programming
language than construction whole new compiler,
but so far none has proved generally satisfactory.
paper, contended programming
language best described functionally body
macro instructions, macro call constitutes
canonical form terms which programming
notation may described. supporting discussion
logical his torical role macro instruction
presented. Also discussed conflict between
machine independence object program efficiency,
question greatest difficulties
lie compiler construction.
.B
CACM January, 1968
.A
Halpern, M. J.
.K
programming language translator, programming language
processor, general translator, general processor,
macro instruction processor; meta processor, meta language
translator, meta language processor, compiler-compiler,
writing system, translator writing system
.C
4.10 4.11 4.12 4.20
.N
CA680106 JB February 23, 1978 2:42 PM
.X
1358 4 1788
1565 4 1788
1781 4 1788
1781 4 1788
1788 4 1788
1788 4 1788
1788 4 1788
1788 4 1788
1006 5 1788
1007 5 1788
205 5 1788
1781 5 1788
1788 5 1788
1788 5 1788
1788 5 1788
3189 5 1788
123 6 1788
196 6 1788
919 6 1788
990 6 1788
1007 6 1788
1046 6 1788
1131 6 1788
1139 6 1788
1140 6 1788
1149 6 1788
1198 6 1788
1215 6 1788
1223 6 1788
1265 6 1788
1303 6 1788
1323 6 1788
1358 6 1788
1366 6 1788
1421 6 1788
1460 6 1788
1462 6 1788
1463 6 1788
1467 6 1788
1468 6 1788
1477 6 1788
1491 6 1788
1496 6 1788
1531 6 1788
1535 6 1788
1565 6 1788
1601 6 1788
1602 6 1788
1613 6 1788
1614 6 1788
1626 6 1788
1641 6 1788
1787 6 1788
1788 6 1788
205 6 1788
224 6 1788
249 6 1788
288 6 1788
316 6 1788
381 6 1788
398 6 1788
11 6 1788
404 6 1788
410 6 1788
463 6 1788
464 6 1788
483 6 1788
3184 6 1788
3188 6 1788
584 6 1788
600 6 1788
680 6 1788
691 6 1788
763 6 1788
799 6 1788
.I 1789
.T
Logarithm Gamma Function (Algorithm 291 [S14])
.B
CACM January, 1968
.A
Hoare, M. R.
.N
CA680104 JB February 23, 1978 2:45 PM
.X
1789 5 1789
1789 5 1789
1789 5 1789
.I 1790
.T
Muller's Method Finding roots
Arbitrary Function (Algorithm 196 [C5])
.B
CACM January, 1968
.A
Whitley, V. W.
.K
equation roots, function zeros
.C
5.15
.N
CA680103 JB February 23, 1978 2:47 PM
.X
1790 5 1790
1790 5 1790
1790 5 1790
.I 1791
.T
Triangular Factors Modified Matrices (Algorithm 319 [F1])
.B
CACM January, 1968
.A
Green, D. R.
.K
matrix decomposition, matrix factors,
matrix modifier, matrix perturbation
.C
5.14
.N
CA680102 JB February 23, 1978 2:50 PM
.X
1791 5 1791
1791 5 1791
1791 5 1791
.I 1792
.T
Exploratory Experimental Studies Comparing
Online Off line Programming Performance
.W
Two exploratory experiments were conducted
System Development Corporation compare debugging
performance programmers working under conditions
on-line off line access computer. These
first known studies measure programmers'
performance under controlled conditions standard
tasks. Statistically significant results both experiments
indicated faster debugging under online
conditions, but perhaps most important practical finding
involves striking individual differences
programmer performance. Methodological problems encountered
designing conducting these experiments
described; limitations findings pointed
out; hypotheses presented account results;
suggestions made further research.
.B
CACM January, 1968
.A
Sackman, H.
Erikson, W. J.
Grant, E. E.
.K
online vs. off line performance, programmer/computer
communication, programming experimental-empirical
studies, programming cost effectiveness, programming
performance, debugging effectiveness, time sharing
vs. batch processing, factor analysis application,
programmer trainee performance, basic programming
knowledge test, experienced programmer study, analysis
variance, programmer individual differences
.C
2.40
.N
CA680101 JB February 23, 1978 2:58 PM
.X
267 4 1792
1139 4 1792
1141 4 1792
1215 4 1792
1223 4 1792
1647 4 1792
1781 4 1792
1787 4 1792
1792 4 1792
1792 4 1792
1908 4 1792
364 4 1792
405 4 1792
438 4 1792
763 4 1792
224 5 1792
1605 5 1792
1792 5 1792
1792 5 1792
1792 5 1792
3091 5 1792
1792 6 1792
.I 1793
.T
Presentation Alphameric Characters Information
Processing* (Proposed American National
Standard)
.B
CACM December, 1969
.K
alphameric, handwritten input, encoding transcription,
numerals, upper case, hand printed
.C
2.43 4.41
.N
CA691219 JB February 15, 1978 1:55 PM
.X
1793 5 1793
1793 5 1793
1793 5 1793
2333 5 1793
1793 6 1793
87 6 1793
88 6 1793
.I 1794
.T
Fast Random Number Generator IBM 360
.B
CACM December, 1969
.A
Seraphin, D. S.
.K
pseudorandom number, modulus, period, float,
normalization, characteristic, chi-square test
.C
4.49 5.19 5.5
.N
CA691218 JB February 15, 1978 1:58 PM
.X
1794 4 1794
1870 4 1794
2122 4 1794
1674 5 1794
1794 5 1794
1794 5 1794
1794 5 1794
2349 5 1794
1648 6 1794
1716 6 1794
1794 6 1794
1894 6 1794
2043 6 1794
501 6 1794
613 6 1794
774 6 1794
.I 1795
.T
Optimal Code Serial Parallel Computation
.B
CACM December, 1969
.A
Fateman, R. J.
.K
code optimization, sequencing operations,
detection common subexpressions
.C
4.12
.N
CA691217 JB February 15, 1978 1:59 PM
.X
1795 5 1795
1795 5 1795
1795 5 1795
.I 1796
.T
Index Subject Algorithms, 1969
.B
CACM December, 1969
.K
1969 index first supplement
Index Subject Algorithms, 1960 1968 (Comm.
ACM 11, 12 (Dec. 1968), 827 830).
.N
CA691216 JB February 15, 1978 2:03 PM
.X
1796 5 1796
1796 5 1796
1796 5 1796
.I 1797
.T
Solution Linear programs 0-1 (Algorithm 341 [H])
.B
CACM December, 1969
.A
Proll, L. G.
.K
linear programming, zero-one variables, partial enumeration
.C
5.41
.N
CA691215 JB February 15, 1978 2:06 PM
.X
1797 5 1797
1797 5 1797
1797 5 1797
.I 1798
.T
Coulomb Wave Functions (Algorithm 300 [S22])
.B
CACM December, 1969
.A
Kolbig, K. S.
.K
Coulomb wave functions, wave functions,
special functions, function evaluation
.C
5.12
.N
CA691214 JB February 15, 1978 2:08 PM
.X
1798 5 1798
1798 5 1798
1798 5 1798
.I 1799
.T
Elementary Functions Continued Fractions (Algorithm 229 [B1])
.B
CACM December, 1969
.A
Bray, T. A.
.K
continued factions, Pade table
.C
5.19
.N
CA691213 JB February 15, 1978 2:09 PM
.X
1799 5 1799
1799 5 1799
1799 5 1799
.I 1800
.T
PSIF (Algorithm 147 [S14])
.B
CACM December, 1969
.A
Parsons, R. G.
.K
gamma function, logarithmic derivative, factorial function, psi function
.C
5.12
.N
CA691212 JB February 15, 1978 2:11 PM
.X
1800 4 1800
1800 5 1800
1800 5 1800
1800 5 1800
2222 5 1800
871 5 1800
970 6 1800
1800 6 1800
1818 6 1800
1834 6 1800
2042 6 1800
.I 1801
.T
Analysis Variance Balanced Experiments (Algorithm 367 [G2])
.B
CACM December, 1969
.A
Claringbold, P. J.
.K
analysis variance, analysis covariance, regression
analysis, experimental design, balanced
experiment, missing data, interblock estimate, intra block estimate
.C
5.14 5.5
.N
CA691211 JB February 15, 1978 2:14 PM
.X
1801 4 1801
1801 5 1801
1801 5 1801
1801 5 1801
1802 5 1801
.I 1802
.T
Regression Using Certain Direct Product Matrices (Algorithm 366 [G2])
.B
CACM December, 1969
.A
Claringbold, P. J.
.K
analysis variance, analysis covariance,
regression analysis, experimental design, matrix
direct product, protection operator, orthogonal matrix
.C
5.14 5.5
.N
CA691210 JB February 15, 1978 2:23 PM
.X
1801 5 1802
1802 5 1802
1802 5 1802
1802 5 1802
1802 6 1802
.I 1803
.T
Complex Root Finding (Algorithm 365 [C5])
.B
CACM December, 1969
.A
Bach, H.
.K
downhill method, complex relaxation method, complex
iteration, complex equation, transcendental
complex equation, algebraic complex equation
.C
5.15
.N
CA691209 JB February 15, 1978 2:25 PM
.X
1803 4 1803
1806 5 1803
1803 5 1803
1803 5 1803
1803 5 1803
.I 1804
.T
Coloring Polygonal Regions (Algorithm 364 [Z])
.B
CACM December, 1969
.A
Herriot, R. G.
.K
coloring polygonal regions, coloring planar surfaces,
drawing pictures, shading enclosed regions
.C
4.9
.N
CA691208 JB February 15, 1978 2:27 PM
.X
1804 4 1804
1804 4 1804
2987 4 1804
2987 4 1804
1804 5 1804
1804 5 1804
1804 5 1804
421 5 1804
524 5 1804
.I 1805
.T
Productivity Multiprogrammed Computers-Progress
Developing Analytic Prediction Method
.W
Multiprogramming discussed here
mode computer operation which two more
programs concurrently processor memory proceeding,
each using same central processor unit
(CPU) input-output (I/O) channels. These programs
actually proceeding intermittently singly,
according eligibility (readiness proceed) priority.
useful able represent them
proceeding continuously simultaneously, each
effective rate, which may fraction
which would enjoy absence other
programs. effective progress rate each
program sensitive many detailed characteristics
itself its co-residents simulation has
been best available method predicting it.
paper presents results progress developing
alternative simulation, simulation-tested iterative
computation these rates under certain
situations. algorithm sensitive most
factors control phenomenon, including
nonquantitative topological features programs' structures.
.B
CACM December, 1969
.A
Lasser, D. J.
.K
productivity, prediction, multiprogramming, simulation,
equipment evaluation, hardware, evaluation,
monitor, operating system, system software, supervisors,
performance, time sharing, time slicing
.C
2.43 2.44 4.32
.N
CA691207 JB February 15, 1978 2:47 PM
.X
1805 4 1805
1805 4 1805
1805 4 1805
1828 4 1805
1846 4 1805
1854 4 1805
1892 4 1805
1912 4 1805
2187 4 1805
2188 4 1805
2218 4 1805
2317 4 1805
1518 5 1805
1572 5 1805
1748 5 1805
1805 5 1805
1805 5 1805
1805 5 1805
3070 5 1805
1805 6 1805
2454 6 1805
2741 6 1805
2988 6 1805
.I 1806
.T
Downhill Method
.W
downhill method numerical method
solving complex equations f(z) = 0 which
only restriction function w = f(z) must
analytical. introduction method
given critical review relating literature
presented. Although theory method always
converges, shown fundamental dilemma exists
which may cause breakdown practical applications.
avoid difficulty improve rate
convergence toward root, some modifications
original method proposed program (FORTRAN)
based modified method given Algorithm
365. Some numerical examples included.
.B
CACM December, 1969
.A
Bach, H.
.K
downhill method, complex relaxation method, complex
iteration, complex equation, transcendental
complex equation, algebraic complex equation
.C
5.15
.N
CA691206 JB February 15, 1978 2:54 PM
.X
1806 4 1806
1806 5 1806
1806 5 1806
1806 5 1806
1803 5 1806
535 5 1806
1806 6 1806
.I 1807
.T
Optimization Expressions Fortran
.W
method optimizing computation
arithmetic indexing expressions Fortran
program presented. method based linear
analysis definition points variables
branching DO loop structure program.
objectives processing (1)
eliminate redundant calculations references
made common subexpression values, (2) remove
invariant calculations DO loops, (3) efficiently
compute subscripts containing DO iteration variables,
(4) provide efficient index register usage.
method presented requires least three-pass
compiler, second which scanned backward.
has been used development several FORTRAN
compilers have proved produce excellent object
code without significantly reducing compilation
speed.
.B
CACM December, 1969
.A
Busam, V. A.
England, D. E.
.K
FORTRAN, optimization, expressions, compilers,
compilation, subscripts, register allocation, DO
loops, common subexpressions, invariant calculations
.C
4.12
.N
CA691205 JB February 15, 1978 4:16 PM
.X
1625 4 1807
1781 4 1807
1807 4 1807
1807 4 1807
1807 4 1807
1807 4 1807
1934 4 1807
1945 4 1807
1947 4 1807
1947 4 1807
2034 4 1807
2175 4 1807
2290 4 1807
2579 4 1807
2923 4 1807
2945 4 1807
1223 5 1807
1248 5 1807
1551 5 1807
1807 5 1807
1807 5 1807
1807 5 1807
1947 5 1807
2579 5 1807
2923 5 1807
1535 6 1807
1807 6 1807
1807 6 1807
1947 6 1807
1947 6 1807
.I 1808
.T
Advanced Cryptographic Techniques Computers
.W
Cryptographic techniques which can used
maintain confidentiality information processed
computers dealt with. Special emphasis paid
unique characteristics computer files
make many cryptographic methods little use.
Relative security, costs, preferred methods
included paper.
.B
CACM December, 1969
.A
Van Tassel, D.
.K
cryptographic, cryptanalysis, ciphers secrecy systems,
security systems, confidential information
processing
.C
1.3 2.12 2.19 3.73 3.81 4.41
.N
CA691204 JB February 15, 1978 4:20 PM
.X
1808 5 1808
1808 5 1808
1808 5 1808
.I 1809
.T
Numerical Analysis Ph.D. Computer Science Program
.W
Numerical Analysis study methods
procedures used obtain "approximate solutions"
mathematical problems. Much emphasis scientific
calculation. difficulties education
such broad area center around question background
emphasis. Numerical Analysis program
Computer Science Department should emphasize
awareness problems computer implementation
experimental procedures. Nevertheless, there
need solid background applied mathematics.
.B
CACM December, 1969
.A
Parter, S. V.
.K
Ph.D. program, numerical analysis, course separation, education
.C
1.52
.N
CA691203 JB February 15, 1978 4:25 PM
.X
1809 5 1809
1809 5 1809
1809 5 1809
.I 1810
.T
Automatic "Folding" Programs Efficient Enough Displace Manual?
.W
operation "folding" program into
available memory discussed. Measurements
Brown et al. Nelson automatic folding
mechanism simple design, demand paging unit
built IBM Research Center Belady, Nelson,
O'Neil, others, permitting its quality
compared manual folding, discussed,
shown given some care use
unit performs satisfactorily under conditions tested,
even though operating across memory-to-storage
interface very large speed difference. disadvantages
prefolding, which required
folding manual, examined, number
important troubles which beset computing today
shown arise from, aggravated by,
source. concluded folding mechanism
probably become normal part most computing systems.
.B
CACM December, 1969
.A
Sayre, D.
.K
paging, automatic paging, demand paging, folding,
automatic folding, storage hierarchies, memory
hierarchies, replacement algorithms, performance, measurement
.C
4.0 4.19 4.39 6.20 6.34
.N
CA691202 JB February 15, 1978 4:33 PM
.X
1810 5 1810
1810 5 1810
1810 5 1810
2218 5 1810
2373 5 1810
1380 6 1810
1410 6 1810
1572 6 1810
1728 6 1810
1751 6 1810
1751 6 1810
1752 6 1810
1810 6 1810
1810 6 1810
1879 6 1810
1951 6 1810
2095 6 1810
2374 6 1810
.I 1811
.T
Case Study Programming Parallel-Processors
.W
affirmative partial answer provided
question whether possible program
parallel-processor computing systems efficiently decrease
execution time useful problems. Parallel-processor
systems multiprocessor systems which several
processors can simultaneously execute separate
tasks single job, thus cooperating decrease
solution time computational problem.
processors have independent instruction counters, meaning
each processor executes its own task program
relatively independently other processors. Communication
between cooperating processors
means data storage shared all processors.
program determination distribution
current electrical network written
parallel-processor computing system, execution
program simulated. data gathered
simulation runs demonstrate efficient solution
problem, typical large class important
problems. shown that, proper programming,
solution time N processors applied approaches
1/N times solution time single processor,
while improper programming can actually lead increase
solution time number processors.
Stability method solution also investigated.
.B
CACM December, 1969
.A
Rosenfeld, J. L.
.K
parallel-processor, parallelism, parallel programming,
multiprocessor, multiprogramming, tasking,
storage interference, electrical network, simulation,
relaxation, Jacobi, Gauss-Seidel, convergence
.C
3.24 4.9 5.14 5.17 6.21
.N
CA691201 JB February 15, 1978 4:45 PM
.X
1811 5 1811
1811 5 1811
1811 5 1811
.I 1812
.T
More Fortran Random Number Generators
.B
CACM November, 1969
.A
Grosenbaugh, L. R.
.K
random number generation, Monte Carlo, simulation
.C
5.5
.N
CA691118 JB February 15, 1978 11:57 AM
.X
1812 5 1812
1812 5 1812
1812 5 1812
.I 1813
.T
Generation Permutations Pseudo-Lexicographic
Order (Algorithm 308 [G6])
.B
CACM November, 1969
.A
Ord-Smith, R. J.
.K
permutations, lexicographic order, lexicographic
generation, permutation generation
.C
5.39
.N
CA691117 JB February 15, 1978 11:59 AM
.X
1813 4 1813
1370 5 1813
1813 5 1813
1813 5 1813
1813 5 1813
1978 5 1813
1307 6 1813
1589 6 1813
1813 6 1813
.I 1814
.T
Direct Search (Algorithm 178 [E4])
.B
CACM November, 1969
.A
Smith, L. B.
.K
function minimization, search, direct search
.C
5.19
.N
CA691117 JB February 15, 1978 12:00 PM
.X
1814 4 1814
1777 5 1814
1814 5 1814
1814 5 1814
1814 5 1814
.I 1815
.T
Direct Search (Algorithm 178 [E4])
.B
CACM November, 1969
.A
Tomlin, F. K.
Smith, L. B.
.K
function minimization, search direct search
.C
5.19
.N
CA691115 JB February 15, 1978 12:02 PM
.X
1815 4 1815
1715 5 1815
1815 5 1815
1815 5 1815
1815 5 1815
.I 1816
.T
Generalized Least Squares Fit Orthogonal
Polynomials (Algorithm 296 [E2])
.B
CACM November, 1969
.A
Watson, W. T.
.K
least squares, curve fitting, orthogonal polynomials,
three-term recurrence, polynomial regression,
approximation, Forsythe's method
.C
5.13 5.5
.N
CA691114 JB February 15, 1978 12:06 PM
.X
1816 4 1816
125 5 1816
1816 5 1816
1816 5 1816
1816 5 1816
.I 1817
.T
Computation Fourier Coefficients (Algorithm 255 [C6])
.B
CACM November, 1969
.A
Hall, G.
Ray, V. A.
.K
numerical integration, Fourier coefficients, Filon's method
.C
5.16
.N
CA691113 JB February 15, 1978 12:08 PM
.X
1817 5 1817
1817 5 1817
1817 5 1817
.I 1818
.T
Associated Legendre Functions First Kind
Real Imaginary Arguments (Algorithm 47
[S16])
.B
CACM November, 1969
.A
Cobb, S. M.
.K
Legendre function, associated Legendre
function, real imaginary arguments
.C
5.12
.N
CA691112 JB February 15, 1978 12:11 PM
.X
1818 4 1818
1818 5 1818
1818 5 1818
1818 5 1818
2222 5 1818
778 5 1818
970 6 1818
1800 6 1818
1818 6 1818
1834 6 1818
2042 6 1818
.I 1819
.T
Complex Error Function (Algorithm 363 [S15])
.B
CACM November, 1969
.A
Gautschi, W.
.K
error function complex argument, Voigt function,
Laplace continued fraction, Gauss-Hermite
quadrature, recursive computation
.C
5.12
.N
CA691111 JB February 15, 1978 12:13 PM
.X
1819 5 1819
1819 5 1819
1819 5 1819
.I 1820
.T
Generation Random Permutations (Algorithm 362 [G6])
.B
CACM November, 1969
.A
Robson, J. M.
.K
permutation, random permutation, transposition
.C
5.5
.N
CA691110 JB February 15, 1978 12:15 PM
.X
1820 4 1820
1511 5 1820
1820 5 1820
1820 5 1820
1820 5 1820
.I 1821
.T
Permanent Function Square Matrix II (Algorithm 361 [G6])
.B
CACM November, 1969
.A
Shriver, B.
Eberlein, P. J.
Dixon, R. D.
.K
matrix, permanent, determinant
.C
5.30
.N
CA691109 JB February 15, 197812:18 PM
.X
1821 5 1821
1821 5 1821
1821 5 1821
.I 1822
.T
Shortest-Path Forest Topological Ordering (Algorithm [H])
.B
CACM November, 1969
.A
Dial, R. B.
.K
shortest path, tree, network, directed graph
.C
5.32 5.42
.N
CA691108 JB February 15, 1978 12:21 PM
.X
1822 5 1822
1822 5 1822
1822 5 1822
.I 1823
.T
Factorial Analysis Variance (Algorithm [G1])
.B
CACM November, 1969
.A
Howell, J. R.
.K
factorial variance analysis, variance, statistical analysis
.C
5.5
.N
CA691107 JB February 15, 1978 12:22 PM
.X
1823 5 1823
1823 5 1823
1823 5 1823
.I 1824
.T
APAREL-A Parse-Request Language
.W
APAREL described: language extension
algorithmic language (PL/I) provides
pattern-matching capabilities normally found only
special purpose languages such SNOBOL4
TMG. capability provided through parse-requests
stated BNF-like format. These parse-requests
form their own programming language special sequencing
rules. Upon successfully completing parse-request,
associated piece PL/I code executed.
code has available use, normal PL/I strings
various pieces (at all levels) parse.
also has available normal PL/I variables,
information concerning which various alternatives
were successful. Convenient facilities
multiple input-output streams, initiation sequences
parse-requests subroutine, parse-time
semantic checks also included. APAREL has proven convenient
building powerful SYNTAX FUNCTION
macro system, algebraic language preprocessor debugging
system, on-line command parser, translator
Dataless Programming, general string manipulator.
.B
CACM November, 1969
.A
Balzer, R. M.
Farber, D. J.
.K
text processing, string processing, symbol manipulation,
PL/I, BNF, syntax, parser, translator,
pattern matching
.C
4.12 4.13 4.20 4.22 4.29
.N
CA691106 JB February 15, 1978 12:44 PM
.X
1046 4 1824
1105 4 1824
1139 4 1824
1140 4 1824
1234 4 1824
1263 4 1824
1265 4 1824
1496 4 1824
1541 4 1824
1565 4 1824
1665 4 1824
1693 4 1824
1768 4 1824
1781 4 1824
1781 4 1824
1781 4 1824
1787 4 1824
1824 4 1824
1824 4 1824
1824 4 1824
1824 4 1824
1825 4 1824
1836 4 1824
1861 4 1824
1861 4 1824
2015 4 1824
2110 4 1824
2126 4 1824
2126 4 1824
2127 4 1824
2187 4 1824
2252 4 1824
2317 4 1824
2545 4 1824
2546 4 1824
464 4 1824
2698 4 1824
2733 4 1824
584 4 1824
631 4 1824
653 4 1824
680 4 1824
763 4 1824
795 4 1824
799 4 1824
945 4 1824
1358 5 1824
1614 5 1824
1781 5 1824
1824 5 1824
1824 5 1824
1824 5 1824
404 5 1824
.I 1825
.T
Practical Method Constructing LR(k) Processors
.W
practical method constructing LR(k) processors
developed. These processors capable
recognizing parsing input during single
no-backup scan number steps equal
length input plus number steps its
derivation. technique presented here based
original method described Knuth, but decreases
both effort required construct processor
size processor produced. procedure
involves partitioning given grammar into
number smaller parts. If LR(k) processor can
constructed each part (using Knuth's algorithm)
if certain conditions relating these individual
processors satisfied, then LR(k) processor
entire grammar can constructed them.
Using procedure, LR(1) parser ALGOL
has been obtained.
.B
CACM November, 1969
.A
Korenjak, A. J.
.K
LR(k) grammar, syntactic analysis, parser, deterministic
language, syntax-directed compiler, language
processor, context-free language ALGOL
.C
4.12 5.2 5.23
.N
CA691105 JB February 15, 1978 12:52 PM
.X
1086 4 1825
1132 4 1825
1234 4 1825
1263 4 1825
1265 4 1825
1270 4 1825
1323 4 1825
1358 4 1825
1379 4 1825
1380 4 1825
1453 4 1825
1464 4 1825
1484 4 1825
1491 4 1825
1498 4 1825
1613 4 1825
1614 4 1825
1665 4 1825
1768 4 1825
1781 4 1825
1787 4 1825
1824 4 1825
1825 4 1825
1825 4 1825
1836 4 1825
1860 4 1825
1861 4 1825
2015 4 1825
2083 4 1825
2110 4 1825
2127 4 1825
2178 4 1825
2179 4 1825
2187 4 1825
2252 4 1825
2317 4 1825
2325 4 1825
2341 4 1825
2545 4 1825
2546 4 1825
2645 4 1825
2652 4 1825
2684 4 1825
2698 4 1825
2733 4 1825
2842 4 1825
2929 4 1825
2934 4 1825
3069 4 1825
669 4 1825
679 4 1825
691 4 1825
761 4 1825
949 4 1825
989 4 1825
1781 5 1825
1825 5 1825
1825 5 1825
1825 5 1825
2061 5 1825
2179 5 1825
3184 5 1825
1140 6 1825
1141 6 1825
1477 6 1825
1477 6 1825
1491 6 1825
1491 6 1825
1825 6 1825
1825 6 1825
2015 6 1825
2110 6 1825
3184 6 1825
773 6 1825
.I 1826
.T
LISP Garbage-Collector Virtual-Memory Computer Systems
.W
paper garbage-collection algorithm
list-processing systems which operate within
very large virtual memories described. object
algorithm more compaction active
storage than discovery free storage. Because free
storage never really exhausted, decision
garbage collect not easily made; therefore,
various criteria decision discussed.
.B
CACM November, 1969
.A
Fenichel, R. R.
Yochelson, J. C.
.K
garbage-collector, virtual memory, list-processing, storage-allocation
.C
4.19 4.49
.N
CA691104 JB February 15, 1978 12:57 PM
.X
1024 4 1826
1051 4 1826
1102 4 1826
1132 4 1826
1390 4 1826
1486 4 1826
1549 4 1826
1706 4 1826
1708 4 1826
1781 4 1826
1826 4 1826
1826 4 1826
1860 4 1826
1878 4 1826
378 4 1826
2060 4 1826
2155 4 1826
2156 4 1826
2168 4 1826
2168 4 1826
2249 4 1826
2314 4 1826
2719 4 1826
2719 4 1826
2723 4 1826
2736 4 1826
2833 4 1826
2838 4 1826
2842 4 1826
2855 4 1826
2879 4 1826
3077 4 1826
3080 4 1826
3106 4 1826
627 4 1826
106 4 1826
210 5 1826
1626 5 1826
1826 5 1826
1826 5 1826
1826 5 1826
1972 5 1826
2156 5 1826
2168 5 1826
2438 5 1826
2723 5 1826
2736 5 1826
2833 5 1826
2855 5 1826
3074 5 1826
3112 5 1826
106 6 1826
1380 6 1826
1549 6 1826
1549 6 1826
1626 6 1826
1626 6 1826
1626 6 1826
1626 6 1826
1749 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
1826 6 1826
210 6 1826
210 6 1826
210 6 1826
1853 6 1826
1853 6 1826
1853 6 1826
1878 6 1826
1972 6 1826
1972 6 1826
1972 6 1826
1972 6 1826
1972 6 1826
2314 6 1826
2438 6 1826
2513 6 1826
2651 6 1826
2723 6 1826
2723 6 1826
2736 6 1826
2736 6 1826
2766 6 1826
2833 6 1826
2833 6 1826
2838 6 1826
2998 6 1826
627 6 1826
731 6 1826
731 6 1826
731 6 1826
.I 1827
.T
Performance Monitoring Time-Sharing System
.W
software measurement facility which part
general purpose time-sharing system described.
Date Collection Facility (DCF) has been implemented
Michigan Terminal System (MTS)
System/360 model 67. exists purpose monitoring
operating system user program behavior
performance. overall structure MTS outlined
order explain implementation
DCF. Events system identified recorded
within supervisor, dumped
magnetic tape auxiliary program off-line processing.
Events user programs which unrelated
system actions recorded supervisor call.
time occurrence each event accurately
recorded, data items further identified job
type. overhead associated data collection
its interference normal jobs carefully analyzed,
both shown minimal. Several
examples given information obtained
facility applications which has been
useful. Some general guidelines offered
construction future monitoring programs.
.B
CACM November, 1969
.A
Pinkerton, T. B.
.K
performance monitoring, performance measurement,
program behavior, performance data, multiprogramming
performance, software measurement, time-sharing performance,
system evaluation, software monitor, software
instrumentation
.C
4.31 4.32 4.39 4.42 4.43
.N
CA691103 JB February 15, 1978 1:07 PM
.X
1827 5 1827
1827 5 1827
1827 5 1827
2667 5 1827
2668 5 1827
1604 6 1827
1604 6 1827
1728 6 1827
1728 6 1827
1761 6 1827
1827 6 1827
1827 6 1827
2677 6 1827
.I 1828
.T
Synchronization Parallel-Accessed Data Base
.W
following problem considered: Given
data base which can manipulated simultaneously
more than one process, rules synchronization
which maximize amount parallel
activity allowed. assumed data base
can represented graph. example such
data base hierarchy directories on-line
file system. Methods synchronization
processes examined; their validity
discussed their performance compared.
.B
CACM November, 1969
.A
Shoshani, A.
Bernstein, A. J.
.K
parallel accessing, parallel search, file search,
data base, synchronization, locking, deadlock
.C
3.73 3.74 4.32
.N
CA691102 JB February 15, 1978 1:13 PM
.X
1805 4 1828
1828 4 1828
1828 4 1828
1854 4 1828
1854 4 1828
1877 4 1828
1960 4 1828
2150 4 1828
2187 4 1828
2317 4 1828
2319 4 1828
2377 4 1828
2342 4 1828
2376 4 1828
2379 4 1828
2424 4 1828
2482 4 1828
2618 4 1828
2632 4 1828
2704 4 1828
2723 4 1828
2738 4 1828
2740 4 1828
2741 4 1828
2867 4 1828
3184 4 1828
1748 5 1828
1749 5 1828
1828 5 1828
1828 5 1828
1828 5 1828
.I 1829
.T
Interactive Graphical Display Monitor
Batch-Processing Environment Remote Entry
.W
graphic monitor program described.
developed Carnegie-Mellon University
CDC G21 computer, which general purpose, batch-processing
system remote entry. existing
G21 system graphics hardware described.
graphic monitor resident auxiliary monitor
which provides comprehensive managerial capability
over graphical system response commands
human user. also respond commands
user program through similar interface,
routine calls take place manual actions. Thus
human program can interact symmetrical
equal basis through medium graphic monitor.
choice made designing graphic
monitor, given constraints existing hardware
computer system, discussed. structure
monitor program human program interfaces
described. There also transient
swapping version small resident part,
provision swapped used submonitors.
.B
CACM November, 1969
.A
Bond, A. H.
Rightnour, J.
.K
graphic monitor, man/machine interaction, graphic
interface, graphic batch environment, design
graphical system
.C
4.30 4.31 4.39 4.41
.N
CA691101 JB February 15, 1978 1:22 PM
.X
1829 5 1829
1829 5 1829
1829 5 1829
2357 5 1829
1523 6 1829
1829 6 1829
2035 6 1829
.I 1830
.T
Retrieval Times Packed Direct Access Inverted File
.B
CACM October, 1969
.A
Bayes, A. J.
.K
information retrieval, direct access memory, data base, inverted list
.C
3.70 4.41
.N
CA691016 JB February 15, 1978 1:27 PM
.X
1830 5 1830
1830 5 1830
1830 5 1830
.I 1831
.T
Comment Optimal Tree Structures
.B
CACM October, 1969
.A
Stanfel, L. E.
.K
information retrieval, file searching, tree structures, double chaining
.C
3.70 3.73 3.74
.N
CA691015 JB February 15, 1978 1:31 PM
.X
1831 5 1831
1831 5 1831
1831 5 1831
2257 5 1831
2360 5 1831
849 6 1831
849 6 1831
1831 6 1831
1831 6 1831
1936 6 1831
1936 6 1831
2360 6 1831
.I 1832
.T
Minimax Logarithmic Error
.B
CACM October, 1969
.A
Dunham, C. B.
.K
logarithmic error, transformed rational approximation, square root
.C
5.10
.N
CA691014 JB February 15, 1978 1:38 PM
.X
1832 4 1832
1999 4 1832
2159 4 1832
1832 5 1832
1832 5 1832
1832 5 1832
1932 5 1832
.I 1833
.T
Ambiguity Description ALGOL 60
.B
CACM October, 1969
.A
Herriot, J. G.
.K
Ising problem, zero-one sequences
.C
5.39
.N
CA691013 JB February 15, 1978 1:40 PM
.X
1833 5 1833
1833 5 1833
1833 5 1833
2066 5 1833
1833 6 1833
1842 6 1833
.I 1834
.T
Axiomatic Basis Computer Programming
.W
paper attempt made explore
logical foundations computer programming
use techniques which were first applied
study geometry have later been extended
other branches mathematics. involves elucidation
sets axioms rules inference
which can used proofs properties computer
programs. Examples given such axioms
rules, formal proof simple theorem
displayed. Finally, argued important
advantages, both theoretical practical, may
follow pursuance these topics.
.B
CACM October, 1969
.A
Hoare, C. A. R.
.K
axiomatic method, theory programming, proofs
programs, formal language definition, programming
language design, machine-independent programming, program documentation
.C
4.0 4.21 4.22 5.20 5.21 5.23 5.24
.N
CA691012 JB February 15, 1978 1:48 PM
.X
1834 5 1834
1834 5 1834
1834 5 1834
2021 5 1834
2222 5 1834
2227 5 1834
2315 5 1834
2326 5 1834
2470 5 1834
2732 5 1834
2865 5 1834
2896 5 1834
2943 5 1834
3014 5 1834
3068 5 1834
3077 5 1834
3143 5 1834
196 6 1834
970 6 1834
1303 6 1834
1303 6 1834
1323 6 1834
1348 6 1834
1469 6 1834
1800 6 1834
1818 6 1834
210 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1834 6 1834
1987 6 1834
307 6 1834
2042 6 1834
2060 6 1834
2192 6 1834
2227 6 1834
2264 6 1834
2457 6 1834
2597 6 1834
2723 6 1834
2732 6 1834
2869 6 1834
2981 6 1834
3186 6 1834
728 6 1834
.I 1835
.T
IITRAN Programming Language
.W
IITRAN language, developed used
students, its important important features
described. IITRAN procedure-oriented language
one-level block structure variety
data types. Several novel powerful features
included. discussion design principles
followed student language given.
.B
CACM October, 1969
.A
Dewar, R. B. K.
Hochsprung, R. R.
.K
languages programming languages, student programming
systems, language design, high school programs,
college courses
.C
1.51 1.52 4.12 4.22
.N
CA691011 JB February 15, 1978 1:54 PM
.X
1835 5 1835
1835 5 1835
1835 5 1835
2971 5 1835
1835 6 1835
1974 6 1835
2534 6 1835
.I 1836
.T
New Method Determining Linear Precedence
Functions Precedence Grammars
.W
precedence relations precedence grammar can
precisely described two-dimensional
precedence matrix. Often information matrix
can represented more concisely pair
vectors, called linear precedence functions. new algorithm
presented obtaining linear precedence
functions given precedence matrix; algorithm
shown possess several computational
advantages.
.B
CACM October, 1969
.A
Bell, J. R.
.K
Boolean matrices, syntax, precedence grammar context-free
parsing, transition matrix, precedence
functions
.C
4.12
.N
CA691010 JB February 15, 1978 3:13 PM
.X
1379 4 1836
1542 4 1836
1665 4 1836
1683 4 1836
1693 4 1836
1693 4 1836
1768 4 1836
1781 4 1836
1781 4 1836
1787 4 1836
1787 4 1836
1824 4 1836
1825 4 1836
1836 4 1836
1836 4 1836
1836 4 1836
1836 4 1836
1836 4 1836
1861 4 1836
1945 4 1836
1945 4 1836
2015 4 1836
2015 4 1836
2060 4 1836
2060 4 1836
2061 4 1836
2061 4 1836
2082 4 1836
2091 4 1836
2091 4 1836
2110 4 1836
2127 4 1836
2152 4 1836
2179 4 1836
2179 4 1836
2187 4 1836
2317 4 1836
2340 4 1836
2340 4 1836
2356 4 1836
2545 4 1836
2546 4 1836
2546 4 1836
2603 4 1836
2698 4 1836
2698 4 1836
2698 4 1836
2708 4 1836
2708 4 1836
2733 4 1836
2824 4 1836
2982 4 1836
2986 4 1836
3045 4 1836
3045 4 1836
3093 4 1836
1191 5 1836
1477 5 1836
1491 5 1836
1781 5 1836
1836 5 1836
1836 5 1836
1836 5 1836
2340 5 1836
2982 5 1836
2986 5 1836
577 5 1836
1191 6 1836
1491 6 1836
1491 6 1836
1491 6 1836
1683 6 1836
1683 6 1836
1836 6 1836
1836 6 1836
1836 6 1836
2179 6 1836
2340 6 1836
2340 6 1836
.I 1837
.T
Algol Convolution Procedure Based
Fast Fourier Transform (Algorithm 345 [C6])
.B
CACM October, 1969
.A
Singleton, R. C.
.K
fast Fourier transform, complex Fourier transform,
multivariate Fourier transform, Fourier series,
harmonic analysis, spectral analysis, orthogonal polynomials,
orthogonal transformation, convolution,
auto covariance, autocorrelation, cross-correlation,
digital filtering, permutation
.C
3.15 3.83 5.12 5.14
.N
CA691009 JB February 15, 1978 3:17 PM
.X
1837 5 1837
1837 5 1837
1837 5 1837
.I 1838
.T
Normal Curve Integral (Algorithm 304 [S15])
.B
CACM October, 1969
.A
Adams, A. G.
.K
normal curve integral, probability, special functions
.C
5.5 5.12
.N
CA691008 JB February 15, 1978 3:19 PM
.X
1838 4 1838
1760 5 1838
1838 5 1838
1838 5 1838
1838 5 1838
.I 1839
.T
Singular Value Decomposition Complex
Matrix (Algorithm 358 [F1, 4,5])
.B
CACM October, 1969
.A
Businger, P. A.
Goulub, G. H.
.K
singular values, matrix decomposition,
least squares solution, pseudoinverse
.C
5.14
.N
CA691007 JB February 15, 1978 3:22 PM
.X
1839 5 1839
1839 5 1839
1839 5 1839
.I 1840
.T
Efficient Prime Number Generator (Algorithm 357 [A1])
.B
CACM October, 1969
.A
Singleton, R. C.
.K
prime numbers, factoring, number theory
.C
3.15 5.30
.N
CA691006 JB February 15, 1978 3:23 PM
.X
1840 5 1840
1840 5 1840
1840 5 1840
2927 5 1840
1537 6 1840
1539 6 1840
1538 6 1840
1840 6 1840
1841 6 1840
.I 1841
.T
Prime Number Generator Using
Treesort Principle (Algorithm 356 [A1])
.B
CACM October, 1969
.A
Singleton, R. C.
.K
prime numbers, number theory, sorting
.C
3.15 5.30 5.31
.N
CA691005 JB February 15, 1978 3:25 PM
.X
1841 4 1841
1841 4 1841
1841 4 1841
1967 4 1841
2120 4 1841
2120 4 1841
2927 4 1841
2927 4 1841
1539 5 1841
1841 5 1841
1841 5 1841
1841 5 1841
1841 5 1841
377 5 1841
2927 5 1841
1537 6 1841
1539 6 1841
1539 6 1841
1538 6 1841
1840 6 1841
1841 6 1841
1841 6 1841
377 6 1841
.I 1842
.T
Algorithm Generating Ising Configurations (Algorithm 355 [Z])
.B
CACM October, 1969
.A
Simoes, J. M. S.
.K
Ising problem, zero-one sequences
.C
5.39
.N
CA691004 JB February 15, 1978 3:27 PM
.X
1842 5 1842
1842 5 1842
1842 5 1842
2066 5 1842
1833 6 1842
1842 6 1842
.I 1843
.T
Choice Base
.W
digital computer considered, whose memory
words composed N r-state devices plus
two sign bits (two state devices). choice base
B internal representation floating-point
numbers such computer discussed.
shown certain sense B= r best.
.B
CACM October, 1969
.A
Brown, W. S.
Richman, P. L.
.K
floating-point, accuracy, base choice, number representations
.C
5.11 6.32
.N
CA691003 JB February 15, 1978 3:33 PM
.X
1783 4 1843
1843 4 1843
1843 4 1843
1634 5 1843
1783 5 1843
1843 5 1843
1843 5 1843
1843 5 1843
.I 1844
.T
Modular Computer Sharing System
.W
alternative approach design organization
general purpose interactive multiterminal
computing system presented. system organization described
conceptually simple arrangement
bank interchangeable computers, each which
memory/processor pair, assigned
process terminal jobs they arrive. One computers
serves master control computer
supervises collection distribution messages
remote terminals.
simplest form there disk drive each connected
terminal. crosspoint switching network allows
any such disk drive connected any computer.
Thus, while each active terminal user "occupies"
dedicated disk drive, he may share computer
many other terminal users simple manner.
ratio users computers dependent both
size power machines used
computation requirements particular mix users.
system organization inherently simpler
therefore more reliable approach time-sharing computers
has potential highly available
system relatively low cost. Economic configurations
possible range systems sizes
span least one order magnitude. Finally, problem
programs developed remote terminal users can
run dedicated batch system if compatible computers used.
.B
CACM October, 1969
.A
Baskin, H. B.
Horowitz, E. B.
Tennison, R. D.
Rittenhouse, L. E.
.K
multiple terminal systems, terminal oriented systems,
multiple processor systems, high availability,
conversational systems, general purpose time-sharing systems,
real-time response system, modular constructed
systems, modular computer-sharing systems, graphics,
file switch, intercomputer communications, control
computer, problem computer, roll-in, roll-out
.C
6.21
.N
CA691002 JB February 15, 1978 3:52 PM
.X
1844 5 1844
1844 5 1844
1844 5 1844
.I 1845
.T
Loader Standardization Overlay Programs
.W
overlay capability described four
third generation computer systems: CDC-6000,
GE-635, IBM-360, UNIVAC-1108. critique
first three systems based actual experience
large overlaid trajectory simulation program;
short history description program
presented. standardization minimum capabilities
loaders recommended so programs
which must operate under more than one computer system
may easily converted maintained. proposal
overlay software incorporates memory occupation
specification concept instead conditional
tree structure delineated. concept provides
more efficient cost-effective utilization
memory well increased flexibility program structure.
.B
CACM October, 1969
.A
Lanzano, B. C.
.K
loader, overlay, partition, region, segmentation,
linkage, linkage editor, standardization, memory
utilization, memory occupation, tree structure,
CDC-6000, GE-635, IBM-360, UNIVAC-1108
.C
4.10 4.12 4.19 4.40
.N
CA691001 JB February 15, 1978 4:09 PM
.X
1845 4 1845
1900 4 1845
2083 4 1845
2154 4 1845
2270 4 1845
2693 4 1845
988 5 1845
1845 5 1845
1845 5 1845
1845 5 1845
2343 5 1845
1173 6 1845
1774 6 1845
1845 6 1845
.I 1846
.T
Simulating Networks Parallel Processes
Which Simultaneous Events May Occur
.W
Some problems simulating discrete
event systems, particularly computer systems,
conventional digital computer dealt with.
systems assumed described network
interconnected sequential processes. Briefly reviewed
common techniques used handle such
simulations simultaneous events do not occur, can
ignored, can handled simple priority
rules. Following this, problem dealing simultaneous
events separate processes introduced.
abstraction problem developed which admits
solution majority commonly encountered
problems. technique either find method
simulating parallel events report none
can found. some latter cases shown
possible find solution extending
information available solution technique, but
many cases technique becomes computationally
unfeasible additional information provided.
.B
CACM September, 1969
.A
Parnas, D. L.
.K
simulation, parallel processes, simultaneous events,
picture processing, computer system simulation
.C
3.19 3.24 4.24 5.9 6.9
.N
CA690910 JB February 15, 1978 4:21 PM
.X
1541 4 1846
1805 4 1846
1846 4 1846
1846 4 1846
1846 4 1846
1846 4 1846
1846 4 1846
1892 4 1846
2060 4 1846
2188 4 1846
2218 4 1846
2218 4 1846
2317 4 1846
2630 4 1846
2650 4 1846
3112 4 1846
1380 5 1846
1424 5 1846
1484 5 1846
1572 5 1846
1846 5 1846
1846 5 1846
1846 5 1846
576 5 1846
3064 5 1846
1846 6 1846
1939 6 1846
2742 6 1846
2767 6 1846
2936 6 1846
.I 1847
.T
Algorithm Finding Fundamental Set Cycles Graph
.W
fast method presented finding fundamental
set cycles undirected finite
graph. spanning tree grown vertices examined
turn, unexamined vertices being stored
pushdown list await examination. One stage
process take top element v
pushdown list examine it, i.e. inspect all those
edges (v,z) graph which z has not yet
been examined. If z already tree, fundamental
cycle added; if not, edge (v,z)
placed tree. There exactly one such stage
each n vertices graph. large
n, store required creases n^2 time
n^g g depends type graph involved.
g bounded below 2 above 3, shown
both bounds attained. terms
storage our algorithm similar Gotlieb
Corneil superior Welch; terms
speed similar Welch superior
Gotlieb Corneil. Testsshow our
algorithm remarkably efficient (g=2) random graphs.
.B
CACM September, 1969
.A
Paton, K.
.K
fundamental cycle set, graph, algorithm, cycle, spanning tree
.C
5.32
.N
CA690909 JB February 15, 1978 4:29 PM
.X
1847 4 1847
1961 4 1847
2052 4 1847
1504 5 1847
1847 5 1847
1847 5 1847
1847 5 1847
1961 5 1847
2177 5 1847
2763 5 1847
1369 6 1847
1504 6 1847
1847 6 1847
1847 6 1847
1847 6 1847
.I 1848
.T
Damped Taylor's Series Method Minimizing
Sum Squares Solving Systems
Nonlinear Equations (Algorithm 315 [E4, C5])
.B
CACM September, 1969
.A
Silverman, G.
.K
solution equations, least squares approximation, Newton's method
.C
5.13 5.14 5.15
.N
CA690907 JB February 15, 1978 4:32 PM
.X
1848 5 1848
1848 5 1848
1848 5 1848
.I 1849
.T
Function Minimization (Algorithm 251 [E4])
.B
CACM September, 1969
.A
Hamilton, P. A.
Boothroyd, J.
.K
function minimization
.C
5.19
.N
CA690906 JB February 15, 1978 4:38 PM
.X
1849 5 1849
1849 5 1849
1849 5 1849
2190 5 1849
1372 6 1849
1849 6 1849
.I 1850
.T
Generation Permutations Lexicographic Order (Algorithm 323 [G6])
.B
CACM September, 1969
.A
Leitch, I. M.
.K
permutations, direct lexicographic order, reverse
lexicographic order, lexicographic generation
.C
5.39
.N
CA690905 JB February 15, 1978 4:48 PM
.X
1850 5 1850
1850 5 1850
1850 5 1850
.I 1851
.T
Generator Spanning Trees (Algorithms 354 [H])
.B
CACM September, 1969
.A
McIlroy, M. D.
.K
spanning trees, trees, graphs
.C
5.32
.N
CA690904 JB February 15, 1978 4:50 PM
.X
1851 5 1851
1851 5 1851
1851 5 1851
.I 1852
.T
Base Mobile Programming System
.W
algorithm macro processor which has
been used base implementation,
bootstrapping, processors programming languages
described. algorithm can easily implemented
contemporary computing machines. Experience
programming languages whose implementation based
algorithm indicates such language can
transferred new machine less than one
man-week without using old machine.
.B
CACM September, 1969
.A
Orgass, R. J.
Waite, W. M.
.K
bootstrapping, macro processing, machine independence,
programming languages, implementation techniques
.C
4.12 4.22
.N
CA690903 JB February 15, 1978 4:54 PM
.X
1530 4 1852
1781 4 1852
1852 4 1852
2034 4 1852
1565 5 1852
1852 5 1852
1852 5 1852
1852 5 1852
2034 5 1852
984 6 1852
1231 6 1852
1565 6 1852
1852 6 1852
1926 6 1852
1947 6 1852
.I 1853
.T
Compact List Representation: Definition,
Garbage Collection, System Implementation
.W
Compact lists stored sequentially memory,
rather than chained pointers. Since
not always convenient, Swym system permits
list chained, compact, any combination
two. description given list representation
operators implemented (most
similar those LISP 1.5). system garbage collector
attempts make all lists compact; relocates
rearranges all list storage using temporary storage.
unique list-compacting garbage collection
algorithm presented detail. Several classes
macros used implement system described.
Finally, consideration given those design factors
essential success plex processing
system implementation.
.B
CACM September, 1969
.A
Hansen, W. J.
.K
data structure, data representation, list structure,
list representation, list, compact list, garbage
collection, relocation, storage reclamation, macro,
primitive list operations, plex processing, plex,
pointer, list processing system, LISP, free storage
.C
3.49 4.20 4.22 4.49 4.9
.N
CA690902 JB February 15, 1978 5:01 PM
.X
1853 4 1853
2003 4 1853
1710 5 1853
1853 5 1853
1853 5 1853
1853 5 1853
1972 5 1853
2249 5 1853
2736 5 1853
3074 5 1853
1626 6 1853
1626 6 1853
1708 6 1853
1826 6 1853
1826 6 1853
1826 6 1853
1853 6 1853
1853 6 1853
1853 6 1853
1853 6 1853
1972 6 1853
1972 6 1853
2723 6 1853
.I 1854
.T
Multiprogramming, Machine Coding, Computer Organization
.W
author feels interrupt feature
which available most modern computers
potent source programming pitfalls errors,
therefore may heavily contribute
unreliability programs making use it. programming
scheme presented which avoids concept
interrupt permits specification concurrent
(or pseudoconcurrent) activities supposedly
more perspicuous manner. intended serve
basis construction operating systems,
which prime examples programs concurrent
activities. scheme includes set basic
instructions generation, termination, synchronization
parallel processes. set routines
representing these instructions thereby simulating
hypothetical machine organization has been implemented
test IBM System/360. Two programs using these
instructions, written PL360, presented.
.B
CACM September, 1969
.A
Wirth, N.
.K
multiprogramming, parallelism, interrupt, input-output,
computer organization, file handling, PL360
.C
4.21 4.22 4.32 4.41 6.21
.N
CA690901 JB February 15, 1978 5:14 PM
.X
1380 4 1854
1458 4 1854
1523 4 1854
1552 4 1854
1603 4 1854
1693 4 1854
1698 4 1854
1747 4 1854
1748 4 1854
1781 4 1854
1805 4 1854
1828 4 1854
1828 4 1854
1854 4 1854
1854 4 1854
1854 4 1854
1854 4 1854
1860 4 1854
1877 4 1854
1877 4 1854
1960 4 1854
1960 4 1854
2060 4 1854
2150 4 1854
2187 4 1854
2317 4 1854
2319 4 1854
2377 4 1854
2377 4 1854
2378 4 1854
2342 4 1854
2376 4 1854
2379 4 1854
2424 4 1854
2482 4 1854
2497 4 1854
2558 4 1854
2618 4 1854
2625 4 1854
2632 4 1854
2632 4 1854
2704 4 1854
2723 4 1854
2738 4 1854
2740 4 1854
2741 4 1854
2840 4 1854
2867 4 1854
2941 4 1854
557 4 1854
3105 4 1854
3144 4 1854
3184 4 1854
1421 5 1854
1471 5 1854
1748 5 1854
1749 5 1854
1854 5 1854
1854 5 1854
1854 5 1854
1960 5 1854
1471 6 1854
1749 6 1854
1854 6 1854
.I 1855
.T
Program Syntactic Analysis English Sentences
.W
program described which produces syntactic
analyses English sentences respect
transformational grammar. main features
analyzer uses only limited dictionary
English words pursues all analysis paths
simultaneously while processing sentence
left right. form representation used
dictionary grammar indicated
outline account given analysis procedure.
Techniques keeping size analysis
record within reasonable limits avoiding need
dynamic application certain transformational
rules described. number examples output
produced program given. output
includes timing information.
.B
CACM August, 1969
.A
Dewar, H.
Bratley, P.
.K
syntactic analysis, language processing, language
analysis, parsing, analysis procedure, recognition
procedure, English sentences, linguistics, psycholinguistics,
transformational grammar, limited dictionary,
predictive analysis
.C
3.42 3.36
.N
CA690808 JB February 15, 1978 5:24 PM
.X
1855 5 1855
1855 5 1855
1855 5 1855
.I 1856
.T
Teachable Language Comprehender:
Simulation Program Theory Language
.W
Teachable Language Comprehender (TLC)
program designed capable being taught
"comprehend" English text. text which program
has not seen before input it, comprehends
text correctly relating each (explicit implicit)
assertion new text large memory.
memory "semantic network" representing factual
assertions world. program also
creates copies parts its memory which have
been found relate new text, adapting
combining these copies represent meaning
new text. means, meaning all text
program successfully comprehends encoded into
same format memory.
form can added into memory. Both factual
assertions memory capabilities
correctly relating text memory's prior content
taught program they needed.
TLC presently contains relatively small number
examples such assertions capabilities, but
within system, notations expressing either these
provided. Thus program now corresponds
general process comprehending language,
provides methodology adding additional
information process requires actually comprehend
text any particular kind. memory structure
comprehension process TLC allow new factual assertions
capabilities relating text such
stored assertions generalize automatically.
is, once such assertion capability put
into system, becomes available help comprehend
great many other sentences future.
Thus addition single factual assertion
linguistic capability often provide large
increment TLC's effective knowledge world
its overall ability comprehend text.
program's strategy presented general theory language comprehension.
.B
CACM August,1969
.A
Quillian, M. R.
.K
natural language processing, natural language comprehension,
teachable computer program, psychological
simulation, human memory simulation, computer
linguistics, linguistic performance theory
.C
3.36 3.42 3.62 3.65 3.74
.N
CA690807 JB February 15, 1978 5:46 PM
.X
1155 4 1856
1350 4 1856
1456 4 1856
1468 4 1856
1515 4 1856
1659 4 1856
1699 4 1856
1856 4 1856
1856 4 1856
1856 4 1856
2050 4 1856
2127 4 1856
1225 5 1856
1324 5 1856
1553 5 1856
1856 5 1856
1856 5 1856
1856 5 1856
2127 5 1856
2309 5 1856
2310 5 1856
2396 5 1856
1155 6 1856
1324 6 1856
1487 6 1856
1487 6 1856
1527 6 1856
1781 6 1856
1856 6 1856
1856 6 1856
1856 6 1856
1856 6 1856
2092 6 1856
2127 6 1856
2398 6 1856
.I 1857
.T
Filon Quadrature (Algorithm [D1])
.B
CACM August, 1969
.A
Chase, S. M.
Fosdick, L. D.
.K
quadrature, Filon quadrature, integration, Filon
integration, Fourier coefficients, Fourier series
.C
5.16
.N
CA690806 JB February 15, 1978 5:52 PM
.X
1857 4 1857
2393 4 1857
1858 5 1857
1857 5 1857
1857 5 1857
1857 5 1857
1268 6 1857
1857 6 1857
.I 1858
.T
Algorithm Filon Quadrature
.W
algorithm Filon quadrature described.
Considerable attention has been devoted
analysis round-off truncation errors.
algorithm includes automatic error control
feature.
.B
CACM August, 1969
.A
Chase, S. M.
Fosdick, L. D.
.K
quadrature, Filon quadrature, integration, Filon
integration, Fourier coefficients, Fourier series
.C
5.16
.N
CA690805 JB February 15, 1978 5:55 PM
.X
1858 4 1858
1858 4 1858
1268 5 1858
1858 5 1858
1858 5 1858
1858 5 1858
1857 5 1858
2393 5 1858
1858 6 1858
1858 6 1858
2071 6 1858
.I 1859
.T
Error Bounds Periodic Quintic Splines
.W
Explicit error bounds periodic quintic spline
interpolation developed. first (third)
derivative periodic spline shown sixth
(fourth) order approximation mesh points
first (third) derivative function being interpolated.
.B
CACM August, 1969
.A
Hall, C. A.
.K
spline, interpolation, error bounds
.C
5.1 5.13
.N
CA690804 JB February 15, 1978 5:58 PM
.X
1859 5 1859
1859 5 1859
1859 5 1859
.I 1860
.T
Algol-Based Associative Language
.W
high level programming language large,
complex associative structures has been designed
implemented. underlying data structure has
been implemented using hash-coding technique.
discussion includes comparison other work
examples applications language.
.B
CACM August, 1969
.A
Feldman, J. A.
.K
ALGOL, associative, programming language, data structure
.C
4.22
.N
CA690803 JB February 15, 1978 6:02 PM
.X
1051 4 1860
1086 4 1860
1132 4 1860
1234 4 1860
1263 4 1860
1265 4 1860
1270 4 1860
1323 4 1860
1358 4 1860
1379 4 1860
1380 4 1860
1380 4 1860
1396 4 1860
1453 4 1860
1464 4 1860
1484 4 1860
1491 4 1860
1498 4 1860
1503 4 1860
1552 4 1860
1552 4 1860
1613 4 1860
1614 4 1860
1626 4 1860
1665 4 1860
1676 4 1860
1682 4 1860
1693 4 1860
1708 4 1860
1708 4 1860
1728 4 1860
1767 4 1860
1781 4 1860
1781 4 1860
1781 4 1860
1781 4 1860
1781 4 1860
1781 4 1860
1787 4 1860
1825 4 1860
1826 4 1860
1854 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1860 4 1860
1945 4 1860
1957 4 1860
1973 4 1860
1973 4 1860
1988 4 1860
1992 4 1860
2018 4 1860
2018 4 1860
2032 4 1860
2033 4 1860
2033 4 1860
2060 4 1860
2083 4 1860
2091 4 1860
2107 4 1860
2107 4 1860
2109 4 1860
2109 4 1860
2155 4 1860
2155 4 1860
2156 4 1860
2162 4 1860
2168 4 1860
2178 4 1860
2179 4 1860
2203 4 1860
2203 4 1860
2249 4 1860
2251 4 1860
2251 4 1860
2252 4 1860
2252 4 1860
2299 4 1860
2314 4 1860
2325 4 1860
2341 4 1860
2359 4 1860
2524 4 1860
2543 4 1860
2543 4 1860
2546 4 1860
2552 4 1860
2559 4 1860
2573 4 1860
2645 4 1860
2652 4 1860
2684 4 1860
2719 4 1860
2736 4 1860
2770 4 1860
2833 4 1860
2842 4 1860
2929 4 1860
2934 4 1860
2991 4 1860
557 4 1860
3053 4 1860
3069 4 1860
669 4 1860
679 4 1860
691 4 1860
761 4 1860
949 4 1860
989 4 1860
1389 5 1860
1366 5 1860
1421 5 1860
1496 5 1860
1626 5 1860
1641 5 1860
1785 5 1860
1786 5 1860
1860 5 1860
1860 5 1860
1860 5 1860
1957 5 1860
378 5 1860
2151 5 1860
3103 5 1860
3148 5 1860
3184 5 1860
1389 6 1860
1653 6 1860
1747 6 1860
1860 6 1860
1860 6 1860
1860 6 1860
1860 6 1860
2817 6 1860
2865 6 1860
2877 6 1860
2939 6 1860
3073 6 1860
731 6 1860
.I 1861
.T
MAD Definition Facility
.W
One first definition facilities
higher level languages described. Users
language can define new operators and/or data types
into MAD language, so their use appears
if they were predefined. Information given
one writes definitions, well much
motivation behind form which definitions
written. Some conclusions drawn future
definitional facilities.
.B
CACM August, 1969
.A
Arden, B. W.
Galler, B. A.
Graham, R. M.
.K
MAD, definitions, operators, macros, higher level language
.C
4.12 4.22
.N
CA690802 JB February 15, 1978 6:07 PM
.X
1134 4 1861
1179 4 1861
1665 4 1861
1693 4 1861
1768 4 1861
1781 4 1861
1787 4 1861
1824 4 1861
1824 4 1861
1825 4 1861
1836 4 1861
1861 4 1861
1861 4 1861
1861 4 1861
2015 4 1861
2110 4 1861
2126 4 1861
2127 4 1861
2187 4 1861
2317 4 1861
2545 4 1861
2698 4 1861
2733 4 1861
1614 5 1861
1781 5 1861
1861 5 1861
1861 5 1861
1861 5 1861
408 5 1861
.I 1862
.T
Computing Capabilities Argentine Chilean Universities
.W
author reports trip universities
Argentina Chile during November 1968, describing
university conditions computing activities. elsewhere,
these universities experiencing student
discontent status quo solutions they
attempting contrast: Argentina excluding
students participating university government;
Chile allowing such participation. University
computing service academic activities limited.
number computers small so
capacity, none larger than IBM 360/40; some
exception, computing science academic programs
rare. situation no means attributable
those responsible computing developments,
strive excellence; rather "system" hard
over-come. Universities, especially those
strong European traditions, adapt slowly new academic
resources disciplines; superimposed
severe technological economic constraints
developing nation. Consequently, absence
conscious government emphasis strengthening computing
capabilities, future progress may retarded.
.B
CACM August, 1969
.A
Finerman, A.
.K
university education, computing science academic
programs, university computing centers, surveys
computing centers, university computing capabilities, university-student
relationship, Argentine universities,
Chilean universities, South American universities, developing nations
.C
1.52 2.0 2.45
.N
CA690801 JB February 15, 1978 6:21 PM
.X
1862 4 1862
1349 5 1862
1862 5 1862
1862 5 1862
1862 5 1862
.I 1863
.T
Minit Algorithm Linear Programming (Algorithm 333 [H])
.B
CACM July, 1969
.A
Messham, D. K.
.K
linear programming, dual simplex method, primal problem, dual problem
.C
5.41
.N
CA690717 JB February 15, 1978 6:23 PM
.X
1863 5 1863
1863 5 1863
1863 5 1863
.I 1864
.T
Generation Hilbert Derived Test Matrix (Algorithm 274 [F1])
.B
CACM July, 1969
.A
Boothroyd, J.
.K
test matrix, Hilbert matrix
.C
5.14
.N
CA690716 JB February 15, 1978 6:25 PM
.X
1864 5 1864
1864 5 1864
1864 5 1864
.I 1865
.T
Algol 60 Reference Language Editor (Algorithm 268 [R2])
.B
CACM July, 1969
.A
Sauer, G.
.K
symbol manipulation
.C
4.49
.N
CA690715 JB February 15, 1978 6:26 PM
.X
1865 5 1865
1865 5 1865
1865 5 1865
.I 1866
.T
Characteristic Values Associated Solutions
Mathieu's Differential Equation (Algorithm
352 [S22])
.B
CACM July, 1969
.A
Clemm, D. S.
.K
Mathieu's differential equation, Mathieu function,
characteristic value, periodic solution, radial
solution
.C
5.12
.N
CA690714 JB February 15, 1978 6:30 PM
.X
1866 5 1866
1866 5 1866
1866 5 1866
.I 1867
.T
Expected Lengths Sequences Generated
Sorting Replacement Selecting
.W
replacement-selecting technique sorting,
one interested ratio L(j)
expected length j-th sequence generated
technique number memory cells used.
Using complex-variable theory, shown L(j)
-> 2 that, asymptotically, average interval
between sign changes L(j)-2 2.6662.
.B
CACM July, 1969
.A
Hooker, W. W.
.K
replacement selecting, sorting, sequence lengths,
asymptotic expected length, recursion relation,
generating function, meromorphic function
.C
3.74 5.31
.N
CA690713 JB February 15, 1978 6:37 PM
.X
1867 4 1867
2272 4 1867
1638 5 1867
1867 5 1867
1867 5 1867
1867 5 1867
.I 1868
.T
Obtaining Correct Input:A New Approach
.W
Most information put into machine readable
form, whether scientific business origins,
still keypunched. paper addressed toward
difficulty obtaining correctly keypunched
key verified data alternative method suggested
which computer itself used rule
out possibility errors input. technique
explained illustrated reference
working program which involves essentially two phases:
first phase errors detected
machine, subsequently, second phase, they corrected it.
.B
CACM July, 1969
.A
Kennedy, M.
.K
correct data, correct input, data correction,
keypunch, key verifier, verifier
.C
2.40 2.42 2.43 3.10 3.20 3.50 4.41
.N
CA690712 JB February 15, 1978 6:43 PM
.X
1868 5 1868
1868 5 1868
1868 5 1868
.I 1869
.T
Block Structures, Indirect Addressing, Garbage Collection
.W
Programming languages have included explicit
implicit block structures provide naming
convenience programmer. However, indirect
addressing used, SNOBOL, naming constraints
may introduced. Two modifications SNOBOL described,
resulting two desirable consequences:
(1) naming constraints disappear even there
indirect addressing within function definitions;
(2) there significant saving number
calls garbage collector, because some garbage
collected, little expense, each time function
returns its calling program. These modifications
have been implemented extension SNOBOL dialect.
.B
CACM July, 1969
.A
Kain, R. Y.
.K
block structures, indirect addressing,
garbage collection, local names, SNOBOL
.C
4.22
.N
CA690711 JB February 15, 1978 6:49 PM
.X
1869 4 1869
1869 4 1869
2513 4 1869
2665 4 1869
2723 4 1869
2855 4 1869
3106 4 1869
1549 5 1869
1570 5 1869
1869 5 1869
1869 5 1869
1869 5 1869
2060 5 1869
2770 5 1869
1380 6 1869
1421 6 1869
1469 6 1869
1477 6 1869
1491 6 1869
1786 6 1869
210 6 1869
1869 6 1869
1869 6 1869
1973 6 1869
1992 6 1869
2018 6 1869
2109 6 1869
2110 6 1869
2673 6 1869
.I 1870
.T
Some Techniques Using Pseudorandom Numbers Computer Simulation
.W
algorithm described which uniform pseudorandom
integers may used construct binary
"numbers" which probability each bit
word 1-bit can assume any desired parameter
value. Techniques making use such "numbers"
simulation programming described.
.B
CACM July, 1969
.A
Donnelly, T.
.K
random numbers, simulation, Boolean algebra, bit manipulation
.C
5.19 5.39
.N
CA690710 JB February 17, 1978 8:54 AM
.X
1794 4 1870
1870 4 1870
2122 4 1870
1674 5 1870
1870 5 1870
1870 5 1870
1870 5 1870
.I 1871
.T
Automatic Contour Map
.W
Some methods contour mapping means
digital plotter discussed, new method
presented simple enough implemented
programs rather small number instructions
(about 120 FORTRAN IV instructions required). Comparisons
some methods proposed other authors
also performed, FORTRAN IV program implementing
proposed method available Istituto
di Elettrotecnica ed Elettronica, Politencnico di Milano.
.B
CACM July, 1969
.A
Cottafava, G.
LeMoli, G.
.K
contour map, level lines, digital plotting, function scanning
.C
3.10 3.13 3.14 3.16 3.20 3.24
.N
CA690709 JB February 17, 1978 8:59 AM
.X
1871 5 1871
1871 5 1871
1871 5 1871
3062 5 1871
1871 6 1871
1925 6 1871
.I 1872
.T
Chebyshev Interpolation Quadrature
Formulas Very High Degree (Errata)
.B
CACM July, 1969
.A
Salzer, H. E.
.N
CA690708 JB February 17, 1978 9:01 AM
.X
1872 5 1872
1872 5 1872
1872 5 1872
2394 5 1872
1872 6 1872
1903 6 1872
.I 1873
.T
Accelerating LP Algorithms
.W
shown novel method computing
(related) inner products can accelerate pricing
phase LP algorithms. Other LP applications indicated.
.B
CACM July, 1969
.A
Fox, B. L.
.K
linear programming, revised simplex
method, multiple pricing, inner product
.C
5.19 5.41
.N
CA690707 JB February 17, 19789:08 AM
.X
1873 5 1873
1873 5 1873
1873 5 1873
.I 1874
.T
Generating Pseudorandom Numbers Two's
Complement Machine such IBM 360
.W
familiar multiplicative congruential generator
examined context type
two's complement arithmetic used IBM 360 series.
Different sequences residues considered
relationships established among them. shown
sequence positive negative residues
may produced more simply economically than
conventional approach yet have twice
period latter without loss desirable statistical
properties. Another easily generated sequence
involving absolute values also shown have twice
period but less attractive statistical
properties. statistical properties these sequences
given related previously established
criteria.
.B
CACM July, 1969
.A
Hemmerle, W. J.
.K
random number, uniform distribution, pseudo-random
number, random number generator, multiplicative
congruential generator, power residue, two's
complement arithmetic, IBM 360 arithmetic
.C
3.15 5.5 6.32
.N
CA690706 JB February 17, 1978 9:17 AM
.X
1874 5 1874
1874 5 1874
1874 5 1874
.I 1875
.T
Polynomial Spline Approximation Quadratic Programming
.W
problem approximation given function,
fitting given set data,
approximating function required have certain
its derivations specified sign over
whole range approximation, studied. Two approaches
presented, each which quadratic programming
used provide both constraints derivatives
selection function which yields
best fit. first modified Bernstein polynomial
scheme, second spline fit.
.B
CACM July, 1969
.A
Amos, D. E.
Slater, M. L.
.K
constant sign derivatives, Bernstein polynomials,
linear concavity constraints, quadratic programming
splines
.C
5.13 5.41
.N
CA690705 JB February 17, 1978 9:22 AM
.X
1875 5 1875
1875 5 1875
1875 5 1875
.I 1876
.T
Generation Test Matrices Having Certain
Sign Patterns Prescribed Positive Spectra
.W
class orthogonal transformations presented
whose members transform given positive
diagonal matrix into matrix having one four special sign patterns.
.B
CACM July, 1969
.A
Schneider, A. J.
.K
test matrices, positive matrices, sign patterns,
orthogonal transformations, positive eigenvalues
.C
5.1 5.14
.N
CA690704 JB February 17, 1978 9:26 AM
.X
1876 4 1876
2099 4 1876
1707 5 1876
1876 5 1876
1876 5 1876
1876 5 1876
.I 1877
.T
Prevention System Deadlocks
.W
well-known problem design operating
systems selection resource allocation
policy prevent deadlock. Deadlock
situation which resources have been allocated
various tasks such way none tasks
can continue. various published solutions
have been somewhat restrictive: either they do not handle
problem sufficient generality they
suggest policies which occasion refuse request
which could have been safely granted. Algorithms
presented which examine request light
current allocation resources determine
whether not granting request introduce
possibility deadlock. Proofs given
appendixes show conditions imposed
algorithms both necessary sufficient
prevent deadlock. algorithms have been successfully used system.
.B
CACM July, 1969
.A
Habermann, A. N.
.K
multiprogramming, time-sharing, scheduling, resource allocation
.C
3.72 4.32 6.20
.N
CA690703 JB February 17, 1978 9:33 AM
.X
1458 4 1877
1523 4 1877
1603 4 1877
1698 4 1877
1747 4 1877
1748 4 1877
1828 4 1877
1854 4 1877
1854 4 1877
1877 4 1877
1877 4 1877
1960 4 1877
1960 4 1877
2150 4 1877
2317 4 1877
2319 4 1877
2377 4 1877
2377 4 1877
2378 4 1877
2342 4 1877
2376 4 1877
2379 4 1877
2424 4 1877
2482 4 1877
2497 4 1877
2558 4 1877
2618 4 1877
2625 4 1877
2632 4 1877
2632 4 1877
2704 4 1877
2723 4 1877
2738 4 1877
2740 4 1877
2741 4 1877
2840 4 1877
2867 4 1877
2941 4 1877
3105 4 1877
3144 4 1877
3184 4 1877
1471 5 1877
1749 5 1877
1877 5 1877
1877 5 1877
1877 5 1877
2228 5 1877
2280 5 1877
2379 5 1877
2482 5 1877
2740 5 1877
2851 5 1877
2920 5 1877
1198 6 1877
1338 6 1877
1749 6 1877
1749 6 1877
1749 6 1877
1877 6 1877
1877 6 1877
1877 6 1877
1877 6 1877
1877 6 1877
1877 6 1877
1877 6 1877
2080 6 1877
2150 6 1877
2228 6 1877
2228 6 1877
2228 6 1877
.I 1878
.T
Recovery Reentrant List Structures SLIP
.W
One consequence reference-count-based
space-recovery system employed SLIP
reentrant list structures not recovered even
explicitly erased. LISP-like garbage-collection
schemes free impediment. They however,
depend being able find mark nodes
reachable program variables. tracing all
descendants program variables may then
identified collected. list-creating function
LIST SLIP may amended mark those lists
which programmer wishes assume responsibility.
Given modification, LISP-like garbage
collector recovers abandoned reentrant list structures
may then appended SLIP system.
.B
CACM July, 1969
.A
Weizenbaum, J.
.K
list processing, SLIP, garbage-collection
.C
4.22 4.40
.N
CA690702 JB February 17, 1978 9:39 AM
.X
1024 4 1878
1024 4 1878
1051 4 1878
1051 4 1878
1098 4 1878
1102 4 1878
1132 4 1878
1214 4 1878
1380 4 1878
1388 4 1878
1390 4 1878
1393 4 1878
1485 4 1878
1486 4 1878
1487 4 1878
1549 4 1878
1549 4 1878
1570 4 1878
1706 4 1878
1826 4 1878
1878 4 1878
1878 4 1878
1946 4 1878
1957 4 1878
378 4 1878
2060 4 1878
2155 4 1878
2168 4 1878
2168 4 1878
2719 4 1878
2723 4 1878
2723 4 1878
2838 4 1878
2842 4 1878
2855 4 1878
2857 4 1878
2879 4 1878
3077 4 1878
3080 4 1878
3106 4 1878
3112 4 1878
627 4 1878
106 4 1878
210 5 1878
1878 5 1878
1878 5 1878
1878 5 1878
2023 5 1878
2168 5 1878
731 5 1878
106 6 1878
1626 6 1878
1826 6 1878
210 6 1878
1878 6 1878
1878 6 1878
731 6 1878
.I 1879
.T
Note Storage Fragmentation Program Segmentation
.W
main purpose paper presentation
some results series simulation
experiments investigating phenomenon storage fragmentation.
Two different types storage fragmentation
distinguished: (1) external fragmentation, namely
loss storage utilization caused inability
make use all available storage after has been
fragmented into large number separate blocks;
(2) internal fragmentation, loss utilization
caused rounding up request storage,
rather than allocating only exact number words required.
most striking result apparently
general rule rounding up requests storage,
reduce number different sizes blocks
coexisting storage, causes more loss storage
increased internal fragmentation than saved
decreased external fragmentation. Described also
method segment allocation accompanying
technique segment addressing which take advantage
above result. Evidence presented
possible advantages method over conventional paging techniques.
.B
CACM July, 1969
.A
Randell, B.
.K
storage allocation, storage fragmentation,
paging, segmentation, addressing
.C
6.2 6.20
.N
CA690701 JB February 17, 1978 9:46 AM
.X
1879 4 1879
1884 4 1879
1901 4 1879
2095 4 1879
2277 4 1879
2297 4 1879
2365 4 1879
1754 5 1879
1879 5 1879
1879 5 1879
1879 5 1879
2095 5 1879
2218 5 1879
2498 5 1879
2596 5 1879
2734 5 1879
2902 5 1879
2911 5 1879
3000 5 1879
1051 6 1879
1062 6 1879
1184 6 1879
1184 6 1879
1211 6 1879
1380 6 1879
1552 6 1879
1572 6 1879
1728 6 1879
1728 6 1879
1751 6 1879
1751 6 1879
1754 6 1879
1752 6 1879
1810 6 1879
1879 6 1879
1879 6 1879
1879 6 1879
1879 6 1879
1879 6 1879
1879 6 1879
1879 6 1879
1879 6 1879
273 6 1879
2095 6 1879
2095 6 1879
2095 6 1879
2435 6 1879
2435 6 1879
2435 6 1879
2498 6 1879
2596 6 1879
2734 6 1879
2734 6 1879
2747 6 1879
2768 6 1879
2773 6 1879
2864 6 1879
2983 6 1879
.I 1880
.T
Chebyshev Solution Overdetermined
Linear System (Algorithm 328 [F4])
.B
CACM June, 1969
.A
Golub, G. H.
.K
Chebyshev solutions, over-determined linear
systems, linear equations, exchange algorithm
.C
5.13 5.14 5.41
.N
CA690613 JB February 17, 1978 9:49 AM
.X
1880 5 1880
1880 5 1880
1880 5 1880
3054 5 1880
1175 6 1880
1880 6 1880
1919 6 1880
1969 6 1880
1980 6 1880
1997 6 1880
307 6 1880
308 6 1880
309 6 1880
2017 6 1880
2679 6 1880
776 6 1880
.I 1881
.T
Transpose Vector Stored Array (Algorithm 302 [K2])
.B
CACM June, 1969
.A
MacLeod, I. D. G.
.K
matrix transposition, array transposition, vector stored array
.C
5.39
.N
CA690612 JB February 17, 1978 9:51 AM
.X
1881 5 1881
1881 5 1881
1881 5 1881
.I 1882
.T
Determination Square Root Positive
Definite Matrix (Algorithm 298 [F1])
.B
CACM June, 1969
.A
Duke, B. J.
.K
matrix, symmetric matrix, positive definite matrix, matrix square root
.C
5.14
.N
CA690611 JB February 17, 1978 9:53 AM
.X
1882 5 1882
1882 5 1882
1882 5 1882
.I 1883
.T
Modified Romberg Quadrature(Algorithm [D1])
.B
CACM June, 1969
.A
Fair weather, G.
.K
numerical integration, Romberg quadrature,
trapezoid values, rectangle values, error bound
.C
5.16
.N
CA690610 JB February 17, 1978 9:55 AM
.X
1352 4 1883
1356 4 1883
1883 4 1883
2040 4 1883
1241 5 1883
1883 5 1883
1883 5 1883
1883 5 1883
1982 5 1883
2355 5 1883
1 6 1883
1273 6 1883
1418 6 1883
1521 6 1883
1597 6 1883
1883 6 1883
1883 6 1883
324 6 1883
2040 6 1883
2350 6 1883
2354 6 1883
.I 1884
.T
Anomaly Space-Time Characteristics
Certain Programs Running Paging Machine
.W
running time programs paging machine
generally increases store which
programs constrained run decreases. Experiments,
however, have revealed cases which reverse
true: decrease size store accompanied
decrease running time. informal
discussion anomalous behavior given,
case FIFO replacement algorithm formal
treatment presented.
.B
CACM June, 1969
.A
Belady, L. A.
Nelson, R. A.
Shedler, G. S.
.K
paging machines, demand paging, replacement algorithm
.C
4.30
.N
CA690609 JB February 17, 1978 9:59 AM
.X
1879 4 1884
1884 4 1884
1901 4 1884
2095 4 1884
2277 4 1884
2297 4 1884
2365 4 1884
1754 5 1884
1884 5 1884
1884 5 1884
1884 5 1884
2022 5 1884
2085 5 1884
3006 5 1884
1751 6 1884
1751 6 1884
1884 6 1884
1884 6 1884
1884 6 1884
2374 6 1884
2373 6 1884
2595 6 1884
.I 1885
.T
Computer System Transformational Grammar
.W
comprehensive system transformational
grammar has been designed implemented
IBM 360/67 computer. system deals transformational
model syntax, along lines
Chomsky's Aspects Theory Syntax. major
innovations include full,formal description
syntax transformational grammar, directed random
phrase structure generator, lexical insertion
algorithm, extended definition analysis,
simple problem-oriented programming language
which algorithm application transformations
can expressed. paper we present
system whole, first discussing general attitudes underlying
development system, then
outlining system discussing its more important
special features. References given papers
which consider some particular aspect system detail.
.B
CACM June, 1969
.A
Friedman, J.
.K
transformational grammar, natural language syntax,
language processing, language analysis, sentence
generation, lexical insertion, computational linguistics, syntax
.C
3.42
.N
CA690608 JB February 17, 1978 10:36 AM
.X
1885 4 1885
2795 4 1885
1885 5 1885
1885 5 1885
1885 5 1885
1928 5 1885
.I 1886
.T
Generation Optimal Code Expressions via Factorization
.W
Given set expressions which
compiled, methods presented increasing
efficiency object code produced first factoring
expressions, i.e. finding set subexpressions
each which occurs two more other expressions
subexpressions. Once all factors have been
ascertained, sequencing procedure applied which
orders factors expressions such all
information computed correct sequence factors
need retained memory minimal amount
time. assignment algorithm then executed
order minimize total number temporary
storage cells required hold results evaluating
factors. order make these techniques
computationally feasible, heuristic procedures
applied, hence global optimal results not
necessarily generated. factorization algorithms
also applicable problem factoring
Boolean switching expressions factoring polynomials
encountered symbol manipulating systems.
.B
CACM June, 1969
.A
Breuer, M. A.
.K
factorization algorithms, code optimization, sequencing
operations, detection common subexpressions,
factorization Boolean expressions
.C
4.12 6.1
.N
CA690607JB February 17, 1978 10:57 AM
.X
1030 4 1886
1886 4 1886
1939 4 1886
1886 5 1886
1886 5 1886
1886 5 1886
2175 5 1886
678 5 1886
1551 6 1886
1613 6 1886
1886 6 1886
.I 1887
.T
Recursive Relation Determinant Pentadiagonal Matrix
.W
recursive relation, relating leading principal
minors, developed determinant
pentadiagonal matrix. numerical example included
indicate its use calculating eigenvalues.
.B
CACM June, 1969
.A
Sweet, R. A.
.K
pentadiagonal matrix, quindiagonal matrix, quindiagonal
matrix, band matrix, determinant, characteristic
polynomial, eigenvalues
.C
5.14
.N
CA690606 JB February 17, 1978 11:00 AM
.X
1887 5 1887
1887 5 1887
1887 5 1887
.I 1888
.T
Spline Function Methods Nonlinear Boundary-Value Problems
.W
solution nonlinear differential equation
Y"=F(x,Y,Y') two-point boundary conditions
approximated quintic cubic spline function
y(x). method well suited nonuniform
mesh size dynamic mesh size allocation. uniform
mesh size h, error quintic spline
y(x) O(h^4), typical error one-third
Numerov's method. Requiring differential
equation satisfied mesh points results
set difference equations, which block
tridiagonal so easily solved relaxation other standard methods.
.B
CACM June, 1969
.A
Blue, J. L.
.K
boundary value problems, differential equations,
finite differences, functional approximation,
iterative methods, nonlinear equations, spline functions
.C
5.13 5.15 5.17
.N
CA690605 JB February 17, 1978 11:07 AM
.X
1888 5 1888
1888 5 1888
1888 5 1888
.I 1889
.T
Introducing Computing Smaller Colleges
Universities -- Progress Report
.W
technical means now routine, computer
service smaller colleges universities
can provided remote terminals central facility.
Access, however, not enough-effective
organizational educational methodology introducing
computing such institutions must also
developed. experience two years statewide
network involving-41 institutions discussed.
Lessons include importance separate organization
representing small colleges, necessity
on-campus training institutions, need
some special programming documentation
support such users,and development curriculum evolutionary means.
.B
CACM June, 1969
.A
Parker Jr., L. T.
Gallie, T. M.
Brooks Jr., F. P.
Ferrel, J. K.
.K
regional network, introducing computing, under-graduate
education, instructional usage, academic
applications, curriculum development, orientation project,
regional center, consortium, remote computing
.C
1.50 1.52 1.59 2.49
.N
CA690604 JB February 17, 1978 11:21 AM
.X
1889 5 1889
1889 5 1889
1889 5 1889
.I 1890
.T
Simulation Traffic Flows Network
.W
computer simulation program which deals
traffic flows network large area
described. Each road segmented into blocks
several ten-meter lengths represented
bidirectional list computer memory. movement
cars, i.e. transfer cars one block
next, expressed proper formula.
formula based supposition speed
cars block determined only density
cars block, speed-versus-density
curve empirically given numerical values.
simulation scheme has its excellent point
makes possible trace dynamic behavior
traffic flows variety situations, some
examples which given actual area city Kyoto, Japan.
.B
June, 1969
.A
Sakai, T.
Nagao, M.
.K
traffic simulation, traffic flow, traffic network
traffic control, traffic density, intersection,
signal setting, vehicle, road network, list structure, computer simulation
.C
3.57 3.23
.N
CA690603 JB February 17, 1978 1:26 PM
.X
1890 4 1890
1890 5 1890
1890 5 1890
1890 5 1890
757 5 1890
.I 1891
.T
Three-Dimensional Computer Display
.W
stereographic display terminal has been
produced using raster display (BRAD) recently
developed Brookhaven. system uses rotating refresh
memory feed standard television monitors.
produce stereographic display computer calculates
projected video images object,
viewed two separate points. resulting video
maps stored separate refresh bands
rotating memory. two output signals connected
separate color guns color television monitor,
thus creating superimposed image screen. Optical
separation achieved viewing image
through color filters. display interactive
can viewed large group people
same time.
.B
CACM June, 1969
.A
Ophir, D.
Shepherd, B. J.
Spinrad, R. J.
.K
computer graphics, three-dimensional display, swept
raster display, interactive stereographic terminal,
video map, color separation
.C
2.0 4.49 6.35
.N
CA690602 JB February 17, 1978 1:34 PM
.X
1891 4 1891
2211 4 1891
2421 4 1891
2674 4 1891
2687 4 1891
1741 5 1891
1891 5 1891
1891 5 1891
1891 5 1891
.I 1892
.T
Degree Multiprogramming Page-on-Demand Systems
.W
simple stochastic model described which
offers base understanding relationship
between number programs permitted share memory
(the degree multiprogramming), drum traffic
rates, central processing unit utilization page-on-demand,
multiprogrammed, time-shared computer
systems. model preserves, key feature,
property page-demand statistics which implies
"burst" page demands beginning any job
quantum execution. model, Markov chain,
analyzed numerically results presented graphically
wide range key environment-descriptive
parameters. Implications results time-shared
system design programming discussed,
calculation optimal degree multiprogramming
wide range parameters presented
graphically.
.B
CACM June, 1969
.A
Wallace, V. L.
Mason, D. L.
.K
page-on-demand, demand paging, time-sharing multiprogramming,
Markovian computer models, scheduling
strategies, operating systems, memory management
.C
2.44 4.32 4.39 6.20 6.21
.N
CA690601 JB February 17, 1978 1:43 PM
.X
1751 4 1892
1805 4 1892
1846 4 1892
1892 4 1892
1892 4 1892
1892 4 1892
1892 4 1892
1892 4 1892
1901 4 1892
1924 4 1892
2068 4 1892
2085 4 1892
2095 4 1892
2095 4 1892
2128 4 1892
2188 4 1892
2218 4 1892
2218 4 1892
2218 4 1892
2218 4 1892
2277 4 1892
2297 4 1892
2317 4 1892
2319 4 1892
2329 4 1892
2358 4 1892
2373 4 1892
2374 4 1892
2380 4 1892
2434 4 1892
2499 4 1892
2501 4 1892
2526 4 1892
2582 4 1892
2667 4 1892
2668 4 1892
2669 4 1892
2741 4 1892
2828 4 1892
2862 4 1892
2863 4 1892
2863 4 1892
2881 4 1892
2928 4 1892
2996 4 1892
3006 4 1892
3067 4 1892
1526 5 1892
1572 5 1892
1728 5 1892
1751 5 1892
1752 5 1892
1892 5 1892
1892 5 1892
1892 5 1892
.I 1893
.T
Roots Polynomials Root-Squaring
Resultant routine (Algorithm 340 [C2])
.B
CACM May, 1969
.A
Noltemeier, A.
.K
root finders, roots polynomial equations, polynomial
zeros, root-squaring operations, Graeffe
method, resultant procedure, subresultant procedure,
testing roots, acceptance criteria
.C
5.15
.N
CA690517 JB February 17, 1978 2:29 PM
.X
1893 5 1893
1893 5 1893
1893 5 1893
.I 1894
.T
Normal Random Deviates (Algorithm 334 [G5])
.B
CACM May, 1969
.A
Knop, R.
.K
normal deviates, normal distribution, random number,
random number generator, simulation, probability
distribution, frequency distribution, random
.C
5.13 5.5
.N
CA690516 JB February 17, 1978 2:31 PM
.X
1894 5 1894
1894 5 1894
1894 5 1894
2057 5 1894
2349 5 1894
1600 6 1894
1648 6 1894
1716 6 1894
1794 6 1894
1894 6 1894
1894 6 1894
2043 6 1894
2055 6 1894
501 6 1894
613 6 1894
774 6 1894
.I 1895
.T
Gaussian Quadrature Formulas (Algorithm 331 [D1])
.B
CACM May, 1969
.A
Hill, I. D.
.K
quadrature, Gaussian quadrature, numerical integration,
weight function, orthogonal polynomials
.C
5.16
.N
CA690514 JB February 17, 1978 3:13 PM
.X
1895 5 1895
1895 5 1895
1895 5 1895
.I 1896
.T
Regular Coulomb Wave Functions (Algorithm 292 S22])
.B
CACM May, 1969
.A
Gautschi, W.
.K
Coulomb wave functions, wave functions, regular Coulomb wave functions
.C
5.12
.N
CA690513 JB February 17, 1978 3:15 PM
.X
1896 5 1896
1896 5 1896
1896 5 1896
.I 1897
.T
Coulomb Wave Functions (Algorithm 300 [S22])
.B
CACM May, 1969
.A
Kolbig, K. S.
.K
Coulomb wave functions, wave functions
.C
5.12
.N
CA690512 JB February 17, 1978 3:17 PM
.X
1897 5 1897
1897 5 1897
1897 5 1897
.I 1898
.T
Regular Coulomb Wave Functions (Algorithm 292 [S22])
.B
CACM May, 1969
.A
Kolbig, K. S.
.K
Coulomb wave functions, wave functions, regular Coulomb wave functions
.C
5.12
.N
CA690511 JB February 17, 1978 3:19 PM
.X
1898 5 1898
1898 5 1898
1898 5 1898
.I 1899
.T
Simplex Method Procedure Employing Lu Decomposition (Algorithm 350 [H])
.B
CACM May, 1969
.A
Bartels, R. H.
Golub, G. H.
.K
simplex method, linear programming, LU decomposition,
round-off errors, computational stability
.C
5.41
.N
CA690510 JB February 17, 1978 3:21 PM
.X
1899 5 1899
1899 5 1899
1899 5 1899
.I 1900
.T
Clarification Fortran Standards-Initial Progress
.W
1966 after four years effort, FORTRAN
became first programming language standardized
United States. Since initial achievement,
study application standard specifications
have revealed need maintenance standards.
result work initiated 1967,
initial set clarifying interpretations has been prepared.
nature maintenance, corrections
standard specifications, completed interpretations reported.
.B
CACM May, 1969
.K
USA Standard, FORTRAN, Basic FORTRAN, programming
language, standardization, language standard
specification, language standard maintenance, language standard
clarification, language standard interpretation,
standardization committee
.C
1.2 2.0 2.19 2.2 2.3 4.0 4.12 4.19 4.20 4.22 4.29 4.43 5.23 5.9 6.9
.N
CA690509 JB February 17, 1978 3:26 PM
.X
1613 4 1900
1646 4 1900
1845 4 1900
1900 4 1900
1900 4 1900
1955 4 1900
2025 4 1900
2083 4 1900
2154 4 1900
2154 4 1900
2270 4 1900
2365 4 1900
2506 4 1900
2693 4 1900
3060 4 1900
987 5 1900
988 5 1900
1900 5 1900
1900 5 1900
1900 5 1900
2154 5 1900
2915 5 1900
3060 5 1900
987 6 1900
987 6 1900
988 6 1900
1502 6 1900
1900 6 1900
1900 6 1900
1900 6 1900
2154 6 1900
.I 1901
.T
Dynamic Space-Sharing Computer Systems
.W
formalization relationships between space-shading
program behavior, processor efficiency
computer systems presented. Concepts value
cost space allocation per task defined
then value cost combined develop single
parameter termed value per unit cost. intent
illustrate possible analytic approach
investigation problems space-sharing
demonstrate method sample problems.
.B
CACM May, 1969
.A
Belady, L. A.
Kuehner, C. J.
.K
space-sharing, storage allocation, memory allocation,
storage management, memory management, program
behavior, multiprogramming, computer system design, allocation
strategies, replacement strategies, demand-paging,
time-sharing
.C
4.32 6.2 6.20
.N
CA690508 JB February 17, 1978 3:31 PM
.X
1713 4 1901
1713 4 1901
1879 4 1901
1884 4 1901
1892 4 1901
1901 4 1901
1901 4 1901
1901 4 1901
1901 4 1901
2085 4 1901
2095 4 1901
2095 4 1901
2218 4 1901
2277 4 1901
2277 4 1901
2297 4 1901
2319 4 1901
2329 4 1901
2358 4 1901
2365 4 1901
2373 4 1901
2380 4 1901
2434 4 1901
2499 4 1901
2501 4 1901
2582 4 1901
491 4 1901
491 4 1901
2669 4 1901
2828 4 1901
2863 4 1901
2881 4 1901
2928 4 1901
2996 4 1901
3006 4 1901
3067 4 1901
168 5 1901
185 5 1901
1751 5 1901
1754 5 1901
1901 5 1901
1901 5 1901
1901 5 1901
2374 5 1901
2481 5 1901
2669 5 1901
2863 5 1901
3016 5 1901
3052 5 1901
1728 6 1901
1728 6 1901
1751 6 1901
1751 6 1901
1901 6 1901
1901 6 1901
1901 6 1901
1901 6 1901
1901 6 1901
1901 6 1901
2017 6 1901
2358 6 1901
2373 6 1901
2741 6 1901
2863 6 1901
.I 1902
.T
Automatic Grading Scheme Simple Programming Exercises
.W
discussion given alterations were
made typical university operating system
record results programming exercises three
different languages, including assembly language.
computer-controlled grading scheme provision
made testing programmer-supplied data
final runs system-supplied data. Exercises
run under scheme may mixed other
programs, no special recognition exercises operators necessary.
.B
CACM May, 1969
.A
Hext, J. B.
Winings, J. W.
.K
automatic grading program, programming exercises
.C
1.5 2.43 4.39
.N
CA690507 JB February 17, 1978 3:35 PM
.X
1270 4 1902
1413 4 1902
1902 4 1902
1902 4 1902
145 5 1902
1270 5 1902
1902 5 1902
1902 5 1902
1902 5 1902
.I 1903
.T
Chebyshev Interpolation Quadrature Formulas Very High Degree
.B
CACM May, 1969
.A
Salzer, H. E.
.K
Chebyshev polynomials, Chebyshev interpolation,
Chebyshev quadrature, Chebyshev points, Chebyshev
zeros, interpolation, quadrature, definite integrals
.C
5.13 5.16
.N
CA690506 JB February 17, 1978 3:42 PM
.X
1903 5 1903
1903 5 1903
1903 5 1903
2394 5 1903
1872 6 1903
1903 6 1903
.I 1904
.T
Rough Ready Error Estimates Gaussian
Integration Analytic Functions
.B
CACM May, 1969
.A
Rabinowitz, P.
.K
numerical integration, analytic functions, error
estimates, Gaussian integration, tabulated error
coefficients, computable error coefficients, Cauchy
integral formula, Chebyshev polynomials
.C
5.11 5.16
.N
CA690505 JB February 17, 1978 3:44 PM
.X
1904 5 1904
1904 5 1904
1904 5 1904
.I 1905
.T
Simplex Method Linear Programming Using LU Decomposition
.W
Standard computer implementations Dantzig's
simplex method linear programming based
upon forming inverse basic matrix updating
inverse after every step method.
These implementations have bad round-off error properties.
paper gives theoretical background
implementation which based upon LU decomposition,
computed row interchanges,
basic matrix. implementation slow, but has good
round-off error behavior. implementation
appears CACM Algorithm 350.
.B
CACM May, 1969
.A
Bartels, R. H.
Goulub, G. H.
.K
simplex method, linear programming, LU decomposition,
round-off errors, computational stability
.C
5.41
.N
CA690504 JB February 17, 1978 3:49 PM
.X
1905 4 1905
1744 5 1905
1905 5 1905
1905 5 1905
1905 5 1905
.I 1906
.T
Automated Printed Circuit Routing Stepping Aperture
.W
computer program routing interconnections
two-sided printed circuit board
regular pattern lines, pins (terminals), vias
(feed-through holes) described. program,
each interconnection given planned routing-typically,
down upper pin, through via,
horizontally lower pin. top, virtual
aperture (i.e. long horizontal slit) stepped
down board. planned routing basis
rerouting interconnections within aperture
resolve conflicts lines vias below aperture
maximize effective line usage.
If conflict has not been resolved before aperture
arrives lower pin,interconnections
deleted resolve conflict. Extensions technique
control crosstalk between routed
interconnections problem obtaining
100 percent interconnect also discussed.
.B
CACM May, 1969
.A
Lass, S.E.
.K
routing, printed circuit, interconnections, aperture,
stepping aperture, computer program, circuit
board, lines, vias, pins
.C
3.24 6.30
.N
CA690503 JB February 17, 1978 3:57 PM
.X
1211 4 1906
1549 4 1906
1906 4 1906
2902 4 1906
1051 5 1906
1906 5 1906
1906 5 1906
1906 5 1906
.I 1907
.T
Note Reliable Full-Duplex Transmission over Half-Duplex Links
.W
simple procedure achieving reliable full-duplex
transmission over half-duplex links
proposed. scheme compared another
same type, which has recently been described
literature. Finally, some comments made
another group related transmission procedures
which have been shown unreliable under some circumstances.
.B
CACM May, 1969
.A
Bartlett, K. A.
Scantlebury, R. A.
.K
data transmission, error correction, full-duplex,
half-duplex, transmission control, communications
.C
3.81
.N
CA690502 JB February 17, 1978 4:01 PM
.X
1907 4 1907
1743 5 1907
1907 5 1907
1907 5 1907
1907 5 1907
.I 1908
.T
Time-Sharing Batch-Processing: Experimental
Comparison Their Values Problem -
Solving Situation
.W
experimental comparison problem-solving
using time-sharing batch-processing computer
systems conducted MIT described paper.
study first known attempt evaluate
two such systems may well predominant user
population within next decade-the professionals
who, nonprogrammers, using computer
aid decision-making problem-solving rather
than programming end itself. Statistically
logically significant results indicate equal
cost usage two computer systems; however,
much higher level performance attained
time-sharing users. There indications significantly
lower costs would have resulted if
time-sharing users had stopped work they reached
performance level equal batch
users. users' speed problem-solving their
attitudes made time-sharing more favorable
system.
.B
CACM May, 1969
.A
Gold, M. M.
.K
time-sharing vs batch-processing, user performance,
man/machine communications, cost effectiveness,
on-line vs off-line performance, decision-making performance,
user/programmer behavior, programming experimental
empirical studies, problem-solving, research man/machine
communications, man/machine symbiosis
.C
2.11 2.40 3.36 3.51 3.80
.N
CA690501 JB February 17, 1978 4:10 PM
.X
1792 4 1908
1908 4 1908
1908 4 1908
1550 5 1908
1605 5 1908
1908 5 1908
1908 5 1908
1908 5 1908
2705 5 1908
2984 5 1908
1908 6 1908
1908 6 1908
3185 6 1908
.I 1909
.T
Computation Jn(x) Numerical Integration
.W
shown practical compute Jn(x)
numerical integration its integral representation
using trapezoidal rule. error
approximation studied empirically.
.B
CACM April, 1969
.A
Stroud, A. H.
Kohli, J. P.
.K
Bessel Function, numerical integration, trapezoidal rule
.C
5.11 5.12 5.16
.N
CA690408 JB February 17, 1978 4:13 PM
.X
1909 4 1909
1909 4 1909
1909 4 1909
1909 4 1909
2119 4 1909
134 5 1909
1023 5 1909
1284 5 1909
1316 5 1909
1909 5 1909
1909 5 1909
1909 5 1909
.I 1910
.T
Algorithm Solving Special Class
Tridiagonal Systems Linear Equations
.W
algorithm presented solving system
linear equation Bu=k B tridiagonal
special form. shown algorithm
almost twice fast Gaussian elimination
method usually suggested solving such systems.
addition, explicit formulas inverse
determinant matrix B given.
.B
CACM April, 1969
.A
Rose, D. J.
.K
tridiagonal, Gaussian elimination, central difference
.C
5.14 5.17
.N
CA690407 JB February 17, 1978 4:18 PM
.X
1910 5 1910
1910 5 1910
1910 5 1910
.I 1911
.T
Coordination Reduction Sentence Analysis
.W
class coordination phenomena natural
languages considered within frame work
transformational theory. account these phenomena
proposed certain machinery
added syntactic component transformational
grammar. machinery includes certain rule
schemata, conditions under which they
applied, conditions determining sequence
subtrees which they performed. solution
syntactic analysis problem
class grammars outlined. Precise specification
both generative procedure paper
its inverse given form LISP function definitions.
.B
CACM April, 1969
.A
Petrick, S. R.
Postal, P. M.
Rosenbaum, P. S.
.K
natural languages, generative grammar, transformational
theory, syntax, coordination, sentence
coordination, sentence coordination, coordination reduction,
syntactic analysis, grammar testing program,
rule testing
.C
3.42
.N
CA690406 JB February 17, 1978 4:25 PM
.X
1911 5 1911
1911 5 1911
1911 5 1911
.I 1912
.T
Simulation Outpatient Appointment Systems
.W
experimental computer program described
which simulates appointment systems employed
outpatient departments hospitals. Both major kinds
appointment systems-individual block-can
simulated. purpose Simulator enable
user evaluate effectiveness alternative
appointment systems given clinical environment.
.B
CACM April, 1969
.A
Katz, J. H.
.K
simulation, scheduling, appointment system, outpatient
department, medicine, health, management
science, operations research
.C
3.34 3.59
.N
CA690405 JB February 17, 1978 4:32 PM
.X
1805 4 1912
1912 4 1912
1518 5 1912
1912 5 1912
1912 5 1912
1912 5 1912
.I 1913
.T
Polygamma Functions Arbitrary Precision (Algorithm 349 [S14])
.B
CACM April, 1969
.A
Schwachheim, G.
.K
polygamma function, psi function, digamma function,
trigamma function, tetragamma function, pentagamma
function, special functions
.C
5.12
.N
CA690404 JB February 17, 1978 4:36 PM
.X
1913 5 1913
1913 5 1913
1913 5 1913
.I 1914
.T
Matrix Scaling Integer Programming (Algorithm 348 [F1])
.B
CACM April, 1969
.A
Klimpel, R. R.
.K
integer programming, linear algebra, mathematical
programming, matrix condition, matrix scaling
.C
5.14 5.41
.N
CA690403 JB February 17, 1978 4:38 PM
.X
1914 5 1914
1914 5 1914
1914 5 1914
.I 1915
.T
Algorithm Hidden Line Elimination
.W
algorithm presented causes elimination
hidden lines representation perspective
view concave convex plane-faced objects
picture plane. All edges objects
considered sequentially, all planes which hide every
point edge found. computing time
increases roughly square number edges.
algorithm takes advantage reduced number
concave points automatically recognizes if only
one object no concave points considered.
last case, result obtained much simpler way.
.B
CACM April, 1969
.A
Galimberti, R.
Montanari, U.
.K
hidden line elimination, back line recognition, three-dimensional
representation, plane-faced objects,
perspective view, machine rendering solids, automatic
drawing, displaying techniques, computer graphics,
man/machine interaction, man/machine communication, computer-aided design
.C
4.40 4.41 4.49
.N
CA690402 JB February 17, 1978 4:44 PM
.X
1915 5 1915
1915 5 1915
1915 5 1915
2004 5 1915
2687 5 1915
2692 5 1915
1686 6 1915
1741 6 1915
1915 6 1915
1915 6 1915
1915 6 1915
2004 6 1915
.I 1916
.T
Analysis Boolean Program Models Time-Shared, Paged Environments
.W
Directed graphs their associated matrices
frequently used represent logical structure
sequences computer instructions. Such techniques
used and, addition, data references
represented nondirected model. complete structural
specification program represented
combined model. transformation combined
model yields new model which additional timing
information also contained. Analysis these models
prior execution yields information valuable
determining segmentation instructions data
time-shared environment, well initial
page loading; during execution, analysis may
used "look ahead" control page turning.
.B
CACM April, 1969
.A
Lowe, T. C.
.K
time-sharing, paging, segmentation, executive,
compiler, monitor, program model
.C
4.39 6.21
.N
CA690401 JB February 17, 1978 4:50 PM
.X
1916 4 1916
1916 4 1916
1533 5 1916
1916 5 1916
1916 5 1916
1916 5 1916
2130 5 1916
666 5 1916
1916 6 1916
.I 1917
.T
Algol Procedure Fast Fourier Transform
Arbitrary Factors (Algorithm 339 [C6])
.B
CACM March, 1969
.A
Singleton, R. C.
.K
fast Fourier transform, complex Fourier transform,
multivariate Fourier transform, Fourier series,
harmonic analysis, spectral analysis, orthogonal polynomials,
orthogonal transformation, virtual core
memory, permutation
.C
3.15 3.83 5.12 5.14
.N
CA690310 JB February 20, 1978 8:43 AM
.X
1917 5 1917
1917 5 1917
1917 5 1917
.I 1918
.T
Distribution Indistinguishable Objects
into Distinguishable Slots (Algorithm 329 [G6])
.B
CACM March, 1969
.A
Gray, M.
.N
CA690309 JB February 20, 1978 8:46 AM
.X
1918 5 1918
1918 5 1918
1918 5 1918
.I 1919
.T
Efficient Algorithm Sorting
Minimal Storage (Algorithm 347 [M1])
.B
CACM March, 1969
.A
Singleton, R. C.
.K
sorting, minimal storage sorting, digital computer sorting
.C
5.31
.N
CA690308 JB February 20, 1978 8:48 AM
.X
1175 4 1919
1175 4 1919
1919 4 1919
1919 4 1919
1919 4 1919
1919 4 1919
1919 4 1919
1919 4 1919
1969 4 1919
1969 4 1919
1997 4 1919
2017 4 1919
2041 4 1919
2118 4 1919
2191 4 1919
2191 4 1919
2216 4 1919
2388 4 1919
2388 4 1919
2348 4 1919
2679 4 1919
2679 4 1919
2679 4 1919
2783 4 1919
2784 4 1919
3054 4 1919
3054 4 1919
3054 4 1919
3121 4 1919
3121 4 1919
852 4 1919
864 4 1919
864 4 1919
865 4 1919
1175 5 1919
1919 5 1919
1919 5 1919
1919 5 1919
308 5 1919
309 5 1919
2216 5 1919
74 5 1919
3054 5 1919
3187 5 1919
864 5 1919
864 6 1919
1175 6 1919
1880 6 1919
1919 6 1919
1919 6 1919
1969 6 1919
1969 6 1919
1980 6 1919
1997 6 1919
1997 6 1919
307 6 1919
308 6 1919
309 6 1919
2017 6 1919
2679 6 1919
776 6 1919
.I 1920
.T
F-Test Probabilities (Algorithm 346 [S14])
.B
CACM March, 1969
.A
Morris, J.
.K
F-test, Snedecor F-statistic, Fisher Test, distribution function
.C
5.5
.N
CA690307 JB February 20, 1978 8:50 AM
.X
1157 4 1920
1779 4 1920
1920 4 1920
1920 4 1920
1944 4 1920
1987 4 1920
2548 4 1920
1778 5 1920
1920 5 1920
1920 5 1920
1920 5 1920
714 5 1920
.I 1921
.T
Algol Convolution Procedure Based
Fast Fourier Transform (Algorithm 345 [C6])
.B
CACM March, 1969
.A
Singleton, R. C.
.K
fast Fourier transform, complex Fourier transform,
multivariate Fourier transform, Fourier series,
harmonic analysis, spectral analysis, orthogonal polynomials,
orthogonal transformation, convolution,
auto covariance, autocorrelation, cross-correlation,
digital filtering, permutation
.C
3.5 3.83 5.12 5.14
.N
CA690306 JB February 20, 1978 8:54 AM
.X
1921 5 1921
1921 5 1921
1921 5 1921
.I 1922
.T
Proposed USA Standard (Data Communication Control
Procedures USA Standarad Code Information
Interchange)
.B
CACM March, 1969
.K
data communication, data communication control procedures,
data communication establishment/termination
procedures, data communication message transfer procedures,
data communication error control procedures,
data communication polling/selection procedures, communication,
communication control procedures, communication
establishment/termination procedures, communication
message transfer procedures, communication error
control procedures, communication polling/selection procedures,
link, link control procedures, link establishment/termination
procedures, link message transfer procedures, link error
control procedures, link polling/selection procedures,
data link, data link control procedures, data link establishment/termination
procedures, data link message
transfer procedures, data link error control procedures,
data link polling/selection procedures
.C
3.81 4.49 6.39
.N
CA690305 JB February 20, 1978 9:09 AM
.X
1922 5 1922
1922 5 1922
1922 5 1922
.I 1923
.T
Pseudofiles
.W
approach system interfaces high
level languages using basic input/output support
facilities described. shown technique
can provide potentially inexpensive methods
programs communicate deeply embedded
facilities such command language processors.
.B
CACM March, 1969
.A
Rosin, R. F.
.K
operating systems, interfaces input-output,
high level languages, command language
.C
4.22 4.30 4.31 4.41
.N
CA690304 JB February 20, 1978 9:12 AM
.X
1923 5 1923
1923 5 1923
1923 5 1923
.I 1924
.T
Organizing Matrices Matrix Operations Paged Memory Systems
.W
Matrix representations operations examined
purpose minimizing page faulting
occurring paged memory system. shown
carefully designed matrix algorithms can lead
enormous savings number page faults occurring
only small part total matrix can
main memory one time. Examination addition,
multiplication, inversion algorithms shows
partitioned matrix representation (i.e. one submatrix
partition per page) most cases induced
fewer page faults than row-by-row representation.
number page-pulls required these matrix
manipulation algorithms also studied function
number pages main memory available
algorithm.
.B
CACM March, 1969
.A
McKellar, A. C.
Coffman Jr., E. G.
.K
matrix algorithms, array processing, paging algorithms,
paged memory systems, virtual memory systems,
array storage allocation, storage allocation
.C
4.12 4.39 5.14
.N
CA690303 JB February 20, 1978 9:35 AM
.X
1892 4 1924
1924 4 1924
2095 4 1924
2218 4 1924
2297 4 1924
2374 4 1924
2526 4 1924
2667 4 1924
2668 4 1924
2862 4 1924
2863 4 1924
1728 5 1924
1924 5 1924
1924 5 1924
1924 5 1924
2365 5 1924
2582 5 1924
3152 5 1924
987 6 1924
1751 6 1924
1754 6 1924
1924 6 1924
1924 6 1924
1924 6 1924
2017 6 1924
2130 6 1924
2362 6 1924
2365 6 1924
.I 1925
.T
Concepts Use Contour Map Processing
.W
Generalized techniques whose use can simplify
solution problems relating contour
maps. One these techniques makes use topological
properties contour maps. topology
represented graphical structure which adjacent
contour lines appear connected nodes. Another
generalized technique consists utilizing geometrical
properties determine characteristics
straight lines drawn contour map. Both these
techniques have been applied problem
locating ground track aircraft
elevation readings obtained during flight.
.B
CACM March, 1969
.A
Morse, S. P.
.K
map, contour map, contour lines, topological properties,
geometrical properties, graph contour
map, navigation
.C
3.1
.N
CA690302 JB February 20, 1978 9:41 AM
.X
1925 5 1925
1925 5 1925
1925 5 1925
2287 5 1925
2547 5 1925
3062 5 1925
1326 6 1925
1871 6 1925
1925 6 1925
1925 6 1925
1925 6 1925
.I 1926
.T
Description FORMAT, Text-Processing Program
.W
FORMAT production program which facilitates
editing printing "finished" documents
directly printer relatively small (64k) computer
system. features good performance, totally
free-form input, very flexible formatting capabilities
including up eight columns per page, automatic
capitalization, aids index construction,
minimum nontext items. written entirely
FORTRAN IV.
.B
CACM March, 1969
.A
Berns, G. M.
.K
text processing, indexing, printing, documentation,
text editing, formatting, frequency dictionary,
right justification, vocabulary
.C
3.74 3.75 3.9
.N
CA690301 JB February 20, 1978 9:45 AM
.X
1926 5 1926
1926 5 1926
1926 5 1926
2034 5 1926
984 6 1926
1231 6 1926
1565 6 1926
1852 6 1926
1926 6 1926
1947 6 1926
.I 1927
.T
Information Science Ph.D. Computer Science Program
.W
report contains recommendations sample course
curriculum general area information
organization information system design Ph.D.
Computer Science Program. subject area
first briefly described, followed listing some desirable
graduate-level courses. Suitable bibliographies
appended.
.B
CACM February, 1969
.A
Salton, G.
.K
course curriculum, graduate courses, university
courses,computer science curriculum, information
science, information organization, information retrieval,
data retrieval, language analysis, information
processing
.C
1.52 3.42 3.70
.N
CA690211 JB February 20, 1978 9:50 AM
.X
1720 4 1927
1927 4 1927
1927 4 1927
2147 4 1927
2163 4 1927
2345 4 1927
2478 4 1927
2594 4 1927
2852 4 1927
2899 4 1927
3003 4 1927
3130 4 1927
1659 5 1927
1771 5 1927
1927 5 1927
1927 5 1927
1927 5 1927
2163 5 1927
3003 5 1927
1659 6 1927
1678 6 1927
1720 6 1927
1771 6 1927
1927 6 1927
1927 6 1927
1945 6 1927
2097 6 1927
2147 6 1927
2163 6 1927
2181 6 1927
2187 6 1927
2329 6 1927
2345 6 1927
2367 6 1927
2407 6 1927
2478 6 1927
2479 6 1927
2480 6 1927
2538 6 1927
.I 1928
.T
Exclusive Simulation Activity Digital Networks
.W
technique simulating detailed logic
networks large active digital systems
described. Essential objectives sought improved
ease economy model generation, economy
execution time space, facility handling
simultaneous activities. main results obtained
clear useful separation structural behavioral
model description, reduction manual
tasks converting Boolean logic into structural model,
elimination manual processes achieving
exclusive simulation activity, event-scheduling
technique which does not deteriorate economy
event queue grows length, simulation
procedure which deals effectively any mixture
serial simultaneous activities. passage
time simulated precise, quantitative fashion
systems simulated may combinations synchronous
asynchronous logic. Certain aspects
techniques described may used simulation
network structures other than digital networks.
.B
CACM February, 1969
.A
Ulrich, E. G.
.K
simulation, logical simulation, digital simulation,
large systems simulation, network structures,
scheduling, queuing, simultaneous activities, parallel events
.C
4.22 4.29 6.9
.N
CA690210 JB February 20, 1978 9:58 AM
.X
1885 5 1928
1928 5 1928
1928 5 1928
1928 5 1928
2795 5 1928
1928 6 1928
1928 6 1928
1989 6 1928
2274 6 1928
.I 1929
.T
Images Computers Microfilm Plotters
.W
Digital computers widely used
processing information data all kinds,
including pictorial information contained photographs
other graphical representations. Efficient
conversion facilities putting graphical information
into computer retrieving graphical
form therefore much needed. One most commonly
employed devices obtaining permanent graphical
output digital computers microfilm plotter.
Regrettably, present models have no provision
producing images continuous gray scale "half tones."
note several programming techniques
described obtaining half tone pictures
microfilm plotter under control digital
computer. Illustrative examples several methods given.
.B
CACM February, 1969
.A
Schroeder, M. R.
.K
computer images, half tone pictures, microfilm plotters; processing
.C
3.10 3.15 3.24 4.49
.N
CA690209 JB February 20, 1978 10:06 AM
.X
1929 5 1929
1929 5 1929
1929 5 1929
2142 5 1929
1929 6 1929
2231 6 1929
.I 1930
.T
Extremely Portable Random Number Generator
.W
Extremely portable subroutines sometimes
needed which moderate quality efficiency
suffice. Typically, occurs library functions
(like random number generation core sorting)
which not entirely universal not used
standardized way. literature random number
generators does not seem contain algorithm
meets requirements sort. extremely
portable 8-line FORTRAN program provided which based
important paper Coveyou MacPherson
(1967).Using their methods, Fourier analysis applied
probability function consecutive
n-tuples provided our generator (with n less than
equal 4). While small modulus which must
used maintain portability prevents quality
generator being high, generator
compares well bounds established above mentioned paper.
.B
CACM February, 1969
.A
Kruskal, J. B.
.K
random number generators, random numbers, random
number analysis, random generators, linear sequential
generators, random number program, pseudo random numbers
.C
4.49 5.19 5.5
.N
CA690208 JB February 20, 1978 10:43 AM
.X
1930 5 1930
1930 5 1930
1930 5 1930
2115 5 1930
1691 6 1930
1930 6 1930
.I 1931
.T
Interval Arithmetic Determinant Evaluation
Its Use Testing Chebyshev System
.W
Two recent papers, one Hansen one
Hansen R. R. Smith, have shown Interval
Arithmetic (I.A.) can used effectively bound errors
matrix computations. present paper
method proposed Hasen R. R. Smith compared
straightforward use I.A. determinant
evaluation. Computational results show accuracy
running times can expected using
I.A. determinant evaluation. application using
I.A. determinants program test set
functions see if they form Chebyshev system then presented.
.B
CACM February, 1969
.A
Smith, L. B.
.K
interval arithmetic, range arithmetic, error bounds,
determinant evaluation, Chebyshev system,
mathematical proof computer
.C
5.11 5.13 5.14
.N
CA690207 JB February 20, 1978 10:49 AM
.X
1524 4 1931
1931 4 1931
1931 4 1931
1946 4 1931
2214 4 1931
2544 4 1931
1177 5 1931
1931 5 1931
1931 5 1931
1931 5 1931
311 5 1931
.I 1932
.T
Logarithmic Error Newton's Method Square Root
.W
problem obtaining optimal starting values
calculation square root using
Newton's method considered. has been pointed out
elsewhere if relative error used
measure goodness fit, optimal results not
obtained initial approximation best
fit. shown here if, instead, so-called
logarithmic error used, then best initial
fit optimal both types error. Moreover, use
logarithmic error appears simplify
problem determining optimal initial approximation.
.B
CACM February, 1969
.A
King, R. F.
Phillips, D. L.
.K
square root, Newton's method, relative error, logarithmic
error, best fit, optimal approximation,
maximal error, recurrence relation, integer root, error curve
.C
5.12 5.13
.N
CA690206 JB February 20, 1978 10:55 AM
.X
1440 4 1932
1932 4 1932
1932 4 1932
2094 4 1932
2159 4 1932
962 5 1932
1566 5 1932
1832 5 1932
1932 5 1932
1932 5 1932
1932 5 1932
1999 5 1932
2159 5 1932
962 6 1932
1932 6 1932
1932 6 1932
1932 6 1932
.I 1933
.T
Coding Lehmer Pseudo-random Number Generator
.W
algorithm coding technique presented
quick evaluation Lehmer pseudo-random
number generator modulo 2**31 - 1, prime Mersenne
number produces 2**31 - 2 numbers, p-bit
(greater than 31) computer. computation method
extendible limited problems modular arithmetic.
Prime factorization 2**61 - 2 primitive root
2**61 - 1, next largest prime Mersenne
number, given possible construction pseudo-random
number generator increased cycle length.
.B
CACM February, 1969
.A
Payne, W. H.
Rabung, J. R.
Bogyo, T. P.
.K
pseudo-random number, random number, modular arithmetic,
uniform probability density, uniform frequency
function, simulation, prime factorization, primitive roots
.N
CA690205 JB February 20, 1978 11:07 AM
.X
1933 5 1933
1933 5 1933
1933 5 1933
.I 1934
.T
Arithmetic Expressions Trees
.W
description given tree representing
evaluation arithmetic expression
can drawn such way number accumulators
needed computation can represented
straightforward manner. representation reduces
choice best order computation
specific problem under theory graphs.
algorithm solve problem presented.
.B
CACM February, 1969
.A
Redziejowski, R. R.
.K
arithmetic expression, compiler design, graph theory,
programming, storage minimization, topological
ordering,tree
.C
4.12 5.32
.N
CA690204 JB February 20, 1978 11:11 AM
.X
1807 4 1934
1934 4 1934
2175 4 1934
1551 5 1934
1934 5 1934
1934 5 1934
1934 5 1934
.I 1935
.T
Randomized Binary Search Technique
.W
mathematical model developed mean
variance number trials recover
given document randomly received list files.
search method described binary nature
offers new potential information retrieval systems.
.B
CACM February, 1969
.A
Arora, S. R.
Dent, W. T.
.K
binary pattern, file examination, graph theory, information
retrieval, mathematical model, partitioning,
probabilistic method, random sequencing, search techniques, tree structures
.C
3.74 5.32
.N
CA690203 JB February 20, 1978 11:15 AM
.X
1050 4 1935
1935 4 1935
1935 4 1935
1936 4 1935
2017 4 1935
2032 4 1935
2257 4 1935
2360 4 1935
2451 4 1935
2452 4 1935
1115 5 1935
1935 5 1935
1935 5 1935
1935 5 1935
2451 5 1935
2556 5 1935
2978 5 1935
849 5 1935
830 6 1935
849 6 1935
944 6 1935
1935 6 1935
1935 6 1935
1935 6 1935
1936 6 1935
1936 6 1935
2111 6 1935
.I 1936
.T
Variable Length Tree Structures Having Minimum Average Search Time
.W
Sussenguth suggests paper (1963)
file should organized doubly-chained tree
structure if necessary both search update
frequently. Such structure provides compromise
between fast search/slow update characteristics
binary searching slow search/fast update
characteristics serial searching. His method, however,
contains limiting restriction all
terminal nodes lie same level tree. paper
considers effect relaxing restriction.
First, trees which have property priori
filial set each node well defined studied.
proved coding nodes within each filial
set respect number terminal nodes
reachable each necessary sufficient guarantee
minimum average search time. Then more
general case (that is, entire structure
tree changeable) treated. procedure
developed constructing tree minimum
average search time. simple closed expression
minimum average search time obtained
function number terminal nodes.
storage capacity required implement doubly-chained
tree structure digital computer also
determined. Finally, total cost structure,
using Sussenguth's cost criterion, computed.
shown significant improvements both
average search time total cost can
obtained relaxing Sussenguth's restriction all
terminal nodes lie same level tree.
.B
CACM February, 1969
.A
Patt, Y. N.
.K
information retrieval, file searching, tree structures, double chaining
.C
3.70 3.73 3.74
.N
CA690202 JB February 20, 1978 11:25 AM
.X
1050 4 1936
1935 4 1936
1936 4 1936
2017 4 1936
2032 4 1936
2257 4 1936
2360 4 1936
2451 4 1936
2452 4 1936
1936 5 1936
1936 5 1936
1936 5 1936
2257 5 1936
2360 5 1936
2451 5 1936
2452 5 1936
2556 5 1936
2765 5 1936
849 5 1936
830 6 1936
849 6 1936
849 6 1936
849 6 1936
849 6 1936
944 6 1936
1831 6 1936
1831 6 1936
1935 6 1936
1935 6 1936
1936 6 1936
1936 6 1936
1936 6 1936
1936 6 1936
1936 6 1936
1936 6 1936
1976 6 1936
1976 6 1936
2046 6 1936
2111 6 1936
2198 6 1936
2360 6 1936
2451 6 1936
2452 6 1936
616 6 1936
.I 1937
.T
CODAS: Data Display System
.W
CODAS, Customer Oriented Data System,
user-oriented data retrieval display system.
command language system provides user
easy means specifying data retrieval
display requests. Data displayed tables
graphs produced format ready publication.
paper statements request language
general system design described.
.B
CACM February, 1969
.A
Day, R. H.
Mansfield, M. K.
Ellis, M. E.
.K
data display, information retrieval, graphic display,
command languages, report program generation,
management data processing
.C
3.50 3.51 3.59 3.70 3.75 3.79 4.20 4.29
.N
CA690201 JB February 20, 1978 11:32 AM
.X
1937 5 1937
1937 5 1937
1937 5 1937
2002 5 1937
1767 6 1937
1937 6 1937
.I 1938
.T
Some Criteria Time-Sharing System Performance
.W
Time-sharing systems, defined article,
those multiaccess systems which permit
terminal user utilize essentially full resources
system while sharing its time other
terminal users. each terminal user's ability
utilize full resources system
makes quantitative evaluation time-sharing systems
particularly difficult. Six criteria described
which have been successfully used perform first-level
quantitative time-sharing system performance
evaluation.
.B
CACM January, 1969
.A
Stimler, S.
.K
time-sharing performance criteria, time-sharing
system operation, time-sharing performance analysis
.C
2.40 4.30 4.32 6.20
.N
CA690111 JB February 20, 1978 11:37 AM
.X
1938 5 1938
1938 5 1938
1938 5 1938
2219 5 1938
2344 5 1938
1938 6 1938
1938 6 1938
.I 1939
.T
Directed Random Generation Sentences
.W
problem producing sentences transformational
grammar using random generator
create phrase structure trees input lexical
insertion transformational phases discussed.
purely random generator produce base trees
which blocked transformations,
which frequently too long practical interest.
solution offered form computer
program which allows user constrain direct
generation simple but powerful device
restricted subtrees. program directed
random generator which accepts input subtree
restrictions produces around tree which
satisfies restrictions ready
next phase grammar. underlying linguistic
model Noam Chomsky, presented
Aspects Theory Syntax. program written
FORTRAN IV IBM 360/67 part
unified computer system transformational grammar.
currently being used several partial
grammars English.
.B
CACM January, 1969
.A
Friedman, J.
.K
transformational grammar, natural language syntax, language
processing, sentence generation, computational
linguistics, syntax
.C
3.42
.N
CA690110 JB February 20, 1978 11:44 AM
.X
1030 4 1939
1261 4 1939
1886 4 1939
1939 4 1939
1939 4 1939
1030 5 1939
1939 5 1939
1939 5 1939
1939 5 1939
2767 5 1939
3064 5 1939
678 5 1939
1846 6 1939
1939 6 1939
1939 6 1939
2742 6 1939
2767 6 1939
2936 6 1939
.I 1940
.T
Calculation Polynomial its Derivative
Values Horner Scheme (Algorithm 337 [C1])
.B
CACM January, 1969
.A
Smith, O. K.
.K
function, evaluation, polynomial evaluation,
ALGOL procedure, Horner's scheme
.C
4.22 5.12
.N
CA690109 JB February 20, 1978 11:46 AM
.X
1940 5 1940
1940 5 1940
1940 5 1940
.I 1941
.T
F-Distribution (Algorithm 322 [S14])
.B
CACM January, 1969
.A
Field, J. B. F.
.K
Fisher's F-distribution, Students's t-distribution
.C
5.5
.N
CA690108 JB February 20, 1978 11:48 AM
.X
1941 5 1941
1941 5 1941
1941 5 1941
.I 1942
.T
Finding Solution N Functional Equations
N Unknowns (Algorithm 314 [C5])
.B
CACM January, 1969
.A
Vandergraft, J.
Mesztenyi, C.
.K
functional equations, interpolation, nonlinear equations, secant method
.C
5.13 5.15
.N
CA690107 JB February 20, 1978 11:50 AM
.X
1942 5 1942
1942 5 1942
1942 5 1942
.I 1943
.T
Complete Elliptic Integrals (Algorithm 165 [S21])
.B
CACM January,1969
.A
Farkas, I.
.K
special functions, complete elliptic integral
first kind, complete elliptic integral
second kind
.C
5.12
.N
CA690106 JB February 20, 1978 11:54 AM
.X
1943 5 1943
1943 5 1943
1943 5 1943
.I 1944
.T
Student's t-Distribution (Algorithm 344 [S14])
.B
CACM January, 1969
.A
Levine, D. A.
.K
Student's t-Distribution, t-test, small-sample
statistics, distribution function
.C
5.12 5.5
.N
CA690105 JB February 20, 1978 11:56 AM
.X
1157 4 1944
1779 4 1944
1920 4 1944
1944 4 1944
1944 4 1944
1987 4 1944
1987 4 1944
2548 4 1944
1779 5 1944
1944 5 1944
1944 5 1944
1944 5 1944
1987 5 1944
714 5 1944
1561 6 1944
1581 6 1944
1779 6 1944
1944 6 1944
714 6 1944
.I 1945
.T
Role Programming Ph.D. Computer Science Program
.W
general paper role programming
advanced graduate training discussed.
Subject matter related programming well programming
per se considered. importance
application formalism considered also
need good empirical experimentation. brief
outline sequence courses included, subject
headings have been obtained extensive
bibliography given. bibliography programming references included.
.B
CACM January, 1969
.A
Arden, B. W.
.K
graduate-level programming, graduate programs, course
content, course sequence, graduate curriculum,
programming research topics, programming bibliography
.C
1.3 1.52 4.0
.N
CA690104 JB February 20, 1978 12:00 PM
.X
1068 4 1945
1084 4 1945
1102 4 1945
1142 4 1945
1215 4 1945
1225 4 1945
1225 4 1945
1247 4 1945
1263 4 1945
1350 4 1945
1350 4 1945
1350 4 1945
1379 4 1945
1379 4 1945
1396 4 1945
1396 4 1945
1399 4 1945
1400 4 1945
1453 4 1945
1496 4 1945
1530 4 1945
1531 4 1945
1542 4 1945
1551 4 1945
1553 4 1945
1565 4 1945
1570 4 1945
1612 4 1945
1625 4 1945
1646 4 1945
1659 4 1945
1683 4 1945
1683 4 1945
1693 4 1945
1693 4 1945
1703 4 1945
1705 4 1945
1767 4 1945
1768 4 1945
1768 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1781 4 1945
1787 4 1945
1787 4 1945
1787 4 1945
1787 4 1945
1807 4 1945
1836 4 1945
1836 4 1945
1860 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1945 4 1945
1947 4 1945
1988 4 1945
2015 4 1945
2034 4 1945
2036 4 1945
2060 4 1945
2060 4 1945
2061 4 1945
2061 4 1945
2061 4 1945
2082 4 1945
2091 4 1945
2091 4 1945
2110 4 1945
2126 4 1945
2127 4 1945
2152 4 1945
2179 4 1945
2179 4 1945
2252 4 1945
2314 4 1945
2341 4 1945
2340 4 1945
2356 4 1945
2396 4 1945
2546 4 1945
2546 4 1945
2603 4 1945
2603 4 1945
2650 4 1945
2698 4 1945
2698 4 1945
2698 4 1945
2708 4 1945
2708 4 1945
2708 4 1945
2730 4 1945
2824 4 1945
2982 4 1945
2986 4 1945
3045 4 1945
3045 4 1945
3093 4 1945
3093 4 1945
3094 4 1945
691 4 1945
762 4 1945
949 4 1945
949 4 1945
914 5 1945
915 5 1945
917 5 1945
984 5 1945
989 5 1945
990 5 1945
1012 5 1945
1084 5 1945
1098 5 1945
1122 5 1945
1138 5 1945
1139 5 1945
1141 5 1945
1200 5 1945
1223 5 1945
1265 5 1945
1336 5 1945
1396 5 1945
1455 5 1945
1477 5 1945
1487 5 1945
1491 5 1945
1496 5 1945
1945 5 1945
1945 5 1945
1945 5 1945
483 5 1945
584 5 1945
3003 5 1945
669 5 1945
680 5 1945
763 5 1945
823 5 1945
1659 6 1945
1678 6 1945
1927 6 1945
1945 6 1945
2097 6 1945
2147 6 1945
2163 6 1945
2187 6 1945
2329 6 1945
2345 6 1945
2367 6 1945
2407 6 1945
2478 6 1945
2479 6 1945
2480 6 1945
2538 6 1945
.I 1946
.T
Computing Polynomial Resultants: Bezout's Determinant
vs. Collins' Reduced P.R.S. Algorithm
.W
Algorithms computing resultant two
polynomials several variables, key repetitive
step computation solving systems polynomial
equations elimination, studied. Determining
best algorithm computer implementation depends
upon extent which extraneous factors
introduced, extent propagation errors caused
truncation real coefficients, memory requirements,
computing speed. Preliminary considerations narrow
choice best algorithm Bezout's
determinant Collins' reduced polynomial remainder sequence
(p.r.s.) algorithm. Detailed tests performed
sample problems conclusively show Bezout's determinant
superior all respects except
univariate polynomials, which case Collins' reduced
p.r.s. algorithm somewhat faster. particular
Bezout's determinant proves strikingly superior
numerical accuracy, displaying excellent stability
regard round-off errors. Results tests reported detail.
.B
CACM January, 1969
.A
Ku, S. Y.
Adler, R. J.
.K
resultant algorithm, g.c.d. algorithm, polynomial
resultant, elimination, Bezout's determinant,
Sylvester's determinant, reduced p.r.s. algorithm, Euclidean
algorithm, multivariate polynomial equations
.C
4.40 5.10 5.15 5.41
.N
CA690103 JB February 20, 1978 12:10 PM
.X
1024 4 1946
1051 4 1946
1098 4 1946
1214 4 1946
1380 4 1946
1388 4 1946
1393 4 1946
1396 4 1946
1396 4 1946
1485 4 1946
1487 4 1946
1549 4 1946
1570 4 1946
1878 4 1946
1931 4 1946
1946 4 1946
1946 4 1946
1946 4 1946
1946 4 1946
1946 4 1946
1946 4 1946
1946 4 1946
1946 4 1946
1957 4 1946
2167 4 1946
2168 4 1946
2723 4 1946
2857 4 1946
2857 4 1946
3112 4 1946
902 5 1946
1093 5 1946
1177 5 1946
1393 5 1946
1387 5 1946
1946 5 1946
1946 5 1946
1946 5 1946
360 5 1946
731 5 1946
878 5 1946
.I 1947
.T
Object code Optimization
.W
Methods analyzing control flow data
flow programs during compilation applied
transforming program improve object time efficiency.
Dominance relationships, indicating which
statements necessarily executed before others,
used do global common expression elimination
loop identification. Implementation these other
optimizations OS/360 FORTRAN H described.
.B
CACM January, 1969
.A
Lowry, E. S.
Medlock, C. W.
.K
compilers, data flow analysis, dominance, efficiency,
FORTRAN, graph theory, loop structure, machine
instructions, object code, optimization, redundancy
elimination, register assignment, System/360
.C
4.12 5.24 5.32
.N
CA690102 JB February 20, 1978 12:15 PM
.X
1139 4 1947
1613 4 1947
1625 4 1947
1781 4 1947
1807 4 1947
1807 4 1947
1945 4 1947
1947 4 1947
1947 4 1947
1947 4 1947
1947 4 1947
556 4 1947
799 4 1947
1134 5 1947
1223 5 1947
1248 5 1947
1807 5 1947
1947 5 1947
1947 5 1947
1947 5 1947
399 5 1947
2034 5 1947
2290 5 1947
2579 5 1947
2923 5 1947
2945 5 1947
984 6 1947
1223 6 1947
1231 6 1947
1248 6 1947
1535 6 1947
1551 6 1947
1565 6 1947
1807 6 1947
1807 6 1947
1852 6 1947
1926 6 1947
1947 6 1947
1947 6 1947
1947 6 1947
1947 6 1947
1947 6 1947
1947 6 1947
2704 6 1947
2870 6 1947
.I 1948
.T
Computers Group Theory: Survey
.W
Computers being applied increasingly
diverse range problems group theory.
most important areas application present
coset enumeration, subgroup lattices, automorphism
groups finite groups, character tables, commutator
calculus. Group theory programs range
simple combinatorial numerical programs large
symbol manipulation systems. survey
more important algorithms use described contrasted,
results which have been obtained using
existing programs indicated. extensive bibliography included.
.B
CACM January, 1969
.A
Cannon, J. J.
.K
group theory, coset enumeration, subgroup lattices,
automorphism groups, character tables, commutator
calculus, topology, crystallography, permutation groups,
Abelian groups, discrete mathematics, non-numerical
programming, symbol manipulation, survey
.C
1.3 3.15 5.39
.N
CA690101 JB February 20, 1978 1:27 PM
.X
1567 4 1948
1948 4 1948
1948 4 1948
1391 5 1948
1559 5 1948
1948 5 1948
1948 5 1948
1948 5 1948
.I 1949
.T
Finiteness Assumptions Intellectual Isolation Computer Scientists
.B
CACM December, 1970
.A
Wagner, R. A.
.K
Algol vs. Fortran, finiteness assumptions, intellectual isolation,
integer variable range, memory finiteness, finite word size
.C
2.2 4.22 5.23
.N
CA701215 JB February 9, 1978 2:38 PM
.X
249 4 1949
254 4 1949
272 4 1949
1102 4 1949
1109 4 1949
1140 4 1949
1188 4 1949
1306 4 1949
1464 4 1949
1491 4 1949
1767 4 1949
1781 4 1949
1787 4 1949
1949 4 1949
1949 4 1949
321 4 1949
2059 4 1949
2126 4 1949
435 4 1949
437 4 1949
463 4 1949
483 4 1949
491 4 1949
2732 4 1949
560 4 1949
583 4 1949
3073 4 1949
627 4 1949
631 4 1949
632 4 1949
642 4 1949
644 4 1949
653 4 1949
680 4 1949
761 4 1949
762 4 1949
763 4 1949
123 4 1949
140 4 1949
919 4 1949
989 4 1949
196 5 1949
946 5 1949
1949 5 1949
1949 5 1949
1949 5 1949
.I 1950
.T
Efficient Handling Binary Data
.B
CACM December, 1970
.A
Raduchel, W. J.
.K
binary variables, dummy variables, bit strings, cross-tabulations
.C
4.9
.N
CA701214 JB February 9, 1978 2:40 PM
.X
1950 5 1950
1950 5 1950
1950 5 1950
.I 1951
.T
Estimates Distributions Random Variables
Certain Computer Communications Traffic Models
.W
study multiaccess computer communications has
characterized distributions underlying elementary
model user-computer interactive process. model used
elementary sense many random variables
generally interest computer communications studies can
decomposed into elements model. Data were examined
four operational multiaccess systems, model shown
robust; each variables model has
same distribution independent which four systems being examined.
shown gamma distribution can used
describe discrete variables. Approximations gamma distribution
exponential distribution discussed systems studied.
.B
CACM December 1970
.A
Fuchs, E.
Jackson, P. E.
.K
computer communications, time-sharing,
operating systems, optimization models
.C
3.80 3.81 6.20
.N
CA701212 JB February 9, 1978 2:46 PM
.X
1533 4 1951
1604 4 1951
1951 4 1951
1951 4 1951
2373 4 1951
2667 4 1951
2668 4 1951
1410 5 1951
1604 5 1951
1951 5 1951
1951 5 1951
1951 5 1951
2373 5 1951
2894 5 1951
1410 6 1951
1751 6 1951
1810 6 1951
1951 6 1951
1951 6 1951
2016 6 1951
2374 6 1951
.I 1952
.T
Index Subject Algorithms, 1970
.B
CACM December, 1970
.N
CA701211 JB February 9, 1978 2:50 PM
.X
1952 5 1952
1952 5 1952
1952 5 1952
.I 1953
.T
Exponential Integral Ei(x) (Algorithms 385 $S13))
.B
CACM December, 1970
.A
Redish, K. A.
.K
ANSI Fortran standard
.C
4.0 4.22
.N
CA701210 JB February 9, 1978 3:04 PM
.X
1953 5 1953
1953 5 1953
1953 5 1953
.I 1954
.T
Eigenvalues Eigenvectors Real
Symmetric Matrix (Algorithm 384 $F2))
.B
CACM December, 1970
.A
Stewart, G. W.
.K
real symmetric matrix, eigenvalues, eigenvectors, QR algorithm
.C
5.14
.N
CA701209 JB February 9, 1978 3:08 PM
.X
1954 5 1954
1954 5 1954
1954 5 1954
.I 1955
.T
Characteristic Values Associated Solutions
Mathieu's Differential Equation (Algorithm 352 $S22))
.B
CACM December, 1970
.A
Sale, A. H. J.
.K
Mathieu's differential equation, Mathieu function, characteristic
value, periodic solution, radial solution
.C
5.12
.N
CA701208 JB February 9, 19783:10 PM
.X
1613 4 1955
1646 4 1955
1900 4 1955
1955 4 1955
2025 4 1955
2154 4 1955
2365 4 1955
2506 4 1955
3060 4 1955
987 5 1955
1955 5 1955
1955 5 1955
1955 5 1955
2653 5 1955
2654 5 1955
1955 6 1955
1955 6 1955
.I 1956
.T
Optimum Merging Mass Storage
.W
algorithm displayed which yields merge orders such total
read time, defined sum seek time plus data-transfer
time, minimized sort using mass storage. analysis
parameterized terms ratio seek time time takes
fill available core records, file size units
core lengths; thus can applied any conventional
CPU/mass storage combination. explicit formula total read
time derived, terms parameters, which correlates very
well total read time calculated using optimum merge
orders yielded algorithm. formula involves roots simple
transcendental equation. short table these roots
included. Numerical results graphically displayed wide
range parameters. found normalized read
time optimum merging given hardware configuration proportional
file length times logarithm file length.
.B
CACM December, 1970
.A
Black, N. A.
.K
sorting, merging, optimum merging, mass storage,
sort timing, drum-merging, access time
.C
3.37 4.49 5.31
.N
CA701207 JB February 9, 1978 3:18 PM
.X
1956 4 1956
2017 4 1956
1956 5 1956
1956 5 1956
1956 5 1956
854 5 1956
.I 1957
.T
List Set Generator: Construct Evaluating Set Expressions
.W
list set generator defined algorithms
its use given. list set generator
construct which may added list processing system any
system handles sets. efficiently generates set which
results any expression involving sets set operators.
efficiency derives evaluating expression whole
parallel, rather than evaluating subexpressions
then using those sets arrive final result.
.B
CACM December, 1970
.A
Shapiro, S. C.
.K
set manipulating, list processing, set
generation, sets, lists, file processing
.C
3.73 3.74 4.22
.N
CA701206 JB February 9, 1978 3:23 PM
.X
1024 4 1957
1051 4 1957
1098 4 1957
1214 4 1957
1380 4 1957
1388 4 1957
1393 4 1957
1485 4 1957
1487 4 1957
1549 4 1957
1570 4 1957
1860 4 1957
1878 4 1957
1946 4 1957
1957 4 1957
1957 4 1957
1957 4 1957
2155 4 1957
2151 4 1957
2162 4 1957
2168 4 1957
2723 4 1957
2857 4 1957
3103 4 1957
3112 4 1957
3148 4 1957
1389 5 1957
1860 5 1957
1957 5 1957
1957 5 1957
1957 5 1957
731 5 1957
.I 1958
.T
Improving Round-off Runge-Kutta Computations Gill's Method
.W
Runge-Kutta-Gill scheme common use based incomplete
adaptation floating point operations Gill's method.
improved version reduces round-off error significantly. note
heart scheme presented Fortran language.
then shown improved version method can obtained
addition two Fortran statements. two version
significant improvement. numerical example comparing two included.
.B
CACM December, 1970
.A
Thompson, R. J.
.K
Runge-Kutta methods, ordinary differential
equations, round-off error, error analysis
.C
5.11 5.17
.N
CA701205 JB February 9, 1978 3:40 PM
.X
1958 5 1958
1958 5 1958
1958 5 1958
.I 1959
.T
Interrupt Based Organization Management Information Systems
.W
programming structure, language constructs, supervisory system
organization proposed
design coding large shared data base systems.
bases organization generalized interrupt structure
newly introduced concept "file tagging," which
process associating program structures interrupt generating
conditions items data base. algorithm resolving
conflicts which arise scheduling interrupt processing routines
presented. DPL, programming language supervisory
system which these concepts implemented, used illustrated
new organization which proposed management information systems.
.B
CACM December, 1970
.A
Morgan, H. L.
.K
management information systems, integrated data processing,
supervisors, interrupts monitoring systems, supervisory
systems, interrupt scheduling, parallel processing
.C
3.51 4.22 4.32
.N
CA701204 JB February 9, 1978 3:46 PM
.X
1959 4 1959
1135 5 1959
1959 5 1959
1959 5 1959
1959 5 1959
2182 5 1959
2534 5 1959
830 6 1959
1787 6 1959
1959 6 1959
1959 6 1959
1973 6 1959
2111 6 1959
2182 6 1959
799 6 1959
.I 1960
.T
Process Management Resource Sharing Multiaccess System ESOPE
.W
main design principles multiaccess system ESOPE described.
Emphasis placed basic ideas underlying design rather
than implementation details. main features system
include ability given any user schedule his own parallel
processes using system primitive operations, file-memory relationship,
allocation-scheduling policy, which dynamically
takes into account recent information user behavior.
.B
CACM December, 1970
.A
Betourne, C.
Boulenger, J.
Ferrie, J.
Kaiser, C.
Krakowiak, S.
Mossiere, J.
.K
time-sharing, multiprogramming, process scheduling, resource allocation
.C
4.32
.N
CA701203 JB February 9, 1978 4:02 PM
.X
1458 4 1960
1523 4 1960
1603 4 1960
1698 4 1960
1747 4 1960
1748 4 1960
1828 4 1960
1854 4 1960
1854 4 1960
1877 4 1960
1877 4 1960
1960 4 1960
1960 4 1960
1960 4 1960
2150 4 1960
2317 4 1960
2319 4 1960
2377 4 1960
2377 4 1960
2378 4 1960
2342 4 1960
2376 4 1960
2379 4 1960
2424 4 1960
2482 4 1960
2497 4 1960
2558 4 1960
2618 4 1960
2625 4 1960
2632 4 1960
2632 4 1960
2704 4 1960
2723 4 1960
2738 4 1960
2740 4 1960
2741 4 1960
2840 4 1960
2867 4 1960
2941 4 1960
3105 4 1960
3144 4 1960
3184 4 1960
1471 5 1960
1749 5 1960
1854 5 1960
1960 5 1960
1960 5 1960
1960 5 1960
2376 5 1960
1198 6 1960
1749 6 1960
1960 6 1960
.I 1961
.T
Efficient Search Algorithm Find Elementary Circuits Graph
.W
theoretically most efficient search algorithm presented
which uses exhaustive search find all elementary
circuits graph. algorithm can easily modified find all
elementary circuits particular attribute such
length. rigorous proof algorithm given well example
its application. Empirical bounds presented relating
speed algorithm number vertices number
arcs. speed also related number circuits
graph give relation between speed complexity.
Extensions undirected s-graphs discussed.
.B
CACM December, 1970
.A
Tiernan, J. C.
.K
algorithm, graph theory, circuit search
algorithm, path search algorithm, searching
.C
3.74 5.32
.N
CA701202 JB February 9, 1978 4:12 PM
.X
1847 4 1961
1961 4 1961
1961 4 1961
1961 4 1961
2052 4 1961
2177 4 1961
2763 4 1961
1369 5 1961
1504 5 1961
1847 5 1961
1961 5 1961
1961 5 1961
1961 5 1961
2430 5 1961
1961 6 1961
.I 1962
.T
GROOVE-A Program Compose, Store, Edit Functions Time
.W
program which makes possible creating, storing, reproducing,
editing functions time described. functions typical
those generated human beings. Multiple functions (up 14)
produced long periods time (up several hours)
sufficiently high sampling rates describe fast human reactions
(up 200 samples per second). functions can used
variety purposes such control machine tools sound
synthesizers anything person normally controls. program
operates small computer (DDP-224). Functions stored
disk file. Functions may created real-time human inputs
computer which can interact already stored functions
computed functions. Real-time feedback process being
controlled important link system. environment
effective man-machine interaction has been carefully nurtured.
.B
CACM December, 1970
.A
Mathews, M. V.
Moore, F. R.
.K
computer music, music, real-time control, digital control, time
functions, interactive software, hybrid systems, conductor program
.C
3.44 3.8 7.3
.N
CA701201 JB February 9, 1978 4:19 PM
.X
1962 5 1962
1962 5 1962
1962 5 1962
.I 1963
.T
Condition Numbers PEI Matrices
.B
CACM November, 1970
.A
Rokne, J.
.K
matrices, condition numbers, Pei matrices, eigenvectors, eigenvalues
.C
5.14
.N
CA701116 JB February 9, 1978 4:21 PM
.X
1963 4 1963
1963 4 1963
1963 4 1963
909 5 1963
1963 5 1963
1963 5 1963
1963 5 1963
475 5 1963
750 5 1963
.I 1964
.T
Comment Working Set Model Program Behavior
.B
CACM November, 1970
.A
Bernstein, A.
.K
demand paging, working set, paging rate, multiprogramming
.C
4.30 4.32
.N
CA701115 JB February 9, 1978 4:23 PM
.X
1964 5 1964
1964 5 1964
1964 5 1964
.I 1965
.T
Correction "Logical" Arithmetic Computers
Two's Complement Binary Arithmetic
.B
CACM November, 1970
.A
Ehrman, J. R.
.K
binary arithmetic, unsigned operand arithmetic, maximum
significance arithmetic, full-precision arithmetic
.C
3.15 5.11
.N
CA701114 JB February 9, 1978 4:25 PM
.X
1965 4 1965
2200 4 1965
1718 5 1965
1965 5 1965
1965 5 1965
1965 5 1965
.I 1966
.T
Generalized Method Generating Argument/Function Values
.B
CACM November, 1970
.A
Wilson, W. J.
.K
mapping function, decision hierarchy, table look-up
.C
4.9 5.39
.N
CA701113 JB February 9, 1978 4:26 PM
.X
1966 5 1966
1966 5 1966
1966 5 1966
.I 1967
.T
Improved Algorithm Produce Complex Primes (Algorithm 401 $A1))
.B
CACM November, 1970
.A
Bratley, P.
.K
number theory, prime numbers, complex numbers
.C
5.39
.N
CA701112 JB February 9, 1978 4:28 PM
.X
1841 4 1967
1967 4 1967
1967 4 1967
2120 4 1967
2927 4 1967
1539 5 1967
1967 5 1967
1967 5 1967
1967 5 1967
2120 5 1967
.I 1968
.T
Eigenvalues Eigenvectors Real
General Matrix (Algorithm 343 $F1))
.B
CACM November, 1970
.A
Knight, W.
Mersereau, W.
.K
eigenvalues, eigenvectors, latent roots, Householder's
method, QR algorithm, inverse iteration
.C
5.14
.N
CA701111 JB February 9, 1978 4:30 PM
.X
1968 4 1968
1968 4 1968
2099 4 1968
2335 4 1968
1662 5 1968
1968 5 1968
1968 5 1968
1968 5 1968
2099 5 1968
.I 1969
.T
Increasing Efficiency Quicksort (Algorithm 402 $M1))
.B
CACM November, 1970
.A
Van Emden, M. H.
.K
sorting, quicksort
.C
5.31 3.73 5.6 4.49
.N
CA701110 JB February 9, 1978 4:32 PM
.X
1175 4 1969
1919 4 1969
1919 4 1969
1969 4 1969
1969 4 1969
1997 4 1969
2118 4 1969
2191 4 1969
2388 4 1969
2348 4 1969
2679 4 1969
2679 4 1969
3054 4 1969
3054 4 1969
3121 4 1969
1175 5 1969
1969 5 1969
1969 5 1969
1969 5 1969
1997 5 1969
308 5 1969
2216 5 1969
2679 5 1969
3054 5 1969
864 6 1969
970 6 1969
1175 6 1969
1175 6 1969
1190 6 1969
1228 6 1969
1880 6 1969
1919 6 1969
1919 6 1969
1969 6 1969
1969 6 1969
1969 6 1969
1969 6 1969
1980 6 1969
1997 6 1969
1997 6 1969
1997 6 1969
307 6 1969
308 6 1969
308 6 1969
308 6 1969
309 6 1969
2017 6 1969
2042 6 1969
2679 6 1969
3187 6 1969
507 6 1969
716 6 1969
776 6 1969
783 6 1969
.I 1970
.T
Unrecorded Magnetic Tape Information Interchange (9 Track-200
800 CPI, NRZI 1600 CPI, PE)* (Proposed American National Standard)
.B
CACM November, 1970
.K
input-output, magnetic tape, information interchange,
measurement, instrumentation, phase encoded recording
.C
2.49 6.35
.N
CA701108 JB February 9, 1978 4:42 PM
.X
1970 5 1970
1970 5 1970
1970 5 1970
.I 1971
.T
Recorded Magnetic Tape Information Interchange (1600
CPI, Phase Encoded)* (Proposed American National Standard)
.B
CACM November, 1970
.K
input-output, magnetic tape, information interchange,
measurement, instrumentation, phase encoded recording
.C
2.49 6.35
.N
CA701107 JB February 9, 1978 4:49 PM
.X
1971 5 1971
1971 5 1971
1971 5 1971
.I 1972
.T
Nonrecursive List Compacting Algorithm
.W
simple nonrecursive list structure compacting scheme garbage
collector suitable both compact LISP-like list structures presented.
algorithm avoids need recursion using partial structure
built up keep track those lists have been copied.
.B
CACM November, 1970
.A
Cheney, C. J.
.K
list compacting, garbage collection, compact list, LISP
.C
4.19 4.49
.N
CA701106 JB February 9, 1978 4:54 PM
.X
1972 4 1972
1972 4 1972
2156 4 1972
2168 4 1972
2249 4 1972
2438 4 1972
2723 4 1972
2736 4 1972
2736 4 1972
2833 4 1972
2855 4 1972
3074 4 1972
3074 4 1972
3112 4 1972
1826 5 1972
1853 5 1972
1972 5 1972
1972 5 1972
1972 5 1972
2156 5 1972
2361 5 1972
2513 5 1972
2736 5 1972
2855 5 1972
3074 5 1972
3106 5 1972
3112 5 1972
106 6 1972
1380 6 1972
1549 6 1972
1549 6 1972
1549 6 1972
1626 6 1972
1626 6 1972
1826 6 1972
1826 6 1972
1826 6 1972
1826 6 1972
1826 6 1972
210 6 1972
210 6 1972
1853 6 1972
1853 6 1972
1972 6 1972
1972 6 1972
1972 6 1972
1972 6 1972
1972 6 1972
1972 6 1972
1972 6 1972
1972 6 1972
2438 6 1972
2513 6 1972
2665 6 1972
2723 6 1972
2723 6 1972
2736 6 1972
2766 6 1972
2766 6 1972
2833 6 1972
2833 6 1972
2838 6 1972
2855 6 1972
2954 6 1972
2998 6 1972
2998 6 1972
731 6 1972
.I 1973
.T
Linear Quotient Hash Code
.W
new method hash coding presented
shown possess desirable attributes. Specifically, algorithm
simple, efficient, exhaustive, while needing little
time per probe using few probes per lookup. Performance
data implementation hints also given.
.B
CACM November, 1970
.A
Bell, J. R.
Kaman, C. H.
.K
hashing, hash code, scatter storage, calculated
address, search, table, lookup, symbol table, keys
.C
3.74 4.9
.N
CA701105 JB February 10, 1978 8:33 AM
.X
1676 4 1973
1682 4 1973
1728 4 1973
1860 4 1973
1860 4 1973
1973 4 1973
1973 4 1973
1973 4 1973
1973 4 1973
1992 4 1973
1992 4 1973
2018 4 1973
2018 4 1973
2018 4 1973
2032 4 1973
2033 4 1973
2033 4 1973
2107 4 1973
2107 4 1973
2109 4 1973
2109 4 1973
2138 4 1973
2203 4 1973
2203 4 1973
2203 4 1973
2203 4 1973
2251 4 1973
2251 4 1973
2251 4 1973
2251 4 1973
2359 4 1973
2524 4 1973
2530 4 1973
2537 4 1973
2543 4 1973
2543 4 1973
2543 4 1973
2543 4 1973
2552 4 1973
2559 4 1973
2559 4 1973
2573 4 1973
2573 4 1973
2770 4 1973
2770 4 1973
2974 4 1973
2991 4 1973
2991 4 1973
3053 4 1973
3053 4 1973
3053 4 1973
3083 4 1973
1785 5 1973
1786 5 1973
1973 5 1973
1973 5 1973
1973 5 1973
2107 5 1973
2109 5 1973
2251 5 1973
2534 5 1973
2543 5 1973
2559 5 1973
2770 5 1973
3053 5 1973
3083 5 1973
830 6 1973
1328 6 1973
1329 6 1973
1785 6 1973
1785 6 1973
1785 6 1973
1785 6 1973
1786 6 1973
1786 6 1973
1786 6 1973
1787 6 1973
1869 6 1973
1959 6 1973
1973 6 1973
1973 6 1973
1973 6 1973
1973 6 1973
1973 6 1973
1973 6 1973
1973 6 1973
1992 6 1973
1992 6 1973
332 6 1973
2018 6 1973
2018 6 1973
2107 6 1973
2107 6 1973
2107 6 1973
2107 6 1973
2107 6 1973
2109 6 1973
2109 6 1973
2109 6 1973
2109 6 1973
2111 6 1973
2182 6 1973
2412 6 1973
2543 6 1973
2543 6 1973
2552 6 1973
2673 6 1973
2673 6 1973
2707 6 1973
2770 6 1973
799 6 1973
.I 1974
.T
NEATER2: PL/I Source Statement Reformatter
.W
NEATER2 accepts PL/I source program operates produce
reformatted version. LOGICAL mode, NEATER2 indicates
logical structure source program indentation
pattern its output. Logic errors discovered through NEATER2
logical analysis discovered much more economically than possible
through compilation trial runs. number options
available give user full control over output format
maximize utility NEATER2 aid during early
stages development PL/I source deck. One option, USAGE, causes
NEATER2 insert into each logical unit coding statement
which case number times each one executed recorded
during execution. feature expected provide
major aid optimization PL/I programs.
.B
CACM November, 1970
.A
Conrow, K.
Smith, R. G.
.K
logical analysis PL/I source, reformatting PL/I
source, documentation aid, execution time usage data
.C
1.52 4.12 4.19 4.42
.N
CA701104 JB February 10, 1978 8:40 AM
.X
1974 5 1974
1974 5 1974
1974 5 1974
2971 5 1974
1835 6 1974
1974 6 1974
2534 6 1974
.I 1975
.T
Multiple-Precision Division Algorithm
.W
generalized division algorithm use positive integral operands
presented. Depending upon algebraic relationship first
two ciphers divisor, one most two adjustments original
divisor dividend must performed before division operation can
initiated. uniqueness method cause each trial cipher
quotient either equal one greater than its final replacement.
.B
CACM November, 1970
.A
Mifsud, C. J.
.K
multiple-precision, division, adjustment, generalize
.C
3.15 4.0 5.1
.N
CA701103 JB February 10, 1978 8:45 AM
.X
1258 4 1975
1292 4 1975
1497 4 1975
1497 4 1975
1593 4 1975
1975 4 1975
1975 4 1975
1975 4 1975
2605 4 1975
1026 5 1975
1292 5 1975
1497 5 1975
1975 5 1975
1975 5 1975
1975 5 1975
2432 5 1975
1975 6 1975
.I 1976
.T
Multi-attribute Retrieval Combined Indexes
.W
paper file organization scheme designed
replace use popular secondary index filing scheme
(or inverted files secondary key fields) described.
Through use redundancy storing
keys (or access numbers records) satisfy different combinations
secondary index values "buckets," possible retrieve
all keys satisfying any input query derived subset
fields single access index file, although each bucket may
used many combinations values combination
buckets may required given query. method which, its
degenerate case, becomes conventional secondary index filing
scheme works similarly but has following advantages: (1) elimination
multiple accesses many cases; (2) elimination
false drops; (3) elimination computer time perform intersection
key sets each qualified one secondary index field
only; (4) avoidance long strings keys index
field appearing query has very few possible values. Redundancy, some
cases, same secondary indexing method. general case,
trade-off between number accesses query redundancy exists.
.B
CACM November, 1970
.A
Lum, V. Y.
.K
file organization, secondary index files, inverted files, information
retrieval, data management, access method, secondary
keys, storage buckets, rapid retrieval, balanced filing scheme, elimination
false drops, combining indexes, query, multi-attribute retrieval
.C
3.73 3.74 3.79
.N
CA701102 JB February 10, 1978 9:00 AM
.X
1976 4 1976
1271 5 1976
1976 5 1976
1976 5 1976
1976 5 1976
2140 5 1976
2452 5 1976
2765 5 1976
2901 5 1976
3134 5 1976
849 6 1976
1936 6 1976
1936 6 1976
1976 6 1976
1976 6 1976
1976 6 1976
1976 6 1976
1976 6 1976
2046 6 1976
2046 6 1976
2160 6 1976
2198 6 1976
2451 6 1976
2452 6 1976
2524 6 1976
2715 6 1976
2990 6 1976
616 6 1976
.I 1977
.T
Interactive Display Approximation Linear Programming
.W
interactive program
graphical display has been developed approximation
data means linear combination functions (including
splines) selected user. coefficients approximation
determined linear programming so minimize error
either L1 L-infinity norm. Auxiliary conditions such
monotonicity convexity approximation can also imposed.
interactive system described several examples its use given.
.B
CACM November, 1970
.A
LaFata, P.
Rosen, J. B.
.K
approximation, data fitting, functional approximation, linear
programming, interactive graphical display, spline functions
.C
5.13 5.41
.N
CA701101 JB February 10, 1978 9:06 AM
.X
1977 5 1977
1977 5 1977
1977 5 1977
2604 5 1977
1977 6 1977
.I 1978
.T
Use Interactive Graphics Solve Numerical Problems
.W
advent on-line (time-sharing) computer systems
graphic terminals, we have available new dimension
numerical problem solving capabilities. Rather than simply use
new power achieve fast turnaround, we can develop interactive
routines which easy use also take advantage
insight visual capabilities human problem solver. Several
on-line systems general purpose mathematical problem solving
have already been implemented well some special purpose
systems solving problems particular area such ordinary
differential equations. advantage restricting problem
area interface user can greatly simplified.
paper we discuss some advantages accrued such
systems design considerations interactive routines. Furthermore,
implementation on-line least squares data-fitting
program, PEG, presented results obtained empirical
data. conclusion, area future work field discussed.
.B
CACM October, 1970
.A
Smith, L. B.
.K
interactive graphics, computer graphics, graphics, least squares,
data-fitting, interactive computing, on-line mathematics
.C
1.3 3.1 5.13 5.5
.N
CA701012 JB February 10, 1978 9:14 AM
.X
1978 4 1978
1978 4 1978
1978 4 1978
1307 5 1978
1589 5 1978
1813 5 1978
1978 5 1978
1978 5 1978
1978 5 1978
.I 1979
.T
Numerical Inversion Laplace Transforms (Algorithm 368 $D5))
.B
CACM October, 1970
.A
Stehfest, H.
.K
Laplace transform inversion, integral transformations, integral equations
.C
5.15 5.18
.N
CA701011 JB February 10, 1978 9:16 AM
.X
1979 5 1979
1979 5 1979
1979 5 1979
.I 1980
.T
Efficient Algorithm Sorting
Minimal Storage (Algorithm 347 $M1))
.B
CACM October, 1970
.A
Peto, R.
.K
sorting, ranking, minimal storage sorting, digital computer sorting
.C
5.31
.N
CA701010 JB February 10, 1978 9:19 AM
.X
1980 5 1980
1980 5 1980
1980 5 1980
3054 5 1980
1175 6 1980
1880 6 1980
1919 6 1980
1969 6 1980
1980 6 1980
1997 6 1980
307 6 1980
308 6 1980
309 6 1980
2017 6 1980
2679 6 1980
776 6 1980
.I 1981
.T
Normal Curve Integral (Algorithm 304 $S15))
.B
CACM October, 1970
.A
Holmgren, B.
.K
normal curve integral, probability, special functions
.C
5.12 5.5
.N
CA701009 JB February 10, 1978 9:20 AM
.X
1981 5 1981
1981 5 1981
1981 5 1981
.I 1982
.T
Modified Havie Integration (Algorithm 400 $D1))
.B
CACM October, 1970
.A
Wallick, G. C.
.K
numerical integration, Havie integration, Romberg quadrature,
modified Romberg-quadrature, trapezoid values, rectangle values
.C
5.16
.N
CA701008 JB February 10, 1978 9:22 AM
.X
205 4 1982
210 4 1982
214 4 1982
1352 4 1982
1352 4 1982
1982 4 1982
1982 4 1982
1982 4 1982
1982 4 1982
398 4 1982
2040 4 1982
2040 4 1982
2355 4 1982
642 4 1982
669 4 1982
100 4 1982
123 4 1982
164 4 1982
1 5 1982
1273 5 1982
1883 5 1982
1982 5 1982
1982 5 1982
1982 5 1982
324 5 1982
2415 5 1982
1040 6 1982
1982 6 1982
2074 6 1982
.I 1983
.T
Spanning Tree $H) (Algorithm 399)
.B
CACM October, 1970
.A
Seppanen, J. J.
.K
graph, tree, spanning tree
.C
5.32
.N
CA701007 JB February 10, 1978 9:24 AM
.X
1983 5 1983
1983 5 1983
1983 5 1983
.I 1984
.T
Tableless Date Conversion $Z) (Algorithm 398)
.B
CACM October, 1970
.A
Stone, R. A.
.K
date, calendar
.C
5.9
.N
CA701006 JB February 10, 1978 9:25 AM
.X
1984 5 1984
1984 5 1984
1984 5 1984
.I 1985
.T
Integer Programming Problem $H) (Algorithm 397)
.B
CACM October, 1970
.A
Chang, S. K.
Gill, A.
.K
integer programming, change making problem
.C
5.41
.N
CA701005 JB February 10, 1978 9:28 AM
.X
1985 5 1985
1985 5 1985
1985 5 1985
.I 1986
.T
Student's t-Quantiles $S14) (Algorithm 396)
.B
CACM October, 1970
.A
Hill, G. W.
.K
Student's t-statistic, quantile, asymptotic approximation
.C
5.12 5.5
.N
CA701004 JB February 10, 1978 9:29 AM
.X
1986 4 1986
2315 4 1986
1986 5 1986
1986 5 1986
1986 5 1986
1987 5 1986
.I 1987
.T
Student's t-Distribution $S14) (Algorithm 395)
.B
CACM October, 1970
.A
Hill, G. W.
.K
Student's t-statistic, distribution function,
approximation, asymptotic expansion
.C
5.12 5.5
.N
CA701003 JB February 10, 1978 9:31 AM
.X
1157 4 1987
1779 4 1987
1920 4 1987
1944 4 1987
1944 4 1987
1987 4 1987
1987 4 1987
1987 4 1987
1987 4 1987
1987 4 1987
2427 4 1987
2548 4 1987
1561 5 1987
1581 5 1987
1779 5 1987
1944 5 1987
1986 5 1987
1987 5 1987
1987 5 1987
1987 5 1987
2315 5 1987
714 5 1987
1348 6 1987
1834 6 1987
1987 6 1987
1987 6 1987
728 6 1987
.I 1988
.T
Formalism Translator Interactions
.W
formalism presented describing actions
processors programming languages-compilers,
interpreters, assemblers-and their interactions complex systems
such compiler-compilers extendible languages.
formalism here might used define answer such
question "Can one do bootstrapping using meta-compiler
whose metaphase interpretive?" addition algorithm
presented deciding whether not given system can
produced given set component processors.
.B
CACM October, 1970
.A
Earley, J.
.K
translator, compiler, interpreter, bootstrapping,
language processor, compiler-compiler
.C
4.1 5.29
.N
CA701002 JB February 10, 1978 9:36 AM
.X
1159 4 1988
1396 4 1988
1767 4 1988
1781 4 1988
1781 4 1988
1781 4 1988
1787 4 1988
1860 4 1988
1945 4 1988
1988 4 1988
1988 4 1988
1988 4 1988
1988 4 1988
381 4 1988
2252 4 1988
1496 5 1988
1988 5 1988
1988 5 1988
1988 5 1988
381 5 1988
11 5 1988
14 5 1988
.I 1989
.T
Transition Network Grammars Natural Language Analysis
.W
use augmented transition network grammars analysis
natural language sentences described. Structure-building
actions associated arcs grammar network allow reordering,
restructuring, copying constituents necessary produce
deep-structure representations type normally obtained
transformational analysis, conditions arcs allow
powerful selectivity which can rule out meaningless analyses take
advantage semantic information guide parsing.
advantage model natural language analysis discussed
detail illustrated examples. implementation
experimental parsing system transition network grammars briefly
described.
.B
CACM October, 1970
.A
Woods, W. A.
.K
computational linguistics, grammars, grammar models, linguistics,
natural language analysis, parsing, semantic interpretation,
transition network grammars, transformational grammars
.C
3.42 4.12
.N
CA701001 JB February 10, 1978 9:43 AM
.X
1323 4 1989
1358 4 1989
1380 4 1989
1665 4 1989
1781 4 1989
1787 4 1989
1989 4 1989
1989 4 1989
2060 4 1989
2112 4 1989
2179 4 1989
2534 4 1989
2541 4 1989
2698 4 1989
2698 4 1989
2733 4 1989
2820 4 1989
2921 4 1989
3073 4 1989
3155 4 1989
3154 4 1989
1989 5 1989
1989 5 1989
1989 5 1989
2110 5 1989
2581 5 1989
2739 5 1989
2795 5 1989
2921 5 1989
3087 5 1989
799 5 1989
1928 6 1989
1989 6 1989
1989 6 1989
1989 6 1989
1989 6 1989
1989 6 1989
2046 6 1989
2110 6 1989
2274 6 1989
.I 1990
.T
Numerical Constants (Algorithm)
.B
CACM September, 1970
.A
Dunham, C. B.
.K
numerical algorithm, numerical constants
.C
5.10
.N
CA700915 JB February 10, 1978 9:48 AM
.X
1990 5 1990
1990 5 1990
1990 5 1990
.I 1991
.T
Number Automorphisms Singly Generated Automaton
.B
CACM September, 1970
.A
Bavel, Z.
.K
automata, finite automata, singly generated automata, automorphisms,
generators, length state, minimal-length generators, orbit
.C
5.22
.N
CA700914 JB February 10, 1978 9:54 AM
.X
1991 5 1991
1991 5 1991
1991 5 1991
.I 1992
.T
Comment Bell's Quadratic Quotient Method Hash Code Searching
.B
CACM September, 1970
.A
Lamport, L.
.K
hashing, hash code, scatter storage, calculated address,
clustering, search, symbol table, keys, table look-up
.C
3.74 4.9
.N
CA700913 JB February 10, 1978 9:56 AM
.X
1860 4 1992
1973 4 1992
1973 4 1992
1992 4 1992
1992 4 1992
2018 4 1992
2033 4 1992
2107 4 1992
2109 4 1992
2138 4 1992
2203 4 1992
2203 4 1992
2251 4 1992
2251 4 1992
2530 4 1992
2537 4 1992
2543 4 1992
2543 4 1992
2559 4 1992
2573 4 1992
2573 4 1992
2770 4 1992
2991 4 1992
3053 4 1992
3083 4 1992
1786 5 1992
1992 5 1992
1992 5 1992
1992 5 1992
2107 5 1992
2770 5 1992
3053 5 1992
1329 6 1992
1785 6 1992
1786 6 1992
1869 6 1992
1973 6 1992
1973 6 1992
1992 6 1992
1992 6 1992
2018 6 1992
2107 6 1992
2109 6 1992
2109 6 1992
2412 6 1992
2543 6 1992
2673 6 1992
2673 6 1992
2707 6 1992
2770 6 1992
.I 1993
.T
Regular Coulomb Wave Functions (Algorithm 292 $S22))
.B
CACM September, 1970
.A
Cody, W. J.
Paciorek, K. A.
.K
Coulomb wave functions, wave functions, regular Coulomb wave functions
.C
5.12
.N
CA700912 JB February 10, 1978 10:03 AM
.X
1993 5 1993
1993 5 1993
1993 5 1993
.I 1994
.T
Decision Table Translation $H) (Algorithm 394)
.B
CACM September, 1970
.A
Dial, R. B.
.K
Decision table, decision table translation
.C
4.19
.N
CA700911 JB February 10, 1978 10:05 AM
.X
1354 4 1994
1488 4 1994
1994 4 1994
2053 4 1994
2220 4 1994
2273 4 1994
1237 5 1994
1994 5 1994
1994 5 1994
1994 5 1994
.I 1995
.T
Special Series Summation Arbitrary Precision $C6) (Algorithm 393)
.B
CACM September, 1970
.A
Abdali, S. K.
.K
function evaluation, series summation, approximation
.C
5.12 5.13
.N
CA700910 JB February 10, 1978 10:06 AM
.X
1995 5 1995
1995 5 1995
1995 5 1995
.I 1996
.T
Systems Hyperbolic PDE $D3) (Algorithm 392)
.B
CACM September, 1970
.A
Smith, R. R.
McCall, D.
.K
hyperbolic p.d.e., characteristic, extrapolation,
second order p.d.e., quasilinear p. d. e.
.C
5.17
.N
CA700909 JB February 10, 1978 10:08 AM
.X
1996 5 1996
1996 5 1996
1996 5 1996
.I 1997
.T
Increasing Efficiency Quicksort
.W
method presented analysis various generalizations
quicksort. average asymptotic number comparisons needed shown
log^2(n). formula derived expressing terms
probability distribution "bound" partition.
formula assumes particularly simple form generalization already
considered Hoare, namely, choice bound median
random sample. main contribution paper another
generalization quicksort, which uses bounding interval instead
single element bound. generalization turns out
easy implement computer program. numerical approximation
shows = 1.140 version quicksort compared
1.386 original. implies decrease number comparisons
18 percent; actual tests showed 15 percent saving computing time.
.B
CACM September, 1970
.A
van Emden, M. H.
.K
sorting, quicksort, information content, entropy, distribution median
.C
3.73 4.49 5.31 5.6
.N
CA700908 JB February 10, 1978 10:15 AM
.X
1175 4 1997
1919 4 1997
1969 4 1997
1997 4 1997
1997 4 1997
2191 4 1997
2216 4 1997
2388 4 1997
2679 4 1997
2679 4 1997
3054 4 1997
3054 4 1997
3121 4 1997
1969 5 1997
1997 5 1997
1997 5 1997
1997 5 1997
308 5 1997
2216 5 1997
2679 5 1997
3054 5 1997
864 6 1997
970 6 1997
1175 6 1997
1175 6 1997
1190 6 1997
1228 6 1997
1880 6 1997
1919 6 1997
1919 6 1997
1969 6 1997
1969 6 1997
1969 6 1997
1980 6 1997
1997 6 1997
1997 6 1997
1997 6 1997
307 6 1997
308 6 1997
308 6 1997
309 6 1997
2017 6 1997
2042 6 1997
2679 6 1997
3187 6 1997
507 6 1997
716 6 1997
776 6 1997
783 6 1997
.I 1998
.T
Complex Matrix Inversion Versus Real
.W
comparison complex matrix real matrix inversion
made. shown complex inversion can up
twice fast real inversion. Further, rounding error
bound complex inversion one-eighth real,
Gaussian elimination. Using extended inner product
accumulation bound half real system.
.B
CACM September, 1970
.A
Ehrlich, L. W.
.K
complex matrix inversion, matrix inversion, inversion, rounding errors,
rounding error bound, error bounds, complex rounding error bounds
.C
5.14 5.11 5.10
.N
CA700907 JB February 10, 1978 10:19 AM
.X
1998 5 1998
1998 5 1998
1998 5 1998
.I 1999
.T
Optimal Starting Approximations Generating
Square Root Slow No Divide
.W
machine slow no division, preferable
use iterative scheme square root different
classical Heron scheme. problem optimal initial
approximants considered, some optimal polynomial initial
approximations tabulated.
.B
CACM September, 1970
.A
Wilson, M. W.
.K
square root, Newton-Raphson iteration, optimal approximants
.C
5.13
.N
CA700906 JB February 10, 1978 1:33 PM
.X
1832 4 1999
1999 4 1999
2159 4 1999
1932 5 1999
1999 5 1999
1999 5 1999
1999 5 1999
.I 2000
.T
Variation Goodman-Lance Method
Solution Two-Point Boundary Value Problems
.W
recently published method interpolative
solution nonlinear equations improved,
applied give significant variation Goodman-Lance
method solution two-point boundary value problems.
resulting method applies particular numerical solution
optimal control problems Euler-Lagrange formulation.
Quantitative estimates presented which indicate variation
nearly twice fast some problems latter context.
.B
CACM September, 1970
.A
Kimble, G. W.
.K
Goodman-Lance, boundary-value problems,
Newton's method, nonlinear equations,
optimal control, optimization, ordinary differential equations,
secant method, interpolative solution, orthogonal matrices
.C
3.21 5.15 5.17
.N
CA700905 JB February 10, 1978 1:39 PM
.X
2000 5 2000
2000 5 2000
2000 5 2000
.I 2001
.T
Integrating Square Roots
.W
Differential equation (y')^2 = f(y) difficult integrate
numerically because singularity points f(y) vanishes.
simple trick removes singularity.
.B
CACM September, 1970
.A
Moler, C. B.
Solomon, L. P.
.K
quadrature, differential equations
.C
5.16 5.17
.N
CA700904 JB February 10, 1978 1:42 PM
.X
2001 5 2001
2001 5 2001
2001 5 2001
.I 2002
.T
AMESPLOT-A Higher Level Data Plotting Software System
.W
AMESPLOT extensible software system designed make display
data simple, painless, neat possible. system described
hardware-independent has been implemented variety installations,
different manufacturers, having diverse configurations. elements
common all types data plots outlined way which these
elements may combined into system based simple modules demonstrated.
These modules specified independently independent axis
systems other attributes plot. enables plots any
complexity constructed adding replacing modules.
basic syntax AMESPLOT outlined, brief description given
its current utility software, consisting "macros" produce
self-scaled plots, formal tablets text-interspersed subplots,
map coastlines, 3-D plots. system formulate
d way such user could supply minimum information,
should fully integrable user's program written
most conventional higher languages. functions positioning,
locating, scaling (in layout multiple subplots)
axes, labels, all other elements plot handled automatically
software system unless user specifies otherwise. structuring
plots multiple, independent, self-contained subplots described.
Transformation, projection, scaling, rotation, shifting entire plots
subplots action one more simple modules possible. user
may interact freely AMESPLOT three levels, enabling him construct
his own data markers, alphabetic characters, transformations,
produce variety artistic other effects.
.B
CACM September, 1970
.A
Hirschsoln, I.
.K
computer graphics, data potting, data display
syntax, hardware independent software,
display device independent software, plot elements, self-scaled plots,
user interaction, tablet organization, map display, projection
.C
4.13 4.29 4.49 4.9
.N
CA700903 JB February 10, 1978 2:08 PM
.X
2003 4 2002
2002 4 2002
2002 4 2002
2152 4 2002
1767 5 2002
1937 5 2002
2002 5 2002
2002 5 2002
2002 5 2002
.I 2003
.T
Interactive Software System Computers-Aided
Design: Application Circuit Project
.W
characteristics interactive software system, intended constitute
interface between designer computer during various steps
design process, presented. main emphasis given
description features two high level user oriented
languages, operating different levels, which interaction
based. first one IMOL, interactive monitor language,
which designed perform overall control functions
software system; its design criteria provide user
commands which both simple efficient order perform all
functions needed computer-aided circuit design. second one
COIF, circuit oriented graphic language, which designed
describe, generate, manipulate graphic problem specifications;
extension Fortran graphic-type variables,
so designer familiar Fortran need not learn new
language. application computer-aided circuit design
particular examined; other hand, adopted design
criteria provide sufficient generality extend use two languages
different computer-assisted applications.
.B
CACM September, 1970
.A
Bracchi, G.
Somalvico, M.
.K
interaction, graphics, computer graphics, computer-aided design, circuit
design, software system, software organization, language,
monitor language, graphic language, extended Fortran
.C
3.24 3.25 4.13 4.22 4.3
.N
CA700902 JB February 10, 1978 2:20 PM
.X
1853 4 2003
2003 4 2003
2003 4 2003
2003 4 2003
2002 4 2003
2152 4 2003
1710 5 2003
1767 5 2003
2003 5 2003
2003 5 2003
2003 5 2003
2105 5 2003
2230 5 2003
2003 6 2003
.I 2004
.T
Procedure Generation Three-dimensional
Half-toned Computer Graphics Presentations
.W
description given algorithm producing computer generated
half-tone presentations three-dimensional polygonal surface structures.
algorithm achieves significant increase speed computation over
Warnock algorithm developed University Utah implemented
also Coordinated Science Laboratory CDC 1604 computer
system University Illinois. history leading algorithm
development then algorithm itself described.
Results presented compared computer runs achieved
Warnock approach. extension procedure variable position
illumination sources also given.
.B
CACM September, 1970
.A
Bouknight, W. J.
.K
half-tone computer graphics, line-scan image processing,
hidden surface, polygonal surface structure presentations
.C
4.9
.N
CA700901 JB February 10, 1978 2:27 PM
.X
2004 4 2004
2004 4 2004
2687 4 2004
2692 4 2004
1686 5 2004
1915 5 2004
2004 5 2004
2004 5 2004
2004 5 2004
2674 5 2004
2687 5 2004
2828 5 2004
1741 6 2004
1741 6 2004
1751 6 2004
1915 6 2004
2004 6 2004
2004 6 2004
2004 6 2004
2421 6 2004
2687 6 2004
2751 6 2004
2841 6 2004
.I 2005
.T
Proposed Revision American National Standard X3.21-1967,
"Rectangular Holes Twelve-Row Punched Cards"*
.B
CACM August, 1970
.K
tabulating-card, Hollerith card, keypunch, information processing
.C
6.35
.N
CA700816 JB February 10, 1978 2:48 PM
.X
2005 5 2005
2005 5 2005
2005 5 2005
.I 2006
.T
Proposed American National Standard
.B
CACM August, 1970
.A
Kerpelman, C.
.K
State identifiers, State abbreviation, States United States, data
elements, data codes, numeric codes, geopolitical subdivisions, geographic codes
.C
3.35 3.57
.N
CA700815 JB February 10, 1978 3:10 PM
.X
2006 5 2006
2006 5 2006
2006 5 2006
.I 2007
.T
Algorithms Policy/Revised August 1970
.B
CACM August, 1970
.N
CA700814 JB February 10, 1978 3:12 PM
.X
2007 5 2007
2007 5 2007
2007 5 2007
.I 2008
.T
Gaussian Quadrature Formulas (Algorithm 331 $D1))
.B
CACM August, 1970
.A
Wise Jr., W. R.
.K
quadrature, Gaussian quadrature, numerical integration, weight function,
orthogonal polynomials, Newton's method, successive deflation
.C
5.16
.N
CA700813 JB February 10, 1978 3:15 PM
.X
2008 5 2008
2008 5 2008
2008 5 2008
.I 2009
.T
Simpson's Rule Multiple Integration (Algorithm 233 $D1))
.B
CACM August, 1970
.A
Proll, L. G.
.K
numerical integration, multiple integration, Simpson's rule
.C
5.16
.N
CA700812 JB February 10, 1978 3:17 PM
.X
2009 5 2009
2009 5 2009
2009 5 2009
.I 2010
.T
Unitary Symmetric Polynomials $Z) (Algorithm 391)
.B
CACM August, 1970
.A
McKay, J.
.K
symmetric polynomials, unitary symmetric polynomials
.C
5.11 5.30 5.5
.N
CA700811 JB February 10, 1978 3:19 PM
.X
2010 5 2010
2010 5 2010
2010 5 2010
.I 2011
.T
Sequency Ordered Walsh Functions $S22) (Algorithm 390)
.B
CACM August, 1970
.A
Hubner, H.
.K
Walsh functions, sequency ordered Walsh functions
.C
5.12 5.13
.N
CA700810 JB February 10, 1978 3:20 PM
.X
2011 4 2011
2011 5 2011
2011 5 2011
2011 5 2011
2012 5 2011
.I 2012
.T
Binary Ordered Walsh Functions $S22) (Algorithm 389)
.B
CACM August, 1970
.A
Hubner, H.
.K
Walsh functions, binary ordered Walsh functions
.C
5.12 5.13
.N
CA700809 JB February 10, 1978 3:22 PM
.X
2012 4 2012
2011 5 2012
2012 5 2012
2012 5 2012
2012 5 2012
2013 5 2012
2012 6 2012
.I 2013
.T
Rademacher Function $S22) (Algorithm 388)
.B
CACM August, 1970
.A
Hubner, H.
.K
Rademacher function
.C
5.12 5.13
.N
CA700808 JB February 10, 1978 3:23 PM
.X
2012 5 2013
2013 5 2013
2013 5 2013
2013 5 2013
2013 6 2013
.I 2014
.T
Function Minimization Linear Search $E4) (Algorithm 387)
.B
CACM August, 1970
.A
Fielding, K.
.K
function minimization, relative minimum, quasi-Newton method
.C
5.15
.N
CA700807 JB February 10, 1978 3:30 PM
.X
2014 5 2014
2014 5 2014
2014 5 2014
.I 2015
.T
Technique Generating Almost Optimal
Floyd-Evans Productions Precedence Grammars
.W
technique developed generating almost optimal Floyd-Evans productions
given precedence grammar. graph formulation used problem
merging productions. productions generated correspond minimum cost
inverse-arborescence graph. validity technique
demonstrated weak precedence grammars defined here, but productions
mechanically generated any precedence grammar can often modified
such way correct, almost optimal parsers obtained.
.B
CACM August, 1970
.A
Ichbiah, J. D.
Morse, S. P.
.K
translator writing systems, syntactic analysis, Floyd-Evans
productions, precedence grammars, translator optimization,
merger algorithm, minimum cost inverse-arborescence, graph theory
.C
4.12 5.23 5.32
.N
CA700806 JB February 10, 19783:38 PM
.X
1379 4 2015
1665 4 2015
1693 4 2015
1768 4 2015
1781 4 2015
1787 4 2015
1824 4 2015
1825 4 2015
1836 4 2015
1836 4 2015
1861 4 2015
1945 4 2015
2015 4 2015
2015 4 2015
2060 4 2015
2061 4 2015
2091 4 2015
2110 4 2015
2127 4 2015
2179 4 2015
2187 4 2015
2317 4 2015
2545 4 2015
2546 4 2015
2698 4 2015
2698 4 2015
2708 4 2015
2733 4 2015
3045 4 2015
1477 5 2015
1781 5 2015
2015 5 2015
2015 5 2015
2015 5 2015
2179 5 2015
2423 5 2015
1337 6 2015
1477 6 2015
1491 6 2015
1825 6 2015
2015 6 2015
2015 6 2015
2110 6 2015
3184 6 2015
.I 2016
.T
Instrumentation Multics
.W
array measuring tools devised aid implementation prototype
computer utility discussed. These tools include special hardware
clocks data channels, general purpose programmed probing
recording tools, specialized measurement facilities. Some
particular measurements interest system which combines demand
paging multiprogramming described detail. appropriate,
insight into effectiveness (or lack there of) individual tools provided.
.B
CACM August, 1970
.A
Gintell, J. W.
Saltzer, J. H.
.K
instrumentation, performance measurement,
multiprogramming systems, measuring tools, system analysis, Multics,
metering, event tracing, demand paging, script driven
measurement
.C
2.44 4.32 4.39 4.42
.N
CA700805 JB February 10, 1978 3:43 PM
.X
2016 5 2016
2016 5 2016
2016 5 2016
2193 5 2016
2319 5 2016
2894 5 2016
1408 6 2016
1719 6 2016
1749 6 2016
1751 6 2016
1951 6 2016
2016 6 2016
2016 6 2016
2016 6 2016
2017 6 2016
2080 6 2016
2188 6 2016
2203 6 2016
2204 6 2016
3186 6 2016
.I 2017
.T
Sorting Paging Environment
.W
sorting study part extensive measurement project
undertaken M44/44X, experimental paging system which
conceived implemented IBM Research order explore
virtual machine concept. study concerned implementation
sorting procedures context dynamic paging
environment characteristic virtual memory machines. Descriptions
experimental sort programs analysis performance
measurement results obtained them presented. insight gained
experimental effort used arrive set
broad guidelines writing sort programs paging environment.
.B
CACM August, 1970
.A
Brawn, B. S.
Gustavson, G.
Mankin, E. S.
.K
sorting, merging, virtual machines, paging systems, dynamic
storage allocation, measurement systems program behavior,
performance evaluation, memory management
.C
4.32 4.49 4.9 5.31
.N
CA700804 JB February 10, 1978 3:51 PM
.X
1050 4 2017
1117 4 2017
1117 4 2017
1175 4 2017
1919 4 2017
1935 4 2017
1936 4 2017
1956 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2017 4 2017
2032 4 2017
2041 4 2017
2146 4 2017
2146 4 2017
2146 4 2017
2216 4 2017
2257 4 2017
2360 4 2017
2451 4 2017
2452 4 2017
677 4 2017
851 4 2017
851 4 2017
860 4 2017
861 4 2017
2017 5 2017
2017 5 2017
2017 5 2017
2319 5 2017
2582 5 2017
2669 5 2017
3054 5 2017
849 5 2017
850 5 2017
851 5 2017
852 5 2017
853 5 2017
854 5 2017
855 5 2017
856 5 2017
858 5 2017
857 5 2017
859 5 2017
860 5 2017
862 5 2017
863 5 2017
864 5 2017
865 5 2017
861 5 2017
866 5 2017
1175 6 2017
1408 6 2017
1719 6 2017
1749 6 2017
1751 6 2017
1751 6 2017
1751 6 2017
1880 6 2017
1901 6 2017
1919 6 2017
1924 6 2017
1969 6 2017
1980 6 2017
1997 6 2017
307 6 2017
308 6 2017
309 6 2017
2016 6 2017
2017 6 2017
2017 6 2017
2017 6 2017
2017 6 2017
2080 6 2017
2130 6 2017
2188 6 2017
2203 6 2017
2204 6 2017
2358 6 2017
2679 6 2017
776 6 2017
.I 2018
.T
Full Table Quadratic Searching Scatter Storage
.W
quadratic residue search method hash tables avoids much
clustering experienced linear search method. simple
quadratic search only accesses half table. has been shown
length table prime form 4n+3, n
integer, whole table may accessed two quadratic
searches plus separate access original entry point. search
method presented which computationally simple, has all advantages
quadratic search, yet accesses all table one sweep.
.B
CACM August, 1970
.A
Day, A. C.
.K
quadratic residue, search method, hash tables, scatter storage,
dictionary look-up, quadratic search, searching, hashing,
hash code, clustering, collisions
.C
3.7 3.73 3.74
.N
CA700803 JB February 10, 1978 3:57 PM
.X
1676 4 2018
1682 4 2018
1728 4 2018
1860 4 2018
1860 4 2018
1973 4 2018
1973 4 2018
1973 4 2018
1992 4 2018
2018 4 2018
2018 4 2018
2018 4 2018
2032 4 2018
2033 4 2018
2033 4 2018
2107 4 2018
2107 4 2018
2109 4 2018
2109 4 2018
2203 4 2018
2203 4 2018
2203 4 2018
2251 4 2018
2251 4 2018
2251 4 2018
2359 4 2018
2524 4 2018
2543 4 2018
2543 4 2018
2543 4 2018
2552 4 2018
2559 4 2018
2573 4 2018
2770 4 2018
2770 4 2018
2974 4 2018
2991 4 2018
3053 4 2018
3053 4 2018
1785 5 2018
1786 5 2018
2018 5 2018
2018 5 2018
2018 5 2018
2109 5 2018
2251 5 2018
2573 5 2018
2770 5 2018
1785 6 2018
1786 6 2018
1786 6 2018
1786 6 2018
1869 6 2018
1973 6 2018
1973 6 2018
1992 6 2018
2018 6 2018
2018 6 2018
2018 6 2018
2107 6 2018
2107 6 2018
2109 6 2018
2109 6 2018
2673 6 2018
.I 2019
.T
Normalization Techniques Hand printed Numerals
.W
Family pattern standardization
techniques based geometrical projection applied file
digitized hand printed numerals obtained sales clerks.
principle involves transforming quadrilateral specified terms
convex hull each pattern into square. amount
overlap within each class characters versus amount between classes
used evaluate degree normalization achieved respect other
published methods including size shear normalization through moments.
.B
CACM August, 1970
.A
Nagy, G.
Tuong, N.
.K
pattern recognition, character recognition, normalization,
projective transformation, central projection, hand
printed characters, handwriting, linear transformation,
size normalization, mapping, pattern preprocessor
.C
3.63 5.14
.N
CA700802 JB February 10, 1978 4:03 PM
.X
2019 5 2019
2019 5 2019
2019 5 2019
.I 2020
.T
Allocation Computer Resources-Is Pricing Answer?
.W
widespread use complex third generation computing systems has led
much broader concern means which resources these systems
allocated among user community. One means suggested
more more frequently pricing procedure.
paper manner which one would like allocate computing resources
considered, then extent which pricing mechanism fits mold
discussed. Inasmuch pricing must serve rationing mechanism
times, consideration given means which prices can adjusted
flexibly order make dynamic allocation resources. Consideration
also given means which users can insulated harmful
effects frequent price fluctuations. Although subject pricing has
been given lot attention recently, number misconceptions
persist its purpose its operation. attempt made clarify
some these misunderstandings highlight advantages
disadvantages highlight advantages disadvantages pricing. Two
illustrative pricing systems also discussed order demonstrate
applicability pricing quite different environments.
.B
CACM August, 1970
.A
Nielsen, N. R.
.K
allocation mechanisms, charging, computer pricing,
costing, flexible pricing, pricing, priority charges,
resource allocation, user motivation
.C
1.3 2.4
.N
CA700801 JB February 10, 1978 4:13 PM
.X
2020 4 2020
1735 5 2020
2020 5 2020
2020 5 2020
2020 5 2020
2479 5 2020
2020 6 2020
.I 2021
.T
Comment Axiomatic Approaches Programming
.B
CACM July, 1970
.A
Hunt, B.R.
.K
axiomatic method, proofs programs,
homomorphic structure programming
.C
4.0 4.21 4.22 5.20 5.21 5.23 5.24
.N
CA700716 JB February 10, 1978 4:15 PM
.X
2021 4 2021
2222 4 2021
2227 4 2021
2315 4 2021
2326 4 2021
2470 4 2021
2732 4 2021
2865 4 2021
2896 4 2021
2943 4 2021
3014 4 2021
3068 4 2021
3077 4 2021
3143 4 2021
1834 5 2021
2021 5 2021
2021 5 2021
2021 5 2021
.I 2022
.T
Note Anomaly Paging
.B
CACM July, 1970
.A
Pomeranz,J. E.
.K
paging machines, demand paging, replacement algorithm
.C
4.30
.N
CA700715 JB February 10, 1978 4:17 PM
.X
2022 4 2022
2085 4 2022
3006 4 2022
1884 5 2022
2022 5 2022
2022 5 2022
2022 5 2022
.I 2023
.T
Note Data Base Deadlocks
.B
CACM July, 1970
.A
Baecker, H. D.
.K
data base, synchronization, locking, deadlock, reference count
.C
3.73
.N
CA700714 JB February 10, 1978 4:18 PM
.X
1050 4 2023
1393 4 2023
1549 4 2023
2023 4 2023
2023 4 2023
2168 4 2023
3112 4 2023
627 4 2023
106 5 2023
1878 5 2023
2023 5 2023
2023 5 2023
2023 5 2023
.I 2024
.T
Comments Paper Lowe
.B
CACM July, 1970
.A
Sattley, K.
Millstein, R.
.K
automatic segmentation, program connectivity
.C
5.24 5.32
.N
CA700713 JB February 10, 1978 4:20 PM
.X
2024 5 2024
2024 5 2024
2024 5 2024
.I 2025
.T
Student's t-Distribution; Jacobi Polynomials;
Modified Romberg Quadrature;
Factorial Analysis Variance; (Algorithms 332,344,351,359)
.B
CACM July, 1970
.A
Sale, A. H. J.
.K
Fortran standards
.C
4.0 4.22
.N
CA700712 JB February 10, 1978 4:26 PM
.X
1613 4 2025
1646 4 2025
1900 4 2025
1955 4 2025
2025 4 2025
2154 4 2025
2365 4 2025
2506 4 2025
3060 4 2025
987 5 2025
2025 5 2025
2025 5 2025
2025 5 2025
.I 2026
.T
Exponential Integral (Algorithm 385 $S13))
.B
CACM July, 1970
.A
Ng, E. W.
.N
CA700711 JB February 10, 1978 4:27 PM
.X
2026 5 2026
2026 5 2026
2026 5 2026
.I 2027
.T
Ricatti-Bessel Functions First Second Kind (Algorithm 22 $S17))
.B
CACM July, 1970
.A
Bray, T.
.K
Ricatti-Bessel functions, Bessel functions
fractional order, spherical Bessel functions
.C
5.12
.N
CA700710 JB February 10, 1978 4:29 PM
.X
2027 5 2027
2027 5 2027
2027 5 2027
.I 2028
.T
Greatest Common Divisor n Integers
Multipliers $A1) (Algorithm 386)
.B
CACM July, 1970
.A
Bradley, G. H.
.K
greatest common divisor, Euclidean algorithm,
number theory, diophantine equations
.C
3.15 5.10
.N
CA700709 JB February 10, 1978 4:31 PM
.X
2028 4 2028
2521 4 2028
3099 4 2028
2028 5 2028
2028 5 2028
2028 5 2028
2031 5 2028
2521 5 2028
2028 6 2028
2031 6 2028
3135 6 2028
.I 2029
.T
Exponential Integral $S13) (Algorithm 385)
.B
CACM July, 1970
.A
Paciorek, K. A.
.K
exponential integral, special functions, rational Chebyshev approximation
.C
5.12
.N
CA700708 JB February 10, 1978 4:34 PM
.X
2029 5 2029
2029 5 2029
2029 5 2029
.I 2030
.T
Context-Sensitive Parsing
.W
paper presents canonical form context-sensitive
derivations parsing algorithm which finds
each context-sensitive analysis once only once. amount memory
required algorithm essentially no more than required
store single complete derivation. addition, modified
version basic algorithm presented which blocks infinite analyses
grammars which contain loops. algorithm
also compared several previous parsers context-sensitive
grammars general rewriting systems, difference between
two types analyses discussed. algorithm appears
complementary algorithm S. Kuno several respects, including
space-time trade-off degree context dependence involved.
.B
CACM July, 1970
.A
Woods, W. A.
.K
context-sensitive grammars, context-sensitive parsing, formal grammars,
formal language theory, parsing, parsing algorithms, recognition algorithms
.C
3.42 5.22 5.23
.N
CA700707 JB February 10, 1978 4:43 PM
.X
2030 5 2030
2030 5 2030
2030 5 2030
.I 2031
.T
Algorithm Bound Greatest Common Divisor n Integers
.W
new version Euclidean
algorithm finding greatest common divisor n integers a(i)
multipliers x(i) such gcd = x(1)a(1) + ... + x(n)a(n)
presented. number arithmetic operations number
storage locations linear n. theorem Lame gives bound
number iterations Euclidean algorithm two integers
extended case n integers. algorithm construct minimal
set multipliers presented. Fortran program algorithm appears
Comm. ACM Algorithm 386.
.B
CACM July, 1970
.A
Bradley, G. H.
.K
greatest common divisor, Euclidean algorithm,
number theory, diophantine equations
.C
3.15 5.10
.N
CA700706 JB February 13, 1978 8:45 AM
.X
2031 4 2031
2031 4 2031
1022 5 2031
2028 5 2031
2031 5 2031
2031 5 2031
2031 5 2031
2521 5 2031
450 5 2031
3099 5 2031
1313 6 2031
2028 6 2031
2031 6 2031
2031 6 2031
2031 6 2031
3135 6 2031
.I 2032
.T
File Structures Using Hashing Functions
.W
general method file structuring proposed which uses hashing
function define tree structure. Two types such trees examined,
their relation trees studied past explained.Results
probability distributions path lengths derived illustrated.
.B
CACM July, 1970
.A
Coffman Jr., E. G.
Eve, J.
.K
Data structures, tree structures, file structures, scatter
tables, hashing functions, information retrieval
.C
3.70 3.74
.N
CA700705 JB February 13, 1978 8:49 AM
.X
1050 4 2032
1676 4 2032
1682 4 2032
1728 4 2032
1860 4 2032
1935 4 2032
1936 4 2032
1973 4 2032
2017 4 2032
2018 4 2032
2032 4 2032
2032 4 2032
2033 4 2032
2107 4 2032
2109 4 2032
2203 4 2032
2251 4 2032
2257 4 2032
2360 4 2032
2359 4 2032
2451 4 2032
2452 4 2032
2524 4 2032
2543 4 2032
2552 4 2032
2559 4 2032
2991 4 2032
3053 4 2032
1785 5 2032
2032 5 2032
2032 5 2032
2032 5 2032
849 5 2032
.I 2033
.T
Space/Time Trade-offs Hash Coding Allowable Errors
.W
paper trade-offs among certain computational factors
given set messages. Two new hash-coding methods examined
compared particular conventional hash-coding method.
computational factors considered size hash area
(space), time required identify message nonmember
given set (reject time), allowable error frequency. new methods
intended reduce amount space required contain hash-coded
information associated conventional methods. reduction
space accomplished exploiting possibility small fraction
errors commission may tolerable some applications, particular,
applications which large amount data involved core resident
hash area consequently not feasible using conventional methods. such
applications, envisaged overall performance
could improved using smaller core resident hash area
conjunction new methods and, necessary, using some
secondary perhaps time-consuming test "catch" small
fraction errors associated new methods. example discussed
which illustrates possible areas application new
methods. Analysis paradigm problem demonstrates allowing
small number test messages falsely identified
members given set permit much smaller hash
area used without increasing reject time.
.B
CACM July, 1970
.A
Bloom, B. H.
.K
hash coding, hash addressing, scatter storage, searching, storage
layout, retrieval trade-offs, retrieval efficiency, storage efficiency
.C
3.73 3.74 3.79
.N
CA700704 JB February 13, 1978 9:18 AM
.X
1676 4 2033
1682 4 2033
1728 4 2033
1860 4 2033
1860 4 2033
1973 4 2033
1973 4 2033
1992 4 2033
2018 4 2033
2018 4 2033
2032 4 2033
2033 4 2033
2033 4 2033
2033 4 2033
2107 4 2033
2107 4 2033
2109 4 2033
2109 4 2033
2203 4 2033
2203 4 2033
2251 4 2033
2251 4 2033
2359 4 2033
2524 4 2033
2543 4 2033
2543 4 2033
2552 4 2033
2559 4 2033
2573 4 2033
2770 4 2033
2991 4 2033
3053 4 2033
1314 5 2033
1785 5 2033
1786 5 2033
2033 5 2033
2033 5 2033
2033 5 2033
3001 5 2033
2033 6 2033
2139 6 2033
.I 2034
.T
Mobile Programming System: STAGE2
.W
STAGE2 second level bootstrap sequence which
easily implemented any computer. flexible,
provided STAGE2 summarized, implementation techniques
which have made possible have STAGE2 running new
machine less than one man-week effort discussed. approach
has been successful over 15 machines widely varying
characteristics.
.B
CACM July, 1970
.A
Waite, W. M.
.K
bootstrapping, macro processing, machine independence,
programming languages, implementation techniques
.C
4.12 4.22
.N
CA700703 JB February 13, 1978 9:24 AM
.X
1160 4 2034
1530 4 2034
1705 4 2034
1781 4 2034
1807 4 2034
1852 4 2034
1945 4 2034
2034 4 2034
2034 4 2034
2034 4 2034
2034 4 2034
2034 4 2034
2034 4 2034
2290 4 2034
2579 4 2034
2923 4 2034
2945 4 2034
984 5 2034
1231 5 2034
1565 5 2034
1852 5 2034
1926 5 2034
1947 5 2034
2034 5 2034
2034 5 2034
2034 5 2034
.I 2035
.T
Conversational Access 2048-Word Machine
.W
LAP6 on-line system running 2048-word LINC which provides full
facilities text editing, automatic filing file maintenance,
program preparation assembly. focuses preparation editing
continuously displayed 23,040-character text strings (manuscripts) which
can positioned anywhere user edited simply adding
deleting lines though working directly elastic scroll.
Other features available through uniform command set which itself can
augmented user. machine, although small,
aids program design providing display scope premarked
randomly addressable LINC tapes standard items, environment
similar sophisticated terminal. tapes logically
similar disk. Priority given design efficient
tape algorithms minimize limitations small memory. Techniques
developed handling scroll editing, filing, layered system
structure outlined. LAP6 used 2000 people 11 countries.
Its design strongly influenced performance criteria established
interviews held LINC users themselves during specification period.
.B
CACM July, 1970
.A
Wilkes, M. A.
.K
conversational computer access,
display editing, display oriented system, filing algorithms, LAP6,
layering, LINC, man-machine communication, on-line editing, on-line efficiency,
on-line environment, scroll editing, small machine system, tape filing, tape
oriented system, text editing
.C
3.73 4.10 4.11 4.19 4.22 4.30 4.40 4.41
.N
CA700702 JB February 13, 1978 9:35 AM
.X
2035 5 2035
2035 5 2035
2035 5 2035
2357 5 2035
1523 6 2035
1829 6 2035
2035 6 2035
.I 2036
.T
Interactive Command Generating Facility
.W
facility permit conversationally controlled tasks
executed noninteractive environment proposed.
means which programs can generate interactive time-sharing commands
receive corresponding output response presented. commands
invoked if they had been typed console keyboard.
argued facility help overcome some current limitations
man-computer communication. set functions accomplish above
which could embedded into any string processing language suggested,
necessary information pertinent implementation facility
existing time-sharing systems given.
.B
CACM July, 1970
.A
Grant, C. A.
.K
time-sharing, command languages, pseudo-teletype, interaction,
conditional job control, operating systems
.C
3.80 3.81 4.29 4.39
.N
CA700701 JB February 13, 1978 9:43 AM
.X
1530 4 2036
1531 4 2036
1565 4 2036
1703 4 2036
1945 4 2036
2036 4 2036
1455 5 2036
2036 5 2036
2036 5 2036
2036 5 2036
.I 2037
.T
Permutations Set Repetitions (Algorithm 383 $G6))
.B
CACM June, 1970
.A
Chase, P. J.
.K
permutations combinations, permutations
.C
5.39
.N
CA700618 JB February 13, 1978 9:45 AM
.X
2037 5 2037
2037 5 2037
2037 5 2037
.I 2038
.T
Combinations M Out N Objects (Algorithm 382 $G6))
.B
CACM June, 1970
.A
Chase, P. J.
.K
permutations combinations, permutations
.C
5.39
.N
CA700617 JB February 13, 1978 9:59 AM
.X
2038 5 2038
2038 5 2038
2038 5 2038
.I 2039
.T
Permanent Function Square Matrix II (Algorithm 361 $G6))
.B
CACM June, 1970
.A
Shriver, B.
Eberlein, P. J.
Dixon, R. D.
.K
matrix, permanent, determinant
.C
5.30
.N
CA700616 JB February 13, 1978 10:01 AM
.X
2039 5 2039
2039 5 2039
2039 5 2039
.I 2040
.T
Modified Romberg Quadrature (Algorithm 351 $D1))
.B
CACM June, 1970
.A
Wallick, G. C.
.K
numerical integration, Romberg quadrature, modified Romberg quadrature,
trapezoid values, rectangle values
.C
5.16
.N
CA700615 JB February 13, 1978 10:27 AM
.X
1040 4 2040
1352 4 2040
1352 4 2040
1352 4 2040
1352 4 2040
1356 4 2040
1883 4 2040
1982 4 2040
1982 4 2040
2040 4 2040
2040 4 2040
2040 4 2040
2040 4 2040
2040 4 2040
2040 4 2040
1241 5 2040
1273 5 2040
1352 5 2040
1356 5 2040
324 5 2040
2040 5 2040
2040 5 2040
2040 5 2040
2355 5 2040
621 5 2040
1418 6 2040
1521 6 2040
1597 6 2040
1883 6 2040
2040 6 2040
2350 6 2040
2354 6 2040
.I 2041
.T
Shellsort (Algorithm 201 $M1))
.B
CACM June, 1970
.A
Chandler, J. P.
Harrison, W. C.
.K
sorting, minimal storage sorting, digital computer sorting
.C
5.31
.N
CA700614 JB February 13, 1978 10:29 AM
.X
1175 4 2041
1919 4 2041
2017 4 2041
2041 4 2041
2216 4 2041
2041 5 2041
2041 5 2041
2041 5 2041
864 5 2041
.I 2042
.T
Treesort 3 (Algorithm 245 $M1))
.W
certification algorithm can take
form proof algorithm correct. illustrative
but practical example, Algorithm 245, TREESORT 3 sorting
array, proved correct.
.B
CACM June, 1970
.A
London, R. L.
.K
proof algorithms, debugging, certification,
metatheory, sorting, in-place sorting
.C
4.42 4.49 5.24 5.31
.N
CA700613 JB February 13, 1978 10:32 AM
.X
2042 4 2042
2042 4 2042
2222 4 2042
2356 4 2042
2679 4 2042
2679 4 2042
2844 4 2042
2972 4 2042
970 5 2042
1228 5 2042
2042 5 2042
2042 5 2042
2042 5 2042
2222 5 2042
2679 5 2042
970 6 2042
970 6 2042
1175 6 2042
1190 6 2042
1228 6 2042
1800 6 2042
1818 6 2042
1834 6 2042
1969 6 2042
1997 6 2042
308 6 2042
2042 6 2042
2042 6 2042
3187 6 2042
507 6 2042
716 6 2042
783 6 2042
.I 2043
.T
Eigenvalues Eigenvectors Real
Symmetric Matrix $F2) (Algorithm 384)
.B
CACM June, 1970
.A
Stewart, G. W.
.K
real symmetric matrix, eigenvalues, eigenvectors, QR algorithm
.C
5.14
.N
CA700612 JB February 13, 1978 10:34 AM
.X
2043 5 2043
2043 5 2043
2043 5 2043
2349 5 2043
1648 6 2043
1716 6 2043
1794 6 2043
1894 6 2043
2043 6 2043
501 6 2043
613 6 2043
774 6 2043
.I 2044
.T
Permutations Set Repetitions (Algorithm 383 $G6))
.B
CACM June, 1970
.A
Chase, P. J.
.K
permutations combinations, permutations
.C
5.39
.N
CA700611 JB February 13, 1978 10:36 AM
.X
2044 4 2044
2044 4 2044
2044 4 2044
2044 4 2044
2189 4 2044
2417 4 2044
2505 4 2044
2874 4 2044
2908 4 2044
996 5 2044
1558 5 2044
2044 5 2044
2044 5 2044
2044 5 2044
2230 5 2044
521 5 2044
.I 2045
.T
Combinations M Out N Objects (Algorithm 382 $G6))
.B
CACM June, 1970
.A
Chase, P. J.
.K
permutations combinations, permutations
.C
5.39
.N
CA700610 JB February 13, 1978 10:38 AM
.X
2045 5 2045
2045 5 2045
2045 5 2045
2466 5 2045
2834 5 2045
3115 5 2045
907 6 2045
969 6 2045
2045 6 2045
2045 6 2045
2045 6 2045
2417 6 2045
2417 6 2045
2466 6 2045
2466 6 2045
2884 6 2045
579 6 2045
785 6 2045
.I 2046
.T
Relational Model Data Large Shared Data Banks
.W
Future users large data banks must protected having know
data organized machine (the internal representation). prompting
service which supplies such information not satisfactory
solution. Activities users terminals most application
programs should remain unaffected internal representation
data changed even some aspects external representation
changed. Change data representation often needed result
changes query, update, report traffic natural growth
types stored information. Existing noninferential, formatted data systems
provide users tree-structured files slightly more general network
models data. Section 1, inadequacies these models discussed.
model based n-ary relations, normal form data base relations,
concept universal form data base relations,
concept universal data sublanguage introduced.
Section 2, certain operations relations (other than logical
inference) discussed applied problems
redundancy consistency user's model.
.B
CACM June, 1970
.A
Codd, E. F.
.K
data bank, data base, data structure, data organization,
hierarchies data, networks data, relations, derivability,
redundancy, consistency, composition, join, retrieval
language, predicate calculus, security, data integrity
.C
3.70 3.73 3.75 4.20 4.22 4.29
.N
CA700609 JB February 13, 1978 10:57 AM
.X
2046 4 2046
2710 4 2046
1515 5 2046
2046 5 2046
2046 5 2046
2046 5 2046
2155 5 2046
2406 5 2046
2710 5 2046
2715 5 2046
2716 5 2046
2717 5 2046
2718 5 2046
2765 5 2046
2817 5 2046
2888 5 2046
2901 5 2046
2957 5 2046
2959 5 2046
2965 5 2046
3087 5 2046
3154 5 2046
1389 6 2046
1515 6 2046
210 6 2046
1936 6 2046
1976 6 2046
1976 6 2046
1989 6 2046
378 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2046 6 2046
2060 6 2046
2110 6 2046
2406 6 2046
2451 6 2046
2451 6 2046
2452 6 2046
2715 6 2046
2715 6 2046
2715 6 2046
3133 6 2046
616 6 2046
616 6 2046
616 6 2046
.I 2047
.T
Incorporating Origin Shifts into QR
Algorithm Symmetric Tridiagonal Matrices
.W
QR iteration eigenvalues symmetric tridiagonal matrix can
accelerated incorporating sequence origin shifts. origin shift
may either subtracted directly diagonal elements
matrix incorporated means implicit algorithm. Both
methods have drawbacks: direct method can unnecessarily degrade small
eigenvalues, while implicit method can effectively loose shift
thereby retard convergence. paper presents new method which has
neither drawback.
.B
CACM June, 1970
.A
Stewart, G. W.
.K
eigenvalues, eigenvectors, QR method, origin
shifts, symmetric tridiagonal matrix
.C
5.14
.N
CA700608 JB February 13, 1978 11:02 AM
.X
2047 5 2047
2047 5 2047
2047 5 2047
.I 2048
.T
Comparison Several Adaptive Newton-Cotes Quadrature Routines
Evaluating Definite Integrals Peaked Integrands
.W
report compares performance five different adaptive quadrature
schemes, based Newton-Cotes (2N + 1) point rules (N = 1, 2, 3, 4, 5),
approximating set definite integrals INTEGRAL$1/(x^2 + p^2)) dx
relative accuracy e.
.B
CACM June, 1970
.A
Hillstrom, K. E.
.K
adaptive Newton-Cotes quadrature, quadrature scheme comparison,
definite integral evaluation, adaptive numerical tegration, Newton-Cotes
integration, peaked integrand integration, quadrature efficiently
plot, New-Cotes rules applications, Newton-Cotes rules modifications
.C
5.10 5.16
.N
CA700607 JB February 13, 1978 11:08 AM
.X
1352 4 2048
1352 4 2048
1352 4 2048
2048 4 2048
2048 4 2048
2048 4 2048
2074 4 2048
2074 4 2048
2074 4 2048
2093 4 2048
2093 4 2048
2550 4 2048
2048 5 2048
2048 5 2048
2048 5 2048
429 5 2048
786 5 2048
834 5 2048
.I 2049
.T
Accurate Floating-Point Summation
.W
paper describes alternate method summing set
floating-point numbers. Comparison error bound
method standard summation method shows
considerably less sensitive propagation round-off error.
.B
CACM June, 1970
.A
Linz, P.
.K
summation, floating-point addition,
round-off error, round-off propagation
.C
5.11
.N
CA700606 JB February 13, 1978 11:36 AM
.X
2049 5 2049
2049 5 2049
2049 5 2049
2183 5 2049
2282 5 2049
1328 6 2049
2049 6 2049
2049 6 2049
.I 2050
.T
Automatic Parsing Content Analysis
.W
Although automatic syntactic semantic analysis not yet possible
all unrestricted natural language text, some applications, which
content analysis one, do not have such stringent coverage requirement.
Preliminary studies show Harvard Syntactic Analyzer can
produce correct unambiguous identification subject
object certain verbs approximately half relevant occurrences.
provides degree coverage content analysis variables which
compares favorably manual methods, variables which compares favorably
manual methods, which only sample total available text
normally processed.
.B
CACM June, 1970
.A
Damerau, F. J.
.K
Content analysis, parsing, syntactic analysis, natural language processing,
information retrieval, language analysis, text processing
.C
3.42 3.71
.N
CA700605 JB February 13, 1978 11:43 AM
.X
1350 4 2050
1659 4 2050
1856 4 2050
2050 4 2050
1225 5 2050
2050 5 2050
2050 5 2050
2050 5 2050
.I 2051
.T
PL/I Program Assist Comparative Linguist
.W
practical PL/I program described which
can assist comparative linguists determine
regular sound correspondences between genetically related languages.
investigator must arrange data input aligning pairs
suspected cognates. program tabulates correspondences,
uses list processing techniques sort count them.
Each pair words then assigned relative value function
total frequency data each correspondence found
pair words. output list all correspondence
types their frequency occurrence data,
separate listing each correspondence all word-pairs showing
correspondence (unless their relative value below arbitrarily
chosen cutoff point). article explains usefulness,
well limitations, programs, illustrates its
use small portion hypothetical data.
.B
CACM June, 1970
.A
Frantz, D. G.
.K
comparative linguistics, natural
language processing, comparative method, historical linguistics, diachronic
linguistics, genetic relationship, sound change, sound
correspondence, regular correspondence, list processing
.C
3.42
.N
CA700604 JB February 13, 1978 11:51 AM
.X
2051 5 2051
2051 5 2051
2051 5 2051
.I 2052
.T
Scheduling Reduce Conflict Meetings
.W
Conflicts scheduling can treated defining undirected linear graph
independently relation activities conflict additional
constraints time space. Each connected component such graph,
which can found algorithm described Gotlieb Corneil,
corresponds set events must scheduled different times.
.B
CACM June, 1970
.A
Grimes, J. E.
.K
allocation, conflict matrix, connected component, scheduling, spanning
tree, undirected linear graph
.C
1.90 3.51 3.59 5.32
.N
CA700603 JB February 13, 1978 11:55 AM
.X
1609 4 2052
1847 4 2052
1961 4 2052
2052 4 2052
2052 4 2052
2052 4 2052
2052 4 2052
2209 4 2052
1008 5 2052
1013 5 2052
1504 5 2052
1540 5 2052
2052 5 2052
2052 5 2052
2052 5 2052
.I 2053
.T
Conversion Decision Tables Computer Programs
.W
use execution time diagnostics pinpointing ambiguities decision
tables discussed. pointed out any attempt resolving
ambiguities compile time will, general, impossible.
shown that, consequence, tree methods converting decision
tables programs inadequate regard ambiguity detection.
Two algorithms programming decision tables whose merits
simplicity implementation detection ambiguities
execution time presented. first algorithm limited entry
decision tables clarifies importance proper coding
information decision table. second algorithm programs
mixed entry decision table directly without going through
intermediate step conversion limited entry form, thereby
resulting storage economy. comparison algorithms others
proposed literature made. Some features decision table
Fortran IV translator IBM 7044 developed authors given.
.B
CACM June, 1970
.A
Muthukrishnan, C. R.
Rajaraman, V.
.K
decision tables, diagnostic aids, system analysis, business applications
.C
3.50 3.59 4.19 4.29 4.49
.N
CA700602 JB February 13, 1978 12:03 PM
.X
1354 4 2053
1354 4 2053
1354 4 2053
1488 4 2053
1488 4 2053
1684 4 2053
1994 4 2053
2053 4 2053
2053 4 2053
2053 4 2053
2053 4 2053
2053 4 2053
2220 4 2053
2220 4 2053
2220 4 2053
2220 4 2053
2273 4 2053
2273 4 2053
2273 4 2053
2273 4 2053
2453 4 2053
2453 4 2053
2517 4 2053
2518 4 2053
2598 4 2053
2616 4 2053
2726 4 2053
2726 4 2053
2726 4 2053
2856 4 2053
2856 4 2053
2856 4 2053
3034 4 2053
3113 4 2053
1172 5 2053
1237 5 2053
1327 5 2053
1354 5 2053
1684 5 2053
2053 5 2053
2053 5 2053
2053 5 2053
2221 5 2053
2273 5 2053
2453 5 2053
2517 5 2053
2856 5 2053
3034 5 2053
1172 6 2053
1172 6 2053
1172 6 2053
1237 6 2053
1327 6 2053
1327 6 2053
1354 6 2053
1354 6 2053
1354 6 2053
1684 6 2053
1684 6 2053
1683 6 2053
2053 6 2053
2053 6 2053
2053 6 2053
2053 6 2053
2053 6 2053
2053 6 2053
2220 6 2053
2220 6 2053
2220 6 2053
2221 6 2053
2453 6 2053
2517 6 2053
2598 6 2053
753 6 2053
.I 2054
.T
Feasibility Voice Input
On-line Computer Processing System
.W
on-line digital computer processing system considered which
ordinary telephone complete terminal device, input computer
being provided sequence spoken words, output user being
audio responses machine. feasibility implementing such
system FORTRAN-like algebraic compiler object processor
considered. Details specific word recognition program given.
technique depends three simplifying restrictions, namely, "small"
vocabulary set, "known" speakers, "moment silence"
between each input word. Experimental results presented giving
error rates different experimental conditions well machine
resources required accommodate several users time. results show
time both economically logically feasible handle
least 40 users time IBM 360/65 computer.
.B
CACM June, 1970
.A
Elder, H. A.
.K
speech recognition, word recognition, pattern-matching, pattern
recognition, time-sharing, remote access, voice input, speech input,
telephone input/output, acoustic signal, spoken-word input, talking
computers, man-machine interaction
.C
3.63 3.81 4.32 4.41 6.35
.N
CA700601 JB February 13, 1978 12:12 PM
.X
2054 4 2054
1544 5 2054
2054 5 2054
2054 5 2054
2054 5 2054
.I 2055
.T
Subroutine Perform In-Situ Transposition
Rectangular Matrix (Algorithm 380)
.B
CACM May, 1970
.A
Lachenmaier, R.
.K
rectangular matrix, transpose
.C
5.14
.N
CA700511 JB February 13, 1978 1:14 PM
.X
2055 5 2055
2055 5 2055
2055 5 2055
2057 5 2055
2392 5 2055
1600 6 2055
1600 6 2055
1894 6 2055
2055 6 2055
2055 6 2055
.I 2056
.T
Gomory (Algorithm 263A $H))
.B
CACM May, 1970
.A
Proll, L. G.
.K
linear programming, integer variables, dual method
.C
5.41
.N
CA700510 JB February 13, 1978 1:17 PM
.X
2056 5 2056
2056 5 2056
2056 5 2056
.I 2057
.T
Random Vectors Uniform Solid Angle (Algorithm 381 $G5))
.B
CACM May, 1970
.A
Knop, R. E.
.K
random number, random vector, random number generator, probability
distribution, frequency distribution, simulation, Monte Carlo
.C
5.5
.N
CA700509 JB February 13, 1978 1:19 PM
.X
2057 4 2057
2057 4 2057
2057 4 2057
2058 4 2057
2349 4 2057
2392 4 2057
2392 4 2057
2416 4 2057
1600 5 2057
1894 5 2057
2055 5 2057
2057 5 2057
2057 5 2057
2057 5 2057
.I 2058
.T
In-Situ Transposition Rectangular Matrix (Algorithm 380 $F1))
.B
CACM May, 1970
.A
Laflin, S.
Brebner, M. A.
.K
rectangular matrix, transpose
.C
5.14
.N
CA700508 JB February 13, 1978 1:21 PM
.X
2057 4 2058
2058 4 2058
2392 4 2058
2416 4 2058
1600 5 2058
2058 5 2058
2058 5 2058
2058 5 2058
2416 5 2058
1600 6 2058
2058 6 2058
.I 2059
.T
Language Treating Graphs
.W
language representation graph described, formulation
graph operations such node and/or link deletion insertion, union,
intersection, comparison, traversal graphs given. Graphs
represented linked lists. language syntactically defined
extension ALGOL 60, translated into ALGOL
means syntax-driven compiler. Application areas language
operation research, network problems, control theory, traffic problems, etc.
.B
CACM May, 1970
.A
Crespi-Reghizzi, S.
Morpurgo, R.
.K
graphs, oriented, nonoriented, multiple,
colored graph, language extended ALGOL,
operator-precedence, syntax-driven compiler,
operation research, network, traffic
.C
3.2 3.5 4.2 5.3
.N
CA700507 JB February 13, 1978 1:31 PM
.X
249 4 2059
254 4 2059
272 4 2059
1102 4 2059
1109 4 2059
1140 4 2059
1188 4 2059
1306 4 2059
1464 4 2059
1491 4 2059
1767 4 2059
1781 4 2059
1787 4 2059
1949 4 2059
321 4 2059
2059 4 2059
2126 4 2059
435 4 2059
437 4 2059
463 4 2059
483 4 2059
491 4 2059
2732 4 2059
560 4 2059
583 4 2059
3073 4 2059
627 4 2059
631 4 2059
632 4 2059
642 4 2059
644 4 2059
653 4 2059
680 4 2059
761 4 2059
762 4 2059
763 4 2059
123 4 2059
140 4 2059
919 4 2059
989 4 2059
196 5 2059
2059 5 2059
2059 5 2059
2059 5 2059
2178 5 2059
1303 6 2059
1323 6 2059
2059 6 2059
2127 6 2059
3184 6 2059
.I 2060
.T
GEDANKEN-A Simple Typeless Language Based
Principle Completeness Reference Concept
.W
GEDANKEN experimental programming language following
characteristics. (1) Any value which permitted some context
language permissible any other meaningful context. particular,
functions labels permissible results functions values
variables. (2) Assignment indirect addressing formalized
introducing values, called reference, which turn possess
other values. assignment operation always affects relation
between some reference its value, (3) All compound data
structures treated functions. (4) Type declarations
not permitted. functional approach data structures
use references insure any process which accepts some data
structure accept any logically equivalent structure, regardless
its internal representation. More generally, any data structure
may implicit; i.e. may specified giving arbitrary
algorithm computing accessing its components. existence
label variables permits construction coroutines,
quasi-parallel processes, other unorthodox control mechanisms.
variety programming examples illustrates generality language.
Limitations possible extensions discussed briefly.
.B
CACM May, 1970
.A
Reynolds, J. C.
.K
programming language, data structure, reference, assignment, coroutine,
quasi-parallel process, typeless language, applicative language,
lambda calculus, list processing, nondeterministic algorithm
.C
4.20 4.22 5.23 5.24
.N
CA700506 JB February 13, 1978 1:43 PM
.X
1024 4 2060
1051 4 2060
1102 4 2060
1132 4 2060
1379 4 2060
1380 4 2060
1390 4 2060
1486 4 2060
1541 4 2060
1542 4 2060
1549 4 2060
1552 4 2060
1683 4 2060
1693 4 2060
1693 4 2060
1693 4 2060
1706 4 2060
1781 4 2060
1781 4 2060
1781 4 2060
1787 4 2060
1826 4 2060
1836 4 2060
1836 4 2060
1846 4 2060
1854 4 2060
1860 4 2060
1878 4 2060
1945 4 2060
1945 4 2060
1989 4 2060
378 4 2060
2015 4 2060
2060 4 2060
2060 4 2060
2060 4 2060
2060 4 2060
2060 4 2060
2060 4 2060
2060 4 2060
2060 4 2060
2061 4 2060
2061 4 2060
2082 4 2060
2091 4 2060
2091 4 2060
2155 4 2060
2152 4 2060
2168 4 2060
2179 4 2060
2179 4 2060
2179 4 2060
2218 4 2060
2294 4 2060
2340 4 2060
2356 4 2060
2470 4 2060
2546 4 2060
2546 4 2060
2603 4 2060
2698 4 2060
2698 4 2060
2698 4 2060
2708 4 2060
2708 4 2060
2719 4 2060
2723 4 2060
2770 4 2060
2824 4 2060
2838 4 2060
2842 4 2060
2855 4 2060
2879 4 2060
2921 4 2060
2982 4 2060
2986 4 2060
557 4 2060
3045 4 2060
3045 4 2060
3077 4 2060
3080 4 2060
3093 4 2060
3106 4 2060
3112 4 2060
3124 4 2060
3154 4 2060
627 4 2060
106 4 2060
210 5 2060
1380 5 2060
1421 5 2060
1469 5 2060
1477 5 2060
1491 5 2060
1869 5 2060
2060 5 2060
2060 5 2060
2060 5 2060
2110 5 2060
2155 5 2060
2294 5 2060
2558 5 2060
2842 5 2060
3077 5 2060
3150 5 2060
1389 6 2060
1469 6 2060
1471 6 2060
210 6 2060
210 6 2060
210 6 2060
1834 6 2060
378 6 2060
2046 6 2060
2060 6 2060
2060 6 2060
2060 6 2060
2060 6 2060
2060 6 2060
2060 6 2060
2148 6 2060
2192 6 2060
2457 6 2060
2704 6 2060
2842 6 2060
2939 6 2060
2940 6 2060
2941 6 2060
2943 6 2060
3073 6 2060
3148 6 2060
3184 6 2060
.I 2061
.T
Algorithm Construction Bounded-Context Parsers
.W
algorithm described which accepts arbitrary context-free
grammar constructs bounded-context parser
whenever such parser exists. first part paper
definition context-free grammar working
bounded-context parser recalled. notion reduction class
context-free grammar then introduced its connection
structure bounded-context parser indicated. Next,
pushdown automata which generate different reduction classes
context-free grammar defined. Finally, algorithm described;
essentially carries out exhaustive study all possible
runs pushdown automata generating reduction classes.
second part, utility algorithm discuss
ed light experience gained its use compiler design.
algorithm claimed particularly useful
simultaneous design language compiler it.
.B
CACM May, 1970
.A
Loeckx, J.
.K
bounded-context parsing, bounded-context syntactic analysis, parser
construction, syntactical analyzer construction, generators, compiler
compilers, compiler writing systems, translator writing systems metacompilers,
context-free grammars, formal languages, pushdown automata
.C
4.12 5.22 5.23
.N
CA700505 JB February 13, 1978 1:58 PM
.X
1379 4 2061
1491 4 2061
1496 4 2061
1542 4 2061
1683 4 2061
1683 4 2061
1693 4 2061
1693 4 2061
1768 4 2061
1781 4 2061
1781 4 2061
1781 4 2061
1787 4 2061
1787 4 2061
1836 4 2061
1836 4 2061
1945 4 2061
1945 4 2061
1945 4 2061
2015 4 2061
2060 4 2061
2060 4 2061
2061 4 2061
2061 4 2061
2061 4 2061
2061 4 2061
2061 4 2061
2061 4 2061
2082 4 2061
2091 4 2061
2091 4 2061
2152 4 2061
2179 4 2061
2179 4 2061
2179 4 2061
2340 4 2061
2356 4 2061
2546 4 2061
2546 4 2061
2603 4 2061
2698 4 2061
2698 4 2061
2708 4 2061
2708 4 2061
2824 4 2061
2982 4 2061
2986 4 2061
3045 4 2061
3045 4 2061
3093 4 2061
1140 5 2061
1141 5 2061
1477 5 2061
1491 5 2061
1825 5 2061
2061 5 2061
2061 5 2061
2061 5 2061
773 5 2061
.I 2062
.T
Application Sequential Sampling
Simulation: Example Inventory Model
.W
Four different sequential sampling procedures applied
analysis data generated computer simulation
experiment multi-item inventory model. each procedure
cost computer time required achieve given levels
statistical precision calculated. Also cost computer time
using comparable fixed sample size methods calculated.
computer costs fixed sample size procedures versus
sequential sampling procedures compared.
.B
CACM May, 1970
.A
Sasser, W. E.
Burdick, D. S.
Graham, D. A.
Naylor, T. H.
.K
simulation, inventory models, sequential
sampling, models, experimental design
.C
3.31 3.50 3.54 5.5
.N
CA700504 JB February 13, 1978 2:11 PM
.X
2062 5 2062
2062 5 2062
2062 5 2062
.I 2063
.T
Translation Equations (Errata)
.B
CACM May, 1970
.A
Vere, S.
.N
CA700503 JB February 13, 1978 2:12 PM
.X
2063 5 2063
2063 5 2063
2063 5 2063
.I 2064
.T
Operations Generalized Arrays Genie Compiler
.W
Operations vectors, matrices, higher dimensional storage arrays
standard features most compilers today. elements such structures
usually restricted scalars. many sophisticated applications
restriction can impose cumbersome data representations.
efficient system has been devised implemented which allows
elements multidimensional arrays themselves multidimensional
arrays. system developed storage structure
which location, length, content each array described
codeword which can interpreted system. Code words may describe
arrays containing more codewords, thus providing
all needed descriptive information hyperstructures any form.
.B
CACM May, 1970
.A
Sitton, G. A.
.K
multidimensional arrays, matrix operations,
storage control, subscripting, compilers
.C
4.12 4.29
.N
CA700502 JB February 13, 1978 2:18 PM
.X
2064 4 2064
1677 5 2064
2064 5 2064
2064 5 2064
2064 5 2064
.I 2065
.T
Programming System On-line Analysis Biomedical Images
.W
preliminary description software computer-display
system given special emphasis man-machine interaction.
system intended wide variety biomedical applications.
example, methods applied karyotyping chromosomes.
system separated into four programming tasks: picture transformations, file
maintenance, picture structuring, display management. Picture structuring
considered vehicle man-machine communication.
prototype data format pictures, called picture-form, developed.
Structure operators defined which manipulate picture-forms produce
new pictures-forms. Many ideas taken symbolic mathematical
laboratory MIT conceived Marvin Minsky.
.B
CACM May, 1970
.A
Hodes, L.
.K
image processing, biomedical image processing, on-line image processing,
semiautomatic image processing, data structure, structure operators,
picture processing, biomedical picture processing, on-line picture
processing, semiautomatic picture processing, semiautomatic
karyotyping, karyotyping, list processing picture processing
.C
3.12 3.34 3.63 4.39 6.29
.N
CA700501 JB February 13, 1978 2:27 PM
.X
2065 5 2065
2065 5 2065
2065 5 2065
.I 2066
.T
Algol Construction Procedures Parameters Procedures
.B
CACM April, 1970
.A
Knight, K. R.
.K
Algol, procedures, parameters, side effects
.C
4.22
.N
CA700418 JB February 13, 1978 2:30 PM
.X
2066 4 2066
2066 4 2066
1833 5 2066
1842 5 2066
2066 5 2066
2066 5 2066
2066 5 2066
.I 2067
.T
Comment Lawler's Multilevel Boolean Minimization
.B
CACM April, 1970
.A
DeVries, R. C.
.K
multilevel logic design, generalized prime implicants,
minimal forms, minimization, incompletely
specified functions
.C
6.1
.N
CA700417 JB February 13, 1978 2:32 PM
.X
2067 5 2067
2067 5 2067
2067 5 2067
.I 2068
.T
Comment Multiprogramming Under Page Demand Strategy
.B
CACM April, 1970
.A
Smith, J. L.
.K
multiprogramming, paging, modeling
.C
4.32
.N
CA700416 JB February 13, 1978 2:34 PM
.X
1892 4 2068
2068 4 2068
2741 4 2068
1526 5 2068
2068 5 2068
2068 5 2068
2068 5 2068
.I 2069
.T
Comments Paper Wallace Mason
.B
CACM April, 1970
.A
Heess Jr., W. F.
.K
page-on-demand, demand paging, time-sharing multiprogramming,
Markovian computer models, scheduling strategies,
operating systems, memory management
.C
2.44 4.32 4.39 6.20 6.21
.N
CA700415 JB February 13, 1978 2:36 PM
.X
2069 5 2069
2069 5 2069
2069 5 2069
.I 2070
.T
Formal System Information Retrieval Files
.B
CACM April, 1970
.A
Hsiao, D.
Harary, F.
.N
CA700414 JB February 13, 1978 2:37 PM
.X
2070 5 2070
2070 5 2070
2070 5 2070
.I 2071
.T
Filon Quadrature (Algorithm 353 $D1))
.B
CACM April, 1970
.A
Fosdick, L. D.
Einarsson, Bo
.K
quadrature, Filon quadrature, integration, Filon
integration, Fourier coefficients, Fourier series
.C
5.16
.N
CA700413 JB February 13, 1978 2:40 PM
.X
2071 5 2071
2071 5 2071
2071 5 2071
2393 5 2071
1858 6 2071
2071 6 2071
.I 2072
.T
Modified Romberg Quadrature (Algorithm 351 $D1))
.B
CACM April, 1970
.A
Cook, N. D.
.K
numerical integration, Romberg quadrature,
trapezoid values, rectangle values, error bound
.C
5.16
.N
CA700412 JB February 13, 1978 2:42 PM
.X
2072 5 2072
2072 5 2072
2072 5 2072
.I 2073
.T
Solution Linear Programs 0-1 Variables
Implicit Enumeration (Algorithm 341 $H))
.B
CACM April, 1970
.A
Guignard, M. M.
.K
linear programming, zero-one variables, partial enumeration
.C
5.41
.N
CA700411 JB February 13, 1978 2:43 PM
.X
2073 5 2073
2073 5 2073
2073 5 2073
.I 2074
.T
Sqank (Algorithm 379 $D1))
.B
CACM April, 1970
.A
Lyness, J. N.
.K
numerical integration, integration rule, adaptive integration,
automatic integration, Simpson's rule, numerical quadrature, quadrature,
quadrature rule, adaptive quadrature,
automatic quadrature, round-off error control
.C
5.16
.N
CA700410 JB February 13, 1978 2:46 PM
.X
1352 4 2074
1352 4 2074
1352 4 2074
1352 4 2074
2048 4 2074
2048 4 2074
2048 4 2074
2074 4 2074
2074 4 2074
2074 4 2074
2074 4 2074
2093 4 2074
2093 4 2074
2093 4 2074
2550 4 2074
2074 5 2074
2074 5 2074
2074 5 2074
2415 5 2074
2550 5 2074
429 5 2074
786 5 2074
834 5 2074
872 5 2074
1040 6 2074
1573 6 2074
1982 6 2074
2074 6 2074
2074 6 2074
429 6 2074
.I 2075
.T
Discretized Newton-Like Method Solving System
Simultaneous Nonlinear Equations (Algorithm 378 $C5))
.B
CACM April, 1970
.A
Pankiewicz, W.
.K
Newton's method, nonlinear equations, interpolating polynomials
.C
5.15 5.13
.N
CA700409 JB February 13, 1978 2:48 PM
.X
2075 4 2075
2075 5 2075
2075 5 2075
2075 5 2075
472 5 2075
3011 5 2075
2075 6 2075
2302 6 2075
2345 6 2075
2485 6 2075
.I 2076
.T
Cubic Splines Uniform Meshes
.W
very simple procedure presented constructing cubic splines,
periodic nonperiodic, uniform meshes. Arcs two cubics suffice
construct basis cardinal splines. algorithm given which
requires only minimal storage computation permits easy trade-off
one against other.
.B
CACM April, 1970
.A
Nilson, E. N.
.K
simple spline representation, cardinal splines, uniform mesh splines
.C
5.13
.N
CA700408 JB February 13, 1978 2:51 PM
.X
2076 5 2076
2076 5 2076
2076 5 2076
.I 2077
.T
Cyclical Majority Problem
.W
problem cyclical majority presented some new, simulated
results 3, 4, 5, ..., 40 issues ad 3, 5, 7, ..., 37 judges reported.
.B
CACM April, 1970
.A
Pomeranz, J. E.
Weil Jr., R. L.
.K
Arrow's paradox, cyclical majority, simulation,
voter's paradox, voting paradox
.C
3.31 3.35
.N
CA700407 JB February 13, 1978 2:58 PM
.X
2077 5 2077
2077 5 2077
2077 5 2077
.I 2078
.T
Representations Space Planning
.W
Problems involving arrangement objects two-
three-space objective function primarily consists
derivatives distance between objects their arrangement
called space planning problems. representational
requirements problem area defined compared current
computer graphic languages. Four alternative data structures
allow automated space planning described compared.
.B
CACM April, 1970
.A
Eastman, C. M.
.K
automated design, data structures, computer graphics, computer-aided
design, engineering design, architectural design, robots
.C
3.20 3.2
2, 3.26, 3.41, 3.63
.N
CA700406 JB February 13, 1978 3:03 PM
.X
2078 5 2078
2078 5 2078
2078 5 2078
2389 5 2078
2078 6 2078
.I 2079
.T
Multiprogramming, Machine Coding, Computer Organization
.B
CACM April, 1970
.A
Wirth, N.
.N
CA700405 JB February 13, 1978 3:05 PM
.X
2079 5 2079
2079 5 2079
2079 5 2079
.I 2080
.T
Nucleus Multiprogramming System
.W
paper describes philosophy structure multiprogramming system
can extended hierarchy operating systems suit diverse
requirements program scheduling resource allocation. system
nucleus simulates environment which program execution input/output
handled uniformly parallel, cooperating process
es. fundamental set primitives allows dynamic creation control
hierarchy processes well communication among them.
.B
CACM April, 1970
.A
Hansen, P. B.
.K
multiprogramming, operating systems, parallel processes, process concept,
process communication, message buffering, process
hierarchy, process creation, process removal
.C
4.30 4.31 4.32 4.41
.N
CA700404 JB February 13, 1978 3:10 PM
.X
1657 4 2080
2080 4 2080
2357 4 2080
2536 4 2080
1523 5 2080
2080 5 2080
2080 5 2080
2080 5 2080
2319 5 2080
2320 5 2080
2378 5 2080
2632 5 2080
2738 5 2080
2740 5 2080
2868 5 2080
3127 5 2080
1408 6 2080
1471 6 2080
1471 6 2080
1719 6 2080
1749 6 2080
1749 6 2080
1749 6 2080
1749 6 2080
1751 6 2080
1877 6 2080
2016 6 2080
2017 6 2080
2080 6 2080
2080 6 2080
2080 6 2080
2080 6 2080
2080 6 2080
2080 6 2080
2080 6 2080
2080 6 2080
2150 6 2080
2188 6 2080
2203 6 2080
2204 6 2080
2247 6 2080
2277 6 2080
2356 6 2080
2377 6 2080
2380 6 2080
2558 6 2080
2625 6 2080
2632 6 2080
2777 6 2080
.I 2081
.T
Some Complete Calculi Matrices
.W
matrix calculus introduced intention developing data structures
suitable high level algorithmic language mathematical programming.
paper investigates special structure matrices can described
utilized efficient computing saving memory space
superfluous operations. Sequences Matrices (and sequences sequences
matrices) considered, matrix operators areext
ended sequence operators cumulative operators. Algorithms
given which use symbol manipulation matrix expressions so
find forms best suited computation. These forms
called normal forms. Several completeness results obtained
sense each expression equivalent expression
normal form can found within specified calculus.
.B
CACM April, 1970
.A
Bayer, R.
Witzgall, C.
.K
complete calculus, data structures, linear
programming, matrix, matrix concatenation,
matrix sequences, programming languages,
sequence operations, symbol manipulation
.C
4.12 4.22 5.14 5.41
.N
CA700403 JB February 13, 1978 3:18 PM
.X
2081 5 2081
2081 5 2081
2081 5 2081
2253 5 2081
2254 5 2081
2081 6 2081
2081 6 2081
437 6 2081
.I 2082
.T
Syntax-Directed Documentation PL 360
.W
language PL 360, together its phrase structure grammar, used
concrete basis illustrating idea called syntax-directed documentation.
idea (1) use phrase structure program define
structure formal documentation program; (2) use syntactic
types identifiers resulting structure trigger automatic
formation questions programmer, whose answers
become part documentation; (3) provide automatic storage
retrieval facilities so other programmers want
understand modify program can access resulting documentation,
which cross-indexed various ways syntactic types
objects. small PL 360 program, already found
literature, worked out example.
.B
CACM April, 1970
.A
Mills, H. D.
.K
documentation, syntax analysis, PL 360, enforced documentation,
indexed documentation, automatic interrogation,
phase structured grammar, syntax-directed documentation, syntax processing
.C
3.59 3.79 4.19 4.43
.N
CA700402 JB February 13, 1978 3:28 PM
.X
1542 4 2082
1683 4 2082
1693 4 2082
1781 4 2082
1787 4 2082
1836 4 2082
1945 4 2082
2060 4 2082
2061 4 2082
2082 4 2082
2082 4 2082
2091 4 2082
2152 4 2082
2179 4 2082
2340 4 2082
2356 4 2082
2546 4 2082
2603 4 2082
2698 4 2082
2708 4 2082
2824 4 2082
2982 4 2082
2986 4 2082
3045 4 2082
3093 4 2082
1491 5 2082
2082 5 2082
2082 5 2082
2082 5 2082
2314 5 2082
518 5 2082
1098 6 2082
1626 6 2082
2082 6 2082
2148 6 2082
.I 2083
.T
Creation Control Internal Data Bases
Under Fortran Programming Environment
.W
method described definition user's COMMON structure
automatic generation necessary COMMON, DIMENSION, EQUIVALENCE,
type declarations each user's routines. definition
COMMON contained easy modify form, thus
allowing control general communications data between routines.
described system has been implemented IBM 7094,
CDC 6000 series, IBM 360. method has proved invaluable
definition control COMMON many large-scale programs.
.B
CACM April, 1970
.A
DeSalvio, A. J.
Purdy, J. G.
Rau, J.
.K
data base, Fortran, common, common equivalencing,
subroutine communication, data communication
.C
3.73 4.12 4.43
.N
CA700401 JB February 13, 1978 3:34 PM
.X
1086 4 2083
1132 4 2083
1234 4 2083
1263 4 2083
1265 4 2083
1270 4 2083
1323 4 2083
1358 4 2083
1379 4 2083
1380 4 2083
1453 4 2083
1464 4 2083
1484 4 2083
1491 4 2083
1498 4 2083
1613 4 2083
1614 4 2083
1781 4 2083
1825 4 2083
1845 4 2083
1860 4 2083
1900 4 2083
2083 4 2083
2083 4 2083
2154 4 2083
2178 4 2083
2179 4 2083
2252 4 2083
2270 4 2083
2325 4 2083
2341 4 2083
2546 4 2083
2645 4 2083
2652 4 2083
2684 4 2083
2693 4 2083
2842 4 2083
2929 4 2083
2934 4 2083
3069 4 2083
669 4 2083
679 4 2083
691 4 2083
761 4 2083
949 4 2083
989 4 2083
988 5 2083
2083 5 2083
2083 5 2083
2083 5 2083
3184 5 2083
.I 2084
.T
Note Complement Inherently Ambiguous Context-Free Languages
.B
CACM March, 1970
.A
Maurer, H. A.
.K
ambiguity, inherent ambiguity, complement, context-free language,
Chomsky-language, phrase structure language, production system,
type 2 language, bounded language
.C
5.22 5.24
.N
CA700314 JB February 13, 1978 3:37 PM
.X
2084 5 2084
2084 5 2084
2084 5 2084
.I 2085
.T
Comment Paging Anomaly
.B
CACM March, 1970
.A
Dempster, J. R. H.
.K
paging machines, demand paging, replacement algorithm
.C
4.30
.N
CA700313 JB February 13, 1978 3:39 PM
.X
1892 4 2085
1901 4 2085
2022 4 2085
2085 4 2085
2085 4 2085
2095 4 2085
2218 4 2085
2277 4 2085
2319 4 2085
2329 4 2085
2358 4 2085
2373 4 2085
2380 4 2085
2434 4 2085
2499 4 2085
2501 4 2085
2582 4 2085
2669 4 2085
2828 4 2085
2863 4 2085
2881 4 2085
2928 4 2085
2996 4 2085
3006 4 2085
3006 4 2085
3067 4 2085
1751 5 2085
1884 5 2085
2085 5 2085
2085 5 2085
2085 5 2085
.I 2086
.T
Another Method Converting Hexadecimal Decimal
.B
CACM March, 1970
.A
Kailas, M. V.
.K
binary-decimal conversion, computer arithmetic categories
.N
CA700312 JB February 13, 1978 3:41 PM
.X
2086 5 2086
2086 5 2086
2086 5 2086
.I 2087
.T
Number System Permutations
.B
CACM March, 1970
.A
Pager, D.
.K
permutation, ordering, number, number system, p-number, combinatorial
.C
4.49 5.39
.N
CA700311 JB February 13, 1978 3:42 PM
.X
2087 4 2087
2189 4 2087
3188 4 2087
1594 5 2087
2087 5 2087
2087 5 2087
2087 5 2087
2189 5 2087
1594 6 2087
2087 6 2087
3191 6 2087
521 6 2087
.I 2088
.T
Netflow (ALgorithm 336 $H))
.B
CACM March, 1970
.A
Bray, T. A.
Witzgall, C.
.K
capacitated network, linear programming, minimum-cost
flow, network flow, out-of-kilter
.C
5.32 5.41
.N
CA700310 JB February 13, 1978 3:44 PM
.X
2088 5 2088
2088 5 2088
2088 5 2088
.I 2089
.T
Prime Number (Algorithm 310 $A1))
.B
CACM March, 1970
.A
Rapp, D. G.
Scott, L. D.
.K
prime numbers, generator
.C
5.0
.N
CA700309 JB February 13, 1978 3:45 PM
.X
2089 5 2089
2089 5 2089
2089 5 2089
.I 2090
.T
Symbolic Expansion Algebraic Expressions (Algorithm 377 $R2))
.B
CACM March, 1970
.A
Levine, M. J.
.K
algebra, symbolic algebra, symbolic
multiplication, algebraic distribution,
algebraic multiplication, distribution algorithm,
multiplication algorithm, product
algorithm, polynomial distribution, polynomial expansion
.C
3.10 3.17 3.20 4.13 4.90
.N
CA700308 JB February 13, 1978 3:49 PM
.X
2090 5 2090
2090 5 2090
2090 5 2090
.I 2091
.T
PDEL-A Language Partial Differential Equations
.W
Conventional computer methods available solve
continuous system problems characterized partial
differential equations very time-consuming cumbersome.
convenient, easy learn use, high level problem oriented
language solve study partial differential equation problems
has been designed; practical translator language has also
been designed, working version has been constructed
significant portion language. Partial Differential
Equation Language, PDEL, outlined, highlights
translator briefly summarized.
.B
CACM March, 1970
.A
Cardenas, A. F.
Karplus, W. J.
.K
problem oriented digital simulation language,
partial differential equations, translator,
PL/1, preprocessor PL/1, finite difference algorithms
.C
3.1 3.2 4.22 5.17
.N
CA700307 JB February 13, 1978 4:18 PM
.X
1379 4 2091
1503 4 2091
1542 4 2091
1683 4 2091
1693 4 2091
1693 4 2091
1781 4 2091
1781 4 2091
1781 4 2091
1787 4 2091
1836 4 2091
1836 4 2091
1860 4 2091
1945 4 2091
1945 4 2091
2015 4 2091
2060 4 2091
2060 4 2091
2061 4 2091
2061 4 2091
2082 4 2091
2091 4 2091
2091 4 2091
2091 4 2091
2152 4 2091
2179 4 2091
2179 4 2091
2340 4 2091
2356 4 2091
2546 4 2091
2546 4 2091
2603 4 2091
2698 4 2091
2698 4 2091
2708 4 2091
2708 4 2091
2824 4 2091
2982 4 2091
2986 4 2091
3045 4 2091
3045 4 2091
3093 4 2091
1366 5 2091
1477 5 2091
1491 5 2091
2091 5 2091
2091 5 2091
2091 5 2091
.I 2092
.T
Deductive Question-Answer Natural Language Inference
.W
question-answering aspects Protosynthex III pro
totype language processing system described exemplified
detail. system written LISP 1.5 operates Q-32
time-sharing system. system's data structures their semantic
organization, deductive question-answering formalism
relational properties complex-relation-forming operators,
question-answering procedures which employ these features
their operation all described illustrated. Examples
system's performance limitations its question-answering
capability presented discussed. shown
use semantic information deductive question answering greatly
facilitates process, top-down procedure which works
question answer enables effective use made
information. concluded development Protosynthex
III into practically useful system work large data
bases possible but require changes both data
structures algorithms used question answering.
.B
CACM March, 1970
.A
Schwarcz, R. M.
Burger, J. F.
Simmons, R. F.
.K
question answering, natural language, Protosynthex III, LISP,
semantics, artificial intelligence, computational
linguistics, language processing, fact retrieval
.C
3.42 3.61
.N
CA700306 JB February 13, 1978 4:30 PM
.X
2092 4 2092
2127 4 2092
1527 5 2092
2092 5 2092
2092 5 2092
2092 5 2092
2396 5 2092
1487 6 2092
1856 6 2092
2092 6 2092
2127 6 2092
.I 2093
.T
Comparison Error Improvement Estimates
Adaptive Trapezoid Integration
.W
Various simple choices error improvement estimates trapezoid
rule studied demonstrate comparison procedure which
relatively independent profusion adaptive search stopping
strategies. Comparisons based x^r, `; inclusion
noninteger powers makes more realistic than usual polynomial
based comparison. Behavior near singularity found
dominant factor, new estimate, based constant
curvature assumption parametric differences, considered
slightly better than other choices considered.
.B
CACM March, 1970
.A
Schweikert, D. G.
.K
adaptive integration, error improvement estimate,
trapezoid rule, nonpolynomial error criteria
.C
5.16
.N
CA700305 JB February 13, 1978 4:47 PM
.X
1352 4 2093
1352 4 2093
1352 4 2093
1352 4 2093
2048 4 2093
2048 4 2093
2074 4 2093
2074 4 2093
2074 4 2093
2093 4 2093
2093 4 2093
2093 4 2093
2093 4 2093
2093 4 2093
2093 4 2093
2550 4 2093
2550 4 2093
1092 5 2093
1298 5 2093
1573 5 2093
2093 5 2093
2093 5 2093
2093 5 2093
429 5 2093
834 5 2093
872 5 2093
.I 2094
.T
Algorithm Nonlinear Minimax Approximation
.W
Certain nonlinear minimax approximation problems characterize
d properties which permit application special algorithms,
mainly based exchange algorithms Remes (1934, 1935),
their solution. paper application problems
type general nonlinear algorithm due Osborne Watson
(1969) considered. Examples given illustrate
algorithm can give satisfactory results and, particular, can
successfully solve problems which lead difficulties
more conventional specialist method.
.B
CACM March, 1970
.A
Watson, G. A.
.K
minimax approximation, nonlinear approximation, linear programming
.C
5.13 5.41
.N
CA700304 JB February 13, 1978 4:52 PM
.X
1932 4 2094
2094 4 2094
1566 5 2094
2094 5 2094
2094 5 2094
2094 5 2094
2352 5 2094
2353 5 2094
2094 6 2094
2094 6 2094
.I 2095
.T
Measurements Segment Size
.W
Distributions segment sizes measured under routine operating con
ditions computer system which utilizes variable sized segments
(the Burroughs B5500) discussed. most striking feature
measurements large number small segments-about 60
percent segments use contain less than 40 words. Although
results certainly not installation independent, although they
particularly influenced features B5500 ALGOL system, they
should relevant design new computer systems,
especially respect organization paging schemes.
.B
CACM March, 1970
.A
Batson, A.
Ju, S.
Wood, D. C.
.K
storage allocation, segmentation, segment sizes, page sizes,
paging, resource allocation, memory allocation, core utilization
.C
4.32 6.2 6.34 6.9
.N
CA700303 JB February 13, 1978 4:58 PM
.X
1879 4 2095
1884 4 2095
1892 4 2095
1892 4 2095
1901 4 2095
1901 4 2095
1924 4 2095
2085 4 2095
2095 4 2095
2095 4 2095
2095 4 2095
2095 4 2095
2218 4 2095
2218 4 2095
2218 4 2095
2277 4 2095
2277 4 2095
2297 4 2095
2297 4 2095
2319 4 2095
2329 4 2095
2358 4 2095
2365 4 2095
2373 4 2095
2374 4 2095
2380 4 2095
2434 4 2095
2499 4 2095
2498 4 2095
2501 4 2095
2526 4 2095
2582 4 2095
2596 4 2095
2667 4 2095
2668 4 2095
2669 4 2095
2734 4 2095
2828 4 2095
2862 4 2095
2863 4 2095
2863 4 2095
2881 4 2095
2902 4 2095
2911 4 2095
2928 4 2095
2996 4 2095
3000 4 2095
3006 4 2095
3067 4 2095
1728 5 2095
1751 5 2095
1754 5 2095
1879 5 2095
2095 5 2095
2095 5 2095
2095 5 2095
2218 5 2095
2734 5 2095
3000 5 2095
1380 6 2095
1572 6 2095
1728 6 2095
1751 6 2095
1752 6 2095
1810 6 2095
1879 6 2095
1879 6 2095
1879 6 2095
2095 6 2095
2095 6 2095
2095 6 2095
2864 6 2095
.I 2096
.T
Experiments M & N Tree-Searching Program
.W
M & N procedure improvement mini-max
backing-up procedure widely used computer program game-playing
other purposes. based principle
desirable have many options making decisions face
uncertainty. mini-max procedure assigns MAX (MIN) node
value highest (lowest) valued successor node.
M & N procedure assigns MAX (MIN) node some function
M (N) highest (lowest) valued successors. M & N procedure
written LISP play game kalah, demonstrated
M & N procedure significantly superior mini-max
procedure. statistical significance important conclusions given.
Since information statistical significance has often been lacking papers
computer experiments artificial intelligence field, these experiments
can perhaps serve model future work.
.B
CACM March, 1970
.A
Slagle, J. R.
Dixon, J. K.
.K
artificial intelligence, heuristic program, tree searching,
LISP, kalah, game playing, decision theory,
mini-max backing-up procedure, backing-up procedures
.C
3.60 3.64 3.66
.N
CA700302 JB February 14, 1978 8:34 AM
.X
1515 4 2096
2096 4 2096
2127 4 2096
2210 4 2096
1155 5 2096
2096 5 2096
2096 5 2096
2096 5 2096
2215 5 2096
2096 6 2096
.I 2097
.T
Program Teach Programming
.W
TEACH system developed MIT ease cost improve results
elementary instruction programming. student, TEACH offers loosely
guided experience conversational language which designed
teaching mind. Faculty involvement minimal. term experience
TEACH discussed. Pedagogically, system appears successful;
straightforward reimplementation make economically successful well.
Similar programs profound tutorial skill appear only results
extended research. outlines his research beginning become clear.
.B
CACM March, 1970
.A
Fenichel, R. R.
Weizenbaum, J.
Yochelson, J. C.
.K
elementary programming, computer-assisted learning, UNCL, TEACH
.C
1.52
.N
CA700301 JB February 14, 1978 8:42 AM
.X
2097 5 2097
2097 5 2097
2097 5 2097
2153 5 2097
3003 5 2097
1659 6 2097
1678 6 2097
1927 6 2097
1945 6 2097
2097 6 2097
2097 6 2097
2147 6 2097
2163 6 2097
2187 6 2097
2329 6 2097
2345 6 2097
2367 6 2097
2407 6 2097
2478 6 2097
2479 6 2097
2480 6 2097
2538 6 2097
.I 2098
.T
t-Test Probabilities (Algorithm 321);
Student's t-Distribution (Algorithm 344)
.B
CACM February, 1970
.A
Hill, G. W.
Loughhead, M.
.K
t-test, Student's t-statistic, distribution function, approximation
.C
5.12 5.5
.N
CA700217 JB February 14, 1978 8:45 AM
.X
2098 5 2098
2098 5 2098
2098 5 2098
.I 2099
.T
Eigenvalues Eigen vectors
Real General Matrix (Algorithm 343 $F))
.B
CACM February, 1970
.A
Knoble, H. D.
.K
norm, characteristic equation, degenerate eigen-system,
diagonalizable matrix, defective matrix
.C
5.14
.N
CA700216 JB February 14, 1978 9:43 AM
.X
1876 4 2099
1968 4 2099
2099 4 2099
2099 4 2099
2335 4 2099
1662 5 2099
1707 5 2099
1968 5 2099
2099 5 2099
2099 5 2099
2099 5 2099
1662 6 2099
2099 6 2099
.I 2100
.T
Ortho (Algorithm 127 $F5))
.B
CACM February, 1970
.A
Barrodale, I.
.K
orthogonalization, approximation
.C
5.13 5.17 5.5
.N
CA700215 JB February 14, 1978 9:45 AM
.X
2100 5 2100
2100 5 2100
2100 5 2100
.I 2101
.T
Least Squares Fit f(x) = Acos(Bx+C) (Algorithm 376 $E2))
.B
CACM February, 1970
.A
Spath, H.
.K
nonlinear least squares fit
.C
5.15
.N
CA700214 JB February 14, 1978 9:47 AM
.X
2101 4 2101
2102 4 2101
1639 5 2101
2101 5 2101
2101 5 2101
2101 5 2101
.I 2102
.T
Fitting Data One Exponential (Algorithm 375 $E2))
.B
CACM February, 1970
.A
Spath, H.
.K
nonlinear least squares fit
.C
5.15
.N
CA700213 JB February 14, 1978 9:49 PM
.X
2101 4 2102
2102 4 2102
1639 5 2102
2102 5 2102
2102 5 2102
2102 5 2102
.I 2103
.T
Restricted Partition Generator (Algorithm 374 $A1))
.B
CACM February, 1970
.A
White, J. S.
.K
partitions, restricted partitions, sums integers, restricted sums
.C
5.39
.N
CA700212 JB February 14, 1978 9:49 AM
.X
2103 4 2103
1218 5 2103
2103 5 2103
2103 5 2103
2103 5 2103
.I 2104
.T
Number Doubly Restricted Partitions (Algorithm 373 $A1))
.B
CACM February, 1970
.A
White, J. S.
.K
partitions, restricted partitions, sums integers, restricted sums
.C
5.39
.N
CA700211 JB February 14, 1978 9:52 AM
.X
2104 4 2104
2489 4 2104
1219 5 2104
2104 5 2104
2104 5 2104
2104 5 2104
2489 5 2104
1219 6 2104
2104 6 2104
.I 2105
.T
Interactive Computer System Using Graphical Flowchart Input
.W
interactive computer system operational graphical computer terminal
described. system designed demonstrate method programming
computer interpretation flowchart. user draws description
sampled-data system specifies description transmitted large
scale computer. design simulated, graphic representation
processed signal returned scope. successful design may require
numerous modifications original design. graphical interactive system
provides environment perform iterative process efficiently
effectively.
.B
CACM February, 1970
.A
Robins, M. F.
Beyer, J. D.
.K
simulation program, graphical input-output sampled data systems
.C
3.20 3.24
.N
CA700210 JB February 14, 1978 9:57 AM
.X
2003 5 2105
2105 5 2105
2105 5 2105
2105 5 2105
1710 6 2105
1767 6 2105
2105 6 2105
.I 2106
.T
Computer Education Graduate School Management
.W
Several years experience have led belief creative
design evaluation management information systems requires
thorough understanding related computer technology. Concepts
such paging priority interrupt systems can best explained
machine language level. Any machine used exposition
should fulfill several criteria. should: (1) raise few
spurious issues possible; (2) allow, without undue effort,
solution interesting problems; (3) capable exposing all
outstanding issues significance, capable exposing all outstanding
issues significance, within chosen machine; (4)
seful pursuing issues great depth appropriate; (5) not
committed equipment provided any manufacturer; (6) able
provide student diagnostic aids great depth;
(7) allow student ready access machine; (8) capable
extension expose new issues they come along. We have
constructed simulated machine its associated software which
meets these criteria. system, called PRISM system,
documented primer reference manual.
.B
CACM February, 1970
.A
Ness, D. N.
Green, R. S.
Martin, W. A.
Moulton, G. A.
.K
education, simulation, machine language,
management information systems, interpreters
.C
1.52 3.51 4.13 4.21
.N
CA700209 JB February 14, 1978 10:15 AM
.X
2106 5 2106
2106 5 2106
2106 5 2106
.I 2107
.T
Quadratic Quotient Method: Hash
Code Eliminating Secondary Clustering
.W
Secondary clustering cause hash code inefficiency discussed,
new hashing method based its elimination presented. Comparisons
previous methods made both analytically empirically.
.B
CACM February, 1970
.A
Bell, J. R.
.K
hashing, hash code, scatter storage, calculated address, clustering,
search, symbol table, collisions, keys, table look-up
.C
3.74 4.9
.N
CA700208 JB February 14, 1978 10:18 AM
.X
1676 4 2107
1682 4 2107
1728 4 2107
1860 4 2107
1860 4 2107
1973 4 2107
1973 4 2107
1992 4 2107
2018 4 2107
2018 4 2107
2032 4 2107
2033 4 2107
2033 4 2107
2107 4 2107
2107 4 2107
2109 4 2107
2109 4 2107
2203 4 2107
2203 4 2107
2251 4 2107
2251 4 2107
2359 4 2107
2524 4 2107
2543 4 2107
2543 4 2107
2552 4 2107
2559 4 2107
2573 4 2107
2770 4 2107
2991 4 2107
3053 4 2107
1785 5 2107
1786 5 2107
1973 5 2107
1992 5 2107
2107 5 2107
2107 5 2107
2107 5 2107
2138 5 2107
2203 5 2107
2251 5 2107
2530 5 2107
2537 5 2107
2543 5 2107
2559 5 2107
2573 5 2107
2991 5 2107
3053 5 2107
3083 5 2107
911 6 2107
1328 6 2107
1329 6 2107
1785 6 2107
1785 6 2107
1785 6 2107
1785 6 2107
1785 6 2107
1785 6 2107
1785 6 2107
1786 6 2107
1786 6 2107
1786 6 2107
1786 6 2107
1786 6 2107
1786 6 2107
1973 6 2107
1973 6 2107
1973 6 2107
1973 6 2107
1973 6 2107
1992 6 2107
332 6 2107
2018 6 2107
2018 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2107 6 2107
2109 6 2107
2109 6 2107
2109 6 2107
2109 6 2107
2109 6 2107
2203 6 2107
2412 6 2107
2530 6 2107
2537 6 2107
2543 6 2107
2543 6 2107
2552 6 2107
2673 6 2107
2707 6 2107
2770 6 2107
492 6 2107
.I 2108
.T
Variation Sorting Address Calculation
.W
principles address calculation merging combined yield
efficient sorting technique. Detailed flowcharts most important program
steps included. characteristics proposed sort discussed.
.B
CACM February, 1970
.A
Jones, B.
.K
sorting, address calculation, merging, order, sequence creation
.C
4.49 5.31
.N
CA700207 JB February 14, 1978 10:24 AM
.X
2108 5 2108
2108 5 2108
2108 5 2108
.I 2109
.T
Use Quadratic Residue Research
.W
quadratic residue search method has previously been suggested
avoid clustering usually encountered hash address collisions
occur linear search methods used. search size, because
property quadratic residues, limited one half
storage table. shown some classes prime numbers
complement set quadratic residues can easily determined
hence entire table size p, p prime number, can searched.
.B
CACM February, 1970
.A
Radke, C. E.
.K
quadratic residue, search method, hash addressing, address
clustering, scatter storage, file searching, file
addressing, hash coding, quadratic search,
random search, storage layout, searching
.C
3.7 3.73 3.74
.N
CA700206 JB February 14, 1978 10:30 AM
.X
1676 4 2109
1682 4 2109
1728 4 2109
1860 4 2109
1860 4 2109
1973 4 2109
1973 4 2109
1992 4 2109
2018 4 2109
2018 4 2109
2032 4 2109
2033 4 2109
2033 4 2109
2107 4 2109
2107 4 2109
2109 4 2109
2109 4 2109
2203 4 2109
2203 4 2109
2251 4 2109
2251 4 2109
2359 4 2109
2524 4 2109
2543 4 2109
2543 4 2109
2552 4 2109
2559 4 2109
2573 4 2109
2770 4 2109
2991 4 2109
3053 4 2109
1785 5 2109
1786 5 2109
1973 5 2109
2018 5 2109
2109 5 2109
2109 5 2109
2109 5 2109
2203 5 2109
2251 5 2109
2543 5 2109
2770 5 2109
2974 5 2109
3053 5 2109
911 6 2109
1329 6 2109
1785 6 2109
1785 6 2109
1785 6 2109
1785 6 2109
1785 6 2109
1785 6 2109
1786 6 2109
1786 6 2109
1786 6 2109
1786 6 2109
1786 6 2109
1786 6 2109
1869 6 2109
1973 6 2109
1973 6 2109
1973 6 2109
1973 6 2109
1992 6 2109
1992 6 2109
332 6 2109
2018 6 2109
2018 6 2109
2107 6 2109
2107 6 2109
2107 6 2109
2107 6 2109
2107 6 2109
2109 6 2109
2109 6 2109
2109 6 2109
2109 6 2109
2109 6 2109
2109 6 2109
2109 6 2109
2109 6 2109
2251 6 2109
2412 6 2109
2543 6 2109
2673 6 2109
2673 6 2109
2707 6 2109
2770 6 2109
492 6 2109
.I 2110
.T
Efficient Context-free Parsing Algorithm
.W
parsing algorithm which seems most efficient general context-free
algorithm known described. similar both Knuth's LR(k) algorithm
familiar top-down algorithm. has time bound proportional
n^3 (where n length string being parsed) general; has
n^2 bound unambiguous grammars; runs linear time large
class grammars, which seems include most practical context-free
programming language grammars. empirical comparison appears
superior top-down bottom-up algorithms studied Griffiths
Petrick.
.B
CACM February, 1970
.A
Earley, J.
.K
syntax analysis, parsing, context-free grammar,
compilers, computational complexity
.C
4.12 5.22 5.23
.N
CA700205 JB February 14, 1978 10:35 AM
.X
1350 4 2110
1399 4 2110
1659 4 2110
1665 4 2110
1768 4 2110
1768 4 2110
1781 4 2110
1787 4 2110
1824 4 2110
1825 4 2110
1836 4 2110
1861 4 2110
1945 4 2110
2015 4 2110
2110 4 2110
2110 4 2110
2127 4 2110
2187 4 2110
2317 4 2110
2545 4 2110
2698 4 2110
2733 4 2110
3094 4 2110
1265 5 2110
1781 5 2110
1989 5 2110
2060 5 2110
2110 5 2110
2110 5 2110
2110 5 2110
2179 5 2110
2698 5 2110
2921 5 2110
3154 5 2110
1380 6 2110
1421 6 2110
1469 6 2110
1477 6 2110
1477 6 2110
1477 6 2110
1491 6 2110
1491 6 2110
1491 6 2110
1781 6 2110
1825 6 2110
210 6 2110
1869 6 2110
1989 6 2110
2015 6 2110
2046 6 2110
2110 6 2110
2110 6 2110
2110 6 2110
2110 6 2110
2110 6 2110
2110 6 2110
2556 6 2110
3133 6 2110
3184 6 2110
680 6 2110
799 6 2110
799 6 2110
.I 2111
.T
Spelling Correction Systems Programs
.W
Several specialized techniques shown efficiently
incorporating spelling correction algorithms
compilers operating systems. These include use syntax
semantics information, organization restricted keyword
symbol tables, consideration limited class spelling
errors. Sample 360 coding performing spelling correction
presented. using systems which perform spelling correction,
number debugging runs per program has been decreased,
saving both programmer machine time.
.B
CACM February, 1970
.A
Morgan, H. L.
.K
spelling correction, error correction, debugging, compilers,
operating systems, diagnostics, error detection,
misspelling, lexical analysis systems programming
.C
4.42 4.12 3.0 3.79
.N
CA700204 JB February 14, 1978 10:40 AM
.X
1112 4 2111
1179 4 2111
1288 4 2111
1544 4 2111
1592 4 2111
1592 4 2111
1646 4 2111
2111 4 2111
2111 4 2111
2111 4 2111
2111 4 2111
2339 4 2111
2339 4 2111
2339 4 2111
2534 4 2111
2556 4 2111
440 4 2111
2650 4 2111
1112 5 2111
1592 5 2111
2111 5 2111
2111 5 2111
2111 5 2111
2534 5 2111
2556 5 2111
2650 5 2111
2708 5 2111
2887 5 2111
619 5 2111
830 5 2111
830 6 2111
830 6 2111
830 6 2111
1477 6 2111
1491 6 2111
1646 6 2111
1787 6 2111
1787 6 2111
1935 6 2111
1936 6 2111
1959 6 2111
1973 6 2111
2111 6 2111
2111 6 2111
2111 6 2111
2111 6 2111
2111 6 2111
2182 6 2111
2534 6 2111
2556 6 2111
576 6 2111
680 6 2111
680 6 2111
799 6 2111
.I 2112
.T
Translation Equations
.W
Input limited transduction expressions, translation equations,
used describe syntax left-context sensitive semantics
context-free languages. formal procedure given deriving
set translation equations specifications pushdown translator.
translator consists Mealy form finite-state automata interacting
means pushdown stack. Within framework described string
recognition parsing may treated special cases translation
problem.
.B
CACM February, 1970
.A
Vere, S.
.K
automata, Turing machines, regular expression, transduction
expression, context-free languages, translation, recognizers,
parsing, meta-compilers, pushdown transducer, syntax
directed compilers, finite state automata
.C
4.10 4.12 4.20 5.22
.N
CA700203 JB February 14, 1978 10:49 AM
.X
1323 4 2112
1358 4 2112
1380 4 2112
1665 4 2112
1781 4 2112
1787 4 2112
1989 4 2112
2112 4 2112
2534 4 2112
2541 4 2112
2698 4 2112
2733 4 2112
2820 4 2112
3073 4 2112
3155 4 2112
2112 5 2112
2112 5 2112
2112 5 2112
799 5 2112
.I 2113
.T
Multistore Parser Hierarchical Syntactic Structures
.W
syntactic parser described hierarchical concatenation patterns
presented analyzer form linear strings. Particular
emphasis given system "significant addresses" means
which processing times large-scale matching procedures
can substantially reduced. description makes frequent use
examples taken fully operational implementation
parser experimental English sentence analyzer. structuring
area computer's central core storage such way
individual locations bytes bits come represent
data involved matching procedure, shifting information
reduced minimum, searching lists eliminated
altogether. matches traced means binary masks
state single bits determines operational flow
procedure. method could implemented any interpretive
grammar, provided can expressed functional classification
items composing input hierarchical structures.
.B
CACM February, 1970
.A
von Glasersfeld, E.
.K
parsing, syntactic analysis, natural-language analysis, linguistic data
processing, computational linguistics, correlational grammar, structure
recognition, pattern recognition, matching procedures, tree-structure
interpretation, machine translation, automatic abstracting
.C
3.42 3.49 3.63 3.70 3.71
.N
CA700202 JB February 14, 1978 12:57 PM
.X
2113 5 2113
2113 5 2113
2113 5 2113
.I 2114
.T
Formal System Information Retrieval Files
.W
generalized file structure provided
which concepts keyword, index, record, file, directory,
file structure, directory decoding, record retrieval defined
which some frequently used file structures such
inverted files, index-sequential files, multilist files
derived. Two algorithms which retrieve records generalized file
structure presented.
.B
CACM February, 1970
.A
Hsiao, D.
.K
attribute-value pair, index, keyword, record, record address,
K-pointer, K-list, file, directory, generalized file
structure, inverted file, index-sequential-file, multilist file,
description, file search, directory search, serial processing
lists, prime keyword, parallel processing lists
.C
3.70 3.73 3.74
.N
CA700201 JB February 14, 1978 1:04 PM
.X
2114 5 2114
2114 5 2114
2114 5 2114
2160 5 2114
2688 5 2114
2114 6 2114
2114 6 2114
.I 2115
.T
Fortran Tausworthe Pseudorandom Number Generator
.B
CACM January, 1970
.A
Payne, W. H.
.K
random numbers, pseudorandom numbers, shift register sequences
.C
5.5
.N
CA700116 JB February 14, 1978 1:06 PM
.X
2115 4 2115
2115 4 2115
2122 4 2115
1691 5 2115
1930 5 2115
2115 5 2115
2115 5 2115
2115 5 2115
.I 2116
.T
Interchange Rolls Perforated Tape Information
Interchange* (Proposed American National Standard)
.B
CACM January, 1970
.K
interchange, rolls, perforated tape, tape, information
interchange, directional markers, leaders,
trailers, roll-up tape, 9-track paper tape, dimensions
.C
3.70 6.33 6.34 6.35 6.36
.N
CA700115 JB February 14, 1978 1:14 PM
.X
2116 5 2116
2116 5 2116
2116 5 2116
.I 2117
.T
Representation Calen
dar Date Machine-to-Machine Data Interchange*
(Proposed American National Standard)
.B
CACM January, 1970
.K
calendar date, machine-to-machine interchange,
month, year, day, representation coded
.C
3.70 3.73 3.74 3.9
.N
CA700114 JB February 14, 1978 1:42 PM
.X
2117 5 2117
2117 5 2117
2117 5 2117
.I 2118
.T
Efficient Algorithm Sorting
Minimal Storage (Algorithm 347 $M1))
.B
CACM January, 1970
.A
Griffin, R.
Redish, K. A.
.K
sorting,minimal storage sorting, digital computer sorting
.C
5.31
.N
CA700113 JB February 14, 1978 1:43 PM
.X
1919 4 2118
1969 4 2118
2118 4 2118
2348 4 2118
2679 4 2118
3054 4 2118
1175 5 2118
2118 5 2118
2118 5 2118
2118 5 2118
.I 2119
.T
Derivatives (Algorithm 282 $S22))
.B
CACM January, 1970
.A
Gautschi, W.
Klein, B. J.
.K
recursive computation, successive derivatives, error control
.C
5.11 5.12
.N
CA700112 JB February 14, 1978 1:45 PM
.X
1909 4 2119
2119 4 2119
2119 4 2119
2149 4 2119
1023 5 2119
2119 5 2119
2119 5 2119
2119 5 2119
2129 5 2119
2404 5 2119
2119 6 2119
.I 2120
.T
Algorithm Produce Complex Primes, Csieve (Algorithm 372 $A1))
.B
CACM January, 1970
.A
Dunham, K. B.
.K
primes, complex numbers
.C
5.39
.N
CA700111 JB February 14, 1978 1:47 PM
.X
1841 4 2120
1841 4 2120
1967 4 2120
2120 4 2120
2120 4 2120
2120 4 2120
2927 4 2120
2927 4 2120
1537 5 2120
1539 5 2120
1967 5 2120
377 5 2120
2120 5 2120
2120 5 2120
2120 5 2120
1539 6 2120
2120 6 2120
.I 2121
.T
Partitions Natural Order (Algorithm 371 $A1))
.B
CACM January, 1970
.A
McKay, J. K. S.
.K
partitions,number theory
.C
5.39
.N
CA700110 JB February 14, 1978 1:48 PM
.X
2121 5 2121
2121 5 2121
2121 5 2121
.I 2122
.T
General Random Number Generator (Algorithm 370 $G5))
.B
CACM January, 1970
.A
Butler, E. L.
.K
random number generator, probability density function,
transformation, cumulative density function
.C
5.13 5.5
.N
CA700109 JB February 14, 1978 1:50 PM
.X
1794 4 2122
1870 4 2122
2115 4 2122
2122 4 2122
2122 4 2122
1674 5 2122
1691 5 2122
2122 5 2122
2122 5 2122
2122 5 2122
.I 2123
.T
Generator Random Numbers Satisfying
Poisson Distribution (Algorithm 369 $G5))
.B
CACM January, 1970
.A
Schaffer, H. E.
.K
Poisson distribution, random number generator
.C
5.5
.N
CA700108 JB February 14, 1978 1:53 PM
.X
2123 4 2123
1663 5 2123
2123 5 2123
2123 5 2123
2123 5 2123
.I 2124
.T
Numerical Inversion Laplace Transforms (Algorithm 368 $D5))
.B
CACM January, 1970
.A
Stehfest, H.
.K
Laplace transform inversion, integral transformations, integral equations
.C
5.15 5.18
.N
CA700107 JB February 14, 1978 1:55 PM
.X
2124 5 2124
2124 5 2124
2124 5 2124
2591 5 2124
2124 6 2124
.I 2125
.T
Note Minimal Length Polygonal Approximation Digitized Contour
.W
method extracting smooth polygonal
contour digitized image illustrated.
ordered sequence contour points connection graph
image first obtained modified Ledley algorithm one
image scan. minimal perimeter polygon subjected specified constraints
then chosen approximating contour. determination minimal
polygon can reduced nonlinear programming
problem, solved algorithm which takes into account
weak bonds between variables. Some examples presented,
corresponding computing times listed.
.B
CACM January, 1970
.A
Montanari, U.
.K
digitized image, connection tree, minimal polygon,
optimal approximation, nonlinear programming
.C
3.63 5.13 5.17
.N
CA700106 JB February 14, 1978 2:00 PM
.X
2125 5 2125
2125 5 2125
2125 5 2125
2987 5 2125
1326 6 2125
1630 6 2125
2125 6 2125
2547 6 2125
2633 6 2125
421 6 2125
524 6 2125
.I 2126
.T
Experience Extensible Language
.W
operational extensible language system described.
system its base language appraised
respect efficiency, flexibility, utility
different categories users.
.B
CACM January, 1970
.A
Irons, E. T.
.K
programming languages, extensible, compiler, bootstrapping, ambiguity
.C
4.12 4.22
.N
CA700105 JB February 14, 1978 2:02 PM
.X
249 4 2126
254 4 2126
272 4 2126
1046 4 2126
1102 4 2126
1105 4 2126
1109 4 2126
1139 4 2126
1140 4 2126
1140 4 2126
1188 4 2126
1234 4 2126
1263 4 2126
1265 4 2126
1306 4 2126
1464 4 2126
1491 4 2126
1496 4 2126
1693 4 2126
1767 4 2126
1781 4 2126
1781 4 2126
1781 4 2126
1787 4 2126
1824 4 2126
1824 4 2126
1861 4 2126
1945 4 2126
1949 4 2126
321 4 2126
2059 4 2126
2126 4 2126
2126 4 2126
2126 4 2126
2126 4 2126
2126 4 2126
2317 4 2126
2546 4 2126
435 4 2126
437 4 2126
463 4 2126
464 4 2126
483 4 2126
491 4 2126
2732 4 2126
560 4 2126
583 4 2126
584 4 2126
3073 4 2126
627 4 2126
631 4 2126
631 4 2126
632 4 2126
642 4 2126
644 4 2126
653 4 2126
653 4 2126
680 4 2126
680 4 2126
691 4 2126
761 4 2126
762 4 2126
763 4 2126
763 4 2126
795 4 2126
799 4 2126
123 4 2126
140 4 2126
919 4 2126
945 4 2126
989 4 2126
196 5 2126
1614 5 2126
1693 5 2126
2126 5 2126
2126 5 2126
2126 5 2126
2317 5 2126
2546 5 2126
404 5 2126
823 5 2126
1198 6 2126
1477 6 2126
1491 6 2126
1572 6 2126
1693 6 2126
1749 6 2126
1753 6 2126
1781 6 2126
2126 6 2126
2126 6 2126
2148 6 2126
404 6 2126
3184 6 2126
.I 2127
.T
Natural Language Question-Answering Systems: 1969
.W
Recent experiments programming natural
language question-answering systems reviewed
summarize methods have been developed syntactic, semantic,
logical analysis English strings. concluded
least minimally effective techniques have been devised
answering questions natural language subsets small scale
experimental systems useful paradigm has evolved guide
research efforts field. Current approaches semantic
analysis logical inference seen effective beginnings
but questionable generality respect either subtle aspects
meaning applications over large subsets English.
Generalizing current small-scale experiments language-processing
systems based dictionaries thousands entries-with
correspondingly large grammars semantic systems-may entail
new order complexity require invention development
entirely different approaches semantic analysis questions answering.
.B
CACM January, 1970
.A
Simmons, R. F.
.K
question-answering, natural language, artificial intelligence,language
processing, fact retrieval, semantics
.C
3.6 3.64 3.7 3.74
.N
CA700104 JB February 14, 1978 2:10 PM
.X
1155 4 2127
1400 4 2127
1456 4 2127
1468 4 2127
1515 4 2127
1515 4 2127
1553 4 2127
1665 4 2127
1699 4 2127
1768 4 2127
1787 4 2127
1824 4 2127
1825 4 2127
1836 4 2127
1856 4 2127
1861 4 2127
1945 4 2127
2015 4 2127
2096 4 2127
2092 4 2127
2110 4 2127
2127 4 2127
2127 4 2127
2127 4 2127
2127 4 2127
2127 4 2127
2127 4 2127
2187 4 2127
2210 4 2127
2309 4 2127
2310 4 2127
2317 4 2127
2396 4 2127
2396 4 2127
2545 4 2127
2698 4 2127
2730 4 2127
2733 4 2127
1155 5 2127
1324 5 2127
1487 5 2127
1527 5 2127
1781 5 2127
1856 5 2127
2127 5 2127
2127 5 2127
2127 5 2127
2178 5 2127
2396 5 2127
2561 5 2127
1303 6 2127
1323 6 2127
1487 6 2127
1856 6 2127
2059 6 2127
2092 6 2127
2127 6 2127
2127 6 2127
2127 6 2127
3184 6 2127
.I 2128
.T
Processor Allocation Method Time-Sharing
.W
scheduling algorithm proposed which intended minimize changes
tasks processors thereby reduce over-head. algorithm also has
application more general resource allocation problems. implemented
means method efficiently handling dynamically changing segmented
lists.
.B
CACM January, 1970
.A
Mullery, A. P.
Driscoll, G. C.
.K
time sharing, resource allocation, scheduling algorithms,
monitors, dynamic allocation, processor
allocation, multiprogramming, multiprocessing, time
slicing, scheduling, conversational systems,
interactive systems
.C
3.80 4.30 4.31 4.32 6.33
.N
CA700103 JB February 14, 1978 2:15 PM
.X
1751 4 2128
1892 4 2128
2128 4 2128
2218 4 2128
1752 5 2128
2128 5 2128
2128 5 2128
2128 5 2128
.I 2129
.T
Recursive Computation Certain Derivatives-A
Study Error Propagation
.W
brief study made propagation errors
linear first-order difference equations.
recursive computation successive derivatives (e^x)/x
(cos x)/x considered illustration.
.B
CACM January, 1970
.A
Gautschi, W.
.K
recursive computation, successive derivatives, error propagation
.C
5.11 5.12
.N
CA700102 JB February 14, 1978 2:18 PM
.X
2129 4 2129
1449 5 2129
2119 5 2129
2129 5 2129
2129 5 2129
2129 5 2129
2149 5 2129
1023 6 2129
2129 6 2129
2129 6 2129
.I 2130
.T
Automatic Segmentation Cyclic Program Structures
Based Connectivity Processor Timing
.W
Time-shared, multiprogrammed, overlayed batch systems frequently
require segmentation computer programs into discrete portions.
These program portions transferred between executable
peripheral storage whenever necessary; segmentation program
s manner reduces frequency such transfers
subject paper. Segmentation techniques proposed C. V.
Ramamoorthy subject limitations arise preferred
segment size not compatible physical restrictions
imposed available computing equipment. generalization
Ramamoorthy's suggestions made order allow their application
circumstances other than ideal.
.B
CACM January, 1970
.A
Lowe, T. C.
.K
automatic segmentation, cyclic program structures, loops, paging,
multiprogramming, loaders, assemblers, compilers, time-sharing, program
connectivity
.C
4.19 5.24 5.32
.N
CA700101 JB February 14, 1978, 2:20 PM
.X
2130 4 2130
1916 5 2130
2130 5 2130
2130 5 2130
2130 5 2130
2582 5 2130
1751 6 2130
1924 6 2130
2017 6 2130
2130 6 2130
.I 2131
.T
Rapid Computation Weights Interpolatory
Quadrature Rules [D1] (Algorithm 417)
.B
CACM December, 1971
.A
Gustafson, S.
.K
divided differences
.C
5.16
.N
CA711212 JB February 2, 1978 9:33 AM
.X
2131 4 2131
2132 4 2131
2131 5 2131
2131 5 2131
2131 5 2131
2135 5 2131
2131 6 2131
2132 6 2131
.I 2132
.T
Rapid Computation Coefficients Interpolation
Formulas [E1] (Algorithm 416)
.B
CACM December, 1971
.A
Gustafson, S.
.K
divided differences, Newton's interpolation formula
.C
5.13
.N
CA711211 JB February 2, 1978 9:36 AM
.X
2131 4 2132
2132 4 2132
2135 5 2132
2132 5 2132
2132 5 2132
2132 5 2132
2131 6 2132
2132 6 2132
.I 2133
.T
Algorithm Assignment Problem
(Rectangular Matrices) [H] (Algorithm 415)
.B
CACM December, 1971
.A
Bourgeois, F.
Lassalle, J. C.
.K
operations research, optimization theory,
assignment problem, rectangular matrices
.C
5.39 5.40
.N
CA711210 JB February 2, 1978 9:38 AM
.X
2133 4 2133
2133 4 2133
2134 4 2133
124 5 2133
2133 5 2133
2133 5 2133
2133 5 2133
2134 5 2133
.I 2134
.T
Extension Munkres Algorithm
Assignment Problem Rectangular Matrices
.W
assignment problem, together Munkres
proposed algorithm its solution square
matrices, presented first. Then authors develop
extension algorithm which permits
solution rectangular matrices. Timing results
obtained using adapted version Silver's
Algol procedure discussed, relation between
solution time problem size given.
.B
CACM December, 1971
.A
Bourgeois, F.
Lassalle, J.
.K
operations research, optimization theory, assignment
problem, rectangular matrices, algorithm
.C
5.39 5.40
.N
CA711209 JB February 2, 1978 9:46 AM
.X
2133 4 2134
2134 4 2134
124 5 2134
2133 5 2134
2134 5 2134
2134 5 2134
2134 5 2134
124 6 2134
2134 6 2134
.I 2135
.T
Rapid Computation General Interpolation
Formulas Mechanical Quadrature Rules
.W
Let f have n continuous closed interval
[a,b] let L linear functional. attempt
made approximate L (f) L (Q) Q polynomial,
approximating f. Algorithms developed
rapid computation L (Q) wide class
selections Q which includes Lagrangian
Hermitian rules special cases.
.B
CACM December, 1971
.A
Gustafson, S.
.K
linear functionals, divided differences, Newton's interpolation formula
.C
5.13 5.16
.N
CA711208 JB February 2, 1978 9:49 AM
.X
2135 4 2135
2135 4 2135
2131 5 2135
2135 5 2135
2135 5 2135
2135 5 2135
2132 5 2135
2135 6 2135
2135 6 2135
.I 2136
.T
Note "A Modification Nordsieck's
Method Using 'Off-Step' Point"
.B
CACM December, 1971
.A
Blumberg, J. W.
Foulk, C. R.
.K
ordinary differential equations, multi-step methods,
predictor, corrector, round-off error, Nordsieck's
method, Gragg-Stetter modification
.C
5.11 5.16 5.17
.N
CA711207 JB February 2, 1978 9:52 AM
.X
2136 5 2136
2136 5 2136
2136 5 2136
.I 2137
.T
New LISP Techniques Paging Environment
.W
system described herein employs block
concept, global local variables,
addition methods applied most LISP systems.
Also, new means list representation
used: "local sequential" lists created during compilation,
"block level sequential" those
created dynamically. new garbage collection algorithm
has been introduced make lists compact
possible; partial garbage collection performed after
each block exit instead total garbage collection
storage exhausted. algorithm does not use
customary flagging procedure. combination
features has eliminated need free list,
effectively minimizes number pages used
any moment.
.B
CACM December, 1971
.A
Rochfeld, A.
.K
LISP, list processing, paging, virtual memory,
garbage collection, core fragmentation, compact
list structures, block, segment
.C
4.12 4.22 4.32
.N
CA711206 JB February 2, 1978 10:01 AM
.X
1073 4 2137
2137 4 2137
2276 4 2137
1153 5 2137
2137 5 2137
2137 5 2137
2137 5 2137
.I 2138
.T
BLISS: Language Systems Programming
.W
language, BLISS, described. language
designed so especially suitable
use writing production software systems
specific machine (the PDP-10): compilers, operating
systems, etc. Prime design goals design
ability produce highly efficient object code,
allow access all relevant hardware features
host machine, provide rational means
which cope evolutionary nature systems
programs. major feature which contributes
realization these goals mechanism permitting
definition representation all
data structures terms access algorithm elements structure.
.B
CACM December, 1971
.A
Wulf, W. A.
Russell, D. B.
.K
programming languages, implementation language,
systems programming, data structures
.C
4.12 4.21 4.22
.N
CA711205 JB February 2, 1978 10:09 AM
.X
1973 4 2138
1992 4 2138
2138 4 2138
2203 4 2138
2251 4 2138
2530 4 2138
2537 4 2138
2543 4 2138
2559 4 2138
2573 4 2138
2991 4 2138
3053 4 2138
3083 4 2138
2107 5 2138
2138 5 2138
2138 5 2138
2138 5 2138
2411 5 2138
2709 5 2138
2889 5 2138
2937 5 2138
2989 5 2138
3005 5 2138
3025 5 2138
3101 5 2138
1069 6 2138
1425 6 2138
2138 6 2138
2138 6 2138
2138 6 2138
2138 6 2138
2138 6 2138
2138 6 2138
2138 6 2138
2138 6 2138
2193 6 2138
2204 6 2138
2326 6 2138
2388 6 2138
2438 6 2138
2456 6 2138
2455 6 2138
2477 6 2138
2989 6 2138
3185 6 2138
.I 2139
.T
Implementation Substring Test Hashing
.W
technique described implementing
test which determines if one string substring
another. there low probability test
satisfied, shown operation
can speeded up considerably if preceded
test appropriately chosen hash codes
strings.
.B
CACM December, 1971
.A
Harrison, M. C.
.K
substring, hashing, subset, signature, information
compression, information retrieval, searching
.C
3.74 5.30 5.6
.N
CA711204 JB February 2, 1978 10:14 AM
.X
2139 5 2139
2139 5 2139
2139 5 2139
2532 5 2139
2631 5 2139
2746 5 2139
3001 5 2139
1665 6 2139
1739 6 2139
2033 6 2139
2139 6 2139
2139 6 2139
2139 6 2139
2139 6 2139
2532 6 2139
2545 6 2139
2786 6 2139
.I 2140
.T
Retrieval-Update Speed Tradeoffs Using Combined Indices
.W
paper November 1970 Communications
ACM, V. Y. Lum introduced technique
file indexing named combined indices. technique
permitted decreased retrieval time cost
increased storage space. paper examines combined
indices under conditions file usage
different fractions retrieval update. Tradeoff
curves developed show minimal cost file
usage grouping various partially combined indices.
.B
CACM December, 1971
.A
Mullin, J. K.
.K
file organization, combined index files, inverted
files, information retrieval, query, multi-attribute
retrieval, file update
.C
3.73 3.74 3.79
.N
CA711203 JB February 2, 1978 10:18 AM
.X
2140 4 2140
2452 4 2140
2765 4 2140
2901 4 2140
3134 4 2140
1976 5 2140
2140 5 2140
2140 5 2140
2140 5 2140
.I 2141
.T
Algorithmic Selection Best
Method Compressing Map Data Strings
.W
best dozen different methods
compressing map data illustrated. choices
generated encoding data strings-sequence like
codes-by three methods four directions.
Relationships developed between compression alternatives
avoid comparing all them. technique
has been used compress data forest resource maps,
but widely applicable map photographic
data reduction.
.B
CACM December, 1971
.A
Amidon, E. L.
Akin, G. S.
.K
data compression, map storage, information retrieval,
input/output, run coding, data reduction
.C
3.71 3.74
.N
CA711202 JB February 2, 1978 10:23 AM
.X
2141 5 2141
2141 5 2141
2141 5 2141
.I 2142
.T
Reconstruction Pictures Their Projections
.W
There situations natural sciences
medicine (e.g. electron microscopy
X-ray photography) which desirable estimate
gray levels digital picture individual
points sums gray levels along straight
lines (projections) few angles. Usually,
such situations, picture far determined
problem find "most representative"
picture. Three algorithms described (all using
Monte Carlo methods) which were designed solve
problem. algorithms applicable large
varied number fields. most important
uses may reconstruction possibly asymmetric particles
electron micrographs three-dimensional
X-ray analysis.
.B
CACM December, 1971
.A
Gordon,R.
Herman, G. T.
.K
approximation, biomedical image processing, efficient
encoding, image processing, linear programming,
mathematical programming, Monte Carlo techniques, optimization,
picture compression, picture description,
picture processing, stereology, X-ray analysis
.C
3.12 3.13 3.15 3.17 3.63 5.41 5.6
.N
CA711201 JB February 2, 1978 10:32 AM
.X
2142 4 2142
2142 4 2142
2529 4 2142
1929 5 2142
2142 5 2142
2142 5 2142
2142 5 2142
2231 5 2142
.I 2143
.T
Chebyshev Approximation Continuous Functions
Chebyshev System Functions [E2] (Algorithm 414)
.B
CACM November, 1971
.A
Bolub, G. H.
Smith, L. B.
.K
approximation, Chebyshev approximation, Remex algorithm
.C
5.13
.N
CA711106 JB February 2, 1978 10:35 AM
.X
2143 4 2143
1734 5 2143
2143 5 2143
2143 5 2143
2143 5 2143
.I 2144
.T
Accurate Floating-Point Summation
.W
accumulation floating-point sums
considered computer which performs t-digit
base B floating-point addition exponents range
-m M. algorithm given accurately
summing N t-digit floating-point numbers. Each
these N numbers split into q parts, forming qN
t-digit floating-point numbers. Each these then
added appropriate one n auxiliary t-digit
accumulators. Finally, accumulators added together
yield computed sum. all, qN+n-1
t-digit floating-point additions performed. Under
usual conditions, relative error computed
sum most [(t+1)/v]B^(1-t) some v. Further,
additional q+n-1 t-digit additions,
computed sum can corrected full t-digit accuracy.
example, IBM/360 (B=16, t=14, M=63,
m=64), typical values q n q=2 n=32.
case, (*) becomes N <= 32,768, we have
[(t+1)/v]B^(1-t) = 4x16^-13.
.B
CACM November, 1971
.A
Malcolm, M. A.
.K
floating-point summation, error analysis
.C
5.11 5.19
.N
CA711105 JB February 2, 1978 10:48 AM
.X
1328 4 2144
1333 4 2144
2144 4 2144
1052 5 2144
2144 5 2144
2144 5 2144
2144 5 2144
.I 2145
.T
Automation Etching-Pattern Layout
.W
HELP (Heuristic Etching-Pattern Layout Program)
application program developed computerize
tedious error-prone although vitally important
wiring design printed circuit boards. HELP
helps automate design stage one step closer production
than logical design. can used design
wiring patterns two-layer circuit boards which
ICs dual-in-line packages well discrete
components such transistors resistors have been
placed. HELP employs two methods wiring.
One heuristic method, which simulates human
approaches wiring design, other
theoretically interesting but time-consuming method
maze-running, based Lee's algorithm. HELP
performs more than 90 percent required wiring
heuristic path respect performance
function each point-to-point, point-to-line
connection. can bring number successful
wiring connections very close 100 percent.
.B
CACM November, 1971
.A
Aramaki, I.
Kawabata, T.
Kazuhiko, A.
.K
heuristic etching-pattern layout, wiring design
printed circuit board, maze-running, Lee's algorithm
.C
3.24 3.66 4.9 6.9
.N
CA711104 JB February 2, 1978 10:58 AM
.X
2145 5 2145
2145 5 2145
2145 5 2145
.I 2146
.T
Optimizing Polyphase Sort
.W
Various dispersion algorithms polyphase
sorting procedure examined.The optimum
algorithm based minimizing total number unit
strings read displayed. logic
algorithm rather complicated; hence, several other
new dispersion algorithms more straightforward
logic presented. simple dispersion algorithms
discussed, Horizontal best. does
approximately one-fourth one one-half percent
less reading writing than most algorithms
use today. additional two one-fourth three
percent improvement can achieved utilizing
Modified Optimum Algorithm. algorithm relatively
straightforward, but requires fairly
close estimate total number unit strings before dispersion begins.
.B
CACM November, 1971
.A
Shell, D. L.
.K
sorting, polyphase sorting, dispersion algorithms,
optimum dispersion algorithm, repetition operator
.C
5.31
.N
CA711103 JB February 2, 1978 11:39 AM
.X
1117 4 2146
1117 4 2146
2017 4 2146
2017 4 2146
2017 4 2146
2146 4 2146
2146 4 2146
2146 4 2146
2146 4 2146
479 4 2146
677 4 2146
860 4 2146
861 4 2146
862 4 2146
863 4 2146
299 5 2146
2146 5 2146
2146 5 2146
2146 5 2146
862 5 2146
863 5 2146
861 5 2146
.I 2147
.T
Using Computers Higher Education:
Past Recommendations, Status, Needs
.W
Data survey conducted National
Science foundation support, which published
December 1970, reviewed, pointed out
that, regard computers higher education,
national goals stated Rosser Pierce Reports
have not been attained. Quality lacking
hardware courses nearly half associate
bachelor's degree programs data processing,
computer science, etc., offered 1966-67. plea
made continuing studies status goals
computing higher education, improvement degree
programs, national testing laboratory
educational technology.
.B
CACM November, 1971
.A
Hamblen, J. W.
.K
higher education, computers, degree programs, national
goals, testing laboratory, educational technology
.C
1.50 1.52 1.53 2.45 3.51
.N
CA711102 JB February 2, 1978 11:44 AM
.X
1720 4 2147
1927 4 2147
2147 4 2147
2163 4 2147
2345 4 2147
2478 4 2147
2594 4 2147
2852 4 2147
2899 4 2147
3130 4 2147
1771 5 2147
2147 5 2147
2147 5 2147
2147 5 2147
3003 5 2147
1659 6 2147
1678 6 2147
1927 6 2147
1945 6 2147
2097 6 2147
2147 6 2147
2163 6 2147
2187 6 2147
2329 6 2147
2345 6 2147
2367 6 2147
2407 6 2147
2478 6 2147
2479 6 2147
2480 6 2147
2538 6 2147
.I 2148
.T
Composition Semantics Algol 68
.W
main features Algol 68 explained
semantic point view. shown
language permits composition values actions,
i.e. ultimately programs, minimum
set primitives few fundamental recursive rules
composition. associated syntax briefly
reviewed. attempt has been made obtain structured
simple introduction both Algol 68
its orthogonal design.
.B
CACM November, 1971
.A
Branquart, P.
Lewi, J.
Sintzoff, M.
Wodon, P. L.
.K
programming primitives, programming languages,
Algol, semantics, recursive composition, design
programming languages, data structures
.C
1.3 4.2 4.22 5.23 5.24
.N
CA711101 JB February 2, 1978 11:49 AM
.X
2148 5 2148
2148 5 2148
2148 5 2148
2314 5 2148
2317 5 2148
2842 5 2148
1098 6 2148
1198 6 2148
1572 6 2148
1626 6 2148
1693 6 2148
1749 6 2148
1753 6 2148
1781 6 2148
210 6 2148
2060 6 2148
2082 6 2148
2126 6 2148
2148 6 2148
2148 6 2148
2148 6 2148
2192 6 2148
3184 6 2148
.I 2149
.T
ENTCAF ENTCRE: Evaluation Normalized
Taylor Coefficients Analytic Function [C5]
(Algorithm 413)
.B
CACM October, 1971
.A
Lyness, J. N.
.K
Taylor coefficients, Taylor series, Cauchy integral,
numerical integration, numerical differentiation,
interpolation, complex variable, complex arithmetic, fast Fourier transform
.C
5.12 5.13 5.16
.N
CA711007 JB February 2, 1978 11:53 AM
.X
2119 4 2149
2149 4 2149
2129 5 2149
2149 5 2149
2149 5 2149
2149 5 2149
.I 2150
.T
Concurrent Control "Readers" "Writers"
.W
problem mutual exclusion several
independent processes simultaneous access
"critical section" discussed case
there two distinct classes processes known
"readers" "writers." "readers" may share
section each other, but "writers" must
have exclusive access. Two solutions presented:
one case we wish minimum delay
readers; other case we wish
writing take place early possible.
.B
CACM October, 1971
.A
Courois, P. J.
Heymans, F.
Parnas, D. L.
.K
mutual exclusion, critical section, shared access resources
.C
4.30 4.32
.N
CA711006 JB February 2, 1978 11:58 AM
.X
1781 4 2150
1828 4 2150
1854 4 2150
1877 4 2150
1960 4 2150
2150 4 2150
2150 4 2150
2150 4 2150
2228 4 2150
2228 4 2150
2256 4 2150
2256 4 2150
2317 4 2150
2317 4 2150
2319 4 2150
2377 4 2150
2342 4 2150
2342 4 2150
2342 4 2150
2376 4 2150
2376 4 2150
2379 4 2150
2424 4 2150
2482 4 2150
2618 4 2150
2618 4 2150
2618 4 2150
2632 4 2150
2704 4 2150
2723 4 2150
2738 4 2150
2740 4 2150
2741 4 2150
2867 4 2150
3184 4 2150
3184 4 2150
1198 5 2150
1338 5 2150
1749 5 2150
2150 5 2150
2150 5 2150
2150 5 2150
2320 5 2150
2597 5 2150
2777 5 2150
2851 5 2150
2895 5 2150
2912 5 2150
2946 5 2150
3128 5 2150
1877 6 2150
2080 6 2150
2150 6 2150
2150 6 2150
2150 6 2150
2150 6 2150
2150 6 2150
2150 6 2150
2150 6 2150
2150 6 2150
2320 6 2150
2376 6 2150
2436 6 2150
2597 6 2150
2618 6 2150
2865 6 2150
2866 6 2150
2866 6 2150
2870 6 2150
2912 6 2150
3082 6 2150
.I 2151
.T
User Program Measurement Time-Shared Environment
.W
general discussion measurement
software systems followed description
hardware software scheme measuring user programs
time-shared environment. TX-2 computer
MIT Lincoln Laboratory used implementation
such system characteristics
implementation reported. scenario showing
system use presented. Finally,
shown other time-sharing systems may provide similar measuring facilities.
.B
CACM October, 1971
.A
Nemeth, A. G.
Rovner, P. D.
.K
operating systems, multiprogramming systems, time-sharing
systems, software measurement, user program
measurement, measurement technology, TX-2 computer,
virtual computers, performance improvement
.C
4.30 4.32 4.42 4.43
.N
CA711005 JB February 2, 1978 1:05 PM
.X
1957 4 2151
2151 4 2151
2151 4 2151
2151 4 2151
2318 4 2151
3103 4 2151
3148 4 2151
1653 5 2151
1747 5 2151
1860 5 2151
2151 5 2151
2151 5 2151
2151 5 2151
2719 5 2151
2967 5 2151
1626 6 2151
210 6 2151
2151 6 2151
2151 6 2151
2167 6 2151
2210 6 2151
2645 6 2151
2657 6 2151
.I 2152
.T
Display Procedures
.W
Although use structured display files
widespread interactive computer graphics,
these structures present number problems which
tend restrict their generality usefulness.
paper discusses some these problems, suggests
alternative approach display system
design which avoids use structured display files.
technique employs display procedures
generate information display. including transformations
within calls these procedures
possible both simplify specification pictures
speed up their generation. Display procedures
permit picture elements defined conditionally
also facilitate processing inputs
pointing devices. paper illustrated examples
aversion EULER language which
display procedures were implemented.
.B
CACM October, 1971
.A
Newman, W. M.
.K
computer graphics, programming languages, display files
.C
4.20 4.41
.N
CA711004 JB February 2, 1978 1:11 PM
.X
1542 4 2152
1683 4 2152
1693 4 2152
1781 4 2152
1787 4 2152
1836 4 2152
1945 4 2152
2003 4 2152
2002 4 2152
2060 4 2152
2061 4 2152
2082 4 2152
2091 4 2152
2152 4 2152
2152 4 2152
2179 4 2152
2340 4 2152
2356 4 2152
2546 4 2152
2603 4 2152
2698 4 2152
2708 4 2152
2824 4 2152
2982 4 2152
2986 4 2152
3045 4 2152
3093 4 2152
1491 5 2152
1767 5 2152
2152 5 2152
2152 5 2152
2152 5 2152
.I 2153
.T
Experiments Automated Instructional System Numerical Methods
.W
computer system developed Purdue
University teach portions undergraduate
course numerical methods. Each instructional unit
lesson divided into three modes instruction
which allow student press computer-controlled
presentation student-controlled investigation.
system designed classroom-independent course
study, has been used two semesters
students lieu conventional classroom instruction.
Initial measures effectiveness, student
acceptance, operational cost result testing
system independent instructor intervention.
system operational CDC 6500 teletype terminals.
.B
CACM October, 1971
.A
Oldehoeft, A. E.
Conte, S. D.
.K
computer-assisted instruction, numerical
methods, CAI, instructional systems
.C
1.52 3.62 5.10
.N
CA711003 JB February 2, 1978 1:22 PM
.X
2153 4 2153
3003 4 2153
2097 5 2153
2153 5 2153
2153 5 2153
2153 5 2153
.I 2154
.T
Clarification Fortran Standards-Second Report
.W
1966, after four years effort, Fortran
became first programming language standardized
United States. Since initial achievement
study application standard specifications
have revealed need maintenance standards.
result work initiated 1967,
initial set clarifying interpretations prepared
clarification published Communications
ACM May 1969. work has continued
has resulted preparation second set
clarifying interpretations. nature maintenance
new set corrections interpretations
standard specifications reported.
.B
CACM October, 1971
.A
ANSI Subcommittee X3J3
.K
American National Standard, Fortran, Basic Fortran,
programming language, standardization, language
standard specification, language standard maintenance,
language standard clarification, language standard
interpretation, standardization committee
.C
1.2 2.0 2.19 2.2 2.3 4.0 4.12 4.19 4.20 4.22 4.29 4.43 5.23 5.9 6.9
.N
CA711002 JB February 2, 1978 1:30 PM
.X
1613 4 2154
1646 4 2154
1845 4 2154
1900 4 2154
1900 4 2154
1955 4 2154
2025 4 2154
2083 4 2154
2154 4 2154
2154 4 2154
2154 4 2154
2270 4 2154
2365 4 2154
2506 4 2154
2693 4 2154
2915 4 2154
3060 4 2154
3060 4 2154
987 5 2154
988 5 2154
1900 5 2154
2154 5 2154
2154 5 2154
2154 5 2154
3060 5 2154
987 6 2154
1900 6 2154
2154 6 2154
.I 2155
.T
Toward Understanding Data Structures
.W
paper presents notation formalism
describing semantics data structures.
based directed graphs named edges
transformations these graphs. addition,
implementation facility described which could
part programming language, which allows
programmer has expressed semantics algorithm
terms graphs then specify
implementation some his data structures order gain efficiency.
.B
CACM October,1971
.A
Earley, J.
.K
data structures, graph, implementation,
semantic formalism, programming language
.C
4.22 4.9 5.24
.N
CA711001 JB February 2, 1978 1:35 PM
.X
1024 4 2155
1051 4 2155
1051 4 2155
1102 4 2155
1132 4 2155
1390 4 2155
1486 4 2155
1549 4 2155
1552 4 2155
1665 4 2155
1706 4 2155
1826 4 2155
1860 4 2155
1860 4 2155
1878 4 2155
1957 4 2155
378 4 2155
2060 4 2155
2155 4 2155
2155 4 2155
2155 4 2155
2155 4 2155
2155 4 2155
2162 4 2155
2168 4 2155
2294 4 2155
2406 4 2155
2558 4 2155
2710 4 2155
2715 4 2155
2716 4 2155
2717 4 2155
2718 4 2155
2719 4 2155
2723 4 2155
2765 4 2155
2817 4 2155
2838 4 2155
2842 4 2155
2842 4 2155
2855 4 2155
2879 4 2155
2888 4 2155
2901 4 2155
2957 4 2155
2959 4 2155
2965 4 2155
3077 4 2155
3077 4 2155
3080 4 2155
3087 4 2155
3106 4 2155
3150 4 2155
3154 4 2155
627 4 2155
106 4 2155
210 5 2155
1389 5 2155
378 5 2155
2046 5 2155
2060 5 2155
2155 5 2155
2155 5 2155
2155 5 2155
2252 5 2155
2594 5 2155
1358 6 2155
1496 6 2155
1771 6 2155
2155 6 2155
2155 6 2155
2204 6 2155
3184 6 2155
3186 6 2155
.I 2156
.T
Comment Cheney's List-Compaction Algorithm
.B
CACM September, 1971
.A
Fenichel, R. R.
.K
LISP, garbage collector, virtual memory,
list processing, storage allocation
.C
4.19 4.49
.N
CA710908 JB February 2, 1978 1:36 PM
.X
1708 4 2156
1781 4 2156
1826 4 2156
1860 4 2156
1972 4 2156
2156 4 2156
2156 4 2156
2156 4 2156
2168 4 2156
2168 4 2156
2249 4 2156
2314 4 2156
2361 4 2156
2438 4 2156
2513 4 2156
2719 4 2156
2723 4 2156
2736 4 2156
2736 4 2156
2736 4 2156
2833 4 2156
2833 4 2156
2855 4 2156
2855 4 2156
3074 4 2156
3074 4 2156
3106 4 2156
3112 4 2156
3112 4 2156
1626 5 2156
1826 5 2156
1972 5 2156
2156 5 2156
2156 5 2156
2156 5 2156
.I 2157
.T
Average Binary Search Length Dense Ordered Lists
.B
CACM September, 1971
.A
Flores, I.
Madpis, G.
.K
searching, binary searching, record retrieval
.C
3.74
.N
CA710907 JB February 2, 1978 1:42 PM
.X
2157 5 2157
2157 5 2157
2157 5 2157
2293 5 2157
2157 6 2157
.I 2158
.T
Stopping Criterion Newton-Raphson Method
Implicit Multistep Integration Algorithms
Nonlinear Systems Ordinary Differential Equations
.B
CACM September, 1971
.A
Liniger, W.
.K
ordinary differential equations, linear multistep
formulas, Newton-Raphson method, stopping criterion
.C
5.11 5.15 5.17
.N
CA710906 JB February 2, 1978 2:13 PM
.X
2158 5 2158
2158 5 2158
2158 5 2158
.I 2159
.T
Note Best One-Sided Approximations
.B
CACM September, 1971
.A
Phillips, D. L.
.K
best approximation, one-sided approximation,
logarithmic, error, relative error
.C
5.11 5.13
.N
CA710905 JB February 2, 1978 2:15 PM
.X
1440 4 2159
1832 4 2159
1932 4 2159
1999 4 2159
2159 4 2159
2159 4 2159
962 5 2159
1932 5 2159
2159 5 2159
2159 5 2159
2159 5 2159
.I 2160
.T
Canonical Structure Attribute Based File Organization
.W
new file structure attribute based retrieval
proposed paper. allows queries
involving arbitrary Boolean functions attribute-value
pairs processed without taking intersections
lists. structure highly dependent
way which file used uniquely
determined specification allowed queries.
Thus, example, structure retrieval
basis ranges values given attribute would
very different one only retrieval
basis single value permitted. file
organization being proposed based atoms
Boolean algebra generated queries. desirable
properties claimed structure
proved, file maintenance questions discussed.
.B
CACM September, 1971
.A
Wong, E.
Chiang, T. C.
.K
address calculation, atoms Boolean algebra,
attributes, Boolean functions, Boolean queries,
file organization, information retrieval, inverted
file, key words, multilist, queries, searches
.C
3.70 3.73 3.74
.N
CA710904 JB February 2, 1978 2:22 PM
.X
2160 4 2160
2688 4 2160
2114 5 2160
2160 5 2160
2160 5 2160
2160 5 2160
3134 5 2160
1976 6 2160
2160 6 2160
2524 6 2160
2990 6 2160
.I 2161
.T
Algorithm Blocks Cutnodes Graph (Corrigendum)
.B
CACM September, 1971
.A
Paton, K.
.N
CA710903 JB February 2, 1978 2:24 PM
.X
2161 5 2161
2161 5 2161
2161 5 2161
.I 2162
.T
Efficient Bit Table Technique Dynamic
Storage Allocation 2^n-word Blocks
.W
efficient bit table technique dynamic storage
allocation 2^n-word blocks, which requires
minimized amount memory bookkeeping purposes,
described. technique has been tested
implementation list processing language L^6.
number ideas incorporated processor
also described.
.B
CACM September, 1971
.A
Isoda, S.
Goto, E.
.K
bit table, dynamic storage allocation, buddy
system, L^6, list processing, free storage
.C
3.89 4.12 4.9
.N
CA710902 JB February 2, 1978 2:33 PM
.X
1389 4 2162
1552 4 2162
1860 4 2162
1957 4 2162
2155 4 2162
2162 4 2162
2162 4 2162
2435 4 2162
2596 4 2162
2768 4 2162
2845 4 2162
2902 4 2162
2955 4 2162
1184 5 2162
1389 5 2162
2162 5 2162
2162 5 2162
2162 5 2162
.I 2163
.T
Education Related Use Computers Organizations
.W
ACM Curriculum Committee Computer Education
Management has been carrying out study
"Curriculum Development Management Information
Systems Education Colleges Universities"
under grant National Science Foundation.
position paper provides framework
study. Preliminary conclusions presented
need education administrative information
systems, appropriate college curricula courses
suggested. Also, role professional
societies organizations using computers discussed,
plans Committee outlined.
initial approach Committee has been describe
education necessary effective
use computers organizations, classify
positions which education required,
survey educational programs now available.
.B
CACM September, 1971
.A
Teichroew, D.
.K
education, information analysis, systems design, business data processing
.C
1.52 3.51
.N
CA710901 JB February 2, 1978 2:40 PM
.X
1720 4 2163
1927 4 2163
2147 4 2163
2163 4 2163
2163 4 2163
2163 4 2163
2163 4 2163
2345 4 2163
2345 4 2163
2407 4 2163
2478 4 2163
2594 4 2163
2852 4 2163
2899 4 2163
3003 4 2163
3130 4 2163
1720 5 2163
1771 5 2163
1927 5 2163
2163 5 2163
2163 5 2163
2163 5 2163
2181 5 2163
2407 5 2163
3003 5 2163
1659 6 2163
1678 6 2163
1927 6 2163
1945 6 2163
2097 6 2163
2147 6 2163
2163 6 2163
2163 6 2163
2181 6 2163
2187 6 2163
2329 6 2163
2345 6 2163
2345 6 2163
2367 6 2163
2407 6 2163
2478 6 2163
2479 6 2163
2480 6 2163
2538 6 2163
.I 2164
.T
Symbolic Integration: Stormy Decade
.W
Three approaches symbolic integration
1960's described. first, artificial
intelligence, led Slagle's SAINT large
degree Moses' SIN. second, algebraic
manipulation, led Manove's implementation
Horowitz' Tobey's reexamination Hermite
algorithm integrating rational functions. third,
mathematics, led Richardson's proof
unsolvability problem class functions
Risch's decision procedure
elementary functions.Generalizations Risch's algorithm
class special functions programs
solving differential equations finding
definite integral also described.
.B
CACM August, 1971
.A
Moses, J.
.K
integration, symbolic integration, definite integrals, rational functions
.C
3.1 3.2 3.6 4.9 5.2 5.9
.N
CA710808 JB February 2, 1978 2:48 PM
.X
2164 4 2164
2170 4 2164
2323 4 2164
2719 4 2164
2167 5 2164
2164 5 2164
2164 5 2164
2164 5 2164
2323 5 2164
2164 6 2164
2167 6 2164
2170 6 2164
.I 2165
.T
General Relativity Application Algebraic Manipulative Systems
.W
paper describes some applications symbolic
algebra systems problems general relativity
including derivation field equations,
Petrov classification metric, solution
field equations presence matter
simple case. Attention drawn strictly
algebraic difficulties encountered work.
.B
CACM August, 1971
.A
Barton, D.
Fitch, J. P.
.K
symbolic mathematics,nonnumerical mathematics, general
relativity, algebraic manipulation, equation
manipulation
.C
1.3 3.11 5.10
.N
CA710807 JB February 2, 1978 2:53 PM
.X
2165 5 2165
2165 5 2165
2165 5 2165
2170 5 2165
3071 5 2165
2165 6 2165
2165 6 2165
2167 6 2165
2166 6 2165
.I 2166
.T
Automated Algebraic Manipulation Celestial Mechanics
.W
paper we consider some applications
automated algebraic manipulation which
have been made celestial mechanics. Particular attention
paid use Poisson series,
typical problem perturbation theory described.
requirements processors use celestial
mechanics considered compared those general
manipulation packages. Some future directions
research using these systems briefly outlined.
illustrate relative simplicity
algorithm required celestial mechanics, typical
integration problem considered appendix.
.B
CACM August, 1971
.A
Jefferys, W. H.
.K
series manipulation, automated algebra, celestial mechanics
.C
5.10 5.13 5.17
.N
CA710806 JB February 2, 1978 3:31 PM
.X
2166 5 2166
2166 5 2166
2166 5 2166
2170 5 2166
2165 6 2166
2167 6 2166
2166 6 2166
.I 2167
.T
Algebraic Simplification: Guide Perplexed
.W
Algebraic simplification examined first
point view user needs comprehend
large expression, second point view
designer wants construct useful
efficient system. First we describe various techniques
akin substitution. These techniques can
used decrease thesize expression make
more intelligible user. Then we delineate
spectrum approaches design automatic simplification
capabilities algebraic manipulation
system. Systems divided into five types. Each type
provides different facilities manipulation
simplification expressions. Finally we discuss
some theoretical results related algebraic
simplification. We describe several positive results
existence powerful simplification
algorithms number-theoretic conjectures which
they rely. Results nonexistence
algorithms certain classes expressions included.
.B
CACM August, 1971
.A
Moses, J.
.K
algebraic manipulation, algebraic simplification,
canonical simplification
.C
3.1 3.2 3.6 4.9 5.2 5.9
.N
CA710805 JB February 2, 1978 3:42 PM
.X
1396 4 2167
1396 4 2167
1946 4 2167
2167 4 2167
2167 4 2167
2167 4 2167
2167 4 2167
2857 4 2167
2956 4 2167
1379 5 2167
1393 5 2167
1392 5 2167
2167 5 2167
2167 5 2167
2167 5 2167
2164 5 2167
2169 5 2167
2170 5 2167
2323 5 2167
2719 5 2167
1626 6 2167
210 6 2167
2151 6 2167
2164 6 2167
2165 6 2167
2167 6 2167
2167 6 2167
2167 6 2167
2167 6 2167
2166 6 2167
2170 6 2167
2210 6 2167
2645 6 2167
2657 6 2167
.I 2168
.T
List Tracing Systems Allowing Multiple Cell-Types
.W
List-processing systems have each allowed
use only single size configuration
list cell. paper system described which
allows use arbitrarily many different sizes
configurations list cells, possibly not specified until run time.
.B
CACM August, 1971
.A
Fenichel, R. R.
.K
list-processing, storage allocation, LISP, SLIP, based storage, pointers
.C
4.49
.N
CA710804 JB February 2, 1978 3:45 PM
.X
1024 4 2168
1024 4 2168
1051 4 2168
1051 4 2168
1098 4 2168
1102 4 2168
1132 4 2168
1214 4 2168
1380 4 2168
1388 4 2168
1390 4 2168
1393 4 2168
1485 4 2168
1486 4 2168
1487 4 2168
1549 4 2168
1549 4 2168
1570 4 2168
1706 4 2168
1708 4 2168
1781 4 2168
1826 4 2168
1826 4 2168
1860 4 2168
1878 4 2168
1878 4 2168
1946 4 2168
1957 4 2168
1972 4 2168
378 4 2168
2023 4 2168
2060 4 2168
2155 4 2168
2156 4 2168
2156 4 2168
2168 4 2168
2168 4 2168
2168 4 2168
2168 4 2168
2168 4 2168
2249 4 2168
2314 4 2168
2438 4 2168
2719 4 2168
2719 4 2168
2723 4 2168
2723 4 2168
2723 4 2168
2736 4 2168
2736 4 2168
2833 4 2168
2833 4 2168
2838 4 2168
2842 4 2168
2855 4 2168
2855 4 2168
2857 4 2168
2879 4 2168
3074 4 2168
3077 4 2168
3080 4 2168
3106 4 2168
3112 4 2168
3112 4 2168
627 4 2168
106 4 2168
210 5 2168
1626 5 2168
1826 5 2168
1878 5 2168
2168 5 2168
2168 5 2168
2168 5 2168
731 5 2168
.I 2169
.T
Altran System Rational Function Manipulation-A Survey
.W
Altran complete system symbolic computation
rational functions several variables
integer coefficients. has been designed
implemented handle large problems ease
efficiency. Considerable effort has been spent ensure
minimum amount machine dependence
implementation, thus permitting system installed
quickly easily variety computing
machines. paper brief description language,
run time data structures, implementation
given.
.B
CACM August, 1971
.A
Hall Jr., A. D.
.K
symbolic algebra, rational function manipulation,
polynomial manipulation, interpreters, translators
.C
4.13 4.29
.N
CA710803 JB February 2, 1978 4:17 PM
.X
2167 5 2169
2169 5 2169
2169 5 2169
2169 5 2169
1379 6 2169
1392 6 2169
1393 6 2169
2169 6 2169
.I 2170
.T
Applications Symbol Manipulation Theoretical Physics
.W
paper surveys applications symbolic
computation techniques problems theoretical
physics. Particular emphasis placed applications
quantum electrodynamics most activity
has occurred.
.B
CACM August, 1971
.A
Hearn, A. C.
.K
symbol manipulation, algebraic simplification,
computational physics, quantum electrodynamics
.C
3.17 4.22
.N
CA710802 JB February 2, 1978 4:21 PM
.X
2164 4 2170
2170 4 2170
2170 4 2170
2170 4 2170
2323 4 2170
2719 4 2170
3071 4 2170
2167 5 2170
2165 5 2170
2166 5 2170
2170 5 2170
2170 5 2170
2170 5 2170
2323 5 2170
2164 6 2170
2167 6 2170
2170 6 2170
.I 2171
.T
Solution Simultaneous Nonlinear Equations
.B
CACM July, 1971
.A
Raduchel, W. J.
.K
nonlinear equations
.C
5.15
.N
CA710711 JB February 2, 1978 4:31 PM
.X
2171 5 2171
2171 5 2171
2171 5 2171
.I 2172
.T
Graph Plotter [J6] (Algorithm 412)
.B
CACM July, 1971
.A
Cermak, J.
.K
plot, graph, line printer plot
.C
4.41
.N
CA710710 JB February 2, 1978 4:32 PM
.X
2172 5 2172
2172 5 2172
2172 5 2172
.I 2173
.T
Three Procedures Stable Marriage Problem [H] (Algorithm 411)
.B
CACM July, 1971
.A
McVitie, D. G.
Wilson, L. B.
.K
assignment problems, assignment procedures, combinatorics,
discrete mathematics, operations research,
stable marriage problem, university entrance
.C
5.30
.N
CA710709 JB February 2, 1978 4:35 PM
.X
2173 5 2173
2173 5 2173
2173 5 2173
2174 5 2173
2173 6 2173
.I 2174
.T
Stable Marriage Problem
.W
original work Gale Shapley assignment
method using stable marriage criterion
has been extended find all stable marriage assignments.
algorithm derived finding all
stable marriage assignments proved satisfy
all conditions problem. Algorithm 411
applies paper.
.B
CACM July, 1971
.A
McVitie, D. G.
Wilson,L. B.
.K
assignment problems, assignment procedures, combinatorics,
discrete mathematics, operational research,
stable marriage problem, university entrance
.C
5.30
.N
CA710708 JB February 2, 1978 4:40 PM
.X
2174 4 2174
2173 5 2174
2174 5 2174
2174 5 2174
2174 5 2174
.I 2175
.T
Subexpression Ordering Execution Arithmetic Expressions
.W
arithmetic expression can often broken
down into its component subexpressions. Depending
hardware environment which expression
executed, these subexpressions can evaluated
serials, parallel, combination these
modes. paper shows expression execution
time can minimized only if consideration given
ordering subexpressions. particular,
subexpressions should executed order decreasing
memory processor time requirements.
observation valid configurations ranging
uniprocessor unbuffered main memory
multiprocessor "cache" buffer memory. If
number subexpressions which can executed
parallel exceeds number available processors,
then execution some these subexpressions must
postponed. procedure given which combines
requirement earlier ordering considerations
provide optimal execution sequence.
.B
CACM July, 1971
.A
Ramamoorthy, C. V.
Gonzalez, M. J.
.K
parallel processing, cache, arithmetic expressions,
subexpression ordering, computational trees,
compilers
.C
4.12 4.32
.N
CA710707 JB February 2, 1978 4:49 PM
.X
1781 4 2175
1807 4 2175
1934 4 2175
2175 4 2175
2175 4 2175
2175 4 2175
1551 5 2175
1613 5 2175
1886 5 2175
2175 5 2175
2175 5 2175
2175 5 2175
2413 5 2175
2175 6 2175
.I 2176
.T
Buffer Allocation Merge-Sorting
.W
fixed buffer allocation merge-sorting
presented here which minimizes number
input-output operations given order merge.
sorting movable arm disks, number
seeks equal number input-output operations,
seek time usually controls sort
time. First some standard terminology introduced.
Then input buffer allocation method described,
followed analysis improvement expected
over more conventional allocation. analysis
makes use particular distribution function.
analysis completely different distribution
given which yields similar results. suggests
results do not depend particular
distribution function. optimum output buffer size
also determined. concluded
buffering allocation can significantly reduce time
merge sorting movable arm disks
input data not random, output buffer
allocation should used whether data
random not.
.B
CACM July, 1971
.A
Ferguson, D. E.
.K
file, item, string, merge sort, seek time, gamma distribution function
.C
4.41 5.31
.N
CA710706 JB February 3, 1978 8:41 AM
.X
1638 4 2176
2176 4 2176
2272 4 2176
2176 5 2176
2176 5 2176
2176 5 2176
677 5 2176
.I 2177
.T
Algorithm Blocks Cutnodes Graph
.W
efficient method presented finding
blocks cutnodes arbitrary undirected
graph. graph may represented either (i)
ordered list edges (ii) packed adjacency
matrix. If w denotes word length machine
employed, storage (in machine words) required
graph n nodes m edges increases essentially
2(m+n) case (i), (n^2)/win case
(ii). spanning tree labeled edges grown,
two edges finally bearing different labels if
only if they belong different blocks. both representations
time required analyze graph
n nodes increases n^G G depends type
graph, 1 <= G <= 2, both bounds attained.
Values G derived each several suitable
families test graphs, generated extension
web grammar approach. algorithm compared
detail proposed Read which
1 <= G <= 3.
.B
CACM July, 1971
.A
Paton, K.
.K
algorithm, block, block-cutpoint-tree, cutnode, fundamental
cycle set, graph, lobe, lobe decomposition
graph, separable, spanning tree, web grammar
.C
5.32
.N
CA710705 JB February 3, 1978 8:58 AM
.X
1961 4 2177
2177 4 2177
2763 4 2177
1847 5 2177
2177 5 2177
2177 5 2177
2177 5 2177
2490 5 2177
2177 6 2177
.I 2178
.T
Language Extension Graph Processing Its Formal Semantics
.W
simple programming language "extension,"
Graspe, processing directed graphs defined.
Graspe consists type directed graph data structure
set primitive operations manipulating
these structures. Graspe may most easily implemented
embedding host language. Emphasis
placed both Graspe itself its method
definition. Commonly, definition language
involves definition syntactic elements explanation
meaning assigned them (the
semantics). definition Graspe here solely
terms its semantics; is, data structures
operations defined precisely but without assignment
particular syntactic representation.
Only language implemented assignment
explicit syntax necessary. example
implementation Graspe embedded Lisp given
illustration. advantages disadvantages
definition language terms its semantics discussed.
.B
CACM July, 1971
.A
Pratt, T. W.
Friedman, D. P.
.K
graph processing, programming language, formal semantics,
directed graph, Lisp, network, data structure,
flowchart, syntax, language definition
.C
4.20 4.22 5.23 5.24 5.32
.N
CA710704 JB February 3, 1978 9:24 AM
.X
1086 4 2178
1132 4 2178
1234 4 2178
1263 4 2178
1265 4 2178
1270 4 2178
1323 4 2178
1358 4 2178
1379 4 2178
1380 4 2178
1453 4 2178
1464 4 2178
1469 4 2178
1484 4 2178
1486 4 2178
1491 4 2178
1491 4 2178
1498 4 2178
1613 4 2178
1614 4 2178
1781 4 2178
1781 4 2178
1781 4 2178
1825 4 2178
1860 4 2178
2083 4 2178
2178 4 2178
2178 4 2178
2178 4 2178
2178 4 2178
2178 4 2178
2179 4 2178
2252 4 2178
2325 4 2178
2326 4 2178
2326 4 2178
2341 4 2178
2396 4 2178
2470 4 2178
2546 4 2178
2561 4 2178
2645 4 2178
2652 4 2178
2684 4 2178
2684 4 2178
2684 4 2178
2842 4 2178
2929 4 2178
2934 4 2178
3044 4 2178
3069 4 2178
669 4 2178
679 4 2178
691 4 2178
761 4 2178
949 4 2178
989 4 2178
1303 5 2178
1323 5 2178
2059 5 2178
2127 5 2178
2178 5 2178
2178 5 2178
2178 5 2178
3184 5 2178
.I 2179
.T
Simple LR(k) Grammars
.W
class context-free grammars, called
"Simple LR(k)" SLR(k) grammars defined.
class has been shown include weak precedence
simple precedence grammars proper subsets.
construct parsers SLR(k) grammars
also shown. These parser-construction techniques
extendible cover all LR(k) grammars
Knuth; they have been implemented direct
comparison proved superior precedence techniques,
not only range grammars covered,
but also speed parser construction
size speed resulting parsers.
.B
CACM July, 1971
.A
DeRemer, F. L.
.K
context-free grammar, LR(k) grammar, precedence
grammar, syntactic analysis, parsing algorithm,
parser, finite-state machine, deterministic pushdown automaton
.C
4.12 5.22 5.23
.N
CA710703 JB February 3, 1978 9:31 AM
.X
1086 4 2179
1132 4 2179
1234 4 2179
1263 4 2179
1265 4 2179
1270 4 2179
1323 4 2179
1358 4 2179
1379 4 2179
1379 4 2179
1380 4 2179
1453 4 2179
1464 4 2179
1484 4 2179
1491 4 2179
1498 4 2179
1542 4 2179
1613 4 2179
1614 4 2179
1683 4 2179
1693 4 2179
1693 4 2179
1781 4 2179
1781 4 2179
1781 4 2179
1787 4 2179
1825 4 2179
1836 4 2179
1836 4 2179
1860 4 2179
1945 4 2179
1945 4 2179
1989 4 2179
2015 4 2179
2060 4 2179
2060 4 2179
2060 4 2179
2061 4 2179
2061 4 2179
2061 4 2179
2083 4 2179
2082 4 2179
2091 4 2179
2091 4 2179
2152 4 2179
2178 4 2179
2179 4 2179
2179 4 2179
2179 4 2179
2179 4 2179
2179 4 2179
2179 4 2179
2252 4 2179
2325 4 2179
2341 4 2179
2340 4 2179
2356 4 2179
2423 4 2179
2546 4 2179
2546 4 2179
2546 4 2179
2603 4 2179
2645 4 2179
2652 4 2179
2684 4 2179
2698 4 2179
2698 4 2179
2698 4 2179
2708 4 2179
2708 4 2179
2824 4 2179
2842 4 2179
2921 4 2179
2929 4 2179
2934 4 2179
2982 4 2179
2986 4 2179
3045 4 2179
3045 4 2179
3069 4 2179
3093 4 2179
3154 4 2179
669 4 2179
679 4 2179
691 4 2179
761 4 2179
949 4 2179
989 4 2179
1477 5 2179
1491 5 2179
1825 5 2179
2015 5 2179
2110 5 2179
2179 5 2179
2179 5 2179
2179 5 2179
2733 5 2179
2986 5 2179
3093 5 2179
3094 5 2179
3184 5 2179
1265 6 2179
1491 6 2179
1491 6 2179
1683 6 2179
1781 6 2179
1836 6 2179
2179 6 2179
2179 6 2179
2179 6 2179
2179 6 2179
2340 6 2179
2423 6 2179
2645 6 2179
2708 6 2179
2786 6 2179
680 6 2179
799 6 2179
.I 2180
.T
Programmer Training Project
.W
project described whose purpose train
selected black residents Albany-Schenectady
area computer programming arrange jobs
them computer field. Both organization
curriculum course discussed.
.B
CACM July, 1971
.A
Bernstein, A. J.
.K
programmer training, job opportunities, Fortran
.C
1.59
.N
CA710702 JB February 3, 1978 9:36 AM
.X
2180 5 2180
2180 5 2180
2180 5 2180
.I 2181
.T
State Computer Oriented Curricula Business Schools 1970
.W
ACM Committee Computer Education Management,
supported National Science Foundation
Grant, established appraise state art
develop series recommendations
improving computer education management. provide
Committee material its study
curricular needs, five regional meetings United
States were held 1970, each which broad
cross section invited academicians practitioners
considered state curricula business
schools. Three topics were covered: curricula
general manager; computer-related material
required functional courses; curricula students
concentrating computer-based information
systems. analysis minutes meetings
revealed common set experiences which raised
similar pedagogic economic issues. presentation
gives summary discussions; condensation
pedagogic substantive concerns raised;
consideration resource allocation issues
involved. Preliminary Committee's recommendations
improving computer education management,
report has been prepared provide participants
administrators their institutions
background information ongoing task course
development. Chairman ten-man Committee
Daniel Teichroew (The University Michigan).
.B
CACM July, 1971
.A
McKenney, J. L.
Tonge, F. M.
.K
university programs, management education, curriculum
design, business administration curricula,
graduate business school resource planning
.C
1.52 3.5
.N
CA710701 JB February 3, 1978 9:47 AM
.X
2163 5 2181
2181 5 2181
2181 5 2181
2181 5 2181
2345 5 2181
2407 5 2181
1720 6 2181
1771 6 2181
1771 6 2181
1927 6 2181
2163 6 2181
2181 6 2181
2181 6 2181
2181 6 2181
2345 6 2181
.I 2182
.T
Interrupt Driven Programming
.B
CACM July, 1971
.A
Zelkowitz, M.
.K
interrupts, supervisors, monitors, debugging, parallel
processing, associative memories, microprogramming
.C
3.51 4.32 4.42
.N
CA710608 JB February 3, 1978 9:49 AM
.X
2182 4 2182
2534 4 2182
1959 5 2182
2182 5 2182
2182 5 2182
2182 5 2182
2497 5 2182
2534 5 2182
830 6 2182
1471 6 2182
1787 6 2182
1959 6 2182
1973 6 2182
2111 6 2182
2182 6 2182
2182 6 2182
799 6 2182
.I 2183
.T
Binary Summation
.B
CACM July, 1971
.A
Walker, R. J.
.K
summation, binary summation, floating-point addition, round-off errors
.C
5.11
.N
CA710607 JB February 3, 1978 9:50 AM
.X
2183 4 2183
2282 4 2183
2049 5 2183
2183 5 2183
2183 5 2183
2183 5 2183
.I 2184
.T
Meaning Names Programming Systems
.W
assumed there similarity
function between data names programming
language file names operating system.
two functions discussed terms
same basic concepts order identify extent
which they overlap. suggested there
some similarity between idea file directory
storable object type context. Manipulations
contexts then discussed length. noted
there simple extension Church's
Lambda notation deals nicely these ideas
context manipulation. Whereas function can
regarded abstraction based upon first two terms
expression Lambda(name list)(expression)(value list),
found context can viewed abstraction
based upon first two terms equivalent
expression Mu(name list)(value list)(expression).
.B
CACM July, 1971
.A
Fraser, A. G.
.K
file, operating system, programming language, functions,
names, context, file directory, file dictionary,
lambda calculus, theory programming
.C
3.73 4.22 4.39 5.23 5.24
.N
CA710606 JB February 3, 1978 9:58 AM
.X
2184 5 2184
2184 5 2184
2184 5 2184
.I 2185
.T
Note Compiling Fixed Point Binary Multiplications
.W
algorithm developed compiling,
sequence shifts, additions,and subtractions,
many fixed point binary multiplications involving
constant. most significant characteristics
algorithm simplicity test which
determines if algorithm should applied
degree which "suggests" efficient object code.
.B
CACM June, 1971
.A
Glaswin, H. T.
.K
compiling multiplications, fixed point arithmetic
.C
4.12
.N
CA710605 JB February 3, 1978 10:04 AM
.X
2185 5 2185
2185 5 2185
2185 5 2185
2296 5 2185
2952 5 2185
142 6 2185
162 6 2185
163 6 2185
192 6 2185
2185 6 2185
2185 6 2185
2727 6 2185
.I 2186
.T
Numerical Properties Ritz-Trefftz Algorithm Optimal Control
.W
paper Ritz-Trefftz algorithm applied
computer solution state regulator
problem. algorithm represents modification
Ritz direct method designed improve
speed solution storage requirements
point real-time implementation becomes
feasible. modification shown more stable
computationally than traditional Ritz approach.
first concern paper describe
algorithm establish its properties valid
useful numerical technique. particular such useful
properties definiteness reasonableness
condition established method. second
part paper devoted comparison
new techniques standard procedure
numerically integrating matrix Riccati equation
determine feedback matrix. new technique
shown significantly faster comparable
accuracy.
.B
CACM June, 1971
.A
Bosarge Jr., W. E.
Johnson, O. G.
.K
splines, regulator problem, control theory, numerical analysis
.C
5.1
.N
CA710604 JB February 3, 1978 10:12 AM
.X
2186 5 2186
2186 5 2186
2186 5 2186
.I 2187
.T
Computer Science: Conceptual Framework Curriculum Planning
.W
Two views computer science considered:
global view which attempts capture broad
characteristics field its relationships
other fields, local view which focuses
inner structure field. structure presented
terms kinds knowledge, problems,
activities exist within discipline,
well relations between them. approach
curriculum planning computer science presented
which guided structure field,
fact change important feature
situation, expectation computer
science continue increase its working contacts other disciplines.
.B
CACM June, 1971
.A
Amarel, S.
.K
computer science, curriculum planning, education
.C
1.0 1.52
.N
CA710603 JB February 3, 1978 10:17 AM
.X
1665 4 2187
1768 4 2187
1787 4 2187
1805 4 2187
1824 4 2187
1825 4 2187
1828 4 2187
1836 4 2187
1854 4 2187
1861 4 2187
2015 4 2187
2110 4 2187
2127 4 2187
2187 4 2187
2187 4 2187
2317 4 2187
2545 4 2187
2698 4 2187
2733 4 2187
1748 5 2187
1781 5 2187
2187 5 2187
2187 5 2187
2187 5 2187
3003 5 2187
1659 6 2187
1678 6 2187
1927 6 2187
1945 6 2187
2097 6 2187
2147 6 2187
2163 6 2187
2187 6 2187
2329 6 2187
2345 6 2187
2367 6 2187
2407 6 2187
2478 6 2187
2479 6 2187
2480 6 2187
2538 6 2187
.I 2188
.T
Approach Optimum Design Computer Graphics Systems
.W
Display system designers faced
difficult task selecting major subsystems
intelligent way. Each subsystem chosen large
numbers alternatives; selection based
considerations such system response time, system
cost, distribution data storage
processing between graphics processor its supporting
data processing system. work reported
here develops objective, quantitative design procedure
helps give better understanding now
configure display systems. accomplished
means mathematical model computer driven
graphics system. parameters model functions
capabilities graphics hardware
computational requirements graphics application.
model can analyzed using numerical
queueing analysis simulation obtain average
response time prediction. combining model
optimization, best graphics system configuration,
subject cost constraint, found
several applications. optimum configurations
turn used find general display system
design guidelines.
.B
CACM June, 1971
.A
Foley, J. D.
.K
design guidelines, graphic display systems, mathematical
model, optimum system design, queueing
model
.C
3.8 6.22 6.35
.N
CA710602 JB February 3, 1978 10:26 AM
.X
1805 4 2188
1846 4 2188
1892 4 2188
2188 4 2188
2218 4 2188
2317 4 2188
1572 5 2188
2188 5 2188
2188 5 2188
2188 5 2188
2319 5 2188
1408 6 2188
1719 6 2188
1749 6 2188
1751 6 2188
2016 6 2188
2017 6 2188
2080 6 2188
2188 6 2188
2203 6 2188
2204 6 2188
.I 2189
.T
Generation Rosary Permutations Expressed Hamiltonian Circuits
.W
Systematic generation specific class
permutations fundamental scheduling problems
described. nonoriented complete graph
n vertices, Hamitonian circuits equivalent .5(n
- 1)! specific permutations n elements, termed rosary
permutations, can defined. Each them
corresponds two circular permutations which mirror-image
each other, generated successively
number system covering 3*4*...*(n-1) sets edges.
Every set edges {E[k]}, 1 <= E[k] <= k,
3 <= k <= (n-1) determined recursively constructing
Hamiltonian circuit k vertices
Hamiltonian circuit k-1 vertices, starting
Hamiltonian circuit 3 vertices. basic
operation consists transposition pair adjacent
vertices position pair
permutation determined {E[k]}. Two algorithms
treating same example five vertices
presented. very easy derive all possible n!
permutations .5(n - 1 )! rosary permutations
cycling permutations taking them
reverse order-procedures which can performed
fairly efficiently computer.
.B
CACM June, 1971
.A
Harada, K.
.K
permutation, graph theory, scheduling, combinatorial algebra
.C
5.32 5.39
.N
CA710601 JB February 3, 1978 1:55 PM
.X
2044 4 2189
2087 4 2189
2189 4 2189
2189 4 2189
2189 4 2189
2189 4 2189
2417 4 2189
2505 4 2189
2874 4 2189
2908 4 2189
3188 4 2189
1594 5 2189
2087 5 2189
2189 5 2189
2189 5 2189
2189 5 2189
2292 5 2189
2505 5 2189
521 5 2189
3191 5 2189
2189 6 2189
2189 6 2189
2292 6 2189
521 6 2189
.I 2190
.T
Function Minimization
.B
CACM May, 1971
.A
House, F. R.
.N
CA710510 JB February 3, 1978 1:57 PM
.X
2190 4 2190
2190 4 2190
1372 5 2190
1849 5 2190
2190 5 2190
2190 5 2190
2190 5 2190
.I 2191
.T
ALGORITHM 410 Partial Sorting [M1]
.B
CACM May, 1971
.A
Chambers, J. M.
.K
sorting, partial sorting order statistics
.C
5.11 5.13
.N
CA710508 JB February 3, 1978 2:23 PM
.X
1175 4 2191
1919 4 2191
1919 4 2191
1969 4 2191
1997 4 2191
2191 4 2191
2191 4 2191
2388 4 2191
2388 4 2191
2679 4 2191
2783 4 2191
2784 4 2191
3054 4 2191
3054 4 2191
3121 4 2191
3121 4 2191
864 4 2191
308 5 2191
309 5 2191
2191 5 2191
2191 5 2191
2191 5 2191
.I 2192
.T
Another Recursion Induction Principle
.W
inductive method proving things
recursively defined functions described.
shown useful proving partial functions equivalent
thus applicable proofs interpreters
programming languages.
.B
CACM May, 1971
.A
Morris Jr., J. H.
.K
recursion, induction, correctness, proofs, compiler correctness
.C
4.13 4.2 5.24
.N
CA710507 JB February 3, 1978 2:27 PM
.X
2192 5 2192
2192 5 2192
2192 5 2192
2326 5 2192
2457 5 2192
2842 5 2192
2903 5 2192
1303 6 2192
1323 6 2192
210 6 2192
1834 6 2192
2060 6 2192
2148 6 2192
2192 6 2192
2192 6 2192
2192 6 2192
2192 6 2192
2326 6 2192
3184 6 2192
3186 6 2192
.I 2193
.T
Implementation Label Variables
.W
Variables label mode conventionally
implemented technique which fails trap
certain programming errors. Fine-grained calendar clocks
have recently become available; these allow
implementation label variables via new technique
which traps all programming errors variety.
.B
CACM May, 1971
.A
Fenichel, R. R.
.K
labels, compiler, interpreter, go to, transfer
.C
4.22
.N
CA710506 JB February 3, 1978 2:31 PM
.X
2193 4 2193
2193 4 2193
2319 4 2193
2326 4 2193
2477 4 2193
2541 4 2193
2594 4 2193
2894 4 2193
3004 4 2193
2016 5 2193
2193 5 2193
2193 5 2193
2193 5 2193
3101 5 2193
3186 5 2193
2138 6 2193
2193 6 2193
2438 6 2193
3185 6 2193
.I 2194
.T
Keep Addresses Short
.W
algorithm presented minimizing
sum lengths blocks coding produced
assembler compiler (1) length
each computer instruction assumed either
"long" "short" ("long," if memory location addressed
more than predetermined distance
current location; "short," otherwise), (2)
there blocks instructions whose beginnings
(origins) separated prespecified amounts. example,
some computers permit either 8-bit addressing
(interpreted relative location counter) full
16-bit addressing all memory. assembling
compiling two more blocks instructions which
have many mutual references such computer,
there no simple iterative procedure keeping
many addresses short possible.
paper demonstrates wide class problems
type can formulated covering problems
solvable means elementary arithmetic operations
column vectors ternary matrix.
.B
CACM May, 1971
.A
Richards, D. L.
.K
addressing, assembler, covering problem, integer
programming, variable-length addressing
.C
4.11 4.12 4.21 5.41
.N
CA710505 JB February 3, 1978 2:40 PM
.X
2194 5 2194
2194 5 2194
2194 5 2194
2858 5 2194
3110 5 2194
2194 6 2194
2194 6 2194
2629 6 2194
2858 6 2194
.I 2195
.T
Optimal Detection Curves Noisy Pictures
.W
technique recognizing systems lines
presented. technique heuristic
problem not embedded recognition algorithm
but expressed figure merit.
multistage decision process then able recognize
input picture optimal system lines
according given figure merit. Due
global approach, greater flexibility adequacy
particular problem achieved. relation
between structure figure merit
complexity optimization process then discussed.
method described suitable parallel
processing because operations relative each
state can computed parallel, number
stages equal length N curves (or
log2 N if approximate method used).
.B
CACM May, 1971
.A
Montanari, U.
.K
picture processing, picture recognition, picture
description, curve detection, line detection,
edge detection,optimal detection, heuristic methods,
global recognition, parallel processing, dynamic
programming, interaction graph, secondary optimization problem
.C
3.63 3.66 5.42
.N
CA710504 JB February 3, 1978 2:49 PM
.X
1663 4 2195
2195 4 2195
2679 4 2195
1190 5 2195
2195 5 2195
2195 5 2195
2195 5 2195
2883 5 2195
2195 6 2195
.I 2196
.T
Man-Machine Approach Toward Solving Traveling Salesman Problem
.W
traveling salesman problem belongs
important class scheduling routing problems.
also subproblem solving others, such
warehouse distribution problem. has been
attacked many mathematical methods but meager
success. Only special forms problem
problems moderate number points can
solved exactly, even if very large amounts
computer time used. Heuristic procedures have
been proposed tested only slightly better
results. paper describes computer aided heuristic
technique which uses only modest amount
computer time real-time solve large (100-200)
point problems. technique takes advantage
both computer's human's problem-solving
abilities. computer not asked solve
problem brute force way many today's heuristics,
but asked organize data
human so human can solve problem easily.
technique used paper seems
point new directions field man-machine interaction
field artificial intelligence.
.B
CACM May, 1971
.A
Krolak, P.
Felts, W.
Marble, G.
.K
heuristic procedures, computer-aided heuristic technique,
man-machine interaction, artificial intelligence,
assignment problem, mask assignment, rubber band
tour generator, interaction process, traveling
salesman problem
.C
3.57 3.66 5.30
.N
CA710503 JB February 3, 1978 3:00 PM
.X
2196 5 2196
2196 5 2196
2196 5 2196
.I 2197
.T
Merit Regional Computing Networks
.W
One suggested means stimulating
spread computing capabilities institutions
higher learning through construction regional
computing networks. One such network has
been constructed San Francisco Bay Area Stanford
University. paper reports upon lessons
learned operation network over past
two years. major impact network
not so much computer power delivered schools
awakening computing awareness
fostering capability development these schools.
expertise assistance central facility
well sharing ideas among participants
were other important benefits. Both quality
variety services provided central facility
were found play key role effectiveness
network. regional network brings many benefits
should not judged purveyor raw
computer power alone.
.B
CACM May, 1971
.A
Nielsen, N. R.
.K
computer sharing, computer utility, cooperative networks,
curriculum development, educational computing,
network computing, regional computing networks,
remote computing, shared computing
.C
1.52 2.11
.N
CA710502 JB February 3, 1978 3:17 PM
.X
2197 5 2197
2197 5 2197
2197 5 2197
.I 2198
.T
Introduction "Feature Analysis
Generalized Data Base Management Systems"
.W
paper separately published introduction
main report which analyzes features
generalized data base management systems. introduction
gives review current state
art these systems discusses differences
similarities between capabilities found
host language systems those found self-contained
systems. After some discussion problems
data independence binding,the four user levels
identified described. Technical problems
facing future designers described. first
these handling existing stored data
next providing more complex data structures
than those already available conventional
programming languages. problem high level interrogation
update functions acting network
structures mentioned, followed discussion
problem catering high volume transactions
initiated terminals parametric users-the lowest
level user. use Cobol basis
further development work considered some length
respect data structures, host language
capabilities, self-contained capabilities.
section also assesses effect Data Base
Task Group proposals. final section outlines
ten major topics main body full report.
.B
CACM May, 1971
.A
Codasyl Systems Committee
.K
data base management systems, programming languages,
data structures, storage structures, information
retrieval, transaction processing
.C
3.5 3.70 3.72 3.73 3.74 4.29
.N
CA710501 JB February 3, 1978 3:18 PM
.X
2198 5 2198
2198 5 2198
2198 5 2198
2452 5 2198
2882 5 2198
849 6 2198
1936 6 2198
1976 6 2198
2198 6 2198
2198 6 2198
2452 6 2198
627 6 2198
.I 2199
.T
Sparse Matrix Package (Part I) [F4] (Algorithm 408)
.B
CACM April, 1971
.A
McNamee, J. M.
.K
matrix, sparse matrix, matrix manipulation
.C
5.14
.N
CA710406 JB February 3, 1978 3:20 PM
.X
2199 5 2199
2199 5 2199
2199 5 2199
.I 2200
.T
Complement Division
.W
division algorithm theorem expressed
form permits serve basis
devising division operations produce both quotient
remainder complement form. Algorithms
division yielding complement results derived
numbers represented any base greater than
one. Both radix radix-less-one complementation schemes
considered. binary form algorithms
thus includes both two's one's complement implementation.
problem quotient overflow complement
results dealt selecting appropriate
form remainder condition complement
division.
.B
CACM April, 1971
.A
Stein, M. L.
Munro, W. D.
.K
division algorithm, complement arithmetic, complement
division, one's complement arithmetic, two's
complement arithmetic
.C
3.15 4.0 4.9 5.11 6.32
.N
CA710405 JB February 3, 1978 3:28 PM
.X
1965 4 2200
2200 4 2200
1718 5 2200
2200 5 2200
2200 5 2200
2200 5 2200
.I 2201
.T
Animator: On-Line Two-dimensional Film Animation System
.W
Animator computer animation system which
designed overcome some inherent
disadvantages associated conventional computer animation
techniques.The DEC-338 serves input
terminal movie making, allowing trial error
design picture sequences conversational
mode. During all stages system input elements
(light pen, pushbuttons, teletype) maintained.
user's request, record sent IBM
360/75 S-D 4020 instructions necessary
produce same sequence pictures can generated.
anticipated one primary
contributions Animator provision
facility which allow any professor produce
his own expository film strips.
.B
CACM April, 1971
.A
Talbot, P. A.
Carr III, J. W.
Coulter Jr., R. R.
Hwang, R. C.
.K
computer graphics, computer animation, on-line
systems, two-dimensional languages, CRT, microfilm
recorder
.C
3.41 3.80 4.22
.N
CA710404 JB February 3, 1978 3:37 PM
.X
2201 5 2201
2201 5 2201
2201 5 2201
.I 2202
.T
Dynamic Microprogramming: Processor Organization Programming
.W
dynamically microprogrammed processor characterized
small (4^k 64-bit word) read-write
"micro" storage. access time storage
similar cycle time machine (50-100
nsec). microstorage used contain both data
subroutines. (micro) instructions
such processor differ conventional
they perform only purely combinatorial operations;
sequencing under control microinstruction.
presence read-write microstorage
permits more flexible assignment resources than
read-only storage. particular, processor
developed paper stresses simultaneous operation
(within microinstruction) adder,
shifter, masker, testing facilities processor.
microassembly language developed
overhead involved subroutine linkages analyzed.
efficiency flexible software linkage
scheme examined its overhead various subroutine
characteristics. Finally, three examples
problem-oriented programming considered
resulting coding compared against System/360
assembly language version, technology normalized.
.B
CACM April, 1971
.A
Tucker, A. B.
Flynn, M. J.
.K
microprogramming,read-write microstorage,
subroutine linkage, execution speed
.C
6.2
.N
CA710403 JB February 3, 1978 3:58 PM
.X
2202 4 2202
2527 4 2202
1542 5 2202
2202 5 2202
2202 5 2202
2202 5 2202
.I 2203
.T
Key-to-Address Transform Techniques: Fundamental
Performance Study Large Existing Formatted
Files
.W
results study eight different
key-to-address transformation methods applied
set existing files presented. each method
applied particular file, load factor
bucket size varied over wide range. addition,
appropriate variables pertinent only specific
method take different values. performance
each method summarized terms number
accesses required get record number
overflow records created transformation.
Peculiarities each method discussed. Practical
guidelines obtained results stated.
Finally, proposal further quantitative fundamental study outlined.
.B
CACM April, 1971
.A
Lum, V. Y.
Yuen, P. S. T.
Dodd, M.
.K
hashing, hashing techniques, hashing methods, hash
coding, keys, key transformation, key-to-address
transformation, direct addressing, direct access method,
randomizing, random access,file addressing,
file organizations, file structures, scatter storage,
search, collisions, clusters, information retrieval
.C
3.7 3.72 3.73 3.74 3.79 4.9
.N
CA710402 JB February 3, 1978 4:10 PM
.X
1676 4 2203
1682 4 2203
1728 4 2203
1785 4 2203
1785 4 2203
1860 4 2203
1860 4 2203
1973 4 2203
1973 4 2203
1973 4 2203
1973 4 2203
1992 4 2203
1992 4 2203
2018 4 2203
2018 4 2203
2018 4 2203
2032 4 2203
2033 4 2203
2033 4 2203
2107 4 2203
2107 4 2203
2109 4 2203
2109 4 2203
2138 4 2203
2203 4 2203
2203 4 2203
2203 4 2203
2203 4 2203
2203 4 2203
2203 4 2203
2251 4 2203
2251 4 2203
2251 4 2203
2251 4 2203
2359 4 2203
2524 4 2203
2530 4 2203
2537 4 2203
2543 4 2203
2543 4 2203
2543 4 2203
2543 4 2203
2552 4 2203
2552 4 2203
2559 4 2203
2559 4 2203
2573 4 2203
2573 4 2203
2770 4 2203
2770 4 2203
2860 4 2203
2974 4 2203
2991 4 2203
2991 4 2203
3053 4 2203
3053 4 2203
3053 4 2203
3083 4 2203
911 4 2203
911 5 2203
1785 5 2203
1786 5 2203
2107 5 2203
2109 5 2203
2203 5 2203
2203 5 2203
2203 5 2203
2258 5 2203
2313 5 2203
2319 5 2203
2359 5 2203
2437 5 2203
2552 5 2203
2781 5 2203
2860 5 2203
2991 5 2203
492 5 2203
911 6 2203
1328 6 2203
1408 6 2203
1719 6 2203
1749 6 2203
1751 6 2203
1785 6 2203
1785 6 2203
1785 6 2203
332 6 2203
2016 6 2203
2017 6 2203
2080 6 2203
2107 6 2203
2188 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2203 6 2203
2204 6 2203
492 6 2203
.I 2204
.T
Program Development Stepwise Refinement
.W
creative activity programming-to distinguished
coding-is usually taught examples
serving exhibit certain techniques. here considered
sequence design decisions concerning
decomposition tasks into subtasks data
into data structures. process successive
refinement specifications illustrated short
but nontrivial example, which number
conclusions drawn regarding art instruction programming.
.B
CACM April, 1971
.A
Wirth, N.
.K
education programming, programming
techniques, stepwise program construction
.C
1.50 4.0
.N
CA710401 JB February 3, 1978 4:14 PM
.X
2204 5 2204
2204 5 2204
2204 5 2204
2319 5 2204
2480 5 2204
2594 5 2204
2709 5 2204
2939 5 2204
2972 5 2204
3155 5 2204
970 6 2204
1408 6 2204
1425 6 2204
1719 6 2204
1749 6 2204
1751 6 2204
1771 6 2204
2016 6 2204
2017 6 2204
2080 6 2204
2138 6 2204
2155 6 2204
2188 6 2204
2203 6 2204
2204 6 2204
2204 6 2204
2204 6 2204
2204 6 2204
2204 6 2204
2204 6 2204
2204 6 2204
2247 6 2204
2247 6 2204
2456 6 2204
2477 6 2204
2558 6 2204
2597 6 2204
2732 6 2204
2738 6 2204
3073 6 2204
3186 6 2204
799 6 2204
.I 2205
.T
DIFSUB Solution Ordinary Differential
Equations [D2] (Algorithm 407)
.B
CACM March, 1971
.A
Gear, C. W.
.K
differential equations, stiff differential equations
.C
5.17
.N
CA710307 JB February 3, 1978 4:16 PM
.X
2205 4 2205
2474 4 2205
2205 5 2205
2205 5 2205
2205 5 2205
2207 5 2205
2474 5 2205
2205 6 2205
2207 6 2205
.I 2206
.T
Exact Solution Linear Equations Using
Residue Arithmetic [F4] (Algorithm 406)
.B
CACM March, 1971
.A
Howell, J.
.K
residue arithmetic, symmetric residue, modulus,
mixed-radix representation, symmetric mixed-radix
representation, mixed-radix conversion, prime number,
linear equations, Gaussian elimination, matrix
inversion, determinant, adjoint matrix, ill-condition
.C
3.15 5.14
.N
CA710306 JB February 3, 1978 4:23 PM
.X
2206 5 2206
2206 5 2206
2206 5 2206
.I 2207
.T
Automatic Integration Ordinary Differential Equations
.W
integration technique automatic
solution initial value problem set
ordinary differential equations described. criterion
selection order approximation
proposed. objective criterion increase
step size so reduce solution time.
option permits solution "stiff" differential
equations. program embodying techniques
discussed appears Algorithm 407.
.B
CACM March, 1971
.A
Gear, C. W.
.K
differential equations, stiff equations,
integration, step control, order control
.C
5.17
.N
CA710305 JB February 3, 1978 4:28 PM
.X
2205 5 2207
2207 5 2207
2207 5 2207
2207 5 2207
2474 5 2207
2205 6 2207
2207 6 2207
2207 6 2207
.I 2208
.T
Storage Utilization Memory Hierarchy Storage
Assignment Performed Hashing Algorithm
.W
utilization storage studied two-level
memory hierarchy. first storage level,
which fast store, divided into number
storage areas. entry filed
hierarchy, hashing algorithm attempt
place entry into one these areas. If
particular area full, then entry placed
into slower second-level store, even though
other areas first-level store may have space
available. Given N entries have been filed
entire hierarchy, expression derived
expected number entries filed first-level
store.This expression gives measure effectively
first-level store being used. means
examples, storage utilization then studied
function hashing algorithm, number
storage areas into which first-level store divided
total size first-level store.
.B
CACM March, 1971
.A
Williams, J. G.
.K
hashing algorithms, memory allocation, memory hierarchy,
memory utilization, storage allocation,
storage hierarchy, storage utilization
.C
3.74 4.3
.N
CA710304 JB February 3, 1978 4:37 PM
.X
2208 5 2208
2208 5 2208
2208 5 2208
.I 2209
.T
Scheduling Algorithm Computer Assisted Registration System
.W
paper presents scheduling algorithm
used Computer Assisted Registration System
University Tennessee. Notation defined
logic algorithm necessary implement
educational policy described. Results
first term's implementation presented.
.B
CACM March, 1971
.A
Winters, W. K.
.K
computer assisted registration, scheduling algorithm, timetable
.C
3.32 5.39
.N
CA710303 JB February 3, 1978 4:40 PM
.X
1540 4 2209
2052 4 2209
2209 4 2209
2209 4 2209
1434 5 2209
1540 5 2209
2209 5 2209
2209 5 2209
2209 5 2209
.I 2210
.T
Toward Automatic Program Synthesis
.W
elementary outline theorem-proving
approach automatic program synthesis given,
without dwelling technical details. method
illustrated automatic construction both
recursive iterative programs operating natural
numbers,lists, trees, order construct
program satisfying certain specifications theorem
induced those specifications proved,
desired program extracted proof.
same technique applied transform recursively
defined functions into iterative programs, frequently
major gain inefficiency. emphasized
order construct program loops
recursion, principle mathematical induction
must applied. relation between version
induction rule used form program
constructed explored some detail.
.B
CACM March, 1971
.A
Manna, Z.
Waldinger, R. J.
.K
artificial intelligence, answer extraction, automatic
program synthesis, mathematical induction
principle, problem solving, theorem proving
.C
3.64 5.23 5.24
.N
CA710302 JB February 3, 1978 4:48 PM
.X
1515 4 2210
2096 4 2210
2127 4 2210
2210 4 2210
1155 5 2210
2210 5 2210
2210 5 2210
2210 5 2210
2657 5 2210
2719 5 2210
1626 6 2210
210 6 2210
2151 6 2210
2167 6 2210
2210 6 2210
2210 6 2210
2645 6 2210
2657 6 2210
.I 2211
.T
Scanned-Display Computer Graphics
.W
television-like scanned-display system has
been successfully implemented Honeywell DDP-224
computer installation. scanned image stored
core memory computer, software
scan conversion used convert rectangular coordinates
point appropriate word
bit output display array core storage. Results
thus far indicate flicker-free displays
large amounts data possible reasonably
fast graphical interaction. scanned image
size 240 X 254 points displayed 30 frame-per-second rate.
.B
CACM March, 1971
.A
Noll, A. M.
.K
computer graphics, scanned-display, scan conversion, raster displays
.C
4.41 6.35
.N
CA710301 JB February 3, 1978 4:53 PM
.X
1891 4 2211
2211 4 2211
2211 4 2211
2421 4 2211
2674 4 2211
2687 4 2211
1554 5 2211
1741 5 2211
2211 5 2211
2211 5 2211
2211 5 2211
2421 5 2211
1741 6 2211
2211 6 2211
.I 2212
.T
F-DISTRIBUTION
.B
CACM February, 1971
.A
Tolman, H.
.K
Fisher's F-distribution, Student's t-distribution
.C
5.5
.N
CA710209 JB February 8, 1978 8:35 AM
.X
2212 5 2212
2212 5 2212
2212 5 2212
.I 2213
.T
Roots Matrix Pencils: Generalized
Eigenvalue Problem [F2] (Algorithm 405)
.B
CACM February, 1971
.A
Dell, A. M.
Weil, R. L.
Thompson, G. L.
.K
eigenvalues, matrix roots, pencil roots
.C
5.1 5.3
.N
CA710208 JB February 8, 1978 8:37 AM
.X
2213 5 2213
2213 5 2213
2213 5 2213
.I 2214
.T
Complex Interval Arithmetic
.W
Complex interval arithmetic defined using
real interval arithmetic. Complex interval division
defined so assure smallest possible resulting intervals.
.B
CACM February, 1971
.A
Rokne, J.
Lancaster, P.
.K
real intervals, real interval arithmetic,
complex intervals, complex interval arithmetic
.C
5.11
.N
CA710207 JB February 8, 1978 8:39 AM
.X
1524 4 2214
1931 4 2214
2214 4 2214
2544 4 2214
311 5 2214
2214 5 2214
2214 5 2214
2214 5 2214
2544 5 2214
1524 6 2214
311 6 2214
2214 6 2214
.I 2215
.T
Application Game Tree Searching Techniques
Sequential Pattern Recognition
.W
sequential pattern recognition (SPR) procedure
does not test all features pattern
once. Instead, selects feature tested. After
receiving result test, procedure
either classifies unknown pattern selects another
feature tested, etc. Medical diagnosis
example SPR. paper authors suggest
SPR viewed one-person game played
against nature (chance). Virtually all powerful techniques
developed searching two-person, strictly
competitive game trees can easily incorporated either
directly analogy into SPR procedures.
particular, one can incorporate "mini average
backing-up procedure" "gamma procedure,"
which analogues "minimax backing-up procedure"
"alpha-beta procedure," respectively.
Some computer simulated experiments character recognition
presented. results indicate
approach promising.
.B
CACM February, 1971
.A
Slagle, J. R.
Lee, R. C. T.
.K
sequential pattern recognition, game tree searching,
game against nature, gamma procedure, mini average
backing-up procedure, dynamic programming, branch-and-bound
approach, optimal solution
.C
3.60 3.63 5.42
.N
CA710206 JB February 8, 1978 8:56 AM
.X
2215 4 2215
2096 5 2215
2215 5 2215
2215 5 2215
2215 5 2215
3132 5 2215
2215 6 2215
.I 2216
.T
Probability Distribution Values Binary Trees
.W
integral equation derived generating
function binary tree values, values
reflecting sorting effort. analysis does not assume
uniformly distributed branching ratios,
therefore applicable family sorting algorithms
discussed Hoare, Singleton, van Emden.
solution integral equation indicates
using more advanced algorithms family makes
only minor reductions expected sorting effort,
but substantially reduces variance sorting
effort. Statistical tests values several
thousand trees containing up 10,000 points have
given first, second, third moments value distribution
function satisfactory agreement
moments computed generating function.
empirical tests, well analytical results,
agreement previously published results
first moment cases uniform nonuniform
distribution branching ratio, second moment
case uniform distribution branching
ratio.
.B
CACM February, 1971
.A
Hurwitz Jr., H.
.K
binary trees, sorting, statistical analysis
.C
4.40 5.18 5.5
.N
CA710205 JB February 8, 1978 9:09 AM
.X
1175 4 2216
1919 4 2216
1997 4 2216
2017 4 2216
2041 4 2216
2216 4 2216
2216 4 2216
2216 4 2216
2216 4 2216
2679 4 2216
2679 4 2216
3054 4 2216
3054 4 2216
3054 4 2216
1919 5 2216
1969 5 2216
1997 5 2216
2216 5 2216
2216 5 2216
2216 5 2216
864 5 2216
.I 2217
.T
Experiments Automatic Learning Multipurpose Heuristic Program
.W
automatic learning capability has been developed
implemented use MULTIPLE
(MULTIpurpose Program LEarns) heuristic tree-searching
program, which presently being applied
resolution theorem-proving predicate calculus.
MULTIPLE's proving program (PP) uses two evaluation
functions guide its search proof whether
not particular goal achievable. Thirteen
general features predicate calculus clauses were created
use automatic learning better
evaluation functions PP. multiple regression
program used produce optimal coefficients
linear polynomial functions terms features.
Also, automatic data-handling routines were
written passing data between learning program
proving program, analyzing
summarizing results. Data generally collected
learning (regression analysis) experience
PP. number experiments were performed test
effectiveness generality learning
program. Results showed learning produced dramatic
improvements solutions problems
which were same domain those used collection
learning data. Learning also shown
generalize successfully domains other than those used
data collection. Another experiment demonstrated
learning program could simultaneously improve
performance problems specific domain
problems variety domains. Some variations
learning program were also tested.
.B
CACM February, 1971
.A
Slagle, J. R.
Farrell, C. D.
.K
learning, theorem-providing, heuristic, automatic
learning, self-modifying,tree-searching, artificial
intelligence, problem-solving, adaptive, LISP, multiple regression, resolution
.C
3.62 3.64
.N
CA710204 JB February 8, 1978 9:33 AM
.X
2217 5 2217
2217 5 2217
2217 5 2217
.I 2218
.T
Analysis Some Time-Sharing Techniques
.W
effectiveness certain time-sharing techniques
such program, relocation, disk rotational
delay minimization, swap volume minimization
investigated. Summary data presented,
findings discussed. vehicle investigation
SIMULA based simulation model reflecting
early framework planned Burroughs B6500 time-sharing
system. Inasmuch B6500 system
based upon use variable sized segments
dynamic overlay procedure, data also presented
which provides some indication effectiveness
type organization time-sharing environment.
design characteristics operational capabilities
simulation model also described.
.B
CACM February, 1971
.A
Nielsen, N. R.
.K
B6500, bulk core usage, operating system model, relocation,
rotational delay minimization, simulation,
swap volume minimization, system simulation, time-sharing
.C
3.9 4.32
.N
CA710203 JB February 8, 1978 9:40 AM
.X
1541 4 2218
1751 4 2218
1805 4 2218
1846 4 2218
1846 4 2218
1892 4 2218
1892 4 2218
1892 4 2218
1892 4 2218
1901 4 2218
1924 4 2218
2060 4 2218
2085 4 2218
2095 4 2218
2095 4 2218
2095 4 2218
2128 4 2218
2188 4 2218
2218 4 2218
2218 4 2218
2218 4 2218
2218 4 2218
2218 4 2218
2218 4 2218
2218 4 2218
2218 4 2218
2277 4 2218
2297 4 2218
2317 4 2218
2319 4 2218
2329 4 2218
2358 4 2218
2373 4 2218
2373 4 2218
2374 4 2218
2380 4 2218
2434 4 2218
2499 4 2218
2498 4 2218
2501 4 2218
2526 4 2218
2582 4 2218
2596 4 2218
2667 4 2218
2668 4 2218
2669 4 2218
2734 4 2218
2734 4 2218
2828 4 2218
2862 4 2218
2863 4 2218
2863 4 2218
2881 4 2218
2902 4 2218
2911 4 2218
2928 4 2218
2996 4 2218
3000 4 2218
3000 4 2218
3006 4 2218
3067 4 2218
3112 4 2218
1380 5 2218
1572 5 2218
1728 5 2218
1751 5 2218
1752 5 2218
1810 5 2218
1879 5 2218
2095 5 2218
2218 5 2218
2218 5 2218
2218 5 2218
2681 5 2218
2218 6 2218
.I 2219
.T
Policy-Driven Scheduler Time-Sharing System
.W
service received process time-sharing
operating system can characterized
resource count SUM{w[i]R[ij]} R[ij]
number units service received process
resource w[i] cost per unit
service. Each class users can characterized
policy function which specifies amount service
user belongs class should receive
function time. Priority changes dynamically
function difference between service
promised user policy function service
he actually receives. scheduling swapping
algorithm which keeps resource count each process
above its policy function provide specified
level service. Overhead can reduced avoiding
swaps process which have received least
his level service. algorithm has been implemented
general purpose operating system,
has provided significantly better service interactive
batch jobs than previous scheduler.
.B
CACM February, 1971
.A
Bernstein, A. J.
Sharp, J. C.
.K
scheduler, time-sharing, operating system,
resource allocation swapping
.C
4.32
.N
CA710202 JB February 8, 1978 9:54 AM
.X
2219 4 2219
2344 4 2219
1938 5 2219
2219 5 2219
2219 5 2219
2219 5 2219
2950 5 2219
3072 5 2219
1713 6 2219
2219 6 2219
2219 6 2219
2245 6 2219
2375 6 2219
.I 2220
.T
Conversion Limited-Entry Decision Tables Computer
Programs-A Proposed Modification Pollack's
Algorithm
.W
Pollack has proposed algorithm converting
decision tables into flowcharts which minimize
subsequent execution time compiled into computer
program. Two modifications algorithm
proposed. first relies Shannon's noiseless
coding theorem communications concept
entropy but does not completely test ELSE Rule.
second modification completely tests
ELSE Rule but results more executions than first modification.
Both modifications result modification
guarantees globally optimal solution.
.B
CACM February, 1971
.A
Shwayder, K.
.K
coding, decision table, entropy, information
theory, noiseless channel, sorting
.C
3.50 5.31
.N
CA710201 JB February 8, 1978 10:06 AM
.X
1237 4 2220
1354 4 2220
1354 4 2220
1354 4 2220
1488 4 2220
1488 4 2220
1548 4 2220
1684 4 2220
1994 4 2220
2053 4 2220
2053 4 2220
2053 4 2220
2053 4 2220
2220 4 2220
2220 4 2220
2220 4 2220
2220 4 2220
2220 4 2220
2220 4 2220
2220 4 2220
2273 4 2220
2273 4 2220
2273 4 2220
2273 4 2220
2453 4 2220
2453 4 2220
2492 4 2220
2518 4 2220
2598 4 2220
2598 4 2220
2616 4 2220
2726 4 2220
2726 4 2220
2726 4 2220
2726 4 2220
2726 4 2220
2856 4 2220
2856 4 2220
2856 4 2220
3113 4 2220
753 4 2220
1172 5 2220
1237 5 2220
1327 5 2220
1354 5 2220
250 5 2220
1489 5 2220
1548 5 2220
2220 5 2220
2220 5 2220
2220 5 2220
2273 5 2220
2453 5 2220
2598 5 2220
2726 5 2220
2856 5 2220
1172 6 2220
1172 6 2220
1172 6 2220
1172 6 2220
1172 6 2220
1237 6 2220
1327 6 2220
1327 6 2220
1327 6 2220
1354 6 2220
1354 6 2220
1354 6 2220
1354 6 2220
1488 6 2220
1489 6 2220
1548 6 2220
1548 6 2220
2053 6 2220
2053 6 2220
2053 6 2220
2220 6 2220
2220 6 2220
2220 6 2220
2220 6 2220
2220 6 2220
2221 6 2220
2263 6 2220
2263 6 2220
2453 6 2220
2453 6 2220
2598 6 2220
2691 6 2220
753 6 2220
.I 2221
.T
Comment Conversion Decision Tables Computer Programs
.B
CACM January, 1971
.A
Pollack, S. L.
.K
decision tables, diagnostic aids, system analysis, business applications
.C
3.50 3.59 4.19 4.29 4.49
.N
CA710113 JB February 8, 1978 10:09 AM
.X
2221 4 2221
2221 4 2221
2273 4 2221
2340 4 2221
2453 4 2221
2517 4 2221
2824 4 2221
2856 4 2221
2986 4 2221
3034 4 2221
1683 5 2221
2053 5 2221
2221 5 2221
2221 5 2221
2221 5 2221
2517 5 2221
2726 5 2221
1172 6 2221
1327 6 2221
1354 6 2221
1488 6 2221
1489 6 2221
1548 6 2221
1684 6 2221
2053 6 2221
2220 6 2221
2221 6 2221
2221 6 2221
2263 6 2221
.I 2222
.T
Comment London's Certification Algorithm 245
.B
CACM January, 1971
.A
Redish, K. A.
.K
proof algorithms, debugging, certification,
metatheory, sorting, in-place sorting
.C
4.42 4.49 5.24 5.31
.N
CA710112 JB February 8, 1978 10:19 AM
.X
2021 4 2222
2042 4 2222
2222 4 2222
2222 4 2222
2222 4 2222
2222 4 2222
2222 4 2222
2227 4 2222
2315 4 2222
2326 4 2222
2356 4 2222
2470 4 2222
2679 4 2222
2679 4 2222
2732 4 2222
2844 4 2222
2865 4 2222
2896 4 2222
2943 4 2222
2972 4 2222
3014 4 2222
3068 4 2222
3077 4 2222
3143 4 2222
970 5 2222
1800 5 2222
1818 5 2222
1834 5 2222
2042 5 2222
2222 5 2222
2222 5 2222
2222 5 2222
.I 2223
.T
Minit Algorithm Linear Programming (Algorithm 222 [H])
.B
CACM January, 1971
.A
Kolm, A.
Dahlstrand, T.
.K
linear programming, dual simplex method, primal problem, dual problem
.C
5.41
.N
CA710111 JB February 8, 1978 10:22 AM
.X
2223 5 2223
2223 5 2223
2223 5 2223
.I 2224
.T
Complex Gamma Function [S14] (Algorithm 404)
.B
CACM January, 1971
.A
Lucas Jr., C. W.
Terrill, C. W.
.K
gamma function, poles gamma function, Stirling's
asymptotic series, recursion formula, reflection
formula
.C
5.12
.N
CA710110 JB February 8, 1978 10:25 AM
.X
2224 4 2224
1547 5 2224
2224 5 2224
2224 5 2224
2224 5 2224
.I 2225
.T
Circular Integer Partitioning [A1] (Algorithm 403)
.B
CACM January, 1971
.A
Coleman, M. W.
Taylor, M. S.
.K
partitions, combinatorics, statistical design experiments
.C
5.39 5.5
.N
CA710109 JB February 8, 1978 10:27 AM
.X
2225 5 2225
2225 5 2225
2225 5 2225
.I 2226
.T
Further Evidence Analysis Algorithms
Zero-One Programming Problem
.W
purpose note report computational
experience additional recently
summarized Gue et al, two algorithms
zero-one linear programming problem. error
Gue's paper corrected. utility one
algorithms suboptimizer indicated.
.B
CACM January, 1971
.A
Proll, L. G.
.K
operations research, integer programming, zero-one variables, algorithms
.C
5.39 5.41
.N
CA710108 JB February 8, 1978 10:32 AM
.X
2226 4 2226
2226 4 2226
1658 5 2226
1666 5 2226
2226 5 2226
2226 5 2226
2226 5 2226
.I 2227
.T
Proof Program: FIND
.W
proof given correctness
algorithm "Find." First, informal description
given purpose program method
used. systematic technique described
constructing program proof during process coding
it, such way prevent intrusion
logical errors. proof termination treated
separate exercise. Finally, some conclusions
relating general programming methodology drawn.
.B
CACM January, 1971
.A
Hoare, C. A. R.
.K
proofs programs, programming methodology, program
documentation, program correctness, theory
programming
.C
4.0 4.22 5.21 5.23 5.24
.N
CA710107 JB February 8, 1978 10:40 AM
.X
2021 4 2227
2222 4 2227
2227 4 2227
2227 4 2227
2315 4 2227
2326 4 2227
2470 4 2227
2732 4 2227
2783 4 2227
2865 4 2227
2896 4 2227
2943 4 2227
3014 4 2227
3054 4 2227
3068 4 2227
3077 4 2227
3143 4 2227
1834 5 2227
307 5 2227
2227 5 2227
2227 5 2227
2227 5 2227
2356 5 2227
2420 5 2227
2874 5 2227
3143 5 2227
970 6 2227
1491 6 2227
1682 6 2227
1834 6 2227
2227 6 2227
2227 6 2227
2227 6 2227
2227 6 2227
2317 6 2227
2683 6 2227
2871 6 2227
521 6 2227
.I 2228
.T
Comments Prevention System Deadlocks
.W
Habermann's method deadlock prevention
discussed, deadlock defined system
state which resource allocations certain processes
not possible. shown scheduler
may introduce "artificial" deadlocks which Habermann's
method does not prevent. Permanent blocking
situation certain processes never receive their
resource requests. shown deadlock
prevention does not necessarily eliminate permanent blocking.
method preventing permanent blocking
given.
.B
CACM January, 1971
.A
Holt, R. C.
.K
multiprogramming, time-sharing, scheduling, resource
allocation, deadlock, lockout, deadly embrace,
knotting
.C
3.72 4.32 6.20
.N
CA710106 JB February 8, 1978 10:45 AM
.X
1781 4 2228
2150 4 2228
2150 4 2228
2228 4 2228
2228 4 2228
2228 4 2228
2256 4 2228
2256 4 2228
2280 4 2228
2317 4 2228
2342 4 2228
2342 4 2228
2376 4 2228
2379 4 2228
2482 4 2228
2618 4 2228
2618 4 2228
2740 4 2228
2851 4 2228
2920 4 2228
3184 4 2228
1198 5 2228
1338 5 2228
1877 5 2228
2228 5 2228
2228 5 2228
2228 5 2228
2280 5 2228
2379 5 2228
2482 5 2228
2500 5 2228
1749 6 2228
1749 6 2228
1877 6 2228
1877 6 2228
1877 6 2228
2228 6 2228
2228 6 2228
2228 6 2228
2228 6 2228
.I 2229
.T
Construction Rational Negative Powers Formal Series
.W
Some methods described generation
fractional negative powers any formal
series, such Poisson series Chebyshev series.
shown that, use three elementary
operations addition, subtraction, multiplication,
all rational (positive negative) powers
series can constructed. There basically two
approaches: binomial theorem iteration
methods. Both methods described here, relationship
between them pointed out. Some well-known
classical formulas obtained particular cases,
shown convergence properties
these formulas can improved very little additional
computations. Finally, end
article, some numerical experiments described
Chebyshev series Fourier series.
.B
CACM January, 1971
.A
Brucke, R. A.
.K
series expansion, series inversion, root extraction,
binomial theorem, Newton iterations, Chebyshev
series, Poisson series, Fourier series
.C
3.11 3.15 3.21 5.0
.N
CA710105 JB February 8, 1978 10:57 AM
.X
1396 4 2229
2229 4 2229
1365 5 2229
2229 5 2229
2229 5 2229
2229 5 2229
.I 2230
.T
Language Treating Geometric Patterns Two-dimensional space
.W
paper CADEP, problem-oriented language
positioning geometric patterns two-dimensional
space, presented. Although language has been
specifically designed automatic generation
integrated circuit masks, turns out well
suited also such other placement problems
architecture design, urban planning, logical block
diagram representation. design criteria,
structure, specific features CADEP illustrated.
.B
CACM January, 1971
.A
Bracchi, G.
Ferrari, D.
.K
graphic language, problem-oriented language, two-dimensional
patterns, graphic display, Fortran
extension, layout problems, integrated circuit,
architecture design, urban planning
.C
3.23 3.24 3.25 4.22
.N
CA710104 JB February 8, 1978 11:17 AM
.X
2230 4 2230
2003 5 2230
2044 5 2230
2230 5 2230
2230 5 2230
2230 5 2230
996 6 2230
1558 6 2230
2230 6 2230
521 6 2230
.I 2231
.T
Reconstruction Binary Patterns Their Projections
.W
Given horizontal vertical projections
finite binary pattern f, can we construct
original pattern f? paper we give characterization
patterns reconstructable
their projection. Three algorithms developed
reconstruct both unambiguous ambiguous
patterns. shown unambiguous pattern can
perfectly reconstructed time m X n
pattern similar ambiguous pattern can also constructed
time m X n, m, n dimensions
pattern frame.
.B
CACM January, 1971
.A
Chang, S.
.K
pattern reconstruction, image reconstruction, data
compression, pattern recognition, integral geometry
.C
3.63 5.30
.N
CA710103 JB February 8, 1978 12:33 PM
.X
2142 5 2231
2231 5 2231
2231 5 2231
2231 5 2231
2529 5 2231
1929 6 2231
2231 6 2231
2231 6 2231
.I 2232
.T
Pattern Width Given Angle
.W
pattern feature "width function
angle" possesses several possible interpretations
demonstrated paper, which review
width concept pattern recognition
geometrical concept itself. object work
clarify word description can made
precise so computer algorithms feature extraction
may obtained; focus theoretical
subject matter. results consist set-theoretic
definition width-at-angle, theorem relating
pattern boundary radius vector, descriptions
alternate widths. All widths calculated
illustrative example; graphical tabular comparisons
given. Substantial variation width-at-angle
magnitude found. principal conclusion
set-theoretic width-at-angle useful pattern
feature can easily computed. Further investigation
information contained only part
width function recommended cases
computation width-at-angle difficult.
.B
CACM January, 1971
.A
Klinger, A.
.K
feature extraction, pattern recognition,figure
properties, picture processing, integral geometry,
width-at-angle, extent, integral projections,
linear pattern measures, width functions
.C
3.60 3.62 3.63 5.12
.N
CA710102 JB February 8, 1978 12:49 PM
.X
2232 5 2232
2232 5 2232
2232 5 2232
.I 2233
.T
Signature Simulation Certain Cryptographic Codes
.W
Three cyphers allegedly authored Thomas
Jefferson Beale 1822 have been subject
intensive study over 100 years. Generations
cryptanalysts have expended untold man-years, thus
far without success, attempting tode code them; vast armies
fortune hunters treasure seekers have
devoted Herculean labors digging up rolling hills
Virginia trying locate promised bonanza.
history pertinent activities would fill volumes,
yet serious students cryptography have always
had nagging doubts cyphers' authenticity.
has been alleged "known solution"
Cypher Number Two: 115, 73, 24, 818, 37, 52, 49,...("I
have deposited County Bedford
four miles Buford's excavation vault...")
aid unsanitized version
Declaration Independence merely superb, imaginative,
grandiose hoax perpetrated ages ago
whatever reasons. Modern computer technology could
obviously perform signature analyses process
encoding itself so yield new clues deeper
insights into their construction. benefit
uninitiated, encoding method used
second cypher employs specified document whose
words simply numbered consecutively, first letters
these words sought out random
match letters these words sought out random
match letters clear text message.
sequence numbers corresponding these matches
then written down final code. While
primitive, process has advantage relative
security until source document becomes known;
moment cypher can decoded even second
graders. work now completed help
our UNIVAC 1108 includes numerous analytical studies
Beale cyphers various types simulations.
example, we have turned entire process
simulated encoding various schemes over
machine analyzed signatures these synthetic
codes; we have also encoded various messages
hand, using different texts variety methods
obtain their signatures. These simulations provide
convincing evidence signatures both process
data dependent; they indicate also very
strongly Mr. Beale's cyphers real
merely matter time before someone
finds correct source document locates
right vault common-wealth Virginia.
.B
CACM January, 1971
.A
Hammer, C.
.K
Thomas Jefferson Beale, codes, cryptanalysis, cyphers,
decoding, Declaration Independence, encoding,
Magna Carta, pseudotext, signature, simulation
.C
3.42 3.63 3.65 3.71
.N
CA710101 JB February 8, 1978 1:15 PM
.X
2233 5 2233
2233 5 2233
2233 5 2233
.I 2234
.T
Roots Matrix Pencils (Algorithm R405)
.B
CACM December, 1972
.A
Heiberger, R. M.
.K
eigenvalues, matrix roots, pencil roots
.C
5.1 5.3
.N
CA721221 JB January 27, 1978 8:51 AM
.X
2234 5 2234
2234 5 2234
2234 5 2234
.I 2235
.T
Decision Table Translation (Algorithm R394)
.B
CACM December, 1972
.A
Marshall, D. R. T.
.K
decision table, decision table translation
.C
4.19
.N
CA721220 JB January 27, 1978 8:53 AM
.X
2235 5 2235
2235 5 2235
2235 5 2235
.I 2236
.T
Remarks Characteristic Values Associated
Solutions Mathieus Differential Equation,
Exponential Integral, Systems Hyperbolic
P.D.E. (Algorithms R352, R385, R392)
.B
CACM December, 1972
.A
Frisch, M. J.
.K
ANSI Fortran standard
.C
4.0 4.22
.N
CA721219 JB January 27, 1978 8:56 AM
.X
2236 5 2236
2236 5 2236
2236 5 2236
.I 2237
.T
BANDSOLVE (Algorithm R195)
.B
CACM December, 1972
.A
Schuegraf, E.
.N
CA721218 DMM February 2, 1978 1:39 PM
.X
2237 5 2237
2237 5 2237
2237 5 2237
.I 2238
.T
Least Squares Surface Fit (Algorithm R176)
.B
CACM December, 1972
.A
Schuegraf, E.
.N
CA721217 JB January 27, 1978 8:59 AM
.X
2238 5 2238
2238 5 2238
2238 5 2238
.I 2239
.T
Squank (Algorithm C379)
.B
CACM December, 1972
.A
Hallet, P.
Mund, E.
.K
numerical integration, integration rule, adaptive
integration, automatic integration, Simpson's
rule, numerical quadrature, quadrature rule, adaptive
quadrature, automatic quadrature, round-off error
control
.C
5.16
.N
CA721216 JB January 27, 1978 9:01 AM
.X
2239 5 2239
2239 5 2239
2239 5 2239
.I 2240
.T
Pseudo-Random Numbers [G5] (Algorithm C266)
.B
CACM December, 1972
.A
Sullins, W. L.
.K
pseudo-random numbers, testing random number generators
.C
5.5
.N
CA721215 JB January 27, 1978 9:04 AM
.X
2240 5 2240
2240 5 2240
2240 5 2240
.I 2241
.T
Product Type Three-point Gauss-Legendre-Simpson's
Integration [D1] (Algorithm A439)
.B
CACM December, 1972
.A
Boland, W. R.
.K
numerical integration, product type quadrature,
Gaussian quadrature, Simpson's rule
.C
5.16
.N
CA721214 JB January 27, 1978 9:06 AM
.X
2241 5 2241
2241 5 2241
2241 5 2241
.I 2242
.T
Product Type Two-Point Gauss-Legendre-Simpson's
Integration [D1] (Algorithm A438)
.B
CACM December, 1972
.A
Boland, W. R.
.K
numerical integration, product type quadrature,
Gaussian quadrature, Simpson's rule
.C
5.16
.N
CA721213 JB January 27, 1978 9:08 AM
.X
2242 5 2242
2242 5 2242
2242 5 2242
.I 2243
.T
Product Type Simpson's Integration [D1] (Algorithm A437)
.B
CACM December, 1972
.A
Boland, W. R.
.K
numerical integration, product type quadrature, Simpson's rule
.C
5.16
.N
CA721212 JB January 27, 1978 9:10 AM
.X
2243 5 2243
2243 5 2243
2243 5 2243
.I 2244
.T
Product Type Trapezoidal Integration (Algorithm A436)
.B
CACM December, 1972
.A
Boland, W. R.
.K
numerical integration, product type quadrature, trapezoidal integration
.C
5.16
.N
CA721211 JB January 27, 1978 9:11 AM
.X
2244 5 2244
2244 5 2244
2244 5 2244
.I 2245
.T
Trace-Driven Modeling Analysis
CPU Scheduling Multiprogramming System
.W
Microscopic level job stream data obtained
production environment event-driven software
probe used drive model multiprogramming
computer system. CPU scheduling algorithm
model systematically varied. technique,
called trace-driven modeling, provides accurate
replica production environment testing variations
system. same time alterations
scheduling methods can easily carried out
controlled way cause effects relationships
being isolated. scheduling methods tested included
best possible worst possible methods,
traditional methods multiprogramming theory, round-robin,
first-come-first-served, etc., dynamic
predictors. relative absolute performances
these scheduling methods given. concluded
successful CPU scheduling method must preemptive
must prevent given job holding
CPU too long period.
.B
CACM December, 1972
.A
Sherman, S.
Baskett III, F.
Browne, J. C.
.K
scheduling, CPU scheduling,multiprogramming,
performance measurement, trace driven models
.C
4.10 4.20 4.31 4.32
.N
CA721210 JB January 27, 1978 10:57 AM
.X
2245 5 2245
2245 5 2245
2245 5 2245
2571 5 2245
3072 5 2245
3119 5 2245
1713 6 2245
2219 6 2245
2245 6 2245
2245 6 2245
2245 6 2245
2375 6 2245
2798 6 2245
2849 6 2245
2859 6 2245
.I 2246
.T
Levels Language Portable Software
.W
increasing amount software being
implemented portable form. popular way
accomplishing encode software specially
designed machine-independent language
then map language, often using macro processor,
into assembly language each desired
object machine. design machine-independent
language key factor operation.
paper discusses relative merits pitching
language high level low level,
presents some comparative results.
.B
CACM December, 1972
.A
Brown, P. J.
.K
portable software, level language, machine
independent, macro processor, efficiency
.C
4.12 4.21 4.22
.N
CA721209 JB January 27, 1978 11:02 AM
.X
2246 5 2246
2246 5 2246
2246 5 2246
.I 2247
.T
Criteria Used Decomposing Systems into Modules
.W
paper discusses modularization mechanism
improving flexibility ad comprehensibility
system while allowing shortening its development
time. effectiveness "modularization"
dependent upon criteria used dividing
system into modules. system design problem
presented both conventional unconventional
decomposition described. shown
unconventional decompositions have distinct advantages
goals outlined. criteria used
arriving decompositions discussed.
unconventional decomposition, if implemented
conventional assumption module consists
one more subroutines, less efficient
most cases. alternative approach implementation
which does not have effect sketched.
.B
CACM December, 1972
.A
Parnas, D. L.
.K
software, modules, modularity, software
engineering, KWIC index, software design
.C
4.0
.N
CA721208 JB January 27, 1978 11:09 AM
.X
2247 5 2247
2247 5 2247
2247 5 2247
2480 5 2247
2738 5 2247
2867 5 2247
3004 5 2247
3030 5 2247
3155 5 2247
1425 6 2247
1749 6 2247
1749 6 2247
2080 6 2247
2204 6 2247
2204 6 2247
2247 6 2247
2247 6 2247
2247 6 2247
2247 6 2247
2247 6 2247
2247 6 2247
2356 6 2247
2356 6 2247
2356 6 2247
2379 6 2247
2456 6 2247
2457 6 2247
2651 6 2247
2777 6 2247
2958 6 2247
2972 6 2247
3073 6 2247
3186 6 2247
799 6 2247
.I 2248
.T
New Method Solution
Cauchy Problem Parabolic Equations
.W
integral equation representation given
parabolic partial differential equations.
equations defined unbounded domains,
initial value (Cauchy) problem, solution
integral equation method successive
approximation has inherent advantages over other
methods. Error bounds methods order h^(3/2)
h^(7/2) (his increment size) depending
finite difference approximations involved.
.B
CACM December, 1972
.A
Moore, J.
Robinson, P.
.K
parabolic equations, Cauchy problem,
method successive approximations
.C
5.17
.N
CA721207 JB January 27, 1978 11:13 AM
.X
2248 5 2248
2248 5 2248
2248 5 2248
.I 2249
.T
Comparison Multivariate Normal Generators
.W
Three methods generating outcomes multivariate
normal random vectors specified
variance-covariance matrix presented. comparison
made determine which method requires
least computer execution time memory space utilizing
IBM 360/67. All methods use basis
standard Gaussian random number generator. Results
comparison indicate method based
triangular factorization covariance matrix
generally requires less memory space computer
time than other two methods.
.B
CACM December, 1972
.A
Barr, D. R.
Sezak, N. L.
.K
random number generator, normal distribution, multivariate
normal distribution, multivariate normal
generator
.C
3.65 5.5
.N
CA721206 JB January 27, 1978 11:19 AM
.X
1708 4 2249
1781 4 2249
1826 4 2249
1860 4 2249
1972 4 2249
2156 4 2249
2168 4 2249
2249 4 2249
2249 4 2249
2249 4 2249
2314 4 2249
2719 4 2249
2736 4 2249
2736 4 2249
2833 4 2249
3074 4 2249
1626 5 2249
1708 5 2249
1853 5 2249
2249 5 2249
2249 5 2249
2249 5 2249
.I 2250
.T
Computer Methods Sampling Exponential
Normal Distributions (Corrigendum)
.B
CACM December, 1972
.A
Ahrens, J. H.
Dieter, U.
.N
CA721205 JB January 27, 1978 11:20 AM
.X
2250 5 2250
2250 5 2250
2250 5 2250
.I 2251
.T
Weighted Increment Linear Search Scatter Tables
.W
new linear search hash tables whose increment
step function key being addressed
presented. Comparisons known methods given,
terms efficiency computation complexity.
particular, new method applies tables
size n = 2^r. allows full table searching,
practically eliminates primary clustering very low cost.
.B
CACM December, 1972
.A
Luccio, F.
.K
linear search, weighted increment search, scatter
storage, hash table, key, hash address, clustering,
search length
.C
3.73 3.74 4.9
.N
CA721204 JB January 27, 1978 11:25 AM
.X
1676 4 2251
1682 4 2251
1728 4 2251
1860 4 2251
1860 4 2251
1973 4 2251
1973 4 2251
1973 4 2251
1973 4 2251
1992 4 2251
1992 4 2251
2018 4 2251
2018 4 2251
2018 4 2251
2032 4 2251
2033 4 2251
2033 4 2251
2107 4 2251
2107 4 2251
2109 4 2251
2109 4 2251
2138 4 2251
2203 4 2251
2203 4 2251
2203 4 2251
2203 4 2251
2251 4 2251
2251 4 2251
2251 4 2251
2251 4 2251
2251 4 2251
2251 4 2251
2359 4 2251
2524 4 2251
2530 4 2251
2534 4 2251
2537 4 2251
2543 4 2251
2543 4 2251
2543 4 2251
2543 4 2251
2543 4 2251
2552 4 2251
2559 4 2251
2559 4 2251
2559 4 2251
2573 4 2251
2573 4 2251
2573 4 2251
2770 4 2251
2770 4 2251
2770 4 2251
2770 4 2251
2974 4 2251
2991 4 2251
2991 4 2251
3053 4 2251
3053 4 2251
3053 4 2251
3053 4 2251
3083 4 2251
3083 4 2251
1785 5 2251
1786 5 2251
1973 5 2251
2018 5 2251
2107 5 2251
2109 5 2251
2251 5 2251
2251 5 2251
2251 5 2251
2974 5 2251
2109 6 2251
2251 6 2251
.I 2252
.T
Method Incrementally Compiling
Languages Nested Statement Structure
.W
method incremental compilation presented
which applies especially programming languages
which statements can nested (such Algol
PL/I). method permits editing source
language using general purpose text editor, incremental
processing changes without frequent
recompilation entire routines. essential points
method are: (1) syntax language
restricted insof ar which constructs may occur
lines; (2) internal data structure (called
skeleton) maintained represent statement
structure; (3) recompilation partially
batched sense recompilation modified lines
does not occur until last set editing
commands has been received; (4) parsing
compilation factored into two parts, done
individual lines done globally
handle relationships between lines.
.B
CACM December, 1972
.A
Earley, J.
Caizergues, P.
.K
incremental compiler, interactive programming language
.C
4.12 4.22
.N
CA721203 JB January 27, 1978 1:04 PM
.X
1086 4 2252
1132 4 2252
1234 4 2252
1263 4 2252
1265 4 2252
1270 4 2252
1323 4 2252
1358 4 2252
1379 4 2252
1380 4 2252
1396 4 2252
1453 4 2252
1464 4 2252
1484 4 2252
1491 4 2252
1498 4 2252
1541 4 2252
1565 4 2252
1613 4 2252
1614 4 2252
1767 4 2252
1781 4 2252
1781 4 2252
1781 4 2252
1787 4 2252
1824 4 2252
1825 4 2252
1860 4 2252
1860 4 2252
1945 4 2252
1988 4 2252
2083 4 2252
2178 4 2252
2179 4 2252
2252 4 2252
2252 4 2252
2252 4 2252
2252 4 2252
2325 4 2252
2341 4 2252
2546 4 2252
2594 4 2252
2645 4 2252
2652 4 2252
2684 4 2252
2842 4 2252
2929 4 2252
2934 4 2252
3069 4 2252
669 4 2252
679 4 2252
691 4 2252
761 4 2252
949 4 2252
989 4 2252
1358 5 2252
1496 5 2252
2155 5 2252
2252 5 2252
2252 5 2252
2252 5 2252
3184 5 2252
.I 2253
.T
Index Ranges Matrix Calculi
.W
paper describes scheme symbolic
manipulation index expressions which arise
by-product symbolic manipulation expressions
matrix calculi described authors
previous paper. scheme attempts program optimization
transforming original algorithm
rather than machine code. goal automatically
generate code handling tedious address
calculations necessitated complicated data structures.
paper therefore preoccupied "indexing
position." relationship "indexing
name" "indexing position" discussed.
.B
CACM December, 1972
.A
Bayer, R.
Witzgall, C.
.K
address calculations, algorithm transformation,
compilation, data structures, indexing name,
indexing position, index domain, index map, index
range, matrix expressions, normal form, programming
languages, program optimization, range operations, symbolic
manipulation, syntactic analysis, well-formed
expressions
.C
4.12 4.22 5.14
.N
CA721202 JB January 27, 1978 1:12 PM
.X
1614 4 2253
2253 4 2253
2253 4 2253
2254 4 2253
2557 4 2253
2081 5 2253
2253 5 2253
2253 5 2253
2253 5 2253
437 5 2253
.I 2254
.T
Dynamic Partitioning Array Languages
.W
classical process partitioning array
into subarrays extended more useful
array language operation. Various modes partitioning
defined different types arrays, so
subarrays may vary over original array
nearly arbitrary manner. These definitions
motivated several realistic examples illustrate
value partitioning array languages.
general interest data structure partitioning.
consists dynamic tree structures
which used derive maintain array control
information. These described sufficient
detail value design other array languages.
description presented paper
implemented new array language, OL/2, currently
under development University Illinois.
.B
CACM December, 1972
.A
Phillips, J. R.
Adams, H. C.
.K
dynamic partitioning, array partitioning array language,
data structure, tree structure, programming
language design, array control blocks, partition control blocks
.C
4.12 4.2 4.22
.N
CA721201 JB January 27, 1978 1:20 PM
.X
2253 4 2254
2254 4 2254
2081 5 2254
2254 5 2254
2254 5 2254
2254 5 2254
.I 2255
.T
Comments Moorer's Music Computer Composition
.B
CACM November, 1972
.A
Smoliar, S. W.
.K
artificial intelligence, heuristic programming,
models cognitive processes, computer music,
computer composition, music theory
.C
3.44 3.65
.N
CA721114 JB January 27, 1978 1:22 PM
.X
2255 5 2255
2255 5 2255
2255 5 2255
.I 2256
.T
Further Comments Dijkstra's Concurrent Programming Control Problem
.B
CACM November, 1972
.A
Eisenberg, M. A.
McGuire, M. R.
.K
critical section, concurrent programming control, multiprocessing
.C
4.32
.N
CA721113 JB January 27, 1978 1:24 PM
.X
1781 4 2256
2150 4 2256
2150 4 2256
2228 4 2256
2228 4 2256
2256 4 2256
2256 4 2256
2317 4 2256
2342 4 2256
2342 4 2256
2376 4 2256
2618 4 2256
2618 4 2256
3184 4 2256
1198 5 2256
1338 5 2256
2256 5 2256
2256 5 2256
2256 5 2256
2618 5 2256
1198 6 2256
1338 6 2256
1749 6 2256
2256 6 2256
.I 2257
.T
Note Optimal Doubly-Chained Trees
.B
CACM November, 1972
.A
Kennedy, S.
.K
file searching, doubly-chained tree, binary search tree
.C
3.73 3.74 5.32 5.6
.N
CA721112 JB January 27, 1978 1:26 PM
.X
1050 4 2257
1935 4 2257
1936 4 2257
2017 4 2257
2032 4 2257
2257 4 2257
2257 4 2257
2257 4 2257
2257 4 2257
2360 4 2257
2360 4 2257
2360 4 2257
2451 4 2257
2451 4 2257
2452 4 2257
2452 4 2257
2556 4 2257
2765 4 2257
1831 5 2257
1936 5 2257
2257 5 2257
2257 5 2257
2257 5 2257
2360 5 2257
849 5 2257
.I 2258
.T
Additional Results Key-to-Address Transform
Techniques: Fundamental Performance Study
Large Existing Formatted Files
.B
CACM November, 1972
.A
Lum, V. Y.
Yuen, P. S. T.
.K
hashing, hashing techniques, hashing methods, hash
coding, keys, key transformation, key-to-address
transformation, direct addressing, direct access method,
randomizing, random access file organization,
file search, scatter storage, information retrieval
.C
3.7 3.72 3.73 3.74 3.79 4.9
.N
CA721111 JB January 27, 1978 1:31 PM
.X
2258 4 2258
2319 4 2258
2313 4 2258
2359 4 2258
2437 4 2258
2552 4 2258
2781 4 2258
2860 4 2258
2991 4 2258
2203 5 2258
2258 5 2258
2258 5 2258
2258 5 2258
.I 2259
.T
Modified Incomplete Gamma Function [S14] (Algorithm A435)
.B
CACM November, 1972
.A
Fullerton, W.
.K
modified incomplete Gamma function, incomplete
Gamma function, chi-square distribution function,
Poisson distribution function
.C
5.13
.N
CA721110 JB January 27, 1978 1:40 PM
.X
2259 5 2259
2259 5 2259
2259 5 2259
.I 2260
.T
Exact Probabilities R x C Contingency Tables [G2] (Algorithm A434)
.B
CACM November, 1972
.A
March, D. L.
.K
probability, contingency table, test significance
.C
3.5 5.5
.N
CA721109 JB January 27, 1978 1:42 PM
.X
2260 5 2260
2260 5 2260
2260 5 2260
.I 2261
.T
Approximate Method Generating Symmetric Random Variables
.W
method generating values continuous
symmetric random variables relatively
fast, requires essentially no computer memory,
easy use developed. method, which uses
uniform zero-one random number source, based
inverse function lambda distribution
Turkey. Since approximates many continuous
theoretical distributions empirical distributions
frequently used simulations, method should
useful simulation practitioners.
.B
CACM November, 1972
.A
Ramberg, J. S.
Schmeiser, B. W.
.K
simulation, Monte Carlo, probability, statistics,
approximations, random variables, random numbers,
moments, distribution
.C
5.5 8.1
.N
CA721108 JB January 27, 1978 1:47 PM
.X
2261 5 2261
2261 5 2261
2261 5 2261
2686 5 2261
2261 6 2261
.I 2262
.T
Garbage Collection Virtual Memory Computer Systems
.W
list processing there typically growing
demand space during program execution.
paper examines practical implications
growth within virtual memory computer system,
proposes two new garbage collection techniques virtual
memory systems, compares them traditional
methods discussion simulation.
.B
CACM November, 1972
.A
Baecker, H. D.
.K
garbage collection, virtual memory, list
processing, paging, segmentation, page tables
.C
4.32
.N
CA721107 JB January 27, 1978 1:50 PM
.X
2262 5 2262
2262 5 2262
2262 5 2262
.I 2263
.T
Conversion Limited-Entry Decision Tables
Optimal Near-Optimal Flowcharts: Two New
Algorithms
.W
Two new algorithms deriving optimal
near-optimal flowcharts limited entry decision
tables presented. Both take into account rule frequencies
time needed test conditions.
One algorithms, called optimum-finding algorithm,
leads flowchart which truly minimizes
execution time decision table which simple rules
already contracted complex rules.
other one, called optimum-approaching algorithm, requires
many fewer calculations but does not necessarily
produce optimum flowchart. algorithms first
derived treating decision tables not containing
ELSE-rule, but optimum-approaching algorithm
shown equally valid tables including
such rule. Both algorithms compared existing
ones applied somewhat large decision
table derived real case. comparison two
conclusions drawn. (1) optimum-approaching
algorithm usually lead better results than comparable
existing ones not require more,
but usually less, computation time.(2) general,
greater computation effort needed applying
optimum-finding algorithm not justified
small reduction execution time obtained.
.B
CACM November, 1972
.A
Verhelst, M.
.K
decision table, flowcharting, preprocessor, optimal programs, search
.C
3.50 3.59 4.19 4.29 4.49 5.31
.N
CA721106 JB January 27, 1978 2:10 PM
.X
2263 5 2263
2263 5 2263
2263 5 2263
2598 5 2263
2691 5 2263
2726 5 2263
3113 5 2263
1172 6 2263
1172 6 2263
1327 6 2263
1354 6 2263
1354 6 2263
1488 6 2263
1489 6 2263
1548 6 2263
1548 6 2263
2220 6 2263
2220 6 2263
2221 6 2263
2263 6 2263
2263 6 2263
2263 6 2263
2263 6 2263
2453 6 2263
2598 6 2263
2691 6 2263
2691 6 2263
2856 6 2263
.I 2264
.T
Derived Semantics Some Programming Language Constructs
.W
constructs simple programming language
introduced described informally
terms values side-effects. translator defined
which translates language into flowcharts
simple machine. action machine executing
flowchart defined. proof constructed
effect translating executing any program
can expressed solely terms value
side-effect program. During course
constructing proof, formal definitions
concepts value side-effect derived order
make proof rigorous. Correctness
implementation involves checking definitions derived
step above acceptable formalization
informal description given first step.
.B
CACM November, 1972
.A
Henderson, P.
.K
lambda calculus, formal description, program
correctness, programming languages, semantics
.C
4.22 5.23 5.24
.N
CA721105 JB January 27, 1978 2:19 PM
.X
2264 5 2264
2264 5 2264
2264 5 2264
2470 5 2264
1303 6 2264
1469 6 2264
1834 6 2264
2264 6 2264
.I 2265
.T
Model Type Checking
.W
Most current programming languages treat computation
over different classes objects (e.g.
numbers, strings, labels functions). correct
compilation execution, following question
then arises: program properly constructed so
its operations operands compatible?
activity answering question usually called
type checking. paper attempts isolate
notion type checking presents partial
solution type checking problem based
notions abstraction application functions.
particular, program mapped into expression
within decidable subset Lambda calculus, which
characterizes type relations within program
eliminates all other information. determination
type-wise correctness incorrectness
program resolved reducing its corresponding
Lambda calculus expression one two normal
forms, constant "correct" type-wise correct
program constant "error". application
type checking Algol 60 made, attendant
problems faced any notion type checking
discussed.
.B
CACM November, 1972
.A
Ledgard, H. F.
.K
type checking, types, Lambda calculus, models
programming languages, syntax, semantics, compiler
writing, language implementation, formal definition
.C
4.12 4.22 5.2 5.21 5.23
.N
CA721104 JB January 27, 1978 2:30 PM
.X
2265 5 2265
2265 5 2265
2265 5 2265
.I 2266
.T
Highly Parallel Algorithm Approximating
All Zeros Polynomial Only Real Zeros
.W
algorithm described based Newton's
method which simultaneously approximates all zeros
polynomial only real zeros. algorithm, which
conceptually suitable parallel computation,
determines its own starting values so convergence
zeros guaranteed. Multiple zeros
their multiplicity readily determined. no
point method polynomial deflation used.
.B
CACM November, 1972
.A
Patrick, M. L.
.K
parallel numerical algorithms, real polynomials,
real zeros, Newton's method, starting values,
guaranteed convergence
.C
5.15
.N
CA721103 JB January 27, 1978 2:35 PM
.X
2266 5 2266
2266 5 2266
2266 5 2266
2660 5 2266
2266 6 2266
.I 2267
.T
Algorithms Reveal Properties Floating-Point Arithmetic
.W
Two algorithms presented form
Fortran subroutines. Each subroutine computes
radix number digits floating-point
numbers whether rounding chopping done
machine which run. methods
shown work any "reasonable" floating-point
computer.
.B
CACM November, 1972
.A
Malcolm, M. A.
.K
floating-point arithmetic, high-level
languages, philosophy language design
.C
4.9 5.19
.N
CA721102 JB January 27, 1978 2:39 PM
.X
2267 5 2267
2267 5 2267
2267 5 2267
2647 5 2267
2792 5 2267
2267 6 2267
2267 6 2267
2647 6 2267
.I 2268
.T
Comparative Study Computer Programs
Integrating Differential Equations
.W
study comparing performance several computer
programs integrating systems ordinary
differential equations reported. integration methods represented
include multistep methods (predictor-correctors),
single-step methods (Runge-Kutta) extrapolation methods
(both polynomial rational). testing
procedure described together evaluation
criteria applied. set test problems which
programs were tested included appendix.
particular problems criteria used
investigation found program based
rational extrapolation showed best performance.
.B
CACM November, 1972
.A
Fox, P.
.K
ordinary differential equations, integration,
program comparison, certification, validation
.C
5.10 5.17
.N
CA721101 JB January 27, 1978 2:45 PM
.X
2268 5 2268
2268 5 2268
2268 5 2268
2567 5 2268
2268 6 2268
755 6 2268
.I 2269
.T
Tableless Date Conversion (Algorithm R398)
.B
CACM October, 1972
.A
Robertson, J. D.
.K
date, calendar, Fortran statement function, arithmetic statement function
.C
3.15 4.9 5.9
.N
CA721009 JB January 27, 1978 2:47 PM
.X
2269 4 2269
3115 4 2269
2269 5 2269
2269 5 2269
2269 5 2269
785 5 2269
.I 2270
.T
Interpolation Smooth Curve Fitting Based
Local Procedures [E2] (Algorithm A433)
.B
CACM October, 1972
.A
Akima, H.
.K
interpolation, polynomial, slope curve, smooth curve fitting
.C
5.13
.N
CA721008 JB January 27, 19782:49 PM
.X
1845 4 2270
1900 4 2270
2083 4 2270
2154 4 2270
2270 4 2270
2693 4 2270
988 5 2270
2270 5 2270
2270 5 2270
2270 5 2270
2693 5 2270
2696 5 2270
988 6 2270
2270 6 2270
2270 6 2270
2696 6 2270
2693 6 2270
.I 2271
.T
Aesthetics Human Factor Programming (Corrigendum)
.B
CACM October, 1972
.A
Ershov,A. P.
.N
CA721007 JB January 27, 1978 2:51 PM
.X
2271 5 2271
2271 5 2271
2271 5 2271
.I 2272
.T
Sorting Natural Selection
.W
family sorting algorithms proposed,
members which make fuller use memory
space thus yield longer sorted strings. Extensive
simulation results presented, various
implications further applications discussed.
.B
CACM October, 1972
.A
Frazer, W. D.
Wong, C. K.
.K
algorithms, sorting replacement selection, expected string length
.C
5.31
.N
CA721006 JB January 27, 1978 2:54 PM
.X
1638 4 2272
1867 4 2272
2176 4 2272
2272 4 2272
2272 4 2272
1638 5 2272
2272 5 2272
2272 5 2272
2272 5 2272
677 5 2272
.I 2273
.T
Conversion Decision Tables Rule Mask Method Without Rule Mask
.W
Two algorithms generating computer programs
decision tables described. algorithms
allow handling limited entry, extended entry, mixed
entry tables. algorithms based
rule mask method but need not have masks execution
time. They perform logical operations
immediately rather than end interpreting
process. Execution time can considerably reduced
instantly marking rules which not applicable (Algorithms
1 2) conditions which already
tested (Algorithm 2). new algorithms combine
certain degree advantages mask methods
those tree methods.
.B
CACM October, 1972
.A
Dathe, G.
.K
decision tables, rule mask, rule mask method,
rule mask technique, program generator
.C
3.50 4.12 4.19 4.29
.N
CA721005 JB January 27, 1978 3:02 PM
.X
1354 4 2273
1354 4 2273
1354 4 2273
1488 4 2273
1488 4 2273
1684 4 2273
1994 4 2273
2053 4 2273
2053 4 2273
2053 4 2273
2053 4 2273
2220 4 2273
2220 4 2273
2220 4 2273
2220 4 2273
2221 4 2273
2273 4 2273
2273 4 2273
2273 4 2273
2273 4 2273
2273 4 2273
2273 4 2273
2453 4 2273
2453 4 2273
2453 4 2273
2453 4 2273
2517 4 2273
2598 4 2273
2598 4 2273
2726 4 2273
2726 4 2273
2726 4 2273
2726 4 2273
2856 4 2273
2856 4 2273
2856 4 2273
2856 4 2273
2856 4 2273
3034 4 2273
3113 4 2273
1172 5 2273
1237 5 2273
1327 5 2273
1354 5 2273
2053 5 2273
2220 5 2273
2273 5 2273
2273 5 2273
2273 5 2273
.I 2274
.T
Generating English Discourse Semantic Networks
.W
system described generating English
sentences form semantic nets which
nodes word-sense meanings paths
primarily deep case relations. grammar used
system form network imposes
ordering set syntactic transformations
expressed LISP functions. generation
algorithm uses information semantic
network select appropriate generation paths through
grammar. system designed use
computational tool allows linguist develop
study methods generating surface strings
underlying semantic structure. Initial finding
regard form determiners such voice,
form, tense, mood, some rules embedding sentences,
some attention pronominal substitution
reported. system programmed LISP
1.5 available authors.
.B
CACM October, 1972
.A
Simmons, R.
Slocum, J.
.K
semantic nets, grammars, deep case relations,
semantic generation, discourse generation
.C
3.42 3.65
.N
CA721004 JB January 27, 1978 3:10 PM
.X
2274 5 2274
2274 5 2274
2274 5 2274
2795 5 2274
1928 6 2274
1989 6 2274
2274 6 2274
.I 2275
.T
Integral Equations Immunology
.W
inversion particular integral equation
first (Fredholm) kind basic problem
considered. strategy which yielded success consisted
three essential points: (1) fit known
experimental data curve properties which derive
properties (as yet unknown) function;
(2) stabilize computation unknown function
using singular value decomposition; (3) constrain
unknown function approximation (since represents
probability distribution) nonnegative.
number test cases presented. One set actual
experimental data analyzed procedures
presented.
.B
CACM October, 1972
.A
Hanson, R. J.
.K
integral equations first kind, nonnegative
constraints, singular value analysis
.C
3.10 5.14 5.18 5.41
.N
CA721003 JB January 27, 1978 3:37 PM
.X
2275 5 2275
2275 5 2275
2275 5 2275
.I 2276
.T
Computer Methods Sampling
Exponential Normal Distributions
.W
Various methods known transforming uniformly
distributed random numbers into exponentially
normally distributed quantities. most efficient
ones compared, terms memory requirements
speed, some new algorithms. number procedures
convert Taylor series expansions directly
into sampling steps, approach which may used
sampling any continuous distribution.
exponential distribution definite recommendation
can made, whereas case normal
distribution there remains choice between slower
shorter algorithms faster but space consuming
methods.
.B
CACM October, 1972
.A
Ahrens, J. H.
Dieter, U.
.K
random numbers, pseudorandom, normal distribution,
exponential distribution, exponential distribution,
simulation, numerical analysis
.C
3.29 3.57 5.11 5.5
.N
CA721002 JB January 27, 1978 3:55 PM
.X
1073 4 2276
2137 4 2276
2276 4 2276
2276 4 2276
1073 5 2276
1153 5 2276
2276 5 2276
2276 5 2276
2276 5 2276
2565 5 2276
1716 6 2276
2276 6 2276
.I 2277
.T
Demand Paging Through Utilization Working Sets MANIAC II
.W
hardware implementation Maniac II computer
working set model demand paging,
introduced Denning, discussed. Characteristics
Maniac II given, along description
basic demand paging scheme associate memory
which has been added Maniac II hardware.
Finally, description hardware design implementation
working set model discussed
specification actions taken under various
conditions which may arise during operation
full working set model, demand paging system given.
.B
CACM October, 1972
.A
Morris, J. B.
.K
demand paging, dynamic storage allocation, Maniac
II, memory allocation, one-level store, paging,
paging associative memory, storage allocation,
thrashing, virtual memory, working set model
.C
4.30 6.21
.N
CA721001 JB January 27, 1978 4:06 PM
.X
1879 4 2277
1884 4 2277
1892 4 2277
1901 4 2277
1901 4 2277
2085 4 2277
2095 4 2277
2095 4 2277
2218 4 2277
2277 4 2277
2277 4 2277
2297 4 2277
2319 4 2277
2329 4 2277
2358 4 2277
2365 4 2277
2373 4 2277
2380 4 2277
2434 4 2277
2499 4 2277
2501 4 2277
2582 4 2277
2669 4 2277
2828 4 2277
2863 4 2277
2881 4 2277
2928 4 2277
2996 4 2277
3006 4 2277
3067 4 2277
1751 5 2277
1754 5 2277
2277 5 2277
2277 5 2277
2277 5 2277
2928 5 2277
3127 5 2277
1751 6 2277
2080 6 2277
2277 6 2277
2277 6 2277
2380 6 2277
2522 6 2277
2569 6 2277
.I 2278
.T
Foster's Information Storage Retrieval Using AVL Trees
.B
CACM September, 1972
.A
Tan, K. C.
.K
binary trees, search trees, information storage, information retrieval
.C
3.70 3.73 3.74
.N
CA720912 JB January 27, 1978 4:10 PM
.X
2278 5 2278
2278 5 2278
2278 5 2278
2455 5 2278
2278 6 2278
2388 6 2278
.I 2279
.T
Controller Braille Terminal
.B
CACM September, 1972
.A
Rubinstein, R.
Feldman, J.
.K
blind programming aid, braille, braille character
set, braille character translation, braille computer
communication, braille computer terminal, braille terminal,
tactile computer communication, tactile terminal
.C
1.59 4.41 6.35
.N
CA720911 JB January 27, 1978 4:14 PM
.X
2279 4 2279
1740 5 2279
2279 5 2279
2279 5 2279
2279 5 2279
.I 2280
.T
Comment Deadlock Prevention Method
.B
CACM September, 1972
.A
Parnas, D. L.
Habermann, A. N.
.K
multiprogramming, time-sharing, scheduling, resource
allocation, deadlock, interlock, lockout,
deadly embrace, knotting
.C
3.72 4.32 6.20
.N
CA720910 JB January 27, 1978 4:16 PM
.X
2228 4 2280
2280 4 2280
2280 4 2280
2379 4 2280
2379 4 2280
2482 4 2280
2482 4 2280
2500 4 2280
2740 4 2280
2851 4 2280
2920 4 2280
1877 5 2280
2228 5 2280
2280 5 2280
2280 5 2280
2280 5 2280
.I 2281
.T
Eigen problem Block Tridiagonal Matrices
.B
CACM September, 1972
.A
Khalil, H. M.
.K
linear algebra, eigenvalues eigenvectors,
partial differential equations
.C
5.14 5.17
.N
CA720909 JB January 27, 1978 4:18 PM
.X
2281 5 2281
2281 5 2281
2281 5 2281
.I 2282
.T
Comparison Floating Point Summation Methods
.B
CACM September, 1972
.A
Gregory, J.
.K
summation, floating-point addition, truncation error, error propagation
.C
5.11
.N
CA720908 JB January 27, 1978 4:20 PM
.X
2183 4 2282
2282 4 2282
2282 4 2282
2860 4 2282
3083 4 2282
1328 5 2282
2049 5 2282
2282 5 2282
2282 5 2282
2282 5 2282
.I 2283
.T
Thinning Algorithms Rectangular, Hexagonal, Triangular Arrays
.W
report three thinning algorithms
developed: one each use rectangular,
hexagonal, triangular arrays. approach
development each algorithm same. Pictorial
results produced each algorithms presented
relative performances algorithms
compared. found algorithm operating
triangular array most sensitive
image irregularities noise, yet yield
thinned image overall reduced number
points. concluded algorithm operating
conjunction hexagonal array has features
which strike balance between those other two arrays.
.B
CACM September, 1972
.A
Deutsch, E. S.
.K
thinning algorithms, rectangular, hexagonal,
triangular arrays, image processing, skeleton
.C
3.64
.N
CA720907 JB January 27, 1978 4:25 PM
.X
2283 5 2283
2283 5 2283
2283 5 2283
.I 2284
.T
Solution Matrix Equation AX+XB=C [F4] (Algorithm A432)
.B
CACM September, 1972
.A
Bartels, R. H.
Stewart, G. W.
.K
linear algebra, matrices, linear equations
.C
5.14
.N
CA720906 JB January 27, 1978 4:31 PM
.X
2284 5 2284
2284 5 2284
2284 5 2284
.I 2285
.T
Computer Routine Quadratic Linear
Programming Problems [H] (Algorithm A431)
.W
computer program based Lemke's complementary
pivot algorithm presented. can
used solve linear quadratic programming problems.
program has been extensively tested
wide range problems results have been extremely satisfactory.
.B
CACM September, 1972
.A
Ravindran, A.
.K
linear program, quadratic program, complementary
problem, Lemke's algorithm, simplex method
.C
5.41
.N
CA720905 JB January 27, 1978 4:34 PM
.X
2285 5 2285
2285 5 2285
2285 5 2285
.I 2286
.T
Automatic Error Analysis Determining Precision
.W
problem considered evaluating
rational expression within any desired tolerance
computer which performs variable-precision floating-point
arithmetic operations. automatic
error analysis technique given determining, directly
results trial low-precision
interval arithmetic calculation, just much precision
data accuracy required achieve
desired final accuracy. technique given generalize
easily evaluation many nonrational
expressions.
.B
CACM September, 1972
.A
Richman, P. L.
.K
error analysis, interval arithmetic, precision control
.C
5.11
.N
CA720904 JB January 27, 1978 4:39 PM
.X
2286 5 2286
2286 5 2286
2286 5 2286
2555 5 2286
2605 5 2286
1026 6 2286
2286 6 2286
2286 6 2286
.I 2287
.T
New Approach Automatic Scanning Contour Maps
.W
problem automatic digitizing contour
maps discussed. structure general
contour map analyzed, its topological properties
utilized developing new scanning algorithm.
problem detection recognition contour
lines solved two color labeling method.
shown maps containing normal contour lines
only, suffices distinguish between so-called
"even" "odd" lines. "tangency problem" involved
practical scanning discussed, solution
based minimizing computer memory space
simplifying control program suggested.
.B
CACM September, 1972
.A
Mor, M.
Lamdan, T.
.K
automatic scanning, contour maps, digitizing,
contour lines, topology, detection recognition
.C
3.14 3.19 6.35 6.36
.N
CA720903 JB January 27, 1978 4:46 PM
.X
2287 4 2287
2547 4 2287
3062 4 2287
1925 5 2287
2287 5 2287
2287 5 2287
2287 5 2287
.I 2288
.T
File Organization: Consecutive Retrieval Property
.W
consecutive retrieval property important
relation between query set record
set. Its existence enables design information
retrieval system minimal search time
no redundant storage. Some important theorems
consecutive retrieval property proved
paper. Conditions under which consecutive retrieval
property exists remain invariant have
been established. outline designing information
retrieval system based consecutive
retrieval property also discussed.
.B
CACM September, 1972
.A
Ghosh, S. P.
.K
file organization, consecutive storage, consecutive
retrieval, information retrieval, record organization,
query structure, record structure, storage
tapes, storage space, minimum access time
.C
3.70 3.73 3.74
.N
CA720902 JB January 27,1978 4:52 PM
.X
2288 5 2288
2288 5 2288
2288 5 2288
2729 5 2288
2288 6 2288
2801 6 2288
.I 2289
.T
Cellular Arrays Solution Graph Problems
.W
cellular array two-dimensional, checkerboard
type interconnection identical modules
(or cells), each cell contains few bits
memory small amount combinational logic,
communicates mainly its immediate neighbors
array. chief computational advantage
offered cellular arrays improvement speed
achieved virtue possibilities parallel
processing. paper shown cellular
arrays inherently well suited solution
many graph problems. example, adjacency
matrix graph easily mapped onto array;
each matrix element stored one cell array,
typical row column operations readily
implemented simple cell logic. major challenge
effective use cellular arrays
solution graph problems determination algorithms
exploit possibilities parallelism,
especially problems whose solutions appear inherently
serial. particular, several parallelized
algorithms presented solution certain
spanning tree, distance, path problems,
direct applications wire routing, PERT chart analysis,
analysis many types networks.
These algorithms exhibit computation time
many cases grows rate not exceeding log2 n,
n number nodes graph. Straightforward
cellular implementations well-known
serial algorithms these problems require n
steps, noncellular implementations require
n^2 n^3 steps.
.B
CACM September, 1972
.A
Levitt, K. N.
Kautz, W. H.
.K
graph theory, cellular logic-in-memory arrays,
parallel processing, special purpose computers,
algorithms distance spanning tree problems
.C
5.32 6.22 6.5
.N
CA720901 JB January 30, 1978 9:16 AM
.X
2289 5 2289
2289 5 2289
2289 5 2289
3075 5 2289
3156 5 2289
2289 6 2289
2289 6 2289
2557 6 2289
2664 6 2289
2714 6 2289
2973 6 2289
3075 6 2289
.I 2290
.T
Immediate Predominators Directed Graph [H] (Algorithm A430)
.B
CACM August, 1972
.A
Purdom Jr., P. W.
Moore, E. F.
.K
predominator, immediate predominator, graph theory,
directed graph, shortest path, articulation,
connectivity, program optimization, optimizing compiler
.C
4.12 5.32
.N
CA720812 JB January 30, 1978 9:19 AM
.X
1807 4 2290
2034 4 2290
2290 4 2290
2579 4 2290
2923 4 2290
2945 4 2290
1947 5 2290
2290 5 2290
2290 5 2290
2290 5 2290
.I 2291
.T
Localization Roots Polynomial [C2] (Algorithm A429)
.B
CACM August, 1972
.A
Squire, W.
.K
polynomials, roots polynomials,theory
equations, Routh-Hurwitz criterion
.C
5.15
.N
CA720811 JB January 30, 1978 9:21 AM
.X
2291 5 2291
2291 5 2291
2291 5 2291
.I 2292
.T
Note Generation Rosary Permutations
.B
CACM August, 1972
.A
Read, R. C.
.K
permutation, permutation generation
.C
5.39
.N
CA720810 JB January 30, 1978 9:24 AM
.X
2292 4 2292
2505 4 2292
2189 5 2292
2292 5 2292
2292 5 2292
2292 5 2292
2505 5 2292
2189 6 2292
2292 6 2292
521 6 2292
.I 2293
.T
Comment Average Binary Search Length
.B
CACM August, 1972
.A
Jones, P. R.
.K
searching, binary searching, record retrieval
.C
3.74
.N
CA720809 JB January 30, 1978 9:26 AM
.X
2293 4 2293
2157 5 2293
2293 5 2293
2293 5 2293
2293 5 2293
.I 2294
.T
Bonus van Wijngaarden's Device
.B
CACM August, 1972
.A
Morris Jr., J. H.
.K
non-local transfers, procedure returns
.C
4.12 4.13 4.22
.N
CA720808 JB January 30, 1978 9:27 AM
.X
2060 4 2294
2155 4 2294
2294 4 2294
2294 4 2294
2470 4 2294
2558 4 2294
2842 4 2294
3077 4 2294
3124 4 2294
3150 4 2294
1469 5 2294
2060 5 2294
2294 5 2294
2294 5 2294
2294 5 2294
.I 2295
.T
Comment Composition Semantics Algol 68
.B
CACM August, 1972
.A
van der Poel, W. L.
.K
programming primitives, programming languages,
Algol, semantics, recursive composition, design
programming languages, data structures
.C
1.3 4.2 4.22 5.23 5.24
.N
CA720807 JB January 30, 1978 9:29 AM
.X
2295 5 2295
2295 5 2295
2295 5 2295
.I 2296
.T
Compiling Fixed-Point Multiplications
.B
CACM August, 1972
.A
Bernstein, H. J.
.K
compiling multiplications, fixed-point arithmetic
.C
4.12
.N
CA720806 JB January 30, 1978 9:42 AM
.X
2296 4 2296
2952 4 2296
2185 5 2296
2296 5 2296
2296 5 2296
2296 5 2296
.I 2297
.T
Model Memory Contention Paging Machine
.W
paper concerned certain aspects contention
main memory resources multiprogrammed
computer system operating under demand paging.
model presented, number page-frames
main memory allocated problem program varies
time. These changes memory configuration
represented explicitly model, CPU requirements
page exception characteristics program material
being described statistically. Expressions distribution
number page-frames allocated
executing program, long run expected fraction
program's execution time given number
page-frames, average execution interval
multiprogrammed load obtained. pointed
out heuristically demonstrated numerically
increase obtain able average execution
interval multiprogrammed load over resulting
equal fixed partitioning main memory.
.B
CACM August, 1972
.A
Oden, P. H.
Shedler, G. S.
.K
paging machines, demand paging, operating systems
studies, queuing analysis, memory contention,
memory management
.C
4.32
.N
CA720805 JB January 30, 1978 9:50 AM
.X
1879 4 2297
1884 4 2297
1892 4 2297
1901 4 2297
1924 4 2297
2095 4 2297
2095 4 2297
2218 4 2297
2277 4 2297
2297 4 2297
2297 4 2297
2365 4 2297
2374 4 2297
2526 4 2297
2667 4 2297
2668 4 2297
2862 4 2297
2863 4 2297
1728 5 2297
1754 5 2297
2297 5 2297
2297 5 2297
2297 5 2297
.I 2298
.T
Environment Research Microprogramming Emulation
.W
development research project
microprogramming emulation State University
New York Buffalo consisted three phases:
evaluation various possible machines support
research; decision purchase one such machine,
which appears superior others
considered; organization definition goals
each group project. Each these
phases reported, emphasis placed
early results achieved research.
.B
CACM August, 1972
.A
Rosin, R. F.
Frieder, G.
Eckhouse Jr., R. H.
.K
microprogramming, emulation, computer systems, language
processors, input-output systems, nano-program,
project management, hardware evaluation
.C
4.1 4.2 4.3 6.2
.N
CA720804 JB January 30, 1978 9:55 AM
.X
2298 5 2298
2298 5 2298
2298 5 2298
3144 5 2298
1471 6 2298
2298 6 2298
2491 6 2298
2597 6 2298
2624 6 2298
2625 6 2298
2632 6 2298
.I 2299
.T
Extensible Editor Small Machine Disk Storage
.W
design philosophy developing sophisticated
utility program illustrated actual
design implementation text editor. versatile
data structure employed so only small
number programmed subroutines necessary all
types data manipulation. Such data structure
described, its merits illustrated ease
which powerful extensions can implemented
terms few basic editing function.
.B
CACM August, 1972
.A
Benjamin, A. J.
.K
command processing, context searching, executive
program, garbage collection, interpreter, list
processing, macro language, paging, parameter substitution,
recursion, state table, storage allocation,
string manipulation, text editing, virtual memory
.C
3.73 3.74 3.75 4.13 4.22 4.43 4.49
.N
CA720803 JB January 30, 1978 10:00 AM
.X
1626 4 2299
1708 4 2299
1781 4 2299
1860 4 2299
2299 4 2299
2299 4 2299
2501 4 2299
2629 4 2299
2915 4 2299
3114 4 2299
1502 5 2299
1641 5 2299
2299 5 2299
2299 5 2299
2299 5 2299
.I 2300
.T
Political Redistricting Computer
.W
problems political redistricting
considered computer method redistricting
presented. Criteria acceptable redistricting
discussed, including population equality, compactness,
contiguity, preservation natural and/or political
boundaries. Only nonpartisan criteria considered.
Using 1970 Bureau Census population data, specific
results given ten Congressional Districts
state Missouri seven St. Louis
County Council seats. Results use
algorithm indicate feasibility political
redistricting aid computer.
.B
CACM August, 1972
.A
Helbig, R. E.
Orr, P. K.
Roediger, R. R.
.K
political redistricting, reapportionment, compactness,
equal population, contiguity, transportation
algorithm, legislative districts, population units
.C
2.12 3.35 5.41
.N
CA720802 JB January 30, 1978 10:14 AM
.X
2300 5 2300
2300 5 2300
2300 5 2300
.I 2301
.T
Generating Parsers Affix Grammars
.W
Affix grammars two-level grammars which
similar van Wijngaarden's two-level grammars
used definition Algol 68. Affix grammars shown
Koster equal power van Wijngaarden
grammars. They much more suited parsing than
latter, however. Koster, inventor
affix based recursive procedures. paper presents
bottom-up scheme parsing them, based
extension Floyd Production Language (FPL). Included
algorithm, similar DeRemer's,
converting large class affix grammars into FPL.
paper concludes discussing briefly
applicabilities conversion algorithm affix
grammars general, some possible extensions
Koster's definition affix grammars.
.B
CACM August, 1972
.A
Crowe, D.
.K
algorithmic language processing,bottom-up parsing,
Floyd Production Language, parsing, syntax
directed compiling, translator writing systems, two-level grammars
.C
3.42 4.12 4.13 4.20 5.23
.N
CA720801 JB January 30, 1978 10:21 AM
.X
2301 5 2301
2301 5 2301
2301 5 2301
2886 5 2301
2301 6 2301
.I 2302
.T
Computers Employment
.W
relationship computers automation
employment part more general relation
technological change employment. most obvious
effect increase productivity due
technology can eliminate jobs. Technology affects
individual worker, nature amount
his work, his attitudes toward work. Technological
change affects occupational structure
entire labor force. Because central importance
these effects, impact technology
has been subject extensive study economists, sociologists,
political scientists, psychologists.
Even within single discipline, studies often contradictory,
conclusions colored political
overtones. We wish delineate some issues,
present arguments given support different
viewpoints.
.B
CACM July, 1972
.A
Borodin, A.
Gotlieb, C. C.
.K
employment, unemployment, social implications, attitudes,
skills, obsolescence, technology, unions,
displacement
.C
2.1
.N
CA720726 JB January 30, 1978 10:30 AM
.X
2302 5 2302
2302 5 2302
2302 5 2302
3011 5 2302
2075 6 2302
2302 6 2302
2345 6 2302
2485 6 2302
.I 2303
.T
Archaeology Computers - Reminiscences, 1945-1947
.W
period preceding founding ACM
dominated first large computer ENIAC.
Its characteristics, described here, foreshadow later developments.
.B
CACM July, 1972
.A
Alt, F. L.
.K
history computers
.C
1.2
.N
CA720725 JB January 30, 1978 10:36 AM
.X
2303 5 2303
2303 5 2303
2303 5 2303
.I 2304
.T
Western View Computer History
.W
Many U.S. histories digital computer
field have tended impersonal, heavy
emphasis eastern universities commercial developments.
article records events
early years personal way. people, organizations,
technologies, computers 1945-55
period western part United Statesare described they happened.
.B
CACM July, 1972
.A
Sprague, R. E.
.K
history, computer history
.C
1.2 6.0
.N
CA720724 JB January 30, 1978 10:40 AM
.X
2304 5 2304
2304 5 2304
2304 5 2304
.I 2305
.T
"Plankalkul" Konrad Zuse: Forerunner
Today's Programming Languages
.W
Plankalkul attempt Korrad Zuse
1940's devise notational conceptual
system writing today termed program. Although
early approach programming language
did not lead practical use, plan described
here because contains features standard
today's programming languages. investigation
historical interest; also, may provide
insights would lead advancements state
art. Using modern programming terminology,
Plankalkul presented extent has possible
reconstruct published literature.
.B
CACM July, 1972
.A
Bauer, F. L.
Wossner, H.
.K
higher programming languages, programming,
theory programming, history programming
.C
1.2 4.22 5.29
.N
CA720723 JB January 30, 1978 10:46 AM
.X
2305 5 2305
2305 5 2305
2305 5 2305
.I 2306
.T
Ancient Babylonian Algorithms
.W
early origins mathematics discussed,
emphasizing those aspects which seem
greatest interest standpoint computer
science. number old Babylonian tablets, many
which have never before been translated into English, quoted.
.B
CACM July, 1972
.A
Knuth, D. E.
.K
history computation, Babylonian tablets,
sexagesimal number system, sorting
.C
1.2
.N
CA720722 JB January 30, 1978 10:50 AM
.X
2306 5 2306
2306 5 2306
2306 5 2306
.I 2307
.T
Dynamic Document Processing
.W
current role computers automatic
document processing briefly outlined, some
reasons given why early promise library automation
mechanization documentation
processes has not been fulfilled. new dynamic document
environment then outlined which clustered
files searched information retrieved following
interactive user-controlled search process.
Methods described automatic query modification
based user needs, continuous
reorganization stored information function
earlier file processing normal collection
growth. proposed procedures provide powerful tools
information retrieval control
dynamic library collections which new items
continually added old ones retired.
.B
CACM July, 1972
.A
Salton, G.
.K
automatic indexing, automatic search retrieval,
iterative searching, mechanized library processing,
collection growth, collection retirement, feedback search
.C
3.62 3.71 3.73 3.74
.N
CA720721 JB January 30, 1978 10:59 AM
.X
2307 5 2307
2307 5 2307
2307 5 2307
.I 2308
.T
Computers Urban Society
.W
brief survey use computers
urban society covers broad range activities
found any city. future scope applications
limited only imagination inventiveness
future system designers, programmers, analysts,
decision makers. computer can be, if properly
used, respect human dignity civil liberty,
significant factor improving efficiency
urban process. expected benefits
such computer usage outweigh costs
we may look forward expansion such usage.
.B
CACM July, 1972
.A
Sturman, G. M.
.K
urban systems, urban applications, data acquisition,
data management, engineering analysis, information
systems
.C
3.23 3.39 3.53 3.72 3.82 3.89
.N
CA720720 JB January 30, 1978 11:05 AM
.X
2308 5 2308
2308 5 2308
2308 5 2308
.I 2309
.T
Computers Instructional Process:
Directions Research Development
.W
survey given computer applications
instructional process which suggests
computer professional can contribute effective educational systems.
.B
CACM July,1972
.A
Zinn, K. L.
.K
education
.C
1.5 3.32
.N
CA720719 JB January 30, 1978 11:13 AM
.X
2127 4 2309
2309 4 2309
2309 4 2309
2310 4 2309
2396 4 2309
1856 5 2309
2309 5 2309
2309 5 2309
2309 5 2309
2398 5 2309
.I 2310
.T
Language Analysis Humanities
.W
use computer language-oriented
humanities exhaustive listing detail
(as indices concordances) widespread accepted
desirable. implications computer
"science" humanities-a science entailing
gathering data construction testing
models-are neither widely recognized nor accepted.
paper argues computer's major role
language analysis humanities
establishing such science.Thus, those
areas humanities which rigor precision
necessary (e.g. analyzing literature teaching
student write composition) computer
can critically important facilitator.
.B
CACM July, 1972
.A
Sedelow, S. Y.
.K
language analysis, humanities, science humanities,
pattern recognition, pattern generation,
interdisciplinary cooperation
.C
1.3 2.19 3.42 3.43
.N
CA720718 JB January 30, 1978 11:19 AM
.X
2127 4 2310
2309 4 2310
2310 4 2310
2396 4 2310
1856 5 2310
2310 5 2310
2310 5 2310
2310 5 2310
.I 2311
.T
Generational Perspective Information System Development
.W
System development categorized generational
point view parallels commonly
described computing system generations. each generation,
scope development projects
technological world view system developer examined.
.B
CACM July, 1972
.A
Benjamin, R. I.
.K
computing milieu, management data processing, hardware
systems, software systems, systems development
process, functional systems, management systems
.C
2.0 3.50 4.0 6.20
.N
CA720717 JB January 30, 1978 11:22 AM
.X
2311 5 2311
2311 5 2311
2311 5 2311
.I 2312
.T
Present Future Scientific Computation
.W
pessimistic forecast given can
expected happen application computers
physical sciences.
.B
CACM July, 1972
.A
Rice, J. R.
.K
scientific computation
.C
3.1 5.0
.N
CA720716 JB January 30, 1978 11:24 AM
.X
2312 5 2312
2312 5 2312
2312 5 2312
.I 2313
.T
Evolution Storage Structures
.W
Data base management systems have grown rapidly
their power complexity over 15-year
history data processing commercially available
computers. original concepts have split,
new terms have been adopted name refer these
concepts. Data Structure Diagram graphic
technique used illustrate splitting
concepts structural relations which exist
between these concepts each point evolution.
.B
CACM July, 1972
.A
Bachman, C. W.
.K
block, cylinder, device, field, extent file, page,
record, physical record, logical record, track,
volume, entity, set, entity class, set class, data structure
diagram, storage structure, physical storage
structure, logical storage structure, storage allocation
structure, Integrated Data Store, index sequential,
hash, randomize, item
.C
1.4 4.41 4.9
.N
CA720715 JB January 30, 1978 1:16 PM
.X
2258 4 2313
2319 4 2313
2313 4 2313
2359 4 2313
2437 4 2313
2552 4 2313
2781 4 2313
2860 4 2313
2991 4 2313
2203 5 2313
2313 5 2313
2313 5 2313
2313 5 2313
2425 5 2313
2313 6 2313
.I 2314
.T
Requirements Advanced Programming Systems List Processing
.W
List processing systems should designed
facilitate production large programs manipulate
large complex symbolic data stores. paper presents
overview number system features which
author feels important improve productivity
programmers working such domains.
system view taken, rather than focusing just language
features, since algorithms must not only
coded language form, but debugged, modified, made
efficient, run data. Because general
framework,the requirements specified applicable
design advanced programming systems
wide range applications. Three aspects programming
systems highlighted: good interactive
facilities, programmable control structures, sophisticated
data communication mechanisms. Interactive
features described facilitate program composition,
entry, testing, debugging, editing, optimization,
packaging. Implementation generalized environment
structure model specified would allow programming
various control regimes including multiprocesses,
coroutines backtracking. Alternative methods
procedure invocation required include invocation
pattern monitoring condition. need
extended data forms, storage management, extensibility
stressed, duality data
retrieval function evaluation. Syntax directed
input output data would facilitate use
complex data stores.
.B
CACM July, 1972
.A
Bobrow, D. G.
.K
list processing, programming languages, design
programming languages, interactive systems, control
structures, data structures, programming primitives,
semantics, advanced programming systems
.C
1.3 4.2 4.22 4.3 4.32 5.23 5.24
.N
CA720714 JB January 30, 1978 1:30 PM
.X
1570 4 2314
1708 4 2314
1781 4 2314
1826 4 2314
1860 4 2314
1945 4 2314
2156 4 2314
2168 4 2314
2249 4 2314
2314 4 2314
2314 4 2314
2314 4 2314
2314 4 2314
2317 4 2314
2719 4 2314
2736 4 2314
2833 4 2314
2842 4 2314
1098 5 2314
1626 5 2314
2082 5 2314
2148 5 2314
2314 5 2314
2314 5 2314
2314 5 2314
2438 5 2314
1826 6 2314
2314 6 2314
.I 2315
.T
Production Better Mathematical Software
.W
Some observations made steps
taken toward creation better mathematical
software. These steps suggest need coordinated
effort creation center focus
activities area.
.B
CACM July, 1972
.A
Fosdick, L. D.
.K
mathematical software, programming
.C
4.0
.N
CA720713 JB January 30, 1978 1:32 PM
.X
1330 4 2315
1348 4 2315
1986 4 2315
2021 4 2315
2222 4 2315
2227 4 2315
2315 4 2315
2315 4 2315
2315 4 2315
2315 4 2315
2326 4 2315
2470 4 2315
2732 4 2315
2865 4 2315
2896 4 2315
2943 4 2315
3014 4 2315
3068 4 2315
3077 4 2315
3143 4 2315
1348 5 2315
1834 5 2315
1987 5 2315
2315 5 2315
2315 5 2315
2315 5 2315
728 5 2315
.I 2316
.T
Programming Languages: History Future
.W
paper discusses both history future
programming languages (= higher level languages).
Some difficulties writing such history
indicated. key part paper tree
showing chronological development languages their
interrelationships. Reasons proliferation
languages given. major languages listed
reasons their importance. section
chronology indicates happenings significant
previous time periods major topics
1972. Key concepts other than specific languages discussed.
.B
CACM July, 1972
.A
Sammet, J. E.
.K
programming languages, higher level languages,
languages, history, future directions, language
interrelationships, programming language tree, programming
language history, programming language future
.C
1.2 4.2
.N
CA720712 JB January 30, 1978 1:38 PM
.X
2316 5 2316
2316 5 2316
2316 5 2316
.I 2317
.T
Programming Systems Languages 1965-1975
.W
spite impressive gains PL/I, Fortran
Cobol remain languages which most
world's production programs written
remain so into foreseeable future. There
great deal theoretical interest Algol 68
extensible languages, but so far least
they have had little practical impact. Problem-oriented
languages may very well become most important
language development area next five ten years.
operating system area all major computer
manufacturers set out produce very ambitious multiprogramming
systems, they all ran into similar
problems. number university projects,though not
directly comparable those manufacturers,
have contributed greatly better understanding
operating system principles. Important trends
include increased interest development
system measurement evaluation techniques,and
increased use microprogramming some programming system functions.
.B
CACM July, 1972
.A
Rosen, S.
.K
languages, operating systems, programming
systems, multiprogramming, history
.C
1.2 4.22 4.32
.N
CA720711 JB January 30, 1978 1:47 PM
.X
1665 4 2317
1768 4 2317
1781 4 2317
1787 4 2317
1805 4 2317
1824 4 2317
1825 4 2317
1828 4 2317
1836 4 2317
1846 4 2317
1854 4 2317
1861 4 2317
1877 4 2317
1892 4 2317
1960 4 2317
2015 4 2317
2110 4 2317
2126 4 2317
2127 4 2317
2150 4 2317
2150 4 2317
2187 4 2317
2188 4 2317
2218 4 2317
2228 4 2317
2256 4 2317
2314 4 2317
2317 4 2317
2317 4 2317
2317 4 2317
2317 4 2317
2317 4 2317
2317 4 2317
2317 4 2317
2317 4 2317
2319 4 2317
2358 4 2317
2377 4 2317
2342 4 2317
2342 4 2317
2376 4 2317
2376 4 2317
2379 4 2317
2424 4 2317
2482 4 2317
2545 4 2317
2546 4 2317
2618 4 2317
2618 4 2317
2625 4 2317
2632 4 2317
2698 4 2317
2704 4 2317
2723 4 2317
2733 4 2317
2738 4 2317
2740 4 2317
2741 4 2317
2842 4 2317
2867 4 2317
3184 4 2317
3184 4 2317
1198 5 2317
1572 5 2317
1693 5 2317
1749 5 2317
1753 5 2317
1781 5 2317
2126 5 2317
2148 5 2317
2317 5 2317
2317 5 2317
2317 5 2317
2874 5 2317
1682 6 2317
2227 6 2317
2317 6 2317
2683 6 2317
2871 6 2317
521 6 2317
.I 2318
.T
Role Computer System Models Performance Evaluation
.W
Models constitute useful means investigating
computer system performance. paper
examines interrelationships between models other
methods evaluating performance computer
systems establishes circumstances under
which use model appropriate.
.B
CACM July,1972
.A
Kimbleton, S. R.
.K
modeling, evaluation, performance, analytic-models,
simulation-models, system-models
.C
2.43 2.44 6.2 8.3
.N
CA720710 JB January 30, 1978 2:03 PM
.X
2151 4 2318
2318 4 2318
1653 5 2318
2318 5 2318
2318 5 2318
2318 5 2318
.I 2319
.T
Operating System Performance
.W
overview current future positions
respect operating system performance
given. While great deal information large
number models subsystems have been developed,
gaps still exist out knowledge. Because
severe interactions between various subsystems
operating system, overall model total
system must developed able analyze
design performance aspects operating system
although such total system designs exceptional
today, projected they become increasingly
more common necessary near future.
Such design philosophy clearly have severe impact
way we go modularizing operating
computer systems.
.B
CACM July, 1972
.A
Lynch, W. C.
.K
computer system, operating system, performance
evaluation, performance measurement, measurement,
techniques, modularity, layering, structured programming,
paging, virtual memory, input/output, disk
storage facility, drum storage facility, sector queueing
.C
4.30 6.20
.N
CA720709 JB January 30, 1978 2:33 PM
.X
1828 4 2319
1854 4 2319
1877 4 2319
1892 4 2319
1901 4 2319
1960 4 2319
2085 4 2319
2095 4 2319
2150 4 2319
2193 4 2319
2218 4 2319
2258 4 2319
2277 4 2319
2317 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2319 4 2319
2313 4 2319
2329 4 2319
2358 4 2319
2377 4 2319
2378 4 2319
2373 4 2319
2359 4 2319
2342 4 2319
2376 4 2319
2379 4 2319
2380 4 2319
2320 4 2319
2424 4 2319
2434 4 2319
2437 4 2319
2482 4 2319
2499 4 2319
2480 4 2319
2501 4 2319
2552 4 2319
2582 4 2319
2582 4 2319
2594 4 2319
2618 4 2319
2632 4 2319
2632 4 2319
2669 4 2319
2669 4 2319
2704 4 2319
2709 4 2319
2723 4 2319
2738 4 2319
2738 4 2319
2740 4 2319
2740 4 2319
2741 4 2319
2781 4 2319
2828 4 2319
2860 4 2319
2863 4 2319
2867 4 2319
2868 4 2319
2881 4 2319
2894 4 2319
2928 4 2319
2939 4 2319
2972 4 2319
2991 4 2319
2996 4 2319
3006 4 2319
3054 4 2319
3067 4 2319
3127 4 2319
3155 4 2319
3184 4 2319
1408 5 2319
1719 5 2319
1749 5 2319
1751 5 2319
2016 5 2319
2017 5 2319
2080 5 2319
2188 5 2319
2203 5 2319
2204 5 2319
2319 5 2319
2319 5 2319
2319 5 2319
.I 2320
.T
Structured Multiprogramming
.W
paper presents proposal structured
representation multiprogramming high
level language. notation used explicitly associates
data structure shared concurrent processes
operations defined it. clarifies meaning
programs permits large class time-dependent
errors caught compile time. combination
critical regions event variables enables
programmer control scheduling resources among
competing processes any degree desired. These
concepts sufficiently safe use not only within
operating systems but also within user programs.
.B
CACM July, 1972
.A
Hansen, P. B.
.K
structured multiprogramming, programming languages,
operating systems, concurrent processes, shared
data, mutual exclusion, critical regions, process
communication, synchronizing events.
.C
4.2 4.3
.N
CA720708 JB January 30, 1978 2:39 PM
.X
2319 4 2320
2378 4 2320
2320 4 2320
2320 4 2320
2597 4 2320
2632 4 2320
2738 4 2320
2740 4 2320
2777 4 2320
2851 4 2320
2868 4 2320
2895 4 2320
2912 4 2320
2946 4 2320
3127 4 2320
3128 4 2320
2080 5 2320
2150 5 2320
2320 5 2320
2320 5 2320
2320 5 2320
2597 5 2320
2150 6 2320
2320 6 2320
.I 2321
.T
Interface Between Computers Data Communications Systems
.W
Future systems combine computers, digital
terminals, communications equipment present
design optimization problems require reconsideration
traditional functional responsibilities
respective subsystems. Several "standard" interfaces,
means which computers digital
terminals connect communications systems
required. specifying these interfaces,
consideration must given problems coordination,
synchronization, error control, signaling, stream
multiplexing, switch control, addition minimizing
technological interdependence specific
subsystem designs. focus some problems
obtained discussion detailed specification
particular computer-communications system interface.
.B
CACM July, 1972
.A
Fraser, A. G.
.K
communications, standard interface communications
protocol, virtual channel, multiplexed input/output,
coordination input/output
.C
3.81 6.0 6.35
.N
CA720707 JB January 30, 1978 2:46 PM
.X
2321 5 2321
2321 5 2321
2321 5 2321
.I 2322
.T
View computer Architecture
.W
attempt made predict developments
next 25 years field computer
architecture. Standardized, inexpensive microcomputers
single chip predicted. These
used extensively provide logical functions noncomputational
devices incidentally design
superscale computers.
.B
CACM July, 1972
.A
Foster, C. C.
.K
computer architecture, projection, microcomputers,
computer design, computer organization
.C
1.2 2.1 6.0 6.2
.N
CA720706 JB January 30, 1978 3:00 PM
.X
2322 5 2322
2322 5 2322
2322 5 2322
.I 2323
.T
Toward General Theory Special Functions
.W
list number natural developments
field algebraic manipulation given.
Then prospects general theory functions
defined ordinary differential equations
discussed. claim made recent developments
mathematics indicate should possible
algorithmically generate many properties solutions
differential equations. Such theory
preferable less general effort make algebraic
manipulation systems knowledgeable usual
special functions (e.g. exponential, hypergeometric).
.B
CACM July, 1972
.A
Moses, J.
.K
algebraic manipulation, special functions, algebraic
simplification, symbolic integration, algebraic
geometry, differential algebra
.C
1.50 3.15 5.19 5.9
.N
CA720705 JB January 30, 1978 3:07 PM
.X
2164 4 2323
2170 4 2323
2323 4 2323
2323 4 2323
2323 4 2323
2719 4 2323
2167 5 2323
2164 5 2323
2170 5 2323
2323 5 2323
2323 5 2323
2323 5 2323
.I 2324
.T
Management Science: View Nonlinear Programming
.W
brief history integer continuous
nonlinear programming presented well
current obstacles practical use these mathematical
programming techniques. forecast
useful contributions nonlinear programming actually
made next few years more likely
consolidations than theoretical breakthroughs. These
contributions likely documentation
standard test problems, construction user oriented
software, comparisons currently known
algorithms demonstrate which techniques best specific problems.
.B
CACM July, 1972
.A
Shanno, D. F.
Weil, R. L.
.K
integer programming, linear programming, mathematical
programming, nonlinear programming, quadratic
programming, management science, operations research, algorithms
.C
5.41 8.3
.N
CA720704 JB January 30, 1978 3:14 PM
.X
2324 5 2324
2324 5 2324
2324 5 2324
.I 2325
.T
Numerical Mathematics Computer Science
.W
Numerical mathematics viewed analysis
continuous algorithms. Four components
numerical mathematics discussed. These are: foundations
(finite precision number systems, computational
complexity), synthesis analysis algorithms,
analysis error, programs program libraries.
.B
CACM July, 1972
.A
Traub, J. F.
.K
numerical mathematics, computer science, mathematics
computation, algorithms, continuous algorithms
.C
1.3 5.0 5.1 5.25
.N
CA720703 JB January 30, 1978 3:17 PM
.X
1086 4 2325
1132 4 2325
1234 4 2325
1263 4 2325
1265 4 2325
1270 4 2325
1323 4 2325
1358 4 2325
1379 4 2325
1380 4 2325
1453 4 2325
1464 4 2325
1484 4 2325
1491 4 2325
1498 4 2325
1613 4 2325
1614 4 2325
1781 4 2325
1825 4 2325
1860 4 2325
2083 4 2325
2178 4 2325
2179 4 2325
2252 4 2325
2325 4 2325
2341 4 2325
2546 4 2325
2645 4 2325
2652 4 2325
2684 4 2325
2842 4 2325
2929 4 2325
2934 4 2325
3069 4 2325
669 4 2325
679 4 2325
691 4 2325
761 4 2325
949 4 2325
989 4 2325
2325 5 2325
2325 5 2325
2325 5 2325
3184 5 2325
.I 2326
.T
Fix point Approach Theory Computation
.W
Following fix point theory Scott,
semantics computer programs defined terms
least fix points recursive programs.
allows not only justification all existing
verification techniques, but also their extension
handling, uniform manner various properties
computer programs, including correctness, termination, equivalence.
.B
CACM July, 1972
.A
Manna, Z.
Vuillemin, J.
.K
verification techniques, semantics programming
languages, least fix points, recursive programs,
computational induction
.C
5.23 5.24
.N
CA720702 JB January 30, 1978 3:42 PM
.X
1469 4 2326
1486 4 2326
1491 4 2326
1781 4 2326
1781 4 2326
2021 4 2326
2178 4 2326
2178 4 2326
2193 4 2326
2222 4 2326
2227 4 2326
2315 4 2326
2326 4 2326
2326 4 2326
2326 4 2326
2326 4 2326
2326 4 2326
2470 4 2326
2470 4 2326
2477 4 2326
2457 4 2326
2541 4 2326
2594 4 2326
2684 4 2326
2684 4 2326
2732 4 2326
2842 4 2326
2865 4 2326
2896 4 2326
2903 4 2326
2943 4 2326
3004 4 2326
3014 4 2326
3044 4 2326
3068 4 2326
3077 4 2326
3143 4 2326
1303 5 2326
1323 5 2326
1834 5 2326
2192 5 2326
2326 5 2326
2326 5 2326
2326 5 2326
2411 5 2326
2457 5 2326
3186 5 2326
2138 6 2326
2192 6 2326
2326 6 2326
2326 6 2326
.I 2327
.T
Toward Automata Theory Brains
.W
source ideas automata theory-the study
brain-has been pushed aside mathematical
development theory. paper suggests ways
which automata theory might evolve over
next 25 years if contribute understanding
brain processes information.
.B
CACM July, 1972
.A
Arbib, M. A.
.K
automata theory, brain theory, network complexity,
resolution redundancy potential command,
frog visual system, reticular formation mode selection
.C
3.36 3.65 5.22
.N
CA720701 JB January 30, 1978 3:46 PM
.X
2327 5 2327
2327 5 2327
2327 5 2327
.I 2328
.T
Individualizing Instruction Generative CAI Tutor
.B
CACM June, 1972
.A
Koffman, E. B.
.K
computer-assisted instruction, generative CAL, adaptive instruction
.C
3.32 3.51 3.62
.N
CA720617 JB January 30, 1978 3:47 PM
.X
2328 5 2328
2328 5 2328
2328 5 2328
.I 2329
.T
Computer Science-A Vicious Circle
.B
CACM June, 1972
.A
Kandel, A.
.K
education, computer engineering, computer
science curriculum, systems design
.C
1.52 6.0
.N
CA720616 JB January 30, 1978 3:49 PM
.X
1892 4 2329
1901 4 2329
2085 4 2329
2095 4 2329
2218 4 2329
2277 4 2329
2319 4 2329
2329 4 2329
2358 4 2329
2373 4 2329
2380 4 2329
2434 4 2329
2499 4 2329
2501 4 2329
2582 4 2329
2669 4 2329
2828 4 2329
2863 4 2329
2881 4 2329
2928 4 2329
2996 4 2329
3006 4 2329
3067 4 2329
1751 5 2329
2329 5 2329
2329 5 2329
2329 5 2329
2478 5 2329
3003 5 2329
1205 6 2329
1659 6 2329
1678 6 2329
1771 6 2329
1927 6 2329
1945 6 2329
2097 6 2329
2147 6 2329
2163 6 2329
2187 6 2329
2329 6 2329
2329 6 2329
2345 6 2329
2367 6 2329
2407 6 2329
2478 6 2329
2479 6 2329
2480 6 2329
2538 6 2329
.I 2330
.T
Calculation Fourier Integrals (Algorithm R418)
.B
CACM June, 1972
.A
Einarsson, B.
.K
quadrature, Filon quadrature, integration, Filon integration,
Fourier coefficients, Fourier integrals,
Fourier series, spline,spline approximation, spline
quadrature, extrapolation, Richardson extrapolation
.C
5.16
.N
CA720615 JB January 30, 1978 3:53 PM
.X
2330 5 2330
2330 5 2330
2330 5 2330
.I 2331
.T
Integer Programming Problem (Algorithm R397)
.B
CACM June, 1972
.A
Johnson, S. C.
Kernighan, B. W.
.K
integer programming, change-making problem
.C
5.41
.N
CA720614 JB January 30, 1978 3:55 PM
.X
2331 5 2331
2331 5 2331
2331 5 2331
.I 2332
.T
Special Series Summation Arbitrary Precision (Algorithm R393)
.B
CACM June, 1972
.A
Sale, A. H. J.
.K
function evaluation, series summation, approximation
.C
5.12 5.13
.N
CA720613 JB January 30, 1978 4:00 PM
.X
2332 5 2332
2332 5 2332
2332 5 2332
.I 2333
.T
Random Vectors Uniform Solid Angle (Algorithm R381)
.B
CACM June, 1972
.A
Schrack, G. F.
.K
random vector generator, points uniform sphere,
spherically symmetric probability distribution
.C
5.5
.N
CA720612 JB January 30, 1978 4:02 PM
.X
2333 4 2333
2333 4 2333
2333 4 2333
87 4 2333
1793 5 2333
2333 5 2333
2333 5 2333
2333 5 2333
87 5 2333
88 5 2333
.I 2334
.T
General Random Number Generator (Algorithm R370)
.B
CACM June, 1972
.A
Proll, L. G.
.K
random number generator, probability density function,
transformation, cumulative distribution
function
.C
5.13 5.5
.N
CA720611 JB January 30, 1978 4:09 PM
.X
2334 4 2334
1580 5 2334
2334 5 2334
2334 5 2334
2334 5 2334
.I 2335
.T
Eigenvalues Eigenvectors Real General matrix (Algorithm R343)
.B
CACM June, 1972
.A
Niessner, H.
.K
eigenvalues, eigenvectors, QR-algorithm,
nonsymmetric matrices, general matrices
.C
5.14
.N
CA720610 JB January 30, 1978 4:11 PM
.X
1968 4 2335
2099 4 2335
2335 4 2335
1662 5 2335
2335 5 2335
2335 5 2335
2335 5 2335
.I 2336
.T
Complex Error Function (Algorithm C363)
.B
CACM June, 1972
.A
Kolbig, K. S.
.K
error function complex argument, Voigt function,
special functions, function evaluation
.C
5.12
.N
CA720609 JB January 30, 1978 4:12 PM
.X
2336 5 2336
2336 5 2336
2336 5 2336
.I 2337
.T
Sorting Problem Its Complexity
.W
technique proving min-max norms sorting
algorithms given. One new algorithm
finding minimum maximum elements set
fewest comparisons proved optimal
technique.
.B
CACM June, 1972
.A
Pohl, I.
.K
sorting, computational complexity, computational combinatorics
.C
5.29 5.31
.N
CA720608 JB January 30, 1978 4:15 PM
.X
2337 5 2337
2337 5 2337
2337 5 2337
.I 2338
.T
Starting Method Solving Nonlinear Volterra
Integral Equations Second Kind
.W
fourth-order starting method given
Volterra integral equations second kind
numerical examples presented.
.B
CACM June, 1972
.A
Iguchi, K.
.K
algorithm, Volterra integral equations, starting method
.C
5.18
.N
CA720607 JB January 30, 1978 4:17 PM
.X
2338 5 2338
2338 5 2338
2338 5 2338
.I 2339
.T
Computer-Assigned Codes Verbal Responses
.W
often desirable convert verbal responses
multidigit codes. conversion generally
accomplished clerk-coders. study conducted test
feasibility translating verbal descriptions
numerical codes computer program. Primary emphasis
placed computerized construction
reference file verbal descriptions use
program. results study clearly show
such procedures feasible.
.B
CACM June, 1972
.A
O'Reagan, R. T.
.K
verbal responses, computer coding, reference list,
historical response patterns, word strings,
concept translation, word coding
.C
3.30 3.42 3.63 3.66 3.71 3.74 3.75 5.6
.N
CA720606 JB January 30, 1978 4:23 PM
.X
1112 4 2339
1592 4 2339
1592 4 2339
2111 4 2339
2111 4 2339
2111 4 2339
2339 4 2339
2339 4 2339
2339 4 2339
2339 4 2339
440 4 2339
1112 5 2339
1592 5 2339
2339 5 2339
2339 5 2339
2339 5 2339
440 5 2339
619 5 2339
.I 2340
.T
Boolean Matrix Method Computation
Linear Precedence Functions
.W
modified version Bell's Boolean matrix
method computation linear precedence
functions associated conflict-free matrix
precedence relations given. algorithm not
only detects precedence functions do not exist,
but also provides indication why they
do not exist, so corrective action can taken
if possible. Necessary sufficient conditions
existence precedence functions given.
use Boolean matrices prove existence
precedence functions associated classes conflict-free
grammars illustrated through example.
.B
CACM June, 1972
.A
Martin, D. F.
.K
precedence grammars, context-free parsing
.C
4.12
.N
CA720605 JB January 30, 1978 4:28 PM
.X
1542 4 2340
1683 4 2340
1693 4 2340
1781 4 2340
1787 4 2340
1836 4 2340
1836 4 2340
1945 4 2340
2060 4 2340
2061 4 2340
2082 4 2340
2091 4 2340
2152 4 2340
2179 4 2340
2221 4 2340
2340 4 2340
2340 4 2340
2340 4 2340
2340 4 2340
2356 4 2340
2546 4 2340
2603 4 2340
2698 4 2340
2708 4 2340
2824 4 2340
2824 4 2340
2982 4 2340
2982 4 2340
2986 4 2340
2986 4 2340
2986 4 2340
3045 4 2340
3093 4 2340
1191 5 2340
1491 5 2340
1683 5 2340
1836 5 2340
2340 5 2340
2340 5 2340
2340 5 2340
2824 5 2340
2982 5 2340
2986 5 2340
1491 6 2340
1491 6 2340
1491 6 2340
1683 6 2340
1683 6 2340
1836 6 2340
1836 6 2340
2179 6 2340
2340 6 2340
2340 6 2340
2340 6 2340
.I 2341
.T
Blocks-A New Data type SNOBOL4
.W
new data type, called block, has been implemented
SNOBOL4. block three-dimensional
aggregate characters form right parallelepiped,
best thought three-dimensional
extension string. (The third dimension used
overstriking.) Blocks may printed, concatenated
any three dimensions, merged basis
program-defined connection points. Some blocks
adapt size shape their environment. Blocks
their operations mainly used composing
printable output. variety graphical problems (including
flowcharting, bargraphs, logic diagrams,
mathematical-equation formation, text justification
preparation) have been programmed printer
appears easy natural way. addition
these somewhat specialized applications,
blocks appear good general purpose device-independent
output formation mechanism especially suitable
nonnumerical work. concept block largely
language independent.That is, blocks require
little way specialized syntax could readily
absorbed into external structure
most programming languages.
.B
CACM June, 1972
.A
Gimpel, J. F.
.K
character manipulation, output formatting, string
processing, graphics, nonnumerical programming,
SNOBOL4, data types, two-dimensional mathematics, test processing, flowcharting
.C
4.22 4.41
.N
CA720604 JB January 30, 1978 4:38 PM
.X
1086 4 2341
1132 4 2341
1234 4 2341
1263 4 2341
1265 4 2341
1270 4 2341
1323 4 2341
1358 4 2341
1379 4 2341
1380 4 2341
1453 4 2341
1464 4 2341
1484 4 2341
1491 4 2341
1498 4 2341
1613 4 2341
1614 4 2341
1767 4 2341
1781 4 2341
1781 4 2341
1781 4 2341
1825 4 2341
1860 4 2341
1945 4 2341
2083 4 2341
2178 4 2341
2179 4 2341
2252 4 2341
2325 4 2341
2341 4 2341
2341 4 2341
2341 4 2341
2341 4 2341
2546 4 2341
2645 4 2341
2652 4 2341
2684 4 2341
2842 4 2341
2929 4 2341
2934 4 2341
3069 4 2341
669 4 2341
679 4 2341
691 4 2341
761 4 2341
949 4 2341
989 4 2341
990 5 2341
1466 5 2341
1468 5 2341
2341 5 2341
2341 5 2341
2341 5 2341
2545 5 2341
3184 5 2341
1739 6 2341
1781 6 2341
2341 6 2341
.I 2342
.T
Interference Between Communicating Parallel Processes
.W
Various kinds interference between communicating
parallel processes have been examined
Dijkstra, Knuth, others. Solutions have been given
mutual exclusion problem associated
subproblems, form parallel programs, informal
proofs correctness have been given
these solutions. paper system parallel
processes regarded machine which proceeds
one state S (i.e. collection pertinent data
values process configurations) next state
S' accordance transition rule S --> S'.
set such rules yields sequences states, which
dictate system's behavior. mutual exclusion problem
associated subproblems formulated
questions inclusion between sets states,
existence certain sequences. mechanical
proof procedure shown, which either verify (prove
correctness ) discredit (prove
incorrectness of) attempted solution, respect
any interference properties. shown
calculate transition rules "partial
rules" which individual processes operate.
formation partial rules calculation
transition rules both applicable hardware
processes well software processes,
symmetry between processes not required.
.B
CACM June, 1972
.A
Gilbert, P.
Chandler, W. J.
.K
concurrent programming control, cooperating processes,
formal programs, interference, mutual exclusion,
operating systems, parallel processes
.C
4.0 4.10 4.30 4.32 4.42 5.24 6.20
.N
CA720603 JB January 31, 1978 8:44 AM
.X
1781 4 2342
1828 4 2342
1854 4 2342
1877 4 2342
1960 4 2342
2150 4 2342
2150 4 2342
2150 4 2342
2228 4 2342
2228 4 2342
2256 4 2342
2256 4 2342
2317 4 2342
2317 4 2342
2319 4 2342
2377 4 2342
2342 4 2342
2342 4 2342
2342 4 2342
2376 4 2342
2376 4 2342
2379 4 2342
2424 4 2342
2482 4 2342
2618 4 2342
2618 4 2342
2618 4 2342
2632 4 2342
2704 4 2342
2723 4 2342
2738 4 2342
2740 4 2342
2741 4 2342
2867 4 2342
3184 4 2342
3184 4 2342
1198 5 2342
1338 5 2342
1749 5 2342
2342 5 2342
2342 5 2342
2342 5 2342
.I 2343
.T
Proposal Establish Pseudo Virtual Memory via Writable Overlays
.W
Many computer systems solve executable storage
size problems large programs using overlays.
However, appears no one overlay scheme contains
well-balanced combination most useful
capabilities which found various existing techniques.
proposal presented which utilizes
several best capabilities existing schemes
complemented several additional features,
e.g. writable overlays. writable overlay capability
provides virtual memory effect, although
programmer may still required design overlay
configuration. Since overlay structuring
complex task, several tools (including graphic display)
included proposal order aid
programmer design. content overlays
briefly discussed, noted many
details final overlay configuration may decided after fact.
.B
CACM June, 1972
.A
Spacek, T. R.
.K
overlay, overlay structure, segment, segmentation,
folding, paging, linkage editor, collector,
loader, virtual memory
.C
4.10 4.12 4.39 4.49
.N
CA720602 JB January 31, 1978 8:53 AM
.X
1774 4 2343
2343 4 2343
2343 4 2343
2343 4 2343
1173 5 2343
1774 5 2343
1845 5 2343
2343 5 2343
2343 5 2343
2343 5 2343
.I 2344
.T
Optimization Performance Time-Sharing Systems Simulation
.W
simulation model time-sharing system
finite noncontiguous store infinite
auxiliary store used study variation system
parameters such store size, number jobs
allowed execute simultaneously, job-scheduling algorithm,
etc. effects these variations
measure system performance used ascertain which
parameters controllable job-scheduling
algorithm, including scheduling itself, require optimization,
which parameters not normally
controllable scheduling algorithm have marked
effect system performance. System performance
based upon mean cost delay all jobs processed.
shown significant improvements
measure system performance can obtained
using variable time-slice techniques selecting
optimum round-robin cycle time. appears these
features would benefit optimization whereas
other parameters controllable scheduling algorithm
affect system performance predictable
manner would not benefit optimization. Features
not normally under control scheduling
algorithm can also have marked effect measure
performance; particular, supervisor overheads,
size store, speed CPU. comparison
made between results simulation
model two analytical equations quantum-oriented
nonpreemptive time-sharing systems. comparison
found very favorable.
.B
CACM June, 1972
.A
Blatny, J.
Clark, S. R.
Rourke, T. A.
.K
time-sharing, simulation studies, optimization,
measure performance, scheduling algorithms
.C
3.80 4.30 4.32
.N
CA720601 JB January 31, 1978 9:19 AM
.X
2219 4 2344
2344 4 2344
1938 5 2344
2344 5 2344
2344 5 2344
2344 5 2344
.I 2345
.T
Curriculum Recommendations Graduate
Professional Programs Information Systems
.W
need education related information
systems organizations discussed,
curriculum proposed graduate professional programs
universities, Master's level. Material
necessary such programs identified, courses
incorporating specified. Detailed course
descriptions presented, program organization discussed,
implementation questions considered.
.B
CACM May, 1972
.A
Ashenhurst, R. L.
.K
education, management systems, systems analysis,
management information systems, information systems
development, information analysis, system design
.C
1.52 3.51
.N
CA720515 JB January 31, 1978 9:28 AM
.X
1720 4 2345
1927 4 2345
2147 4 2345
2163 4 2345
2163 4 2345
2345 4 2345
2345 4 2345
2407 4 2345
2478 4 2345
2594 4 2345
2852 4 2345
2899 4 2345
3130 4 2345
1771 5 2345
2181 5 2345
2345 5 2345
2345 5 2345
2345 5 2345
2407 5 2345
2852 5 2345
3003 5 2345
3011 5 2345
3050 5 2345
1417 6 2345
1659 6 2345
1678 6 2345
1771 6 2345
1927 6 2345
1945 6 2345
2075 6 2345
2097 6 2345
2147 6 2345
2163 6 2345
2163 6 2345
2181 6 2345
2187 6 2345
2302 6 2345
2329 6 2345
2345 6 2345
2345 6 2345
2345 6 2345
2345 6 2345
2345 6 2345
2367 6 2345
2387 6 2345
2387 6 2345
2407 6 2345
2478 6 2345
2479 6 2345
2479 6 2345
2480 6 2345
2485 6 2345
2538 6 2345
.I 2346
.T
Hu-Tucker Minimum Redundancy Alphabetic
Coding Method [Z] (Algorithm A428)
.B
CACM May, 1972
.A
Yohe, J. M.
.K
information theory, coding theory, Hu-Tucker
method, minimum redundancy coding
.C
5.6
.N
CA720514 JB January 31, 1978 9:30 AM
.X
2346 4 2346
2459 4 2346
1114 5 2346
2346 5 2346
2346 5 2346
2346 5 2346
.I 2347
.T
Fourier Cosine Integral [D1] (Algorithm A427)
.B
CACM May, 1972
.A
Linz, P.
.K
numerical integration, quadrature, adaptive quadrature,
Filon quadrature, Fourier coefficients,
Fourier integrals
.C
5.16
.N
CA720513 JB January 31, 1978 9:32 AM
.X
2347 5 2347
2347 5 2347
2347 5 2347
.I 2348
.T
Merge Sort Algorithm [M1] (Algorithm A426)
.B
CACM May, 1972
.A
Bron, C.
.K
sort, merge
.C
5.31
.N
CA720512 JB January 31, 1978 9:33 AM
.X
1919 4 2348
1969 4 2348
2118 4 2348
2348 4 2348
2679 4 2348
3054 4 2348
1175 5 2348
2348 5 2348
2348 5 2348
2348 5 2348
2563 5 2348
2348 6 2348
.I 2349
.T
Generation Random Correlated Normal Variables [G5] (Algorithm A425)
.B
CACM May, 1972
.A
Hurst, R. L.
Knop, R. E.
.K
random number, normal density, normal distribution,
Gaussian density, Gaussian distribution, simulation,
Monte Carlo
.C
5.5
.N
CA720511 JB January 31, 1978 9:35 AM
.X
1663 4 2349
2057 4 2349
2349 4 2349
2349 4 2349
2349 4 2349
2349 4 2349
2349 4 2349
2349 4 2349
2349 4 2349
2349 4 2349
2565 4 2349
1648 5 2349
1716 5 2349
1794 5 2349
1894 5 2349
2043 5 2349
2349 5 2349
2349 5 2349
2349 5 2349
501 5 2349
613 5 2349
774 5 2349
.I 2350
.T
Clenshaw-Curtis Quadrature [D1] (Algorithm A424)
.B
CACM May, 1972
.A
Gentleman, W.M.
.K
quadrature, Chebyshev series, cosine transform, fast Fourier transform
.C
5.1
.N
CA720510 JB January 31, 1978 9:37 AM
.X
2355 4 2350
2355 4 2350
2350 4 2350
2350 4 2350
2350 4 2350
2354 4 2350
2354 4 2350
2640 4 2350
1418 5 2350
2350 5 2350
2350 5 2350
2350 5 2350
2354 5 2350
2355 5 2350
1418 6 2350
1418 6 2350
1521 6 2350
1521 6 2350
1597 6 2350
1597 6 2350
1679 6 2350
1883 6 2350
2040 6 2350
2350 6 2350
2350 6 2350
2354 6 2350
2355 6 2350
.I 2351
.T
Optimality Winograd's Formula
.B
CACM May, 1972
.A
Harter, R.
.K
inner product, Winograd's formula
.C
5.14
.N
CA720509 JB January 31, 1978 9:38 AM
.X
2351 5 2351
2351 5 2351
2351 5 2351
.I 2352
.T
Minimax Nonlinear Approximation Approximation Subsets
.B
CACM May, 1972
.A
Dunham, C. B.
.K
minimax approximation, nonlinear approximation, subset
.C
5.13
.N
CA720508 JB January 31, 1978 9:40 AM
.X
2352 4 2352
2353 4 2352
2094 5 2352
2352 5 2352
2352 5 2352
2352 5 2352
.I 2353
.T
Fast Finite-Difference Solution Biharmonic Problems
.W
Setting Reynolds number equal zero,
method solving Navier-Strokes equations
numerically, results fast numerical method
biharmonic problems. equation treated
system two second order equations simple
smoothing process essential convergence.
application made crack-type problem.
.B
CACM May, 1972
.A
Greenspan, D.
Schultz, D.
.K
numerical analysis, partial differential equations,
biharmonic equation, boundary value problem
.C
5.17
.N
CA720507 JB January 31, 1978 9:43 AM
.X
2352 4 2353
2353 4 2353
2094 5 2353
2353 5 2353
2353 5 2353
2353 5 2353
.I 2354
.T
Implementing Clenshaw-Curtis Quadrature,
II Computing Cosine Transformation
.W
companion paper this, "I Methodology
Experiences," automatic Clenshaw-Curtis
quadrature scheme described each quadrature
formula used scheme requires cosine
transformation integrand values shown.
high cost these cosine transformations has
been serious drawback using Clenshaw-Curtis quadrature.
Two other problems related cosine
transformation have also been trouble some. First,
conventional computation cosine transformation
recurrence relation numerically unstable, particularly
low frequencies which have largest
effect upon integral. Second, case automatic
scheme should require refinement sampling,
storage required save integrand values after
cosine transformation computed. second
part paper shows cosine transformation can
computed modification fast Fourier
transform all three problems overcome. modification
also applicable other circumstances
requiring cosine sine transformations, such polynomial
interpolation through Chebyshev points.
.B
CACM May, 1972
.A
Gentleman, W. M.
.K
fast Fourier transformation, cosine transformation,
Clenshaw-Curtis quadrature, Chebyshev series
.C
5.13 5.14 5.16
.N
CA720506 JB January 31, 1978 9:56 AM
.X
2355 4 2354
2355 4 2354
2355 4 2354
2355 4 2354
2350 4 2354
2350 4 2354
2354 4 2354
2354 4 2354
2354 4 2354
2354 4 2354
2354 4 2354
2354 4 2354
2640 4 2354
1418 5 2354
1521 5 2354
1597 5 2354
1679 5 2354
2350 5 2354
2354 5 2354
2354 5 2354
2354 5 2354
2355 5 2354
1418 6 2354
1418 6 2354
1521 6 2354
1597 6 2354
1883 6 2354
2040 6 2354
2350 6 2354
2354 6 2354
2354 6 2354
2355 6 2354
.I 2355
.T
Implementing Clenshaw-Curtis quadrature, Methodology Experience
.W
Clenshaw-Curtis quadrature particularly
important automatic quadrature scheme variety
reasons, especially high accuracy obtained
relatively few integrand values. However,
has received little use because requires computation
cosine transformation arithmetic
cost has been prohibitive. paper
two parts; companion paper, "II Computing
Cosine Transformation," shows objection can
overcome computing cosine transformation
modification fast Fourier transform algorithm.
first part discusses strategy
various error estimates, summarizes experience
particular implementation scheme.
.B
CACM May, 1972
.A
Gentleman, W. M.
.K
Clenshaw Curtis, numerical integration, automatic
quadrature, error estimates, Chebyshev series
.C
5.16
.N
CA720505 JB January 31, 1978 10:05 AM
.X
1982 4 2355
2355 4 2355
2355 4 2355
2355 4 2355
2355 4 2355
2355 4 2355
2355 4 2355
2355 4 2355
2350 4 2355
2350 4 2355
2354 4 2355
2354 4 2355
2354 4 2355
2354 4 2355
1418 5 2355
1521 5 2355
1597 5 2355
1883 5 2355
2040 5 2355
2350 5 2355
2354 5 2355
2355 5 2355
2355 5 2355
2355 5 2355
2640 5 2355
1418 6 2355
1418 6 2355
1521 6 2355
1597 6 2355
1679 6 2355
2350 6 2355
2354 6 2355
2355 6 2355
2355 6 2355
2355 6 2355
.I 2356
.T
Technique Software Module Specification Examples
.W
paper presents approach writing
specifications parts software systems.
main goal provide specifications sufficiently
precise complete other pieces software
can written interact piece specified without
additional information. secondary goal
include specification no more information
than necessary meet first goal. technique
illustrated means variety examples tutorial system.
.B
CACM May, 1972
.A
Parnas, D. L.
.K
software, specification, modules, software engineering, software design
.C
4.0 4.29 4.9
.N
CA720504 JB January 31, 1978 10:47 AM
.X
1542 4 2356
1683 4 2356
1693 4 2356
1781 4 2356
1787 4 2356
1836 4 2356
1945 4 2356
2042 4 2356
2060 4 2356
2061 4 2356
2082 4 2356
2091 4 2356
2152 4 2356
2179 4 2356
2222 4 2356
2340 4 2356
2356 4 2356
2356 4 2356
2356 4 2356
2420 4 2356
2546 4 2356
2603 4 2356
2679 4 2356
2698 4 2356
2708 4 2356
2824 4 2356
2844 4 2356
2874 4 2356
2972 4 2356
2982 4 2356
2986 4 2356
3045 4 2356
3093 4 2356
3143 4 2356
970 5 2356
1491 5 2356
2227 5 2356
2356 5 2356
2356 5 2356
2356 5 2356
2704 5 2356
2738 5 2356
2866 5 2356
2869 5 2356
2941 5 2356
2958 5 2356
3004 5 2356
3030 5 2356
1247 6 2356
1425 6 2356
1471 6 2356
1552 6 2356
1749 6 2356
1749 6 2356
2080 6 2356
2247 6 2356
2247 6 2356
2247 6 2356
2356 6 2356
2356 6 2356
2356 6 2356
2356 6 2356
2356 6 2356
2356 6 2356
2356 6 2356
2356 6 2356
2379 6 2356
2436 6 2356
2456 6 2356
2457 6 2356
2558 6 2356
2597 6 2356
2651 6 2356
2651 6 2356
2673 6 2356
2777 6 2356
2796 6 2356
2958 6 2356
2972 6 2356
3186 6 2356
.I 2357
.T
MUX, Simple Approach On-Line Computing
.W
on-line system operating part normal
batch system CDC 6600 computer described.
system, which required one man-year initial
software implementation, although basically simple,
provides necessary elements input modify files,
submit them batch execution, provide
results user's terminal. multiplexer designed
developed part project cost one
man-year design checkout, $16,000 parts
fabrication. All aspects system
described, including design criteria, implementation,
cost, overhead, user reactions.
.B
CACM May, 1972
.A
Christman, R. D.
.K
time-sharing, remote computing, on-line access,
on-line computing, remote file manager, real time,
multiplexer, implementation effort, operating overhead,
user reactions, remote terminals, operating system
.C
3.79 3.89 4.39 4.41
.N
CA720503 JB January 31, 1978 11:04 AM
.X
1657 4 2357
2080 4 2357
2357 4 2357
2357 4 2357
2357 4 2357
2536 4 2357
1523 5 2357
1829 5 2357
2035 5 2357
2357 5 2357
2357 5 2357
2357 5 2357
.I 2358
.T
Multics Virtual Memory: Concepts Design
.W
experience use on-line operating
systems has grown, need share information
among system users has become increasingly apparent.
Many contemporary systems permit some degree
sharing. Usually, sharing accomplished allowing
several users share data via input output
information stored files kept secondary storage.
Through use segmentation, however,
Multics provides direct hardware addressing user
system programs all information, independent
its physical storage location. Information stored
segments each which potentially sharable
carries its own independent attributes size access
privilege. Here, design implementation
considerations segmentation sharing Multics
first discussed under assumption all
information resides large, segmented main memory.
Since size main memory contemporary systems
rather limited, then shown Multics
software achieves effect large segmented
main memory through use Honeywell
645 segmentation paging hardware.
.B
CACM May, 1972
.A
Bensoussan, A.
Clingen, C. T.
Daley, R. C.
.K
operating system, Multics, virtual memory, segmentation,
information sharing, paging, memory management,
memory hierarchy
.C
4.30 4.31 4.32
.N
CA720502 JB January 31, 1978 11:24 AM
.X
1753 4 2358
1754 4 2358
1892 4 2358
1901 4 2358
2085 4 2358
2095 4 2358
2218 4 2358
2277 4 2358
2317 4 2358
2319 4 2358
2329 4 2358
2358 4 2358
2358 4 2358
2358 4 2358
2358 4 2358
2377 4 2358
2373 4 2358
2372 4 2358
2380 4 2358
2434 4 2358
2499 4 2358
2501 4 2358
2582 4 2358
488 4 2358
2625 4 2358
2626 4 2358
2669 4 2358
2828 4 2358
2840 4 2358
2863 4 2358
2881 4 2358
2928 4 2358
2996 4 2358
3006 4 2358
3067 4 2358
274 5 2358
1746 5 2358
1751 5 2358
1753 5 2358
2358 5 2358
2358 5 2358
2358 5 2358
2377 5 2358
2625 5 2358
2626 5 2358
2669 5 2358
1471 6 2358
1471 6 2358
1746 6 2358
1746 6 2358
1749 6 2358
1751 6 2358
1753 6 2358
1901 6 2358
2017 6 2358
2358 6 2358
2358 6 2358
2358 6 2358
2358 6 2358
2377 6 2358
2438 6 2358
2625 6 2358
2629 6 2358
.I 2359
.T
Improved Index Sequential Access Method Using Hashed Overflow
.W
Index Sequential Access Method (ISAM)
one most important file management systems
used moveable head disk devices. study investigates
use unconventional method
treating overflow records. method use hashing
techniques allocate space such records.
If certain conditions satisfied, superior
conventional ISAM method chaining
overflow records via linked list techniques. These conditions are:
long overflow chains significant
overflow; lack tight disk space constraints; record
keys which small compared total record
size; significant use file index opposed
sequential mode. Using hashed overflow,
time locate record dependent not total
volume overflow records conventional
ISAM, but percentage use space dedicated overflow records.
.B
CACM May, 1972
.A
Mullin, J. K.
.K
ISAM, index sequential, hashing, scatter
storage, disk, cylinder, overflow
.C
3.72 3.73 3.74
.N
CA720501 JB January 31, 1978 12:29 PM
.X
1676 4 2359
1682 4 2359
1728 4 2359
1860 4 2359
1973 4 2359
2018 4 2359
2032 4 2359
2033 4 2359
2107 4 2359
2109 4 2359
2203 4 2359
2251 4 2359
2258 4 2359
2319 4 2359
2313 4 2359
2359 4 2359
2359 4 2359
2437 4 2359
2524 4 2359
2543 4 2359
2552 4 2359
2552 4 2359
2559 4 2359
2781 4 2359
2860 4 2359
2991 4 2359
2991 4 2359
3053 4 2359
1785 5 2359
2203 5 2359
2359 5 2359
2359 5 2359
2359 5 2359
.I 2360
.T
Comment Double-Chained Tree
.B
CACM April, 1972
.A
Hu, T. C.
.K
file searching, double-chained tree, binary search tree
.C
3.73 3.74 5.32 5.6
.N
CA720413 JB January 31, 1978 12:31 PM
.X
1050 4 2360
1935 4 2360
1936 4 2360
2017 4 2360
2032 4 2360
2257 4 2360
2257 4 2360
2257 4 2360
2360 4 2360
2360 4 2360
2360 4 2360
2451 4 2360
2451 4 2360
2452 4 2360
2452 4 2360
2556 4 2360
2765 4 2360
1831 5 2360
1936 5 2360
2257 5 2360
2360 5 2360
2360 5 2360
2360 5 2360
849 5 2360
849 6 2360
1831 6 2360
1936 6 2360
2360 6 2360
.I 2361
.T
Note Cheney's Nonrecursive List-Compacting Algorithm
.B
CACM April, 1972
.A
Walden, D. C.
.K
list compacting, garbage collection
.C
4.19 4.49
.N
CA720412 JB January 31, 1978 12:32 PM
.X
2156 4 2361
2361 4 2361
2513 4 2361
2736 4 2361
2855 4 2361
3074 4 2361
3106 4 2361
3112 4 2361
1972 5 2361
2361 5 2361
2361 5 2361
2361 5 2361
.I 2362
.T
Linear Equation Solver [F4] (Algorithm A423)
.B
CACM April, 1972
.A
Moler, C. B.
.K
matrix algorithms, linear equations, Fortran,
paged memory, virtual memory, array processing
.C
4.22 4.32 5.14
.N
CA720411 JB January 31, 1978 12:34 PM
.X
2362 4 2362
3152 4 2362
2362 5 2362
2362 5 2362
2362 5 2362
2365 5 2362
987 6 2362
1754 6 2362
1924 6 2362
2362 6 2362
.I 2363
.T
Minimal Spanning Tree [H] (Algorithm A422)
.B
CACM April, 1972
.A
Whitney, V. K. M.
.K
spanning tree, minimal spanning tree, maximal spanning tree
.C
5.32
.N
CA720410 JB January 31, 1978 12:36 PM
.X
2363 5 2363
2363 5 2363
2363 5 2363
2641 5 2363
2363 6 2363
.I 2364
.T
Complex Gamma Function Error Control [S14] (Algorithm A421)
.B
CACM April, 1972
.A
Kuki, H.
.K
complex gamma function, gamma function, complex
log gamma function, loggamma function, round-off
error control, inherent error control, run-time error
estimates, error estimates, special functions
.C
4.9 5.11 5.12
.N
CA720409 JB January 31, 1978 12:50 PM
.X
2364 4 2364
2364 5 2364
2364 5 2364
2364 5 2364
2366 5 2364
2364 6 2364
.I 2365
.T
Matrix Computations Fortran Paging
.W
efficiency conventional Fortran programs
matrix computations can often improved
reversing order nested loops. Such modifications
produce modest savings many common situations
very significant savings large problems run
under operating system which uses paging.
.B
CACM April, 1972
.A
Moler, C. B.
.K
matrix algorithms, linear equations, Fortran,
paged memory, virtual memory, array processing
.C
4.22 4.32 5.14
.N
CA720408 JB January 31, 1978 12:54 PM
.X
1613 4 2365
1646 4 2365
1879 4 2365
1884 4 2365
1900 4 2365
1901 4 2365
1955 4 2365
2025 4 2365
2095 4 2365
2154 4 2365
2277 4 2365
2297 4 2365
2365 4 2365
2365 4 2365
2365 4 2365
2365 4 2365
2506 4 2365
2582 4 2365
3060 4 2365
3152 4 2365
987 5 2365
1754 5 2365
1924 5 2365
2362 5 2365
2365 5 2365
2365 5 2365
2365 5 2365
3152 5 2365
1924 6 2365
2365 6 2365
2365 6 2365
.I 2366
.T
Complex Gamma Function Error Control
.W
algorithm compute gamma function
log gamma function complex variable presented.
standard algorithm modified several respects
insure continuity function value
reduce accumulation round-off errors.
addition computation function values,
algorithm includes object-time estimation round-off
errors. Experimental data regard
effectiveness error control presented.
Fortran program algorithm appears
algorithms section issue.
.B
CACM April, 1972
.A
Kuki, H.
.K
complex gamma function, gamma function, complex
log gamma function, loggamma function, round-off
error control, inherent error control, run-time error estimates, error estimates
.C
5.11 5.12
.N
CA720407 JB January 31, 1978 12:59 PM
.X
2366 4 2366
2364 5 2366
2366 5 2366
2366 5 2366
2366 5 2366
2366 6 2366
.I 2367
.T
Computers Society: Proposed Course Computer Scientists
.W
purpose paper describe course
concerned both effects computers
society responsibilities computer scientists
society. impact computers divided
into five components: political, economic, cultural, social,
moral; main part paper defines
each component presents examples relevant
issues. remaining portions possible
formats such course discussed, topic topic
outline given, selected set references
listed. hoped proposal make
easier initiate courses subject.
.B
CACM April, 1972
.A
Horowitz, E.
Morgan, H. L.
Shaw, A. C.
.K
computers society, social implications, course proposal
.C
1.0 1.52 2.1
.N
CA720406 JB January 31, 1978 1:06 PM
.X
2367 5 2367
2367 5 2367
2367 5 2367
3003 5 2367
1659 6 2367
1678 6 2367
1927 6 2367
1945 6 2367
2097 6 2367
2147 6 2367
2163 6 2367
2187 6 2367
2329 6 2367
2345 6 2367
2367 6 2367
2407 6 2367
2478 6 2367
2479 6 2367
2480 6 2367
2538 6 2367
.I 2368
.T
Implemented Graph Algorithm Winning Shannon Switching games
.W
tutorial paper computer program
which wins Shannon Switching Games described.
Since these games played graphs, program
good example implementation graph
algorithms. two players Shannon Switching Game,
CONNECT CUT, have nonsimilar goals. Either
CONNECT, CUT, player moving first guaranteed
existence winning strategy. simple
strategy explained paper valid all three
cases. fact, major routines never need
know whether computer CONNECT CUT.
.B
CACM April, 1972
.A
Chase, S. M.
.K
graph algorithms, graph processing, Shannon Switching
Games, game playing, graph theory, positional
games, demonstration programs, game theory, spinning trees
.C
3.69 5.32
.N
CA720405 JB January 31, 1978 1:34 PM
.X
2368 5 2368
2368 5 2368
2368 5 2368
.I 2369
.T
Hidden Lines Elimination Rotating Object
.W
method presented determining which
parts three-dimensional objects visible
which invisible objects rotated
some axis. paper describes polygon comparison
scheme which relationships two polygons can
classified into tree types, also discusses
relationship changed each pair polygons
under rotation some axis. rotation
table defined each pair polygons, which remains
fixed long rotation one axis
provides means rapidly determining visible
hidden line relationship between two polygons.
Additional work must done extend approach
simultaneous rotation several axes.
.B
CACM April, 1972
.A
Matsushita, Y.
.K
hidden line problem, display programming, computer
graphics, displays, graphics, computer drawn
picture
.C
4.40 4.41 4.49
.N
CA720404 JB January 31, 1978 1:40 PM
.X
2369 5 2369
2369 5 2369
2369 5 2369
.I 2370
.T
Experimental Laboratory Pattern Recognition Signal Processing
.W
interactive computer-controlled scanning
display system has been operation
IBM Thomas J. Watson Research Center three years.
system includes two flying-spot scanners
TV camera specially interfaced process control
digital computer, dot-mode vector displays,
analog input output facilities, variety
other experimental equipment. system design
programming support described typical applications
scanner control, optical character
recognition,and image processing presented.
.B
CACM April, 1972
.A
Herbst, N. M.
Will, P. M.
.K
scanners, pseudorandom displays, interactive
terminal, image processing, pattern recognition
.C
4.41 6.35
.N
CA720403 JB January 31, 1978 1:47 PM
.X
2370 4 2370
1726 5 2370
2370 5 2370
2370 5 2370
2370 5 2370
.I 2371
.T
System Interprocess Communication
Resource Sharing Computer Network
.W
system communication between processes
time-sharing system described communication
system extended so may used between processes
distributed throughout computer network.
hypothetical application system existing network discussed.
.B
CACM April, 1972
.A
Walden, D. C.
.K
interprocess communication, time-sharing,
computer networks, resource sharing
.C
3.81 4.39 4.82 4.9
.N
CA720402 JB January 31, 1978 1:51 PM
.X
2371 5 2371
2371 5 2371
2371 5 2371
2849 5 2371
2371 6 2371
.I 2372
.T
Implementation Security Measures Information Systems
.W
security information system may
represented model matrix whose elements
decision rules whose row column indices
users data items respectively. set four
functions used access matrix translation
execution time. Distinguishing between data
dependent data independent decision rules enables
one perform much checking security
only once translation time rather than repeatedly
execution time. model used explain
security features several existing systems, serves
framework proposal general security
system implementation within today's languages operating systems.
.B
CACM April, 1972
.A
Conway, R. W.
Maxwell, W. L.
Morgan, H. L.
.K
security, privacy, access control confidentiality,
operating systems, access management, data banks,
management information systems
.C
3.50 3.73 4.12 4.22 4.39
.N
CA720401 JB January 31, 1978 1:59 PM
.X
1753 4 2372
2358 4 2372
2377 4 2372
2372 4 2372
2626 4 2372
2840 4 2372
1746 5 2372
2372 5 2372
2372 5 2372
2372 5 2372
.I 2373
.T
Properties Working-Set Model
.W
program's working set W(t,T) time t
set distinct pages among T most recently
referenced pages. Relations between average working-set size,
missing-page rate, interreference-interval
distribution may derived both time-average definitions
ensemble-average (statistical)
definitions. efficient algorithm estimating these
quantities given. relation LRU (least
recently used) paging characterized. independent-reference
model, which page references
statistically independent, used assess effects
interpage dependencies working-set size
observations. Under general assumptions, working-set
size shown normally distributed.
.B
CACM March, 1972
.A
Denning, P. J.
Schwartz, S. C.
.K
working-set model, paging, paging algorithms,
program behavior, program modeling
.C
4.3
.N
CA720308 JB January 31, 1978 2:07 PM
.X
1604 4 2373
1892 4 2373
1901 4 2373
1951 4 2373
2085 4 2373
2095 4 2373
2218 4 2373
2218 4 2373
2277 4 2373
2319 4 2373
2329 4 2373
2358 4 2373
2373 4 2373
2373 4 2373
2373 4 2373
2373 4 2373
2373 4 2373
2380 4 2373
2434 4 2373
2499 4 2373
2450 4 2373
2501 4 2373
2582 4 2373
2669 4 2373
2828 4 2373
2863 4 2373
2881 4 2373
2894 4 2373
2928 4 2373
2996 4 2373
3006 4 2373
3006 4 2373
3067 4 2373
3067 4 2373
1410 5 2373
1751 5 2373
1810 5 2373
1951 5 2373
2373 5 2373
2373 5 2373
2373 5 2373
2374 5 2373
2380 5 2373
2450 5 2373
2595 5 2373
2996 5 2373
3006 5 2373
3067 5 2373
1728 6 2373
1751 6 2373
1751 6 2373
1751 6 2373
1751 6 2373
1884 6 2373
1901 6 2373
2374 6 2373
2374 6 2373
2374 6 2373
2373 6 2373
2373 6 2373
2373 6 2373
2373 6 2373
2373 6 2373
2373 6 2373
2373 6 2373
2595 6 2373
2595 6 2373
2595 6 2373
2682 6 2373
2863 6 2373
2864 6 2373
3006 6 2373
.I 2374
.T
Study Storage Partitioning Using Mathematical Model Locality
.W
Both fixed dynamic storage partitioning
procedures examined use multiprogramming
systems. storage requirement programs modeled
stationary Gaussian process. Experiments
justifying model described. means
model dynamic storage partitioning shown
provide substantial increases storage utilization
operating efficiency over fixed partitioning.
.B
CACM March, 1972
.A
Coffman Jr., E. G.
Ryan Jr., T. A.
.K
storage partitioning, memory management, dynamic
storage allocation, space sharing, multiprogrammed
storage, working-sets, program behavior models, mathematical modeling
.C
4.32 4.39
.N
CA720307 JB January 31, 1978 2:29 PM
.X
1892 4 2374
1924 4 2374
2095 4 2374
2218 4 2374
2297 4 2374
2374 4 2374
2374 4 2374
2374 4 2374
2380 4 2374
2450 4 2374
2481 4 2374
2526 4 2374
2595 4 2374
2667 4 2374
2668 4 2374
2669 4 2374
2862 4 2374
2863 4 2374
2863 4 2374
2996 4 2374
3006 4 2374
3016 4 2374
3052 4 2374
3067 4 2374
1728 5 2374
1901 5 2374
2373 5 2374
2374 5 2374
2374 5 2374
2374 5 2374
2450 5 2374
3006 5 2374
3067 5 2374
1410 6 2374
1751 6 2374
1751 6 2374
1751 6 2374
1810 6 2374
1884 6 2374
1951 6 2374
2374 6 2374
2374 6 2374
2374 6 2374
2374 6 2374
2373 6 2374
2373 6 2374
2373 6 2374
2595 6 2374
2595 6 2374
2682 6 2374
2863 6 2374
2864 6 2374
3006 6 2374
.I 2375
.T
Comparative Analysis Disk Scheduling Policies
.W
Five well-known scheduling policies movable
head disks compared using performance
criteria expected seek time (system oriented)and expected
waiting time (individual I/O request oriented).
Both analytical simulation results obtained.
variance waiting time introduced
another meaningful measure performance, showing possible
discrimination against individual requests.
Then choice utility function measure total
performance including system oriented individual
request oriented measures described. Such function
allows one differentiate among scheduling
policies over wide range input loading conditions.
selection implementation maximum
performance two-policy algorithm discussed.
.B
CACM March, 1972
.A
Teorey, T. J.
Pinkerton, T. B.
.K
access time, analytical models, auxiliary storage,
direct access storage, disk analysis, disk scheduling,
performance criteria, peripheral memory devices, real-time
systems, response time, rotational delay,
scheduling policies, seek time, simulation, storage
units, time-sharing systems, waiting time
.C
3.72 4.32 6.34
.N
CA720306JB January 31, 1978 2:38 PM
.X
2375 5 2375
2375 5 2375
2375 5 2375
2628 5 2375
2891 5 2375
3072 5 2375
1713 6 2375
2219 6 2375
2245 6 2375
2375 6 2375
2375 6 2375
2375 6 2375
2496 6 2375
2628 6 2375
.I 2376
.T
Synchronization Communicating Processes
.W
Formalization well-defined synchronization
mechanism can used prove concurrently
running processes system communicate correctly.
demonstrated system consisting
many sending processes which deposit messages buffer
many receiving processes which remove messages
buffer. formal description synchronization
mechanism makes very easy prove
buffer neither overflow nor underflow,
senders receivers never operate
same message frame buffer nor they run into deadlock.
.B
CACM March, 1972
.A
Habermann, A. N.
.K
parallel programming, multiprogramming, program correctness,
process communication, process scheduling
.C
4.30 4.32 4.39 4.9
.N
CA720305 JB January 31, 1978 2:44 PM
.X
1781 4 2376
1828 4 2376
1854 4 2376
1877 4 2376
1960 4 2376
2150 4 2376
2150 4 2376
2228 4 2376
2256 4 2376
2317 4 2376
2317 4 2376
2319 4 2376
2377 4 2376
2342 4 2376
2342 4 2376
2376 4 2376
2376 4 2376
2376 4 2376
2379 4 2376
2424 4 2376
2482 4 2376
2618 4 2376
2618 4 2376
2632 4 2376
2704 4 2376
2723 4 2376
2738 4 2376
2740 4 2376
2741 4 2376
2867 4 2376
3184 4 2376
3184 4 2376
1198 5 2376
1749 5 2376
1960 5 2376
2376 5 2376
2376 5 2376
2376 5 2376
2700 5 2376
3128 5 2376
2150 6 2376
2376 6 2376
2376 6 2376
2436 6 2376
2597 6 2376
2865 6 2376
2866 6 2376
2870 6 2376
2912 6 2376
3082 6 2376
.I 2377
.T
Hardware Architecture Implementing Protection Rings
.W
Protection computations information
important aspect computer utility.
system which uses segmentation memory addressing
scheme, protection can achieved part
associating concentric rings decreasing access privilege
computation. paper describes
hardware processor mechanisms implementing these rings
protection. mechanisms implementing
these rings protection. mechanisms allow cross-ring
calls subsequent returns occur without
trapping supervisor. Automatic hardware validation
references across ring boundaries also
performed. Thus, call user procedure protected
subsystem (including supervisor) identical
call companion user procedure. mechanisms
passing referencing arguments
same both cases well.
.B
CACM March, 1972
.A
Schroeder, M. D.
Saltzer, J. H.
.K
protection, protection rings, protection hardware,
access control, hardware access control, computer
utility, time-sharing, shared information, segmentation, virtual memory, Multics
.C
4.32 6.21
.N
CA720304 JB January 31, 1978 2:58 PM
.X
1458 4 2377
1523 4 2377
1603 4 2377
1698 4 2377
1747 4 2377
1748 4 2377
1753 4 2377
1828 4 2377
1854 4 2377
1854 4 2377
1877 4 2377
1877 4 2377
1960 4 2377
1960 4 2377
2150 4 2377
2317 4 2377
2319 4 2377
2358 4 2377
2377 4 2377
2377 4 2377
2377 4 2377
2377 4 2377
2378 4 2377
2372 4 2377
2342 4 2377
2376 4 2377
2379 4 2377
2424 4 2377
2482 4 2377
2497 4 2377
2558 4 2377
2618 4 2377
2625 4 2377
2625 4 2377
2626 4 2377
2626 4 2377
2632 4 2377
2632 4 2377
2669 4 2377
2704 4 2377
2723 4 2377
2738 4 2377
2740 4 2377
2741 4 2377
2840 4 2377
2840 4 2377
2867 4 2377
2941 4 2377
3105 4 2377
3144 4 2377
3184 4 2377
1471 5 2377
1746 5 2377
1749 5 2377
2358 5 2377
2377 5 2377
2377 5 2377
2377 5 2377
2436 5 2377
2626 5 2377
2868 5 2377
2870 5 2377
953 6 2377
1746 6 2377
2080 6 2377
2358 6 2377
2377 6 2377
2377 6 2377
2377 6 2377
2377 6 2377
2380 6 2377
2558 6 2377
2625 6 2377
2625 6 2377
2629 6 2377
2632 6 2377
2632 6 2377
.I 2378
.T
Operating System Based Concept Supervisory Computer
.W
operating system which organized
small supervisor set independent processes
described. supervisor handles I/O external
devices-the file directory system-schedules
active processes manages memory, handle errors,
provides small set primitive functions which
execute process. process able
specify request complicated action
part supervisor (usually wait occurrence
compound event system) combining
these primitives into "supervisory computer program."
part supervisor which executes these
programs may viewed software implemented "supervisory
computer." paper develops these concepts
detail, outlines remainder supervisor,
discusses some advantages approach.
.B
CACM March, 1972
.A
Gaines, R. S.
.K
operating systems, supervisors, multiprogramming,
time-sharing, cooperating processes
.C
4.30 4.31 4.32
.N
CA720303 JB January 31, 1978 3:08 PM
.X
1458 4 2378
1523 4 2378
1603 4 2378
1698 4 2378
1747 4 2378
1748 4 2378
1854 4 2378
1877 4 2378
1960 4 2378
2319 4 2378
2377 4 2378
2378 4 2378
2378 4 2378
2320 4 2378
2497 4 2378
2558 4 2378
2625 4 2378
2632 4 2378
2632 4 2378
2738 4 2378
2740 4 2378
2840 4 2378
2868 4 2378
2941 4 2378
3105 4 2378
3127 4 2378
3144 4 2378
1471 5 2378
2080 5 2378
2378 5 2378
2378 5 2378
2378 5 2378
.I 2379
.T
Design Venus Operating System
.W
Venus Operating System experimental
multiprogramming system which supports five
six concurrent users small computer. system
produced test effect machine architecture
complexity software. system defined
combination microprograms software.
microprogram defines machine some unusual architectural
feature; software exploits these features
define operating system simply possible.
paper development system
described, particular emphasis principles which guided design.
.B
CACM March, 1972
.A
Liskov, B. H.
.K
operating systems, system design, levels abstraction,
machine architecture, microprogramming,
segments, semaphores, multiprogramming, virtual machines,
processes, process communication, virtual devices,
data sharing, resource management, deadlock
.C
4.30 4.32 4.41 6.21
.N
CA720302 JB January 31, 1978 3:16 PM
.X
1828 4 2379
1854 4 2379
1877 4 2379
1960 4 2379
2150 4 2379
2228 4 2379
2280 4 2379
2280 4 2379
2317 4 2379
2319 4 2379
2377 4 2379
2342 4 2379
2376 4 2379
2379 4 2379
2379 4 2379
2379 4 2379
2424 4 2379
2482 4 2379
2482 4 2379
2482 4 2379
2500 4 2379
2618 4 2379
2632 4 2379
2704 4 2379
2723 4 2379
2738 4 2379
2740 4 2379
2740 4 2379
2741 4 2379
2851 4 2379
2867 4 2379
2920 4 2379
3184 4 2379
1749 5 2379
1877 5 2379
2228 5 2379
2379 5 2379
2379 5 2379
2379 5 2379
2704 5 2379
2867 5 2379
1247 6 2379
1552 6 2379
1749 6 2379
1749 6 2379
2247 6 2379
2356 6 2379
2379 6 2379
2379 6 2379
2673 6 2379
.I 2380
.T
TENEX, Paged Time Sharing System PDP-10
.W
TENEX new time sharing system implemented
DEC PDP-10 augmented special paging hardware
developed BBN. report specifies set goals
which important any time sharing system.
describes TENEX design implementation
achieve these goals. These include specifications
powerful multiprocess large memory virtual machine,
intimate terminal interaction, comprehensive
uniform file I/O capabilities, clean flexible
system structure. Although implementation
described here required some compromise achieve
system operational within six months hardware
checkout, TENEX has met its major goals provided
reliable service several sites through
ARPA network.
.B
CACM March, 1972
.A
Bobrow, D. G.
Burchfiel, J. D.
Murphy, D. L.
Tomlinson, R. S.
Beranek, B.
.K
TENEX, paging, virtual machines, time sharing
system, scheduling algorithm, process structure,
PDP-10
.C
2.44 4.32 4.39 4.42
.N
CA720301 JB January 31, 1978 3:37 PM
.X
1892 4 2380
1901 4 2380
2085 4 2380
2095 4 2380
2218 4 2380
2277 4 2380
2319 4 2380
2329 4 2380
2358 4 2380
2373 4 2380
2374 4 2380
2380 4 2380
2380 4 2380
2434 4 2380
2499 4 2380
2450 4 2380
2501 4 2380
2582 4 2380
2595 4 2380
2669 4 2380
2828 4 2380
2863 4 2380
2881 4 2380
2928 4 2380
2996 4 2380
2996 4 2380
3006 4 2380
3006 4 2380
3067 4 2380
3067 4 2380
1751 5 2380
2373 5 2380
2380 5 2380
2380 5 2380
2380 5 2380
2629 5 2380
2868 5 2380
2928 5 2380
2951 5 2380
1502 6 2380
1751 6 2380
2080 6 2380
2277 6 2380
2377 6 2380
2380 6 2380
2380 6 2380
2380 6 2380
2380 6 2380
2522 6 2380
2558 6 2380
2569 6 2380
2625 6 2380
2632 6 2380
.I 2381
.T
Average Binary Search Length Dense Ordered Lists (Corrigendum)
.B
CACM February, 1972
.A
Flores, I.
Madpis, G.
.N
CA720210 JB January 31, 1978 3:40 PM
.X
2381 5 2381
2381 5 2381
2381 5 2381
.I 2382
.T
Reconstruction Pictures Their Projections (Corrigendum)
.B
CACM February, 1972
.A
Gordon, R.
Herman, G. T.
.N
CA720209 JB January 31, 1978 3:42 PM
.X
2382 5 2382
2382 5 2382
2382 5 2382
.I 2383
.T
Music Computer Composition
.W
problem discussed simulating human
composition Western popular music computer
some relevant theories music harmony given.
Problems kind program several
schemes known not work discussed. Several
previous computer compositions discussed,
including ILLIAC Suite. program generate short
melody fragments written simulate some
aspects human composition. Five samples
its output presented discussed.
discovered although fragments show many
characteristics popular melodies, they have
strangely alien sound. theorized
because relevant probabilities which would
discriminate against unfamiliar sequences were not used.
.B
CACM February, 1972
.A
Moorer, J. A.
.K
artificial intelligence, heuristic programming,
models cognitive processes, computer music,
computer composition, music theory
.C
3.44 3.65
.N
CA720208 JB January 31, 1978 3:54 PM
.X
2383 5 2383
2383 5 2383
2383 5 2383
.I 2384
.T
Hidden-Line Plotting Program [J6] (Algorithm A420)
.B
CACM February, 1972
.A
Williamson, H.
.K
hidden-line plot, surface plot
.C
4.9
.N
CA720207 JB January 31, 1978 4:12 PM
.X
2384 5 2384
2384 5 2384
2384 5 2384
.I 2385
.T
Zeros Complex Polynomial [C2] (Algorithm A419)
.B
CACM February, 1972
.A
Jenkins, M. A.
Traub, J. F.
.K
roots, roots polynomial, zeros polynomial
.C
5.15
.N
CA720206 JB January 31, 1978 4:14 PM
.X
2385 5 2385
2385 5 2385
2385 5 2385
.I 2386
.T
Dynamic Microprogramming: Processor Organization
Programming (Corrigendum)
.B
CACM February, 1972
.A
Tucker, A. B.
.N
CA720205 JB January 31, 1978 4:21 PM
.X
2386 5 2386
2386 5 2386
2386 5 2386
.I 2387
.T
Maximum Computing Power Cost Factors Centralization Problem
.W
simple analysis some computer-economic factors
involved comparing multimachine installations
versus large single machine installations given,
mathematical model derived assist policy
decisions.
.B
CACM February, 1972
.A
Oldehoeft, A. E.
Halstead, M. H.
.K
centralization, decentralization, economics
computers, computer management, economies scale
.C
2.41
.N
CA720204 JB January 31, 1978 4:25 PM
.X
1653 4 2387
2387 4 2387
2387 4 2387
2852 4 2387
1417 5 2387
2387 5 2387
2387 5 2387
2387 5 2387
2852 5 2387
3050 5 2387
3190 5 2387
1417 6 2387
1771 6 2387
2345 6 2387
2345 6 2387
2387 6 2387
2387 6 2387
2479 6 2387
.I 2388
.T
Optimizing Binary Trees Grown Sorting Algorithm
.W
Items can retrieved binary trees grown
form Algorithm Quicksort
average time proportional log n, n number
items tree. binary trees grown
algorithm sometimes have some branches longer
than others; therefore, possible reduce
average retrieval time restructuring tree
make branches uniform length possible.
algorithm do presented. use
algorithm discussed, compared
another which restructures tree after each new item added.
.B
CACM February, 1972
.A
Martin, W. A.
Ness, D. N.
.K
retrieving information binary trees, global
local optimization, sorting, recursion
.C
3.74 5.31
.N
CA720203 JB January 31, 1978 4:30 PM
.X
1175 4 2388
1919 4 2388
1919 4 2388
1969 4 2388
1997 4 2388
2191 4 2388
2191 4 2388
2388 4 2388
2388 4 2388
2679 4 2388
2783 4 2388
2784 4 2388
3054 4 2388
3054 4 2388
3121 4 2388
3121 4 2388
864 4 2388
308 5 2388
309 5 2388
2388 5 2388
2388 5 2388
2388 5 2388
2455 5 2388
2493 5 2388
2889 5 2388
2968 5 2388
2138 6 2388
2278 6 2388
2388 6 2388
2388 6 2388
2388 6 2388
2388 6 2388
2455 6 2388
2455 6 2388
.I 2389
.T
Preliminary Report System General Space Planning
.W
computer language set programs within
language described which allow
formulating solving class space planning
problems. language extension Algol
includes means represent spaces objects, manipulate
them, test resulting arrangements
according variety constraints. algorithms
used solve problems expressed language
rely heuristic programming. Both language
search algorithms detailed.
.B
CACM February, 1972
.A
Eastman, C. M.
.K
automated design, architecture, heuristic programs, space planning
.C
3.20 3.40 3.64 3.66
.N
CA720202 JB January 31, 1978 4:35 PM
.X
2389 4 2389
2078 5 2389
2389 5 2389
2389 5 2389
2389 5 2389
.I 2390
.T
Proposal Computer-Based Interactive Scientific Community
.W
Because problems created explosion
papers mathematical sciences
drawbacks places research, suggested
tree all mathematical results
terminology maintained multiterminal computer system.
Users system can store computer
updated file their current knowledge, selecting
paper read, they can obtain
computer minimum subtree theorems required bring
them they already know background
knowledge which paper assumes. Under certain conditions,
means also provided contribution
useful comments readers work interaction
between commentators author.
paper describes system can organized
role required readers, writers,
commentators.
.B
CACM February, 1972
.A
Pager, D.
.K
interactive system, organization scientific community,
readers, writers, commentators, computer
utility, information retrieval, trees, data structures
.C
1.0 1.1 1.59 2.10 3.15 3.32 3.50 3.51 3.70 3.71 3.74 3.9
.N
CA720201 JB February 1, 1978 8:51 AM
.X
2390 5 2390
2390 5 2390
2390 5 2390
2519 5 2390
2390 6 2390
.I 2391
.T
Unitary Symmetric Polynomials [Z] (Algorithm R391)
.B
CACM January, 1972
.A
Schrack, G. F.
.K
symmetric polynomials, elementary symmetric polynomials,
unitary symmetric polynomials, polynomial
synthesis, reverse Horner scheme, reverse
synthetic division, binomial coefficients
.C
5.11 5.30 5.5
.N
CA720112 JB February 1, 1978 8:55 AM
.X
2391 5 2391
2391 5 2391
2391 5 2391
.I 2392
.T
In-Situ Transposition Rectangular Matrix [F1] (Algorithm C380)
.B
CACM January, 1972
.A
Macleod, I. D. G.
.K
rectangular matrix, transpose
.C
5.14
.N
CA720111 JB February 1, 1978 8:57 AM
.X
2057 4 2392
2057 4 2392
2058 4 2392
2392 4 2392
2392 4 2392
2416 4 2392
1600 5 2392
2055 5 2392
2392 5 2392
2392 5 2392
2392 5 2392
.I 2393
.T
Calculation Fourier Integrals [D1] (Algorithm A418)
.B
CACM January, 1972
.A
Einarsson, B.
.K
quadrature, Filon quadrature, integration, Filon integration,
Fourier coefficients, Fourier integrals,
Fourier series, spline, spline approximation, spline
quadrature, extrapolation, Richardson extrapolation
.C
5.16
.N
CA720110 JB February 1, 1978 9:00 AM
.X
1857 4 2393
2393 4 2393
2393 4 2393
1858 5 2393
2071 5 2393
2393 5 2393
2393 5 2393
2393 5 2393
.I 2394
.T
Ordering +-f(+-f(+-f(...+-f(x)..))) f(x) Positive Monotonic
.B
CACM January, 1972
.A
Salzer, H. E.
.K
ordering, storage, retrieval, positive functions,
monotonic functions, increasing functions, decreasing
function, binary system, Chebyshev zeros, square rots, continued fractions
.C
5.40
.N
CA720109 JB February 1, 1978 9:05 AM
.X
2394 4 2394
2394 4 2394
1872 5 2394
1903 5 2394
2394 5 2394
2394 5 2394
2394 5 2394
2533 5 2394
2394 6 2394
.I 2395
.T
Quadratic Programming Nonlinear Regression
.W
quadratic programming algorithm described
use magnified diagonal method
nonlinear regression linear constraints.
regression method published JACM, July 1970.
.B
CACM January, 1972
.A
Shrager, R. I.
.K
nonlinear equations, nonlinear regression, nonlinear
programming, quadratic programming, least
squares, inequality, constraints, iteration
.C
5.15 5.41
.N
CA720108 JB February 1, 1978 9:09 AM
.X
2395 5 2395
2395 5 2395
2395 5 2395
.I 2396
.T
MUSE: Model Understand Simple English
.W
MUSE computer model natural language
processing, based semantic memory network
like Quillian's TLC. MUSE, Model Understand
Simple English, processes English sentences
unrestricted content but somewhat restricted format.
model first applies syntactic analysis
eliminate some interpretations then employs simplified
semantic intersection procedure find
valid interpretation input. While semantic
processing similar TLC's, syntactic
component includes early use parse trees special
purpose rules. "relational triple" notation
used during interpretation input compatible MUSE's
memory structures, allowing direct verification
familiar concepts addition new ones.
MUSE also has repertoire actions, which range
editing reporting contents its own
memory indirect form question answering.
Examples presented demonstrate model interprets
text, resolves ambiguities, adds information
memory, generalizes examples performs various actions.
.B
CACM January, 1972
.A
McCalla, G. I.
Sampson, J. R.
.K
natural language processing, semantic memory, text
comprehension, question answering, artificial
intelligence, human memory simulation
.C
3.36 3.42 3.62 3.65 3.74
.N
CA720107 JB February 1, 1978 9:20 AM
.X
1400 4 2396
1553 4 2396
1945 4 2396
2127 4 2396
2127 4 2396
2178 4 2396
2309 4 2396
2310 4 2396
2396 4 2396
2396 4 2396
2396 4 2396
2396 4 2396
2561 4 2396
2730 4 2396
1487 5 2396
1856 5 2396
2092 5 2396
2127 5 2396
2396 5 2396
2396 5 2396
2396 5 2396
.I 2397
.T
Optimizing Polyphase Sort (Corrigendum)
.B
CACM January, 1972
.A
Shell, D. L.
.N
CA720106 JB February 1, 1978 9:21 AM
.X
2397 5 2397
2397 5 2397
2397 5 2397
.I 2398
.T
Teacher/Student Authored CAI Using NEWBASIC System
.W
pedagogical advantages general purpose
interactive system called NEWBASIC/CATALYST
discussed. NEWBASIC/CATALYSTincorporates advanced
implementation BASIC, system-level interactive
features, general capability extension through
user oriented function attachment, Application
last feature provide flexible CAI scan capability
illustrated. example interaction
system level shows students can mix advantages
independent "solo" mode computing
those guided "dual" mode interaction. Preliminary
experience system urban
secondary school setting discussed.
.B
CACM January, 1972
.A
Dwyer, T. A.
.K
CAI, BASIC, CATALYST, NEWBASIC, education, computers
education, extended languages, interactive
systems
.C
1.50 1.51 3.32 4.22
.N
CA720105 JB February 1, 1978 9:28 AM
.X
2309 5 2398
2398 5 2398
2398 5 2398
2398 5 2398
1856 6 2398
2398 6 2398
.I 2399
.T
CRT Editing System
.W
test-editing manipulation program described.
program operates low-cost cathode-ray
tube entry display stations keyboard 13
function buttons. Applications, potential economy
operation, some aspects implementation discussed.
.B
CACM January, 1972
.A
Irons, E. T.
Djorup, F. M.
.K
editing, text, cathode-ray tube entry display, time-sharing
.C
3.7 4.3
.N
CA720104 JB February 1, 1978 9:31 AM
.X
2399 5 2399
2399 5 2399
2399 5 2399
.I 2400
.T
Use Hough Transformation ToDetect Lines Curves Pictures
.W
Hough has proposed interesting computationally
efficient procedure detecting lines
pictures. paper points out use angle-radius
rather than slope-intercept parameters
simplifies computation further. also shows
method can used more general curve
fitting, gives alternative interpretations
explain source its efficiency.
.B
CACM January, 1972
.A
Duda, R. O.
Hart, P. E.
.K
picture processing, pattern recognition, line detection,
curve detection, colinear points, point-line
transformation, Hough transformation
.C
3.63
.N
CA720103 JB February 1, 1978 9:36 AM
.X
2400 5 2400
2400 5 2400
2400 5 2400
2788 5 2400
2910 5 2400
2400 6 2400
2400 6 2400
2788 6 2400
.I 2401
.T
Shrinking Binary Picture Patterns
.W
parallel processing algorithm shrinking
binary patterns obtain single isolated elements,
one each pattern, presented. procedure
may used counting patterns matrix,
hardware implementation algorithm using large
scale integrated technology envisioned.
principal features method very small
window employed (two-by-two elements), parallel
nature process, possibility shrinking
any pattern, regardless complexity
its configuration. Problems regarding merging disconnection
patterns during process well
determination maximum number steps
necessary obtain single isolated element
pattern, reviewed discussed. analogy
neural network description, terms McCulloch-Pitts
"neurons" presented.
.B
CACM January, 1972
.A
Levialdi, S.
.K
counting binary patterns, shrinking, parallel
processing, multiple connected pictures
.C
3.63
.N
CA720102 JB February 1, 1978 9:43 AM
.X
2401 5 2401
2401 5 2401
2401 5 2401
.I 2402
.T
Pictorial Pattern Recognition
Phase Problem X-ray Crystallography
.W
availability interactive, three-dimensional,
computer graphics systems coupled powerful
digital computers encourages development algorithms
adapted environment. Pictorial pattern
recognition techniques make possible number approaches
X-ray structure determination based
molecular model building, i.e. use chemical information
frame "structural hypotheses" which
can computationally tested refined reference
experimental data. Application standard
pattern recognition algorithms hindered fact
cross-correlation between model
correct structure cannot computed because
fundamental incompleteness measured data.
However, possible compute upper bound such
cross-correlation. simple example demonstrates
information can basis technique
structure determination can make effective
use interactive graphics system. Model building
cross-correlations has intrinsic advantages
over usual crystallographic techniques based
autocorrelation Patterson function, especially
large structures. significant, crystallography
biological macromolecules hasbeen
continue field intense interest.
.B
CACM January, 1972
.A
Lesk, A. M.
.K
pictorial pattern recognition, phase problem,
X-ray crystallography, interactive graphics
.C
3.13 3.17 3.63
.N
CA720101 JB February 1, 1978 9:53 AM
.X
2402 5 2402
2402 5 2402
2402 5 2402
.I 2403
.T
Procedures Natural Spline Interpolation [E1] (Algorithm A472)
.B
CACM December, 1973
.A
Herriot, J. G.
.K
approximation, interpolation, spline, natural
spline, spline approximation, cubic natural spline
.C
5.13
.N
CA731205 JB January 19, 1978 2:47 PM
.X
2403 5 2403
2403 5 2403
2403 5 2403
.I 2404
.T
Exponential Integrals [S13] (Algorithm A471)
.B
CACM December, 1973
.A
Gautschi, W.
.K
exponential integral, recurrence relations,
recursive computation, continued fractions
.C
5.12
.N
CA731204 JB January 19, 1978 2:48 PM
.X
2404 4 2404
2119 5 2404
2404 5 2404
2404 5 2404
2404 5 2404
.I 2405
.T
Linear Systems Almost Tridiagonal Matrix [F4] (Algorithm A470)
.B
CACM December, 1973
.A
Kubicek, M.
.K
system linear equations, almost tridiagonal matrix, sparse matrix
.C
5.14
.N
CA731203 JB January 19, 1978 2:50 PM
.X
2405 5 2405
2405 5 2405
2405 5 2405
.I 2406
.T
Data Definition Mapping Language
.W
data definition language sa declarative
computer language specifying data structures.
Most data definition languages concentrate declaration
logical data structures little
concern these structures physically realized
computer system. However, need
data definition languages which describe both logical
physical aspects data increasingly
apparent. Such languages key systems, well
advanced data management systems distributed
data bases. paper reviews past work data
definition language describing both logical
physical aspects data. Applications these
"generalized" data definition languages also
discussed.
.B
CACM December, 1973
.A
Sibley, E. H.
Taylor, R. W.
.K
data definition language, data storage structure,
data translation, data base management systems,
file translation
.C
3.51 3.70 3.73 4.29 4.82
.N
CA731202 JB January 19, 1978 2:58 PM
.X
2155 4 2406
2406 4 2406
2710 4 2406
2715 4 2406
2716 4 2406
2717 4 2406
2718 4 2406
2765 4 2406
2817 4 2406
2888 4 2406
2901 4 2406
2957 4 2406
2959 4 2406
2965 4 2406
3087 4 2406
3154 4 2406
2046 5 2406
2406 5 2406
2406 5 2406
2406 5 2406
2717 5 2406
2046 6 2406
2406 6 2406
.I 2407
.T
Curriculum Recommendations Undergraduate
Programs Information Systems
.W
need education related information
systems organizations discussed,
curriculum proposed undergraduate program.
Material necessary such programs identified,
courses incorporating specified.Detailed course
descriptions presented. Program organization
problems implementation discussed.
.B
CACM December, 1973
.A
Couger, J. D.
.K
education, undergraduate curricula, management systems,
information systems, information analysis,
system design, systems analysis
.C
1.52 3.51
.N
CA731201 JB January 19, 1978 3:24 PM
.X
2163 4 2407
2345 4 2407
2407 4 2407
2407 4 2407
2407 4 2407
2852 4 2407
3003 4 2407
3003 4 2407
3011 4 2407
3050 4 2407
2163 5 2407
2181 5 2407
2345 5 2407
2407 5 2407
2407 5 2407
2407 5 2407
3003 5 2407
1659 6 2407
1678 6 2407
1927 6 2407
1945 6 2407
2097 6 2407
2147 6 2407
2163 6 2407
2187 6 2407
2329 6 2407
2345 6 2407
2367 6 2407
2407 6 2407
2478 6 2407
2479 6 2407
2480 6 2407
2538 6 2407
.I 2408
.T
Solving Biharmonic Equation Square:
Direct Versus Semidirect Method
.W
Two methods solving biharmonic equation
compared. One method direct, using
eigenvalue-eigenvector decomposition. other method
iterative, solving Poisson equation directly
each iteration.
.B
CACM November, 1973
.A
Ehrlich, L. W.
.K
biharmonic, direct method, block iterative,
eigenvector-eigenvalue decomposition
.C
5.14 5.17
.N
CA731118 JB January 19, 1978 3:28 PM
.X
2408 5 2408
2408 5 2408
2408 5 2408
.I 2409
.T
Algorithm Approximate Solution
Wiener-Hopf Integral Equations
.W
explicit approximate solution given
equation. assumed classical
Wiener-Hopf technique may applied. furthermore
assumed Fourier transforms known explicitly.
approximate solution depends two positive parameters.
.B
CACM November, 1973
.A
Stenger, F.
.K
integral equations, Wiener-Hopf, convolution, approximate solution
.C
5.18
.N
CA731117 JB January 19, 1978 3:36 PM
.X
2409 5 2409
2409 5 2409
2409 5 2409
.I 2410
.T
Recurrence Scheme Converting
One Orthogonal Expansion into Another
.W
generalization scheme Hamming
converting polynomial Pn(x) into Chebyshev
series combined recurrence scheme Clenshaw
summing any finite series whose terms satisfy
three-term recurrence formula.
.B
CACM November, 1973
.A
Salzer, H. E.
.K
orthogonal expansions, series interconversion,
recurrence schemes, Hamming recurrence, Clenshaw
recurrence, three-term recurrence, five-term recurrence, Chebyshev series
.C
5.12
.N
CA731116 JB January 19, 1978 4:16 PM
.X
2410 5 2410
2410 5 2410
2410 5 2410
.I 2411
.T
Tree-Structured Programs
.B
CACM November, 1973
.A
Wegner, E.
.K
control structures, flowcharts, goto statements,
inductive assertion, least fix points, optimization
compilers, program documentation, program flow graphs,
programming language design, proof programs,
semantics programming languages, structured programming.
.C
4.12 4.22 5.24
.N
CA731115 JB January 19, 1978 4:19 PM
.X
2411 4 2411
2411 4 2411
2457 4 2411
2709 4 2411
2889 4 2411
2937 4 2411
2989 4 2411
3005 4 2411
3025 4 2411
3101 4 2411
2138 5 2411
2326 5 2411
2411 5 2411
2411 5 2411
2411 5 2411
.I 2412
.T
Comment Brent's Scatter Storage Algorithm
.B
CACM November, 1973
.A
Feldman, J. A.
Low, J. R.
.K
Hashing, information storage retrieval,
scatter storage, searching, symbol table
.C
3.7 3.73 3.74 4.1 4.9
.N
CA731114 JB January 19, 1978 4:40 PM
.X
2412 4 2412
3053 4 2412
3083 4 2412
2412 5 2412
2412 5 2412
2412 5 2412
2543 5 2412
3053 5 2412
1329 6 2412
1785 6 2412
1973 6 2412
1992 6 2412
2107 6 2412
2109 6 2412
2412 6 2412
2543 6 2412
2673 6 2412
2707 6 2412
2770 6 2412
.I 2413
.T
Note Subexpression Ordering
Execution Arithmetic Expressions
.W
counterexample supposed optimality
algorithm generating schedules trees
tasks unequal execution times presented.
comparison "critical path" heuristic
discussed.
.B
CACM November, 1973
.A
Denning, P. J.
Graham, G. S.
.K
scheduling, tree scheduling, task scheduling, multiprocessor scheduling
.C
4.32 8.3 8.1
.N
CA731113 JB January 25, 1978 4:24 PM
.X
2413 4 2413
2175 5 2413
2413 5 2413
2413 5 2413
2413 5 2413
.I 2414
.T
Arithmetic Overa Finite Field [A1] (Algorithm A469)
.B
CACM November, 1973
.A
Lam, C.
McKay, J.
.K
algebra
.C
5.19
.N
CA731112 JB January 20, 1978 9:25 AM
.X
2414 5 2414
2414 5 2414
2414 5 2414
.I 2415
.T
Algorithm Automatic Numerical Integration
Over Finite Interval [D1] (Algorithm A468)
.B
CACM November, 1973
.A
Patterson, T. N. L.
.K
automatic integration, numerical integration,
automatic quadrature, numerical quadrature
.C
5.16
.N
CA731111 JB January 20, 1978 9:51 AM
.X
1352 4 2415
2415 4 2415
2415 4 2415
2415 4 2415
2550 4 2415
1040 5 2415
1982 5 2415
2074 5 2415
2415 5 2415
2415 5 2415
2415 5 2415
.I 2416
.T
Matrix Transposition Place [F1] (Algorithm A467)
.B
CACM November, 1973
.A
Brenner, N.
.K
transposition, matrix operations, permutations,
primitive roots, number theory
.C
3.15 5.14 5.39
.N
CA731110JB January 20, 1978 9:58 AM
.X
2057 4 2416
2058 4 2416
2392 4 2416
2416 4 2416
2416 4 2416
1600 5 2416
2058 5 2416
2416 5 2416
2416 5 2416
2416 5 2416
.I 2417
.T
Four Combinatorial Algorithms [G6] (Algorithm A466)
.B
CACM November, 1973
.A
Ehrlich, G.
.K
permutations combinations
.C
5.39
.N
CA731109 JB January 20, 1978 9:59 AM
.X
2044 4 2417
2189 4 2417
2417 4 2417
2505 4 2417
2874 4 2417
2908 4 2417
2417 5 2417
2417 5 2417
2417 5 2417
2834 5 2417
2884 5 2417
521 5 2417
3115 5 2417
907 6 2417
969 6 2417
2045 6 2417
2045 6 2417
2417 6 2417
2417 6 2417
2417 6 2417
2466 6 2417
2466 6 2417
2884 6 2417
579 6 2417
785 6 2417
.I 2418
.T
Student's t Frequency [S14] (Algorithm A465)
.B
CACM November, 1973
.A
Hill, G. W.
.K
Student's t statistic, density function, series approximation
.C
5.12 5.5
.N
CA731108 JB January 20, 1978 10:01 AM
.X
2418 5 2418
2418 5 2418
2418 5 2418
.I 2419
.T
Eigenvalues Real, Symmetric, Tridiagonal
Matrix [F2] (Algorithm A464)
.B
CACM November, 1973
.A
Reinsch, C. H.
.K
eigenvalues, QR Algorithm
.C
5.14
.N
CA731107 JB January 20, 1978 10:03 AM
.X
2419 5 2419
2419 5 2419
2419 5 2419
2825 5 2419
2419 6 2419
.I 2420
.T
Experiments Automatic Theorem-Prover
HavingPartial Ordering Inference Rules
.W
Automatic theorem-provers need made much
more efficient. mind, Slagle has
shown axioms partial ordering can replaced
built-in inference rules using particular
theorem-proving algorithm based upon hyper-resolution
paramodulation. new rules embody transitivity
partial orderings close relationship between
predicates. program has been developed using
modified version these rules. new theorem-prover
has been found very powerful solving
problems involving partial orderings. paper presents
detailed description program
comprehensive account experiments have been performed it.
.B
CACM November, 1973
.A
Slagle, J. R.
Norton, L. M.
.K
theorem-proving, partial ordering, resolution,
hyper-resolution, P1-resolution, paramodulation,
inference rules, heuristics
.C
3.64 3.66
.N
CA731106 JB January 20, 1978 10:10 AM
.X
2356 4 2420
2420 4 2420
2874 4 2420
3143 4 2420
2227 5 2420
2420 5 2420
2420 5 2420
2420 5 2420
.I 2421
.T
Scan Conversion Algorithm Reduced Storage Requirements
.W
Most graphics systems using raster scan output
device (CRT hardcopy) maintain display
file XY random scan format. Scan converters,
hardware software, must provided translate
picture description XY format raster
format. Published scan conversion algorithms
which fast reserve buffer area large enough
accommodate entire screen. other
hand, those which use small buffer area slow because
they require multiple passes through XY
display file. scan conversion algorithm described
here uses linked list data structure process
lines drawing strips corresponding
groups scan lines. relatively small primary
memory buffer area used accumulate binary image
group scan lines. portion
drawing has been plotted, buffer reused
next portion. Because list processing
procedures used, only single pass through XY display
file required generating binary
image only slight increase execution time over
fully buffered core results. Results slow
storage requirements can reduced more than
80 percent while causing less than 10 percent
increase execution time.
.B
CACM November, 1973
.A
Jordan, B. W. Jr.
Barrett, R. C.
.K
graphics, scan conversion, raster plotter,
line drawing, discrete image, dot generation
.C
4.41 6.35 8.2
.N
CA731105 JB January 20, 1978 10:28 AM
.X
1891 4 2421
2211 4 2421
2421 4 2421
2421 4 2421
2674 4 2421
2687 4 2421
1741 5 2421
2211 5 2421
2421 5 2421
2421 5 2421
2421 5 2421
2674 5 2421
1741 6 2421
2004 6 2421
2421 6 2421
2687 6 2421
.I 2422
.T
Adaptive Correction Program Statements (Corrigendum)
.B
CACM November, 1973
.A
James, E. B.
Partridge, D. P.
.N
CA731104 JB January 20, 1978 10:29 AM
.X
2422 5 2422
2422 5 2422
2422 5 2422
.I 2423
.T
Parser-Generating System Constructing Compressed Compilers
.W
paper describes parser-generating system
(PGS) currently use CDC-6500 computer
Purdue University. PGS Fortran-coded compiler.
input translation grammar, each BNF
syntactic rule corresponds (possibly empty) "code
generator" realizable assembly language,
Fortran Algol, subroutine called whenever
syntactic rule applied parse
program. Typical one-pass compilers constructed
PGS translate source programs speeds approaching
14,000 cards per minute. XPL compiler, parser
program its tables currently occupy 288
words 60-bit core memory which 140 words parsing
table entries 82 words links code
generators.
.B
CACM November, 1973
.A
Mickunas, M. D.
Schneider, V. B.
.K
parser generators, translator writing systems,
syntactic analysis, normal-form grammars, pushdown
automata, translation grammars, translator optimization, compression algorithm
.C
4.12 5.22 5.23
.N
CA731103 JB January 20, 197810:41 AM
.X
2179 4 2423
2423 4 2423
2423 4 2423
1337 5 2423
2015 5 2423
2423 5 2423
2423 5 2423
2423 5 2423
2733 5 2423
1781 6 2423
2179 6 2423
2423 6 2423
2786 6 2423
799 6 2423
.I 2424
.T
Dynamic Verification Operating System Decisions
.W
Dynamic verification decision implies
every time decision made there
consistency check performed decision using independent
hardware software. dynamic verification
operating system decisions used PRIME system
being designed constructed University
California, Berkeley. PRIME experimental time-sharing
which have properties continuous
availability, data privacy, cost effectiveness.
technique dynamic verification allows
construction operating system which does not make certain
decisions improperly even presence
single hardware software fault. Furthermore,
multiple faults lead unreliable operation only
if faults happen reinforce each other. PRIME,
dynamic verification used ensure
one user's information cannot become available another
user gratuitously even presence
single hardware software fault.the amount additional
hardware software required dynamic
verification can modest.
.B
CACM November, 1973
.A
Fabry, R. S.
.K
operating systems, data security, fault tolerance,
software reliability, data privacy, program
verification, modular computer systems
.C
4.32
.N
CA731102 JB January 20, 1978 10:56 AM
.X
1828 4 2424
1854 4 2424
1877 4 2424
1960 4 2424
2150 4 2424
2317 4 2424
2319 4 2424
2377 4 2424
2342 4 2424
2376 4 2424
2379 4 2424
2424 4 2424
2482 4 2424
2618 4 2424
2632 4 2424
2704 4 2424
2723 4 2424
2738 4 2424
2740 4 2424
2741 4 2424
2867 4 2424
3184 4 2424
1749 5 2424
2424 5 2424
2424 5 2424
2424 5 2424
.I 2425
.T
Programmer Navigator
.B
CACM November, 1973
.A
Bachman, C. W.
.N
CA731101 JB January 20, 1978 10:59 AM
.X
2425 4 2425
2313 5 2425
2425 5 2425
2425 5 2425
2425 5 2425
.I 2426
.T
Algorithms SCALE1, SCALE2, SCALE3 Determination
Scales Computer Generated Plots
[J6] (Algorithm A463)
.B
CACM October, 1973
.A
Lewart, C. R.
.K
plotting, scaling plotting
.C
4.41
.N
CA731014 JB January 20, 1978 11:01 AM
.X
2426 5 2426
2426 5 2426
2426 5 2426
.I 2427
.T
Bivariate Normal Distribution [S15] (Algorithm A462)
.B
CACM October, 1973
.A
Donnelly,T. G.
.K
bivariate, normal Gaussian, frequency distribution
.C
5.5
.N
CA731013 JB January 20, 1978 11:03 AM
.X
1987 4 2427
2427 4 2427
2427 4 2427
1581 5 2427
1636 5 2427
2427 5 2427
2427 5 2427
2427 5 2427
.I 2428
.T
Cubic Spline Solutions Class Functional
Differential Equations [D2] (Algorithm A461)
.B
CACM October, 1973
.A
Burkowski, F. J.
Hoskins, W. D.
.K
differential equation, spline approximation
.C
5.17
.N
CA731012 JB January 20, 1978 11:06 AM
.X
2428 5 2428
2428 5 2428
2428 5 2428
.I 2429
.T
Calculation Optimum Parameters Alternating
Direction Implicit Procedures [D3] (Algorithm
A460)
.B
CACM October, 1973
.A
Saylor, P. E.
Sebastian, J. D.
.K
elliptic difference equations, Peaceman-Rachford,
Douglas-Rachford, W. B. Jordan, optimum parameters,
alternating-direction-implicit, ADI
.C
5.14 5.17
.N
CA731011 JB January 20, 1978 11:09 AM
.X
2429 5 2429
2429 5 2429
2429 5 2429
.I 2430
.T
Elementary Circuits Graph [H] (Algorithm A459)
.B
CACM October, 1973
.A
Syslo,M. M.
.K
algorithm, graph theory, circuit search
algorithm, path search algorithm, searching
.C
3.74 4.22 5.32
.N
CA731010 JB January 20, 1978 11:11 AM
.X
2430 4 2430
1961 5 2430
2430 5 2430
2430 5 2430
2430 5 2430
.I 2431
.T
Discrete Linear L1 Approximation interval
Linear Programming [E2] (Algorithm A458)
.B
CACM October, 1973
.A
Robers, P. D.
Robers, S. S.
.K
discrete approximation, L1 approximation
.C
5.13 5.41
.N
CA731009 JB January 20, 1978 11:13 AM
.X
2431 5 2431
2431 5 2431
2431 5 2431
.I 2432
.T
Addendum Multiple-Precision Division Algorithm
.B
CACM October, 1973
.A
Mifsud, C. J.
Bohlen, M. J.
.K
multiple-precision, division, overflow
.C
3.15 4.0 5.1
.N
CA731008 JB January 20, 1978 11:15 AM
.X
2432 4 2432
1975 5 2432
2432 5 2432
2432 5 2432
2432 5 2432
.I 2433
.T
Control Structures Illiac IV Fortran
.W
part effort design implement
Fortran compiler ILLIAC IV, extended
Fortran, called IVTRAN, has been developed. language
provides means expressing data control
structures suitable exploiting ILLIAC IV parallelism.
paper reviews hardware characteristics
ILLIAC singles out unconventional features
which could expected influence language (and
compiler) design. implications these features
data layout algorithm structure discussed,
conclusion drawn data allocation rather than
code structuring crucial ILLIAC optimization
problem. satisfactory method data allocation
then presented. Language structures utilize
storage method express parallel algorithms described.
.B
CACM October, 1973
.A
Millstein, R. E.
.K
array processing, parallelism detection, explicit
parallelism, array allocation, parallel control
structures, ILLIAC IV Fortran
.C
4.12 4.21 4.22
.N
CA731007 JB January 20, 1978 11:30 AM
.X
2433 5 2433
2433 5 2433
2433 5 2433
2785 5 2433
2433 6 2433
2685 6 2433
.I 2434
.T
Using Page Residency Select Working Set Parameter
.W
Denning's method selecting working set
parameter, which uses interreference intervals,
examined. Several omissions his model noted,
new assumptions introduced overcome
these omissions. Using modified model, Dening's results
page residency rederived reconsidered
selecting working set parameter.
.B
CACM October, 1973
.A
Prieve, B. G.
.K
working set model, paging, program behavior,program modeling
.C
4.3
.N
CA731006 JB January 20, 1978 11:34 AM
.X
1892 4 2434
1901 4 2434
2085 4 2434
2095 4 2434
2218 4 2434
2277 4 2434
2319 4 2434
2329 4 2434
2358 4 2434
2373 4 2434
2380 4 2434
2434 4 2434
2499 4 2434
2501 4 2434
2582 4 2434
2669 4 2434
2828 4 2434
2863 4 2434
2881 4 2434
2928 4 2434
2996 4 2434
3006 4 2434
3067 4 2434
1751 5 2434
2434 5 2434
2434 5 2434
2434 5 2434
.I 2435
.T
Class Dynamic Memory Allocation Algorithms
.W
Anew dynamic memory allocation algorithm,
Fibonacci system, introduced. algorithm
similar to, but seems have certain advantages over,
"buddy" system. generalization mentioned
which includes both these systems special cases.
.B
CACM October, 1973
.A
Hirschberg, D. S.
.K
dynamic storage allocation, buddy system,
simulation, Fibonacci, fragmentation
.C
3.89 4.32 4.39
.N
CA731005 JB January 20, 1978 11:38 AM
.X
1389 4 2435
1552 4 2435
2162 4 2435
2435 4 2435
2596 4 2435
2768 4 2435
2845 4 2435
2902 4 2435
2955 4 2435
1184 5 2435
2435 5 2435
2435 5 2435
2435 5 2435
2596 5 2435
2747 5 2435
2768 5 2435
2845 5 2435
2902 5 2435
2911 5 2435
2955 5 2435
1051 6 2435
1062 6 2435
1184 6 2435
1184 6 2435
1184 6 2435
1184 6 2435
1184 6 2435
1211 6 2435
1552 6 2435
1879 6 2435
1879 6 2435
1879 6 2435
273 6 2435
2435 6 2435
2435 6 2435
2435 6 2435
2435 6 2435
2435 6 2435
2435 6 2435
2435 6 2435
2498 6 2435
2596 6 2435
2596 6 2435
2598 6 2435
2734 6 2435
2734 6 2435
2736 6 2435
2747 6 2435
2747 6 2435
2747 6 2435
2768 6 2435
2768 6 2435
2773 6 2435
2773 6 2435
2983 6 2435
.I 2436
.T
Note Confinement Problem
.W
note explores problem confining
program during its execution so cannot
transmit information any other program except its
caller. set examples attempts stake out
boundaries problem. Necessary conditions
solution stated informally justified.
.B
CACM October, 1973
.A
Lampson, B. W.
.K
protection, confinement, proprietary program,
privacy, security, leakage data
.C
2.11 4.30
.N
CA731004 JB January 20, 1978 11:41 AM
.X
2436 4 2436
2626 4 2436
2868 4 2436
2870 4 2436
2377 5 2436
2436 5 2436
2436 5 2436
2436 5 2436
2840 5 2436
2869 5 2436
3128 5 2436
3158 5 2436
1471 6 2436
1746 6 2436
2150 6 2436
2356 6 2436
2376 6 2436
2436 6 2436
2436 6 2436
2436 6 2436
2436 6 2436
2597 6 2436
2626 6 2436
2629 6 2436
2865 6 2436
2866 6 2436
2870 6 2436
2912 6 2436
3038 6 2436
3082 6 2436
3111 6 2436
.I 2437
.T
General Performance Analysis Key-to-Address
Transformation Methods Using Abstract File
Concept
.W
paper presents new approach analysis
performance various key-to-address
transformation methods. approach keys
file assumed have been selected
key space according certain probabilistic selection
algorithm. All files same number
keys selected key space suitably weighted
accordance algorithm,
average performance transformation methods
these files used potential these
methods. Using analysis, methods same overall
performance can classified key distributions
partial certain transformations can identified.
All can done analytically. approach
applied group transformation methods
using files whose keys selected randomly.
.B
CACM October, 1973
.A
Lum, V. Y.
.K
hashing, hashing techniques, hashing methods, hash coding,
key transformation, key-to-address transformation,
direct addressing, randomizing, random access, scatter
storage, information retrieval, hashing analysis,
randomization performance analysis
.C
3.7 3.72 3.73 3.74 3.79 4.9 5.9
.N
CA731003 JB January 20, 1978 11:51 AM
.X
2258 4 2437
2319 4 2437
2313 4 2437
2359 4 2437
2437 4 2437
2552 4 2437
2781 4 2437
2860 4 2437
2991 4 2437
2203 5 2437
2437 5 2437
2437 5 2437
2437 5 2437
.I 2438
.T
Model Stack Implementation Multiple Environments
.W
Many control access environment structures
require storage procedure activation
exist times control not nested within
procedure activated. straightforward
implement dynamic storage allocation linked
blocks each activation, but rather expensive
both time space. paper presents implementation
technique using single stack hold
procedure activation storage which allows retention
storage durations not necessarily tied
control flow. technique has property that,
simple case,it runs identically
usual automatic stack allocation deallocation procedure.
Applications technique multitasking,
coroutines, backtracking, label-valued variables,
functional arguments discussed. initial
model, single real processor assumed, implementation
assumes multiple-processes coordinate
passing control explicitly one another. multiprocessor
implementation requires only few changes
basic technique, described.
.B
CACM October, 1973
.A
Bobrow, D. G.
Wegbreit, B.
.K
control structures, environments, stack allocation,
dendrarchy, retention, dynamic storage allocation,
access environments, FUNARG problem, multitasking,
coroutines, backtracking, label-valued variables,
functional arguments, multiprocessor systems, extensible control structures
.C
4.1 4.2 4.22 4.3 4.32 5.24
.N
CA731002 JB January 23, 1978 8:27 AM
.X
1972 4 2438
2156 4 2438
2168 4 2438
2438 4 2438
2438 4 2438
2723 4 2438
2736 4 2438
2833 4 2438
2855 4 2438
3074 4 2438
3112 4 2438
1826 5 2438
2314 5 2438
2438 5 2438
2438 5 2438
2438 5 2438
2625 5 2438
2922 5 2438
3081 5 2438
3101 5 2438
3112 5 2438
106 6 2438
1380 6 2438
1471 6 2438
1753 6 2438
1826 6 2438
1972 6 2438
2138 6 2438
2193 6 2438
2358 6 2438
2438 6 2438
2438 6 2438
2438 6 2438
2438 6 2438
2438 6 2438
2723 6 2438
2736 6 2438
2833 6 2438
2838 6 2438
3185 6 2438
731 6 2438
.I 2439
.T
Multiple Terminals Under User Program
Control Time-Sharing Environment
.W
User-written programs Dartmouth Time-Sharing
system can communicate many remote
terminals simultaneously can control interactions
between these terminals. Such programs can
written using standard input output instructions
any language available system.
paper describes multiple-terminal facility
implemented without requiring any changes
system executive any system's compilers interpreters.
.B
CACM October, 1973
.A
McGeachie, J. S.
.K
DTSS, multiple terminals, remote terminals, remote
consoles, time-sharing, on-line interaction,
on-line games
.C
3.81 4.32
.N
CA731001 JB January 23, 1978 8:33 AM
.X
2439 5 2439
2439 5 2439
2439 5 2439
.I 2440
.T
Localization Roots Polynomial (Algorithm R429)
.B
CACM September, 1973
.A
Driessen, H. B.
Hunt, E. W. LeM.
.N
CA730915 JB January 23, 1978 8:34 AM
.X
2440 5 2440
2440 5 2440
2440 5 2440
.I 2441
.T
Hidden-Line Plotting Program (Algorithm R420)
.B
CACM September, 1973
.A
Williamson, H.
.N
CA730914 JB January 23, 1978 8:36 AM
.X
2441 5 2441
2441 5 2441
2441 5 2441
.I 2442
.T
Sparse Matrix Package (Algorithm R408)
.B
CACM September, 1973
.A
Lawrence, E. E.
.N
CA730913 JB January 23, 1978 8:37 AM
.X
2442 5 2442
2442 5 2442
2442 5 2442
.I 2443
.T
Generation Permutations Lexicographic Order (Algorithm R323)
.B
CACM September, 1973
.A
Roy, M. K.
.N
CA730912 JB January 23, 1978 8:39 AM
.X
2443 4 2443
2443 5 2443
2443 5 2443
2443 5 2443
747 5 2443
.I 2444
.T
Finding All Cliques Undirected Graph (Algorithm A457)
.B
CACM September, 1973
.A
Bron, C.
Kerbosch, J.
.K
cliques, maximal complete subgraphs, clusters, backtracking
algorithm, branch bound technique,
recursion
.C
3.71 5.32
.N
CA730911 JB January 23, 1978 8:44 AM
.X
2444 5 2444
2444 5 2444
2444 5 2444
.I 2445
.T
Routing Problem (Algorithm A456)
.B
CACM September, 1973
.A
Fencl, Z.
.K
routing problem, shortest path, traveling
salesman problem, Hamiltonian circuit
.C
5.40
.N
CA730910 JB January 23, 1978 8:47 AM
.X
2445 5 2445
2445 5 2445
2445 5 2445
.I 2446
.T
Analysis Skew Representations Symmetric Group (Algorithm A455)
.B
CACM September, 1973
.A
Hunter, D. B.
Williams, J. M.
.K
symmetric group, skew representation, partition,
Young diagram, lattice permutation, binary model,
outer product
.C
5.30
.N
CA730909 JB January 23, 1978 8:49 AM
.X
2446 5 2446
2446 5 2446
2446 5 2446
.I 2447
.T
Sard Kernels Certain Bivariate Cubatures
.W
error analysis some bivariate cubatures
given. remainders obtained
use Sard kernels. Numerical results computer
graphs given some kernel functions.
.B
CACM September, 1973
.A
Barnhill, R. E.
Pilcher, D. T.
.K
cubatures, Sard kernels, numerical integration, remainder formulas
.C
5.13 5.16
.N
CA730908 JB January 23, 1978 8:52 AM
.X
2447 5 2447
2447 5 2447
2447 5 2447
.I 2448
.T
Reversible Execution
.B
CACM September, 1973
.A
Zelkowitz, M. V.
.K
debugging, PL/I, reversible execution, backtracking
.C
4.22 4.42
.N
CA730907 JB January 23, 1978 8:54 AM
.X
2448 5 2448
2448 5 2448
2448 5 2448
.I 2449
.T
Simple Technique Structured Variable Lookup
.W
simple technique symbol-table lookup
structured variables based simple automata
theory presented. technique offers deterministic
solution problem which currently handled
nondeterministic manner PL/I COBOL compilers.
.B
CACM September, 1973
.A
Gates, G. W.
Poplawski, D. A.
.K
symbol table organization, PL/I COBOL structured variables
.C
4.12
.N
CA730906 JB January 23, 1978 9:17 AM
.X
2449 5 2449
2449 5 2449
2449 5 2449
2659 5 2449
2449 6 2449
.I 2450
.T
Empirical Working Set Behavior
.W
working set model program behavior
has been proposed recent years basis
design scheduling paging algorithms. Although
words "working set" now commonly encountered
literature dealing resource allocation, there
dearth published data program measurements,
hope workers field might find experimental
evidence upon which substantiate
base theoretical work.
.B
CACM September, 1973
.A
Rodriguez-Rosell, J.
.K
virtual memory, paging, working set,
software measurement, program behavior
.C
4.3
.N
CA730905 JB January 23, 1978 9:22 AM
.X
2373 4 2450
2374 4 2450
2380 4 2450
2450 4 2450
2450 4 2450
2595 4 2450
2996 4 2450
3006 4 2450
3006 4 2450
3067 4 2450
3067 4 2450
2373 5 2450
2374 5 2450
2450 5 2450
2450 5 2450
2450 5 2450
.I 2451
.T
Design Tree Structures Efficient Querying
.W
standard information retrieval operation
determine which records data collection
satisfy given query expressed terms data values.
process locating desired responses
can represented tree search model. paper
poses optimization problem design
such trees serve well-specified application.
problem academic sense ordinarily
optimal tree cannot implemented means practical
techniques. other hand, potentially
useful comparison affords between observed
performance intuitively attractive
ideal search procedure. practical application
such model paper considers design
novel tree search scheme based bit vector representation
data shows essentially
same algorithm can used design either ideal
search tree bit-vector tree. experimental
study small formatted file illustrates concepts.
.B
CACM September, 1973
.A
Casey, R. G.
.K
tree file, information storage retrieval, clustering,
search, data structure, data management,
query answering
.C
3.62 3.74
.N
CA730904 JB January 23, 1978 9:38 AM
.X
1050 4 2451
1234 4 2451
1935 4 2451
1936 4 2451
2017 4 2451
2032 4 2451
2257 4 2451
2257 4 2451
2360 4 2451
2360 4 2451
2451 4 2451
2451 4 2451
2451 4 2451
2451 4 2451
2452 4 2451
2452 4 2451
2556 4 2451
2556 4 2451
2765 4 2451
2978 4 2451
944 5 2451
1935 5 2451
1936 5 2451
2451 5 2451
2451 5 2451
2451 5 2451
2765 5 2451
2965 5 2451
849 5 2451
1936 6 2451
1976 6 2451
2046 6 2451
2046 6 2451
2451 6 2451
2451 6 2451
2452 6 2451
616 6 2451
.I 2452
.T
Evaluation Selection File Organization-A Model System
.W
work first discusses factors
affect file (data base) organization performance,
elusive subject, then presents methodology,
model programmed system estimate primarily
total storage costs average access time several
file organizations, given specific data base,
query characterization device-related specifications.
Based these estimates, appropriate file
structure may selected specific situation.
system convenient tool study file
structures facilitate much possible process
data base structure design evaluation.
.B
CACM September, 1973
.A
Cardenas, A. F.
.K
file organization, file structures, file management,
file organization performance, file organization
model, file structure design, secondary index organization,
simulation, data base, access time, storage
requirement, data base analysis, data management
.C
3.70 3.71 3.72 3.74 3.79 4.0
.N
CA730903 JB January 23, 1978 9:46 AM
.X
1050 4 2452
1935 4 2452
1936 4 2452
2017 4 2452
2032 4 2452
2140 4 2452
2257 4 2452
2257 4 2452
2360 4 2452
2360 4 2452
2451 4 2452
2451 4 2452
2452 4 2452
2452 4 2452
2452 4 2452
2452 4 2452
2556 4 2452
2765 4 2452
2765 4 2452
2882 4 2452
2901 4 2452
3134 4 2452
1936 5 2452
1976 5 2452
2198 5 2452
2452 5 2452
2452 5 2452
2452 5 2452
2765 5 2452
2882 5 2452
849 5 2452
1936 6 2452
1976 6 2452
2046 6 2452
2198 6 2452
2451 6 2452
2452 6 2452
2452 6 2452
616 6 2452
627 6 2452
.I 2453
.T
Information Theory Applied Conversion
Decision Tables Computer Programs
.W
Using ideas information theory, paper
develops heuristic algorithm converts
limited entry decision table tree structured computer
program near minimum average processing
time. method applicable any limited entry
decision table does not require actions
have single rules cost testing conditions
equal. thus more general than
previously published heuristic algorithms. Compared
optimal algorithm Reinwald Soland,
algorithm easy code takes much smaller
translation time; thus felt
more useful practice. algorithm well suited
manual conversion decision tables flowcharts.
.B
CACM September, 1973
.A
Ganapathy, S.
Rajaraman, V.
.K
decision tables, optimum computer programs, information measure
.C
3.50 4.12 5.6
.N
CA730902 JB January 23, 1978 10:01 AM
.X
1237 4 2453
1354 4 2453
1549 4 2453
1564 4 2453
1684 4 2453
2053 4 2453
2053 4 2453
2220 4 2453
2220 4 2453
2221 4 2453
2273 4 2453
2273 4 2453
2273 4 2453
2273 4 2453
2453 4 2453
2453 4 2453
2453 4 2453
2453 4 2453
2453 4 2453
2517 4 2453
2598 4 2453
2598 4 2453
2726 4 2453
2726 4 2453
2726 4 2453
2856 4 2453
2856 4 2453
2856 4 2453
2856 4 2453
3034 4 2453
3113 4 2453
1172 5 2453
1354 5 2453
2053 5 2453
2220 5 2453
2453 5 2453
2453 5 2453
2453 5 2453
2598 5 2453
2856 5 2453
753 5 2453
1172 6 2453
1172 6 2453
1327 6 2453
1354 6 2453
1548 6 2453
2053 6 2453
2220 6 2453
2220 6 2453
2263 6 2453
2453 6 2453
2453 6 2453
2598 6 2453
2691 6 2453
.I 2454
.T
Computational Algorithms Closed Queueing
Networks Exponential Servers
.W
Methods presented computing equilibrium
distribution customers closed queueing
networks exponential servers. Expressions
various marginal distributions also derived.
computational algorithms based two-dimensional
iterative techniques which highly efficient
quite simple implement. Implementation considerations
such storage allocation strategies
order evaluation examined some detail.
.B
CACM September, 1973
.A
Buzen, J. P.
.K
queueing theory, queueing networks, equilibrium
distributions, steady state distributions
.C
5.12 5.5 8.1 8.3
.N
CA730901 JB January 23, 1978 10:07 AM
.X
2454 5 2454
2454 5 2454
2454 5 2454
2712 5 2454
2741 5 2454
3070 5 2454
1526 6 2454
1749 6 2454
1805 6 2454
2454 6 2454
2454 6 2454
2454 6 2454
2741 6 2454
2988 6 2454
.I 2455
.T
Generalization AVL Trees
.W
generalization AVL trees proposed
which imbalances up (triangle shape) small
integer. experiment performed compare these
trees standard AVL trees balanced
trees basis mean retrieval time, amount
restructuring expected, worst case
retrieval time. shown that, permitting
imbalances up five units, retrieval time
increased small amount while amount restructuring
required decreased factor ten.
few theoretical results derived, including correction
earlier paper, duly compared
experimental data. Reasonably good correspondence found.
.B
CACM August, 1973
.A
Foster, C. C.
.K
AVL trees, balanced trees, information storage retrieval
.C
3.7 3.72 4.49 5.31
.N
CA730819 JB January 23, 1978 10:13 AM
.X
2455 4 2455
2455 4 2455
2493 4 2455
2889 4 2455
2968 4 2455
2278 5 2455
2388 5 2455
2455 5 2455
2455 5 2455
2455 5 2455
2889 5 2455
2968 5 2455
3042 5 2455
2138 6 2455
2388 6 2455
2388 6 2455
2455 6 2455
2455 6 2455
2455 6 2455
2839 6 2455
2889 6 2455
2968 6 2455
.I 2456
.T
Capabilities While, Repeat, Exit Statements
.W
well-formed program defined program
which loops if statements properly
nested can entered only their beginning.
corresponding definition given well-formed
flowchart. shown program well formed if
only if can written if, repeat,
multi-level exit statements sequence control.
also shown if,while, repeat statements
single-level exit do not suffice. also shown
any flowcharts can converted well-formed
flowchart node splitting. Practical implications discussed.
.B
CACM August, 1973
.A
Peterson, W. W.
Kasami, T.
Tokura, N.
.K
well-formed program, while statement, repeat statement,
exit statement, go statement, flowchart,
node splitting, software reliability
.C
4.39 4.49 5.29
.N
CA730818 JB January 23, 1978 10:20 AM
.X
2456 5 2456
2456 5 2456
2456 5 2456
2709 5 2456
3004 5 2456
3121 5 2456
1312 6 2456
1425 6 2456
1425 6 2456
308 6 2456
309 6 2456
2138 6 2456
2204 6 2456
2247 6 2456
2356 6 2456
2456 6 2456
2456 6 2456
2456 6 2456
2477 6 2456
2709 6 2456
3186 6 2456
.I 2457
.T
Inductive Methodsfor Proving Properties Programs
.W
There two main purposes paper:
first, clarification extension known results
computation recursive programs, emphasis
difference between theoretical
practical approaches; second, presentation examination
various known methods proving properties
recursive programs. Discussed detail two
powerful inductive methods computational induction
structural induction, including examples their applications.
.B
CACM August, 1973
.A
Manna, Z.
Nes, S.
Vuillemin, J.
.K
recursive programs, least fixed point, computational
induction, structural induction
.C
4.2 5.23 5.24
.N
CA730817 JB January 23, 1978 10:24 AM
.X
2326 4 2457
2411 4 2457
2457 4 2457
2457 4 2457
2842 4 2457
2903 4 2457
2192 5 2457
2326 5 2457
2457 5 2457
2457 5 2457
2457 5 2457
2981 5 2457
3030 5 2457
3077 5 2457
3104 5 2457
210 6 2457
1834 6 2457
2060 6 2457
2247 6 2457
2356 6 2457
2457 6 2457
2457 6 2457
2457 6 2457
2457 6 2457
2651 6 2457
2683 6 2457
2958 6 2457
2972 6 2457
.I 2458
.T
Localization Roots Polynomial (Algorithm R429)
.B
CACM August, 1973
.A
Williams, E. J.
.N
CA730816 JB January 23, 1978 10:26 AM
.X
2458 5 2458
2458 5 2458
2458 5 2458
.I 2459
.T
Hu-Tucker Minimum Redundancy Alphabetic Coding Method (Algorithm R428)
.B
CACM August, 1973
.A
Byrne, J. G.
.N
CA730815 JB January 23, 1978 10:27 AM
.X
2346 4 2459
2459 4 2459
1114 5 2459
2459 5 2459
2459 5 2459
2459 5 2459
.I 2460
.T
Clenshaw-Curtis Quadrature (Algorithm R424)
.B
CACM August, 1973
.A
Good, A. J.
.N
CA730814 JB January 23, 1978 10:29 AM
.X
2460 5 2460
2460 5 2460
2460 5 2460
.I 2461
.T
Graph Plotter (Algorithm R412)
.B
CACM August, 1973
.A
Watkins, R. P.
.N
CA730813 JB January 23, 1978 10:30 AM
.X
2461 5 2461
2461 5 2461
2461 5 2461
.I 2462
.T
Efficient Prime Number Generator (Algorithm R357)
.B
CACM August, 1973
.A
DeMorgan, R. M.
.N
CA730812 JB January 23, 1978 10:31 AM
.X
2462 5 2462
2462 5 2462
2462 5 2462
.I 2463
.T
Complex Gamma Function (Algorithm R404,C404)
.B
CACM August, 1973
.A
Andrejkova, G.
Vinar, J.
.N
CA730811 JB January 23, 1978 10:33 AM
.X
2463 5 2463
2463 5 2463
2463 5 2463
.I 2464
.T
Complex Method Constrained Optimization [E4] (Algorithm A454)
.B
CACM August, 1973
.A
Richardson, J. A.
Kuester, J. L.
.K
optimization, constrained optimization, Box's algorithm
.C
5.41
.N
CA730810 JB January 23, 1978 10:34 AM
.X
2464 5 2464
2464 5 2464
2464 5 2464
.I 2465
.T
Gaussian Quadrature formulas Bromwich's
Integral [D1] (Algorithm A453)
.B
CACM August, 1973
.A
Piessens, R.
.K
Gaussian quadrature, Bromwich's integral, complex
integration, numerical inversion Laplace
transform
.C
5.16 5.13
.N
CA730809 JB January 23, 1978 10:37 AM
.X
2465 5 2465
2465 5 2465
2465 5 2465
.I 2466
.T
Enumerating Combinations m Out n Objects [G6] (Algorithm A452)
.B
CACM August, 1973
.A
Liu, C. N
Tang, D. T.
.K
permutations, combination
.C
5.30
.N
CA730808 JB January 23, 1978 10:39 AM
.X
2466 4 2466
2834 4 2466
3115 4 2466
2045 5 2466
2466 5 2466
2466 5 2466
2466 5 2466
2834 5 2466
3115 5 2466
907 6 2466
969 6 2466
2045 6 2466
2045 6 2466
2417 6 2466
2417 6 2466
2466 6 2466
2466 6 2466
2884 6 2466
579 6 2466
785 6 2466
.I 2467
.T
Chi-Square quantiles [G1] (Algorithm A451)
.B
CACM August, 1973
.A
Goldstein, R. B.
.K
Chi-square, asymptotic approximation, normal
deviate, chi-square deviate, degrees freedom
.C
5.12 5.5
.N
CA730807 JB January 23, 1978 10:41 AM
.X
2467 4 2467
2793 4 2467
1606 5 2467
2467 5 2467
2467 5 2467
2467 5 2467
.I 2468
.T
Rosenbrock Function Minimization [E4] (Algorithm A450)
.B
CACM August, 1973
.A
Machura, M.
Mulawa, A.
.K
function minimization, Rosenbrock's method
.C
5.19
.N
CA730806 JB January 23, 1978 10:43 AM
.X
2468 5 2468
2468 5 2468
2468 5 2468
.I 2469
.T
Petri Nets Speed Independent design
.W
Petri nets investigated one method
modeling speed independent asynchronous circuits.
study circuit realizations Petri nets leads
demonstration their usefulness modeling
speed independent operation. usefulness emphasized
design speed independent processor
modules developed investigation Petri net implementation.
.B
CACM August, 1973
.A
Misunas, D.
.K
speed independent asynchronous, Petri net
.C
6.1 6.33
.N
CA730805 JB January 23, 1978 10:46 AM
.X
2469 5 2469
2469 5 2469
2469 5 2469
.I 2470
.T
Fen-An Axiomatic Basis Program Semantics
.W
formal system presented which abstracts
notions data item, function, relation.
argued system more suitable than set
theory (or its derivatives) concise
accurate description program semantics. shown
system can used build composite
data types out simper ones operations rowing,
structuring, uniting. also demonstrated
completely new primitive types can introduced
into languages through mechanism singleton
data types. Both deterministic nondeterministic
functions shown definable system.
described local environment can modeled
data item imperative statements
can considered functions environment.
nature recursive functions briefly discussed,
technique presented which they can introduced
into system. technique contrasted
use paradoxical combinator, Y.
questions local global environments
various modes function calling parameter passing
touched upon. theory applied
proof several elementary theorems concerning semantics
assignment, conditional, iterative
statements. appendix included which presents
detail formal system governing webs fen,
abstractions used informally body paper.
.B
CACM August, 1973
.A
MacLennan, B. J.
.K
semantics, formal systems, lambda-calculus, extensible
languages, data types, modes, axioms, correctness,
formal language definition, formal description, data structures,
description languages, models computation
.C
4.22 5.21 5.24 5.26
.N
CA730804 JB January 23, 1978 11:01 AM
.X
1469 4 2470
1486 4 2470
1491 4 2470
1781 4 2470
2021 4 2470
2060 4 2470
2178 4 2470
2222 4 2470
2227 4 2470
2294 4 2470
2315 4 2470
2326 4 2470
2326 4 2470
2470 4 2470
2470 4 2470
2470 4 2470
2470 4 2470
2684 4 2470
2732 4 2470
2865 4 2470
2896 4 2470
2943 4 2470
3014 4 2470
3044 4 2470
3068 4 2470
3077 4 2470
3124 4 2470
3143 4 2470
1303 5 2470
1469 5 2470
1834 5 2470
2264 5 2470
2470 5 2470
2470 5 2470
2470 5 2470
.I 2471
.T
Learning Program Which Plays Partnership Dominoes
.W
learning program has been written BASIC
play four-player partnership dominoes. Because
dominoes game incomplete information, program
uses somewhat different principles artificial
intelligence those used programs games
complete information, such checkers, chess,
go. program constructed use "strategy
signature table" which classifies board situations
through interactions game parameters. Each entry
table contains adaptively determined
weights indicating advi sability various strategies.
Once chosen, strategy then employs probability
analysis linear polynomial evaluation choose
move. Our program wins approximately two-thirds
its games tournament situations, has defeated championship players.
.B
CACM August, 1973
.A
Smith, M. H.
.K
artificial intelligence, intelligence learning,
heuristic procedures, heuristic programming, game
playing, problem solving,dominoes, incomplete information,
machine learning, signature table, learning
programs, strategy learning
.C
3.62 3.64 3.66 3.69
.N
CA730803 JB January 23, 1978 11:09 AM
.X
2471 5 2471
2471 5 2471
2471 5 2471
.I 2472
.T
Minimal spanning Tree (Algorithm R422)
.B
CACM July,1973
.A
Kernighan, B. W.
.K
spanning tree, minimal spanning tree, Prim algorithm
.C
5.32
.N
CA730714 JB January 23, 1978 11:12 AM
.X
2472 5 2472
2472 5 2472
2472 5 2472
.I 2473
.T
Hidden-Line Plotting Program (Algorithm R420)
.B
CACM July, 1973
.A
Macleod, I. D. G.
Collins, A. M.
.K
hidden-line plot, surface plot
.C
4.9
.N
CA730713 JB January 23, 1978 11:14 AM
.X
2473 5 2473
2473 5 2473
2473 5 2473
.I 2474
.T
DIFSUB Solution Ordinary Differential Equations (Algorithm C407)
.B
CACM July, 1973
.A
Nikolai, P. J.
.K
differential equations, stiff differential
equations, boundary value problems
.C
5.17
.N
CA730712 JB January 23, 1978 11:16 AM
.X
2205 4 2474
2474 4 2474
2474 4 2474
2205 5 2474
2207 5 2474
2474 5 2474
2474 5 2474
2474 5 2474
.I 2475
.T
Solution Linear Programming Problems
0-1 Variables [H1] (Algorithm A449)
.B
CACM July, 1973
.A
Fiala, F.
.K
linear programming, zero-one variable
.C
5.41
.N
CA730711 JB January 23, 1978 11:19 AM
.X
2475 5 2475
2475 5 2475
2475 5 2475
.I 2476
.T
Equivalence Between AND/OR Graphs Context-Free Grammars
.B
CACM July, 1973
.A
Hall, P. A. V.
.K
artificial intelligence, AND/OR graphs,
language theory, context-free grammars
.C
3.60 3.64 5.23
.N
CA730710 JB January 23, 1978 11:21 AM
.X
2476 5 2476
2476 5 2476
2476 5 2476
.I 2477
.T
Multiple Exits Loop Without GOTO
.B
CACM July, 1973
.A
Bochmann, G. V.
.K
control structures, goto free programming,
multiple exits loops, exit statement
.C
4.20 4.22
.N
CA730709 JB January 23, 1978 11:23 AM
.X
2193 4 2477
2326 4 2477
2477 4 2477
2541 4 2477
2594 4 2477
3004 4 2477
2477 5 2477
2477 5 2477
2477 5 2477
2574 5 2477
2709 5 2477
3186 5 2477
1425 6 2477
2138 6 2477
2204 6 2477
2456 6 2477
2477 6 2477
2477 6 2477
.I 2478
.T
Computer Science-Seminars Undergraduates
.B
CACM July, 1973
.A
Kandel, A.
.K
education, computer science, curriculum, imprecise
synthesis, fuzzy educational structure
.C
1.52 6.0
.N
CA730708 JB January 23, 1978 11:24 AM
.X
1413 4 2478
1654 4 2478
1720 4 2478
1771 4 2478
1927 4 2478
2147 4 2478
2163 4 2478
2345 4 2478
2478 4 2478
2478 4 2478
2478 4 2478
2594 4 2478
2852 4 2478
2899 4 2478
3003 4 2478
3130 4 2478
1205 5 2478
1771 5 2478
2329 5 2478
2478 5 2478
2478 5 2478
2478 5 2478
3003 5 2478
1659 6 2478
1678 6 2478
1927 6 2478
1945 6 2478
2097 6 2478
2147 6 2478
2163 6 2478
2187 6 2478
2329 6 2478
2345 6 2478
2367 6 2478
2407 6 2478
2478 6 2478
2479 6 2478
2480 6 2478
2538 6 2478
.I 2479
.T
Curriculum Recommendations Graduate Professional
Programs Information Systems: Recommended
Addendum Information Systems Administration
.W
addendum Report ACM Curriculum
Committee Computer Education Management
proposed. proposed addendum include curriculum
course Information Systems administration.
important two reasons: (1) systems designer
must understand administrative framework
which he must operate work effectively, (2)
important objective curriculum recommendations
prepare future manager computer activity.
felt importance these two
reasons justifies addition recommended course.
course outlined format
original report.
.B
CACM July, 1973
.A
McFarlan, F. W.
Nolan, R. L.
.K
education, management information systems, information
systems administration, information systems
management, computer management
.C
1.52 3.51
.N
CA730707 JB January 23, 1978 12:30 PM
.X
2479 4 2479
2020 5 2479
2479 5 2479
2479 5 2479
2479 5 2479
2852 5 2479
3003 5 2479
1417 6 2479
1659 6 2479
1678 6 2479
1771 6 2479
1927 6 2479
1945 6 2479
2097 6 2479
2147 6 2479
2163 6 2479
2187 6 2479
2329 6 2479
2345 6 2479
2345 6 2479
2367 6 2479
2387 6 2479
2407 6 2479
2478 6 2479
2479 6 2479
2479 6 2479
2480 6 2479
2538 6 2479
.I 2480
.T
Teaching "About Programming"
.W
paper presents goals organization
course programming designed provide
entering students graduate program cultural
enrichment their professional lives.
students expected have taken least two programming
courses prior one and, therefore,
familiar least two programming languages,
both students users. Teaching someone
program similar teaching him play musical
instrument: neither skill can taught-they
must learned. However, teacher still serves
several vital purposes: present set rules
producing well-formed utterances; offer numerous
demonstrations his own skill; function
involved critic. Finally, teacher
source information process which
student involved.
.B
CACM July, 1973
.A
Rosin, R. F.
.K
education, programming concepts, professionalism
.C
1.52 2.2 4.22
.N
CA730706 JB January 23, 1978 12:36 PM
.X
2319 4 2480
2480 4 2480
2480 4 2480
2594 4 2480
2709 4 2480
2738 4 2480
2867 4 2480
2939 4 2480
2972 4 2480
3004 4 2480
3030 4 2480
3155 4 2480
3155 4 2480
2204 5 2480
2247 5 2480
2480 5 2480
2480 5 2480
2480 5 2480
3003 5 2480
1659 6 2480
1678 6 2480
1927 6 2480
1945 6 2480
2097 6 2480
2147 6 2480
2163 6 2480
2187 6 2480
2329 6 2480
2345 6 2480
2367 6 2480
2407 6 2480
2478 6 2480
2479 6 2480
2480 6 2480
2538 6 2480
.I 2481
.T
Distribution Program Primary Fast Buffer Storage
.W
virtual memory computer system fast
buffer (cache) memory between primary memory
central processing unit considered. optimal
distribution program between buffer
primary memory studied using program's lifetime
function. Expressions distribution
program which maximizes useful fraction
cost-time integral primary fast buffer
storage obtained swapping nonswapping buffer management policies.
.B
CACM July 1973
.A
Gelenbe, E.
.K
cache, virtual memory, lifetime function, cost-time integral, fast buffer
.C
4.3 6.2 6.3
.N
CA730705 JB January 23, 1978 12:41 PM
.X
2374 4 2481
2481 4 2481
2669 4 2481
2863 4 2481
3016 4 2481
3052 4 2481
1901 5 2481
2481 5 2481
2481 5 2481
2481 5 2481
.I 2482
.T
Mixed Solutions Deadlock Problem
.W
Mixtures detection, avoidance, prevention
provide more effective practical solutions
deadlock problem than any one these alone.
individual techniques can tailored subproblems
resource allocation still operate together
prevent deadlocks. paper presents method,
based concept hierarchical operating
system, constructing appropriate mixtures
suggests appropriate subsystems most frequently
occurring resource allocation problems
.B
CACM July, 1973
.A
Howard, J. H. Jr.
.K
deadlocks, resource allocation, operating systems,
multiprogramming, hierarchical systems
.C
4.30 4.32
.N
CA730704 JB January 23, 1978 12:46 PM
.X
1828 4 2482
1854 4 2482
1877 4 2482
1960 4 2482
2150 4 2482
2228 4 2482
2280 4 2482
2280 4 2482
2317 4 2482
2319 4 2482
2377 4 2482
2342 4 2482
2376 4 2482
2379 4 2482
2379 4 2482
2379 4 2482
2424 4 2482
2482 4 2482
2482 4 2482
2482 4 2482
2500 4 2482
2618 4 2482
2632 4 2482
2704 4 2482
2723 4 2482
2738 4 2482
2740 4 2482
2740 4 2482
2741 4 2482
2851 4 2482
2867 4 2482
2920 4 2482
3184 4 2482
1749 5 2482
1877 5 2482
2228 5 2482
2482 5 2482
2482 5 2482
2482 5 2482
.I 2483
.T
COKO III: Cooper-Koz Chess Program
.W
COKO III chess player written entirely
Fortran. IBM 360-65, COKO III plays
minimal chess game rate .2 sec cpu time
per move, level close lower chess club
play. selective tree searching procedure controlled
tactical chess logistics allows deployment
multiple minimal game calculations achieve some optimal
move selection. tree searching algorithms
heart COKO's effectiveness, yet they
conceptually simple. addition, interesting
phenomenon called tree searching catastrophe has plagued
COKO's entire development just troubles
human player. Standard exponential growth curbed
large extent definition trimming
Fischer set. clear distinction between tree
pruning selective tree searching also made.
Representation chess environment described
along strategical preanalysis procedure
maps Lasker regions. Specific chess algorithms
described which could used command
structure anyone desiring do some chess program
experimentation. comparison made some
mysterious actions human players COKO III.
.B
CACM July, 1973
.A
Kozdrowicki, E. W.
Cooper, D. W.
.K
artificial intelligence, selective searching, tree
searching, tree searching catastrophe, heuristic
programming,chess algorithms, Lasker regions, Fischer
set, minimal chess game, strategical, tactical,
tactical control mode, game playing, alpha beta, machine
learning, concept formation, command structure,
minimax, computer chess tournament, auxiliary minimal game
.C
3.60 3.66 3.74 4.22
.N
CA730703 JB January 23, 1978 1:07 PM
.X
2483 5 2483
2483 5 2483
2483 5 2483
.I 2484
.T
Note Information Organization Storage
.W
Since logical structure data base
can represented tree graph, quite
natural us view process designing data
base constructing tree graph.
general method constructing such tree graph
provided. There three important elements
general construction method; namely, set
binary relations, algorithm constructing
subsets set, algorithm selecting
element given set objects. use
different relations algorithms results different
information structures, list, tree, ring,
etc. Thus problem information organization
storage reduced defining relations
formulating algorithms under given set constraints.
results presented may valuable
designers useful design concepts, may serve
basis developing formal theory subject.
.B
CACM July, 1973
.A
Huang, J. C.
.K
data base, data-base management, information retrieval,
information structure, file organization,
storage allocation, tree, graph
.C
3.70 3.73 3.74 5.32
.N
CA730702 JB January 23, 1978 1:14 PM
.X
2484 5 2484
2484 5 2484
2484 5 2484
.I 2485
.T
Managing Computer Resource: Stage Hypothesis
.W
Based study expenditures data processing,
descriptive stage hypothesis presented.
suggested planning, organizing, controlling
activities associated managing
computer resource change character over period
time, evolve patterns roughly
correlated four stages computer budget: Stage
(computer acquisition), Stage II (intense system
development), Stage III (proliferation controls),
Stage IV (user/service orientation). Each stage
described related individual tasks managing computer resource.
.B
CACM July, 1973
.A
Nolan, R. L.
.K
computer management, computer budget, computer expenditures,
stage hypothesis, planning, organizing,
control, computer resource
.C
2.41 2.43 3.50
.N
CA730701 JB January 23,1978 1:23 PM
.X
2485 5 2485
2485 5 2485
2485 5 2485
2977 5 2485
2985 5 2485
3011 5 2485
3035 5 2485
2075 6 2485
2302 6 2485
2345 6 2485
2485 6 2485
2485 6 2485
2485 6 2485
2485 6 2485
.I 2486
.T
Computer Photocomposition Technical Text
.W
computer assisted typesetting means
photocomposition, special problems arise highly
technical material such mathematical formulas. New
solutions several these problems have been
devised information system American Institute
Physics. They include: representation
special characters (foreign alphabets, mathematical
symbols, etc.) not available input keyboards
photocomposer; generation such symbols,
e.g. overprinting; precise positioning
accent marks (floating diacritics); line breaks,
i.e. words formulas placed partly end
one line partly beginning next;
certain aspects error correction.
.B
CACM June, 1973
.A
Alt, F. L.
Yuni Kirk, J.
.K
photocomposition, typesetting, printing, graphics, text processing
.C
3.79 3.82
.N
CA730614 JB January 23, 1978 1:30 PM
.X
2486 5 2486
2486 5 2486
2486 5 2486
.I 2487
.T
Cubic Spline solutions Fourth-order Boundary Value Problems
.W
cubic spline approximation fourth-order
differential equation y''''+p(x)y''+q(x)y'+r(x)y=t(x)
shown reduce solution five-term recurrence
relationship. some special cases
approximation shown simply related finite
difference representation local truncation
error order (y/720)delta^8.
.B
CACM June, 1973
.A
Hoskins, W. D.
.K
cubic spline, differential equations, boundary value problem
.C
5.13 5.17
.N
CA730613 JB January 23, 1978 1:44 PM
.X
2487 5 2487
2487 5 2487
2487 5 2487
.I 2488
.T
Least Squares Piecewise Cubic Curve Fitting
.W
matrices involved linear least squares
formulation determined problem
fitting piecewise cubic functions, those possessing
continuous derivative, arrays planar data.
.B
CACM June, 1973
.A
Ferguson, J.
Staley, P. A.
.K
curve fitting, data reduction, function
approximation, approximation splines
.C
5.13
.N
CA730612 JB January 23, 1978 1:47 PM
.X
2488 5 2488
2488 5 2488
2488 5 2488
.I 2489
.T
Number Multiply-Restricted Partitions [A1] (Algorithm A448)
.B
CACM June, 1973
.A
Beyer, T.
Swinehart, D. F.
.K
partitions, enumeration, change making, energy-level
degeneracies, molecular vibrational energy-levels
.C
3.13 5.30
.N
CA730611 JB January 23, 1978 1:49 PM
.X
2104 4 2489
2489 4 2489
2489 4 2489
1219 5 2489
2104 5 2489
2489 5 2489
2489 5 2489
2489 5 2489
.I 2490
.T
Efficient Algorithms Graph Manipulation [H] (Algorithm A447)
.W
Efficient algorithms presented partitioning
graph into connected components, biconnected
components simple paths. algorithm partitioning
graph into simple paths iterative
each iteration produces new path between two
vertices already paths. (The start vertex can
specified dynamically.) If V number vertices
E number edges, each algorithm
requires time space proportional max (V,E)
executed random access computer.
.B
CACM June, 1973
.A
Hopcroft, J.
Tarjan, R.
.K
graphs,analysis algorithms, graph manipulation
.C
5.32
.N
CA730610 JB January 23, 1978 1:55 PM
.X
2490 4 2490
2177 5 2490
2490 5 2490
2490 5 2490
2490 5 2490
.I 2491
.T
Threaded Code
.W
concept "threaded code" presented
alternative machine language code. Hardware
software realizations given. software
realized interpretive code not needing
interpreter. Extensions optimizations mentioned.
.B
CACM June, 1973
.A
Bell, J. R.
.K
interpreter, machine code, time tradeoff, space
tradeoff, compiled code, subroutine calls, threaded
code
.C
4.12 4.13 6.33
.N
CA730609 JB January 23, 1978 2:05 PM
.X
2491 5 2491
2491 5 2491
2491 5 2491
2748 5 2491
3144 5 2491
1471 6 2491
2298 6 2491
2491 6 2491
2491 6 2491
2597 6 2491
2624 6 2491
2625 6 2491
2632 6 2491
.I 2492
.T
Development Decision Tables via
Parsing Complex Decision Situations
.W
new parsing technique proposed which allows
parsing based only syntactical characteristics
decision problem. requires description
problem decision grid chart format
allows development decision tables within defined
limits avoiding, least minimizing,
repetition conditions actions resulting tables.
.B
CACM June, 1973
.A
Strunz, H.
.K
decision tables, parsing, decision grid chart,problem analysis
.C
4.0 4.1 4.2
.N
CA730608 JB January 23, 1978 2:10 PM
.X
2220 4 2492
2492 4 2492
2518 4 2492
2598 4 2492
2616 4 2492
2726 4 2492
1548 5 2492
2492 5 2492
2492 5 2492
2492 5 2492
.I 2493
.T
Optimum Data Base Reorganization Points
.W
certain data base organization schemes
cost per access may increase due structural
inefficiencies caused updates. reorganizing
data base cost per access may reduced.
However, high cost reorganization prohibits
frequent reorganizations. paper examines
strategies selecting optimum reorganization points.
.B
CACM June, 1973
.A
Shneiderman, B.
.K
data base, reorganization, files, information retrieval
.C
3.73
.N
CA730607 JB January 23, 1978 2:14 PM
.X
2455 4 2493
2493 4 2493
2889 4 2493
2968 4 2493
2388 5 2493
2493 5 2493
2493 5 2493
2493 5 2493
2816 5 2493
3129 5 2493
2493 6 2493
2493 6 2493
2751 6 2493
2816 6 2493
2829 6 2493
.I 2494
.T
Computer Generated Aid Cluster Analysis
.W
computer generated graphic method, which
can used conjunction any hierarchical
scheme cluster analysis, described illustrated.
graphic principle used representation
elements data matrix similarities dissimilarities
computer printed symbols (of character
overstrikes) various shades darkness,
dark symbol corresponds small dissimilarity.
plots, applied data matrix before clustering
rearranged matrix after clustering,
show glance whether clustering brought forth any
distinctive clusters. well-known set data
consisting correlations 24 psychological tests
used illustrate comparison groupings
four methods factor analysis two methods cluster analysis.
.B
CACM June, 1973
.A
Ling, R. F.
.K
computer graphics, cluster analysis, numerical
taxonomy, hierarchical clustering, factor analysis
.C
3.10 3.30 3.36 4.49
.N
CA730606 JB January 23, 1978 2:20 PM
.X
2494 5 2494
2494 5 2494
2494 5 2494
.I 2495
.T
Adapting Optimal Code Generation Arithmetic
Expressions Instruction Sets Available
Present-Day Computers
.B
CACM June, 1973
.A
Stockhausen, P. F.
.K
arithmetic expressions, code generation, compilers,
object-code optimization, register assignment,
trees
.C
4.12 5.24 5.32
.N
CA730605 JB January 23, 1978 2:24 PM
.X
2495 5 2495
2495 5 2495
2495 5 2495
.I 2496
.T
Near-Optimality Shortest-Latency-Time-First
Drum Scheduling Discipline
.W
computer systems which practical
determine instantaneous drum position,
popular discipline determining sequence which
records accessed so-called
shortest-latency-time-first, SLTF, discipline.
collection varying-length records
accessed specified drum positions, known
SLTF discipline does not necessarily minimize
drum latency time. However, we show total
time access entire collection any
SLTF schedule never much drum revolution
longer than minimum latency schedule.
.B
CACM June, 1973
.A
Stone, H. S.
Fuller, S. H.
.K
drum scheduling, shortest-access-time-first, minimal
latency scheduling, shortest-latency-time-first
.C
4.31 4.41 6.35
.N
CA730604 JB January 23, 1978 3:12 PM
.X
2496 5 2496
2496 5 2496
2496 5 2496
2628 5 2496
3097 5 2496
2375 6 2496
2496 6 2496
2496 6 2496
.I 2497
.T
Synchronizing Processors Memory-Content-Generated Interrupts
.W
Implementations "Lock-Unlock" method
synchronizing processors multiprocessor
system usually require uninterruptable, memory-pause type instructions.
interlock scheme called read-interlock,
which does not require memory-pause instructions, has
been developed dual DEC PDP-10 system
real-time requirements. read-interlock method does
require special"read-interlock" instruction
repertoire processors special "read-interlock"
cycle repertoire memory
modules. processor examines "lock" (a memory
location) read-interlock instruction,
interrupted if lock already set; examining
lock immediately sets if not already
set (this event sequence read-interlock cycle).
Writing into lock clears it. Having processor
interrupted upon encountering set lock instead
branching advantageous if branch would have
resulted effective interrupt.
.B
CACM June, 1973
.A
Hill, J. C.
.K
interrupts,supervisors, monitors, debugging, parallel
processing, associative memories, microprogramming
.C
4.32 6.29
.N
CA730603 JB January 23, 1978 3:29 PM
.X
1458 4 2497
1523 4 2497
1603 4 2497
1698 4 2497
1747 4 2497
1748 4 2497
1854 4 2497
1877 4 2497
1960 4 2497
2377 4 2497
2378 4 2497
2497 4 2497
2497 4 2497
2534 4 2497
2558 4 2497
2625 4 2497
2632 4 2497
2840 4 2497
2941 4 2497
3105 4 2497
3144 4 2497
1471 5 2497
2182 5 2497
2497 5 2497
2497 5 2497
2497 5 2497
.I 2498
.T
Minimizing Wasted Space Partitioned Segmentation
.W
paged virtual memory system using finite
number page sizes considered. Two algorithms
assigning pages segments discussed. Both
these algorithm simple implement.
problem choosing page sizes minimize expected
value total wasted space internal fragmentation
page table, per segment, then solved
probability density function segment size which
may expressed convex combination Erlang densities.
.B
CACM June, 1973
.A
Gelenbe, E.
.K
dynamic storage allocation, virtual memory, paging,
multiple page sizes, fragmentation, segmentation
.C
4.0 4.3 4.32 6.34 8.3
.N
CA730602 JB January 23, 1978 3:38 PM
.X
2095 4 2498
2218 4 2498
2498 4 2498
2596 4 2498
2734 4 2498
2902 4 2498
2911 4 2498
3000 4 2498
1879 5 2498
2498 5 2498
2498 5 2498
2498 5 2498
2911 5 2498
1879 6 2498
273 6 2498
2435 6 2498
2498 6 2498
2734 6 2498
2773 6 2498
2983 6 2498
.I 2499
.T
Efficient Multiprogramming Resource Allocation Accounting
.W
Although sometimes thought only component
time-sharing operation, multiprogramming
can involve broader questions resource allocation,
since fairness not required meet response
criterion. multiprogrammed system, may serve
maximal resource use unfair, example
holding input/output channel idle program
while completes small amount processor
usage, enabling further use channel. Several
applications principle given,
suggested multiprogramming executive might
dynamically adjust its allocation algorithms
gain efficiency. Allocation resources closely connected
accounting those resources, raising
problems repeatability, minimal uncharged overhead,
relative weighting charges dependent
resources. Since weightings may depend allocation
algorithms, these not arbitrary accounting
parameters. Often only repeatable accounting
one which omits extensive overhead paid,
should multiprogramming prove efficient, overcharges
result. Multiprogramming turns allocation
memory resource essential control other
resources. general suggestions allocation
accounting applied question, some
details provided case monitor which
controls virtual-memory machine.
.B
CACM June, 1973
.A
Hamlet, R. G.
.K
monitor, executive, multiprogramming, efficiency,
resource allocation, resource accounting
.C
4.32
.N
CA730601 JB January 23, 1978 3:51 PM
.X
1892 4 2499
1901 4 2499
2085 4 2499
2095 4 2499
2218 4 2499
2277 4 2499
2319 4 2499
2329 4 2499
2358 4 2499
2373 4 2499
2380 4 2499
2434 4 2499
2499 4 2499
2501 4 2499
2582 4 2499
2669 4 2499
2828 4 2499
2863 4 2499
2881 4 2499
2928 4 2499
2996 4 2499
3006 4 2499
3067 4 2499
1751 5 2499
2499 5 2499
2499 5 2499
2499 5 2499
3114 5 2499
1502 6 2499
2499 6 2499
2745 6 2499
.I 2500
.T
Practical Approach Managing Resources Avoiding Deadlocks
.W
Resource scheduling allocation can expensive
regard time space multiprogramming
time-sharing environments involving large numbers
tasks resources conflicting requirements.
Detection and/or prevention deadlocks can require
massive amounts additional overhead if efficient
usage resources maintained. resource
management program described which uses linked
lists along other techniques overcome large
portion overhead. program, which
currently running part large scale general purpose
operating system, keeps resources relatively
active but does not detect prevent all deadlocks
its implemented state. Certain changes, which
would permit more comprehensive levels deadlock
prevention/detection additional cost, have not
been incorporated running system due
infrequency deadlock situations.
.B
CACM May, 1973
.A
Frailey, D. J.
.K
deadlock, resource allocation, scheduling, resource
management, multiprogramming, time-sharing,
multiprocessing, deadly embrace
.C
4.30 4.32
.N
CA730520 JB January 23, 1978 4:03 PM
.X
2280 4 2500
2379 4 2500
2482 4 2500
2500 4 2500
2228 5 2500
2500 5 2500
2500 5 2500
2500 5 2500
.I 2501
.T
WYLBUR: Interactive Text Editing Remote Job Entry System
.W
WYLBUR comprehensive system manipulating
all kinds text, such computer programs,
letters, manuscripts, using typewriter terminals
connected computer. has facilities
remote job entry retrieval well facilities
text alignment justification. powerful
method addressing text content provided.
paper describes external appearance WYLBUR
well its internal structure. short description
major features ORVYL, general purpose
time-sharing system which operates conjunction WYLBUR, also included.
.B
CACM May, 1973
.A
Fajman, R.
Borgelt, J.
.K
text editing, time-sharing, on-line text editing,
interactive text editing, terminal, remote terminal,
terminal system, interactive terminal, remote job entry,
remote job retrieval, program preparation, document
preparation, data entry, content addressing
.C
3.70 3.79 4.10 4.19 4.41 4.43 4.49
.N
CA730519 JB January 23, 1978 4:11 PM
.X
1892 4 2501
1901 4 2501
2085 4 2501
2095 4 2501
2218 4 2501
2277 4 2501
2299 4 2501
2319 4 2501
2329 4 2501
2358 4 2501
2373 4 2501
2380 4 2501
2434 4 2501
2499 4 2501
2501 4 2501
2501 4 2501
2582 4 2501
2629 4 2501
2669 4 2501
2828 4 2501
2863 4 2501
2881 4 2501
2915 4 2501
2928 4 2501
2996 4 2501
3006 4 2501
3067 4 2501
3114 4 2501
1502 5 2501
1751 5 2501
2501 5 2501
2501 5 2501
2501 5 2501
2623 5 2501
2501 6 2501
2537 6 2501
.I 2502
.T
Comment Practical Aspects Computer Science Education
.B
CACM May, 1973
.A
Estell, R. G.
.K
education, computer engineering, computer
sciences curriculum, systems design
.C
1.52 6.0
.N
CA730518 JB January 23, 1978 4:23 PM
.X
2502 5 2502
2502 5 2502
2502 5 2502
.I 2503
.T
Another Comment Computer Music
.B
CACM May, 1973
.A
Wexelblat, R. L.
.N
CA730517 JB January 23, 1978 4:25 PM
.X
2503 5 2503
2503 5 2503
2503 5 2503
.I 2504
.T
Concerning Music Computer Composition Computational Linguistics
.B
CACM May, 1973
.A
McMorrow, C. H.
.K
artificial intelligence, heuristic programming,
models cognitive processes, computer music,
computer composition,music theory
.C
3.44 3.65
.N
CA730516 JB January 23, 1978 4:27 PM
.X
2504 5 2504
2504 5 2504
2504 5 2504
.I 2505
.T
Reflection-Free Permutations, Rosary Permutations,
Adjacent Transposition Algorithms
.B
CACM May, 1973
.A
Roy, M. K.
.K
permutation, permutation generation, scheduling, combinatorial analysis
.C
5.39
.N
CA730515 JB January 23, 1978 4:29 PM
.X
2044 4 2505
2189 4 2505
2292 4 2505
2417 4 2505
2505 4 2505
2505 4 2505
2505 4 2505
2874 4 2505
2908 4 2505
2189 5 2505
2292 5 2505
2505 5 2505
2505 5 2505
2505 5 2505
2908 5 2505
521 5 2505
2505 6 2505
2884 6 2505
521 6 2505
.I 2506
.T
Sparse Matrix Package (Algorithm R408)
.B
CACM May, 1973
.A
Sale, R. H. J.
.K
matrix, sparse matrix, matrix manipulation, Fortran standards
.C
5.14
.N
CA730514 JB January 23, 1978 4:30 PM
.X
1613 4 2506
1646 4 2506
1900 4 2506
1955 4 2506
2025 4 2506
2154 4 2506
2365 4 2506
2506 4 2506
3060 4 2506
987 5 2506
2506 5 2506
2506 5 2506
2506 5 2506
.I 2507
.T
Exact Solution Linear Equations Using
Residue Arithmetic (Algorithm R406)
.B
CACM May, 1973
.A
Howell, J.
.K
residue arithmetic, symmetric residue, modulus,
mixed-radix representation, symmetric mixed-radix
representation, mixed radix conversion, prime number,
linear equations, Gaussian elimination, matrix
inversion, determinant, adjoint matrix, ill-condition
.C
3.5 5.14
.N
CA730513 JB January 23, 1978 4:34 PM
.X
2507 5 2507
2507 5 2507
2507 5 2507
.I 2508
.T
Increasing Efficiency Quicksort (Algorithm R402)
.B
CACM May, 1973
.A
Wheeler, R. E.
.K
sorting, quicksort
.C
3.73 4.49 5.31 5.6
.N
CA730512 JB January 23, 1978 4:35 PM
.X
2508 5 2508
2508 5 2508
2508 5 2508
.I 2509
.T
Minit Algorithm Linear Programming (Algorithm R333)
.B
CACM May, 1973
.A
Obradovic, D.
.N
CA730511 JB January 23, 1978 4:37 PM
.X
2509 5 2509
2509 5 2509
2509 5 2509
.I 2510
.T
Minit Algorithm Linear Programming (Algorithm R333)
.B
CACM May, 1973
.A
Holmgren, B.
Obradovic, D.
Kolm, A.
.N
CA730510 JB January 23, 1978 4:38 PM
.X
2510 5 2510
2510 5 2510
2510 5 2510
.I 2511
.T
Maxflow (Algorithm R324)
.B
CACM May, 1973
.A
Bayer, G.
.N
CA730509 JB January 23, 1978 4:39 PM
.X
2511 5 2511
2511 5 2511
2511 5 2511
.I 2512
.T
Coulomb Wave Functions (Algorithm R300)
.B
CACM May, 1973
.A
Vos, H.
.K
Coulomb wave functions, wave functions,
special functions, function evaluation
.C
5.12
.N
CA730508 JB January 23, 1978 4:41 PM
.X
2512 5 2512
2512 5 2512
2512 5 2512
.I 2513
.T
Nonrecursive List Moving Algorithm
.W
efficient, nonrecursive algorithm given
moving any LISP-type list. particular,
algorithm requires no storage other than new
nodes into which list moved, no
additional bits per node marking; algorithm
runs time proportional number nodes
list. original list structure destroyed moved.
.B
CACM May, 1973
.A
Reingold, E. M.
.K
list moving, list copying, list traversal, garbage collection LISP
.C
4.19 4.49
.N
CA730507 JB January 23, 1978 4:45 PM
.X
1869 4 2513
2156 4 2513
2361 4 2513
2513 4 2513
2513 4 2513
2665 4 2513
2723 4 2513
2736 4 2513
2855 4 2513
2855 4 2513
3074 4 2513
3106 4 2513
3106 4 2513
3112 4 2513
1549 5 2513
1972 5 2513
2513 5 2513
2513 5 2513
2513 5 2513
2855 5 2513
1549 6 2513
1826 6 2513
210 6 2513
1972 6 2513
2513 6 2513
2766 6 2513
2833 6 2513
2998 6 2513
.I 2514
.T
Array Grammar Programming System
.W
package Fortran programs has been developed
permits user interactively design
test array grammars. user can control rule
selection procedure derivation parse,
using weighted programming matrices; he also has choice
instance selection schemes (raster,random,
parallel). Examples given involving array languages
consisting simple geometrical patterns,
well language "neuron pictures."
.B
CACM May, 1973
.A
Mercer, A.
Rosenfeld, A.
.K
picture grammars, array grammars
.C
3.63 5.23 8.2
.N
CA730506 JB January 23, 1978 4:49 PM
.X
2514 5 2514
2514 5 2514
2514 5 2514
.I 2515
.T
Minimal Event-Node Network Project Precedence Relations
.W
procedure constructing minimal event-node
network represent set precedence
relations without parallel activities presented.
minimal event-node network event-node network
which both number nodes number arcs
minima preserve given precedence
relations Counterexamples given show
algorithm presented A. C. Fisher, J. S. Liebman,
G. L. Nemhauser (1968) produces event-node networks
which not minimal. Since our procedure includes
set-covering problem, time required may grow
exponentially number given activities.
.B
CACM May, 1973
.A
Corneil, D. G.
Gotlieb, C. C.
Lee, Y. M.
.K
network, project, event-node network, activity-node
network, minimal event-node network, dummy
activity, project precedence relations
.C
3.57 5.32 8.3
.N
CA730505 JB January 24, 1978 8:42 AM
.X
2515 4 2515
1723 5 2515
2515 5 2515
2515 5 2515
2515 5 2515
.I 2516
.T
Hierarchical Storage Information Retrieval
.W
probabilistic analysis employed determine
effect hierarchical storage organizations
information retrieval operations. data storage
hardware assumed consist n-levels
linearly connected memory hardware increasing data
access times increasing data storage capabilities.
system might, example, consist fast semiconductor
memory, computer core memory, extended core
storage, disk memory, data cells. Equations derived
predict effect such system
data access times using sequential files, random access files,
structured files employing multiple-hierarchical
linked lists.
.B
CACM May, 1973
.A
Salasin, J.
.K
information retrieval, hierarchical storage
.C
3.70 3.72 3.73 3.74 3.79 3.90 6.20 6.34
.N
CA730504 JB January 24, 1978 8:48 AM
.X
2516 5 2516
2516 5 2516
2516 5 2516
.I 2517
.T
Some Comments Use Ambiguous Decision
Tables Their Conversion Computer Programs
.W
paper comments upon recently published
work decision table translation using methods
similar rule-mask technique. applicability
these methods under various possible conventions
overall table meaning discussed, argued
there place both multi-rule
single-rule (or action set) convention decision tale usage.
.B
CACM May, 1973
.A
King, P. J. H.
Johnson, R. G.
.K
decision tables, systems analysis, programming
.C
3.50 3.59 4.19 4.29 4.49
.N
CA730503 JB January 24, 1978 8:56 AM
.X
2053 4 2517
2221 4 2517
2273 4 2517
2453 4 2517
2517 4 2517
2517 4 2517
2517 4 2517
2518 4 2517
2616 4 2517
2726 4 2517
2856 4 2517
3034 4 2517
3034 4 2517
1684 5 2517
2053 5 2517
2221 5 2517
2517 5 2517
2517 5 2517
2517 5 2517
2616 5 2517
3034 5 2517
931 6 2517
1548 6 2517
1684 6 2517
1684 6 2517
2053 6 2517
2517 6 2517
2517 6 2517
.I 2518
.T
Programming Questionnaire: Effective Way Use Decision Tables
.W
Programming questionnaire combines aspects
decision table programming general purpose
programming using decision tables construct application
program through selection certain
source statements predefined file. proposed
programming questionnairies useful
compromise between general special purpose programming
significant class large scale problems.
elements approach discussed
existing application described.
.B
CACM May, 1973
.A
Low, D. W.
.K
customizing, modeling, applications development,
programmer productivity, simulator generation,
automatic program generation, no reprogramming
.C
4.20 4.22 4.29
.N
CA730502 JB January 24, 1978 9:03 AM
.X
2053 4 2518
2220 4 2518
2492 4 2518
2517 4 2518
2518 4 2518
2518 4 2518
2598 4 2518
2616 4 2518
2616 4 2518
2726 4 2518
3034 4 2518
1548 5 2518
1684 5 2518
2518 5 2518
2518 5 2518
2518 5 2518
.I 2519
.T
Problem Communicating Complex Information
.W
nature difficulty involved communicating
mathematical results between scientists
using computer based information retrieval system
examined. problem analyzed terms
psychological information-processing processes,
turns out vicious circle effects
described. These include ways augmenting written
natural language various notational linguistic
devices, exhibition structure inherent
information we communicating, sophisticated
interactive system controlled computer.
.B
CACM May, 1973
.A
Pager, D.
.K
complex information, information, communication,
mathematics, proof, interactive system, language
.C
1.0 1.1 1.50 1.52 1.59 2.42 3.32 3.51 3.62 3.70 3.81
.N
CA730501 JB January 24, 1978 9:25 AM
.X
2519 4 2519
2390 5 2519
2519 5 2519
2519 5 2519
2519 5 2519
.I 2520
.T
Greatest Common Divisor n Integers Multipliers (Algorithm C386)
.B
CACM April, 1973
.A
Ragland, L. C.
Good, D. I.
.K
proof algorithms, greatest common divisor,
Euclidean algorithm, inductive assertion method
.C
3.15 4.42 5.10 5.24
.N
CA730408 JB January 24, 1978 9:27 AM
.X
2520 5 2520
2520 5 2520
2520 5 2520
.I 2521
.T
Ten Subroutines Manipulation
Chebyshev Series [C1] (Algorithm A446)
.B
CACM April, 1973
.A
Broucke, R.
.K
Chebyshev series, differentiation, integration,
curve fitting,approximations, negative powers
.C
5.12 5.13 5.16
.N
CA730407 JB January 24, 1978 9:29 AM
.X
2028 4 2521
2521 4 2521
2521 4 2521
2521 4 2521
3099 4 2521
2028 5 2521
2031 5 2521
2521 5 2521
2521 5 2521
2521 5 2521
2762 5 2521
3135 5 2521
2521 6 2521
.I 2522
.T
Design, Implementation, Evaluation Working Set Dispatcher
.W
behavior computer system largely
dependent upon algorithms employed allocate
system resources processes competing them.
Recent research time-sharing paging systems
has developed working set model program behavior,
source allocation strategy based
model has been proposed. Two implementations
along these principles have been reported, but
seems neither case have further results been
announced. report discusses design
implementation dispatcher based working set
principle, presents data permit analysis
its behavior, indicates future directions research
methods controlling computer system.
.B
CACM April, 1973
.A
Rodriguez-Rosell, J.
Dupuy, J. P.
.K
working set, dispatcher, scheduler, time-sharing
systems, resource allocation, software evaluation,
operating systems, supervisory systems
.C
4.31 4.32
.N
CA730406 JB January 24, 1978 9:36 AM
.X
2522 5 2522
2522 5 2522
2522 5 2522
2928 5 2522
1751 6 2522
2277 6 2522
2380 6 2522
2522 6 2522
2569 6 2522
.I 2523
.T
Region Coloring Technique Scene Analysis
.W
method converting picture into "cartoon"
"map" whose regions correspond differently
textured regions described. Texture edges
picture detected, solid regions surrounded
these (usually broken) edges "colored in" using
propagation process. resulting map cleaned
comparing region colors textures
corresponding regions picture, also
merging some regions others according criteria
based topology size. method has
been applied construction cloud cover maps
cloud cover pictures obtained satellites.
.B
CACM April, 1973
.A
Strong III, J. P.
Rosenfeld, A.
.K
picture processing, scene analysis, edge detection
.C
3.63 8.2
.N
CA730405 JB January 24, 1978 9:48 AM
.X
2523 5 2523
2523 5 2523
2523 5 2523
2980 5 2523
2523 6 2523
.I 2524
.T
Some Approaches Best-Match File Searching
.W
problem searching set keys
file find key which closest given
query key discussed. After "closest," terms
metric key space, suitably defined,
three file structures presented together their
corresponding search algorithms, which intended
reduce number comparisons required achieve
desired result. These methods derived
using certain inequalities satisfied metrics
graph-theoretic concepts. Some empirical results
presented which compare efficiency methods.
.B
CACM April, 1973
.A
Burkhard, W. A.
Keller, R. M.
.K
matching, file structuring, file searching, heuristics, best match
.C
3.73 3.79 4.9
.N
CA730404 JB January 24, 1978 9:54 AM
.X
1676 4 2524
1682 4 2524
1728 4 2524
1860 4 2524
1973 4 2524
2018 4 2524
2032 4 2524
2033 4 2524
2107 4 2524
2109 4 2524
2203 4 2524
2251 4 2524
2359 4 2524
2524 4 2524
2543 4 2524
2552 4 2524
2559 4 2524
2991 4 2524
3053 4 2524
1785 5 2524
2524 5 2524
2524 5 2524
2524 5 2524
2575 5 2524
2966 5 2524
3134 5 2524
1976 6 2524
2160 6 2524
2524 6 2524
2524 6 2524
2524 6 2524
2990 6 2524
.I 2525
.T
Statistical Study Accuracy Floating Point Number Systems
.W
paper presents statistical results
tests accuracy certain arithmetic
systems evaluating sums, products inner products,
analytic error estimates some
computations. arithmetic systems studied 6-digit
hexadecimal 22-digit binary floating point
number representations combined usual chop
round modes arithmetic various numbers
guard digits, modified round mode guard
digits. certain sense, arithmetic systems
differing only their use binary hexadecimal number
representations shown approximately
statistically equivalent inaccuracy. Further,
usual round mode guard digits shown
statistically superior accuracy usual chop
mode all cases save one. modified round
mode found superior chop mode all cases.
.B
CACM April, 1973
.A
Kuki, H.
Cody, W. J.
.K
error analysis, floating point arithmetic,
rounding, guard digits, number representation
.C
5.11 5.5 6.32
.N
CA730403 JB January 24, 1978 10:04 AM
.X
2525 4 2525
1474 5 2525
2525 5 2525
2525 5 2525
2525 5 2525
.I 2526
.T
Asymmetric Memory Hierarchies
.W
study presented some system
implications memory hierarchies which
backing secondary store has very small read time,
relative both time required writing
read time conventional backing storage
devices. Several analytic models introduced,
shown such hierarchies may operate
ways which differ those more conventional
hierarchies. particular, shown may not
necessary multiprogram such situation.
past, backing storage devices have been roughly
symmetric respect their read write
times. situation may not continue, several
devices currently under development which may
have very small read-time/write-time ratio. study
places particular emphasis one such system-the
RCA read/write holographic optical memory.
.B
CACM April, 1973
.A
Williams, J.G.
.K
asymmetric memory hierarchy, demand paging, holographic
optical memory, memory device, memory hierarchy,
paging, storage device, storage hierarchy, virtual memory
.C
4.3 4.32 5.2 6.2 6.34
.N
CA730402 JB January 24, 1978 10:15 AM
.X
1892 4 2526
1924 4 2526
2095 4 2526
2218 4 2526
2297 4 2526
2374 4 2526
2526 4 2526
2667 4 2526
2668 4 2526
2862 4 2526
2863 4 2526
1728 5 2526
2526 5 2526
2526 5 2526
2526 5 2526
.I 2527
.T
Implementation High Level Language Machine
.W
Computing machines which directly execute
statements high level language have been
proposed past. report describes actual
implementation such machine: computer
whose "machine language" APL. machine fully
operational correctly executes almost all
APL operations scalars, vectors, arrays.
machine automatically allocates memory, executes
statements, calls functions, converts numbers one
type another, checks subscripts, automatically
detects many types programmer errors.
.B
CACM April, 1973
.A
Hassitt, A.
Lageschulte, J. W.
Lyon, L. E.
.K
computer architecture, high level language machine,
emulators, microprogramming, interpreters,
execution speed, APL
.C
4.1 6.2
.N
CA730401 JB January 24, 1978 10:21 AM
.X
2202 4 2527
2527 4 2527
1542 5 2527
2527 5 2527
2527 5 2527
2527 5 2527
.I 2528
.T
Binary Pattern Reconstruction Projections [Z] (Algorithm R445)
.B
CACM March, 1973
.A
Lau, J.
.K
pattern reconstruction, image reconstruction,
data compression, picture processing
.C
3.63 5.30
.N
CA730311 JB January 24, 1978 10:22 AM
.X
2528 5 2528
2528 5 2528
2528 5 2528
.I 2529
.T
Binary Pattern Reconstruction Projections [Z] (Algorithm A445)
.B
CACM March, 1973
.A
Chang, S.
.K
pattern reconstruction, image reconstruction,
data compression, picture processing
.C
3.63 5.30
.N
CA730310 JB January 24, 1978 10:25 AM
.X
2142 4 2529
2529 4 2529
2231 5 2529
2529 5 2529
2529 5 2529
2529 5 2529
.I 2530
.T
Algorithm Extracting Phrases
Space-Optimal Fashion [Z] (Algorithm A444)
.B
CACM March, 1973
.A
Wagner, R. A.
.K
information retrieval, coding, text compression
.C
3.70 5.6
.N
CA730309 JB January 24, 1978 10:26 AM
.X
1973 4 2530
1992 4 2530
2138 4 2530
2203 4 2530
2251 4 2530
2530 4 2530
2530 4 2530
2537 4 2530
2543 4 2530
2559 4 2530
2573 4 2530
2623 4 2530
2819 4 2530
2991 4 2530
3053 4 2530
3083 4 2530
2107 5 2530
2530 5 2530
2530 5 2530
2530 5 2530
2537 5 2530
2107 6 2530
2530 6 2530
.I 2531
.T
Graduate Education: Ph.D. Glut
.B
CACM March, 1973
.A
Payne, W. H.
.K
graduate education, Ph.D. production, accreditation
.C
1.5 2.2 2.3
.N
CA730308 JB January 24, 1978 10:28 AM
.X
2531 5 2531
2531 5 2531
2531 5 2531
2662 5 2531
2531 6 2531
.I 2532
.T
Harrison's Substring Testing Technique
.B
CACM March, 1973
.A
Bookstein, A.
.K
string, substring, hashing, information storage retrieval
.C
3.74 5.30 5.5
.N
CA730307 JB January 24, 1978 10:30 AM
.X
2532 4 2532
2631 4 2532
2746 4 2532
3001 4 2532
2139 5 2532
2532 5 2532
2532 5 2532
2532 5 2532
2631 5 2532
2139 6 2532
2532 6 2532
.I 2533
.T
Gray Code +- Sign Sequence
+-f (+-f(+-f(...+-f(x)...))) Ordered
.B
CACM March, 1973
.A
Salzer, H. E.
.K
Gray code, sign sequences, ordering, positive
monotonic functions, binary system, Galois sum
.C
5.10
.N
CA730306 JB January 24, 1978 10:35 AM
.X
2533 4 2533
2394 5 2533
2533 5 2533
2533 5 2533
2533 5 2533
.I 2534
.T
Design Implementation Diagnostic Compiler PL/I
.W
PL/C compiler dialect PL/I.
design objective provide maximum degree
diagnostic assistance batch processing environment.
most part assistance implicit
provided automatically compiler. most remarkable
characteristic PL/C its perseverance-it
completes translation every program submitted
continues execution until user-established error
limit reached. requires compiler repair
errors encountered during both translation
execution, design PL/C dominated
consideration. PL/C also introduces several
explicit user-controlled facilities program testing.
accommodate these extensions PL/I without
abandoning compatibility IBM compiler PL/C permits
"pseudo comments"-constructions whose contents
can optionally considered either source test comment.
spite diagnostic effort PL/C
fast efficient processor. effectively demonstrates
compilers can provide better diagnostic
assistance than customarily offered, even sophisticated
source language employed,
assistance need not prohibitively costly.
.B
CACM March, 1973
.A
Conway, R. W.
Wilcox, T. R.
.K
compilers, debugging, PL/I, programming languages
.C
1.5 4.12 4.42
.N
CA730305 JB January 24, 1978 10:45 AM
.X
1179 4 2534
1288 4 2534
1323 4 2534
1358 4 2534
1380 4 2534
1544 4 2534
1646 4 2534
1665 4 2534
1781 4 2534
1781 4 2534
1787 4 2534
1989 4 2534
2111 4 2534
2112 4 2534
2182 4 2534
2251 4 2534
2497 4 2534
2534 4 2534
2534 4 2534
2534 4 2534
2534 4 2534
2534 4 2534
2534 4 2534
2534 4 2534
2541 4 2534
2543 4 2534
2556 4 2534
2556 4 2534
2559 4 2534
2650 4 2534
2650 4 2534
2698 4 2534
2708 4 2534
2708 4 2534
2733 4 2534
2770 4 2534
2820 4 2534
2887 4 2534
3053 4 2534
3073 4 2534
3083 4 2534
3155 4 2534
1787 5 2534
1959 5 2534
1973 5 2534
2111 5 2534
2182 5 2534
2534 5 2534
2534 5 2534
2534 5 2534
2708 5 2534
2820 5 2534
2971 5 2534
3045 5 2534
799 5 2534
830 5 2534
1477 6 2534
1477 6 2534
1491 6 2534
1491 6 2534
1787 6 2534
1835 6 2534
1974 6 2534
2111 6 2534
2534 6 2534
2534 6 2534
2534 6 2534
2534 6 2534
2556 6 2534
680 6 2534
799 6 2534
.I 2535
.T
Effects Multiplexing Computer-Communications System
.W
study made way which asynchronous
time division multiplexing changes stochastic
nature arrival process user computer
and, consequently, affects performance
time-shared computer-communications system.
concluded while, certain values system
parameters, there noticeable improvement
performance computer (model), sense
time-shared scheduling delays reduced, these
improvements offset transmission delays
imposed multiplexing so there may little
no change computer-communications system
performance. Analytical simulation results
based model computer-communications
system being M/D/1 queue (the multiplexor) tandem
single exponential server (the computer).
Analytical results include general description
output process M/D/1 queue conditions
under which output process approximately Poisson.
.B
CACM March, 1973
.A
Pack, C. D.
.K
computer communications, time-sharing, multiplexing,
scheduling algorithms, operating systems
.C
3.80 3.81 6.20
.N
CA730304 JB January 24, 1978 11:13 AM
.X
2535 5 2535
2535 5 2535
2535 5 2535
.I 2536
.T
Telecommunications Using Front-End Minicomputer
.W
use front-end minicomputer provide
varied remote terminal access large scale
computer considered. problems embedding
telecommunications I/O within operating system
discussed, shown decentralization
intelligence acquired front-end processing
vastly simplifies problem. specific implementation
discussed emphasis main processor-minicomputer
link, hardware-software implementation, effect
main processor operating system,
assessment advantages over hard wired line controller.
.B
CACM March, 1973
.A
Feinroth, Y.
Franceschini, E.
Goldstein, M.
.K
telecommunications, minicomputer, front-end
processor, remote job entry, remote terminals
.C
3.81 4.32 4.41
.N
CA730303 JB January 24, 1978 11:23 AM
.X
1657 4 2536
2080 4 2536
2357 4 2536
2536 4 2536
1523 5 2536
2536 5 2536
2536 5 2536
2536 5 2536
2919 5 2536
2536 6 2536
2593 6 2536
2629 6 2536
.I 2537
.T
Common Phrases Minimum-Space Text Storage
.W
method saving storage space text
strings, such compiler diagnostic messages,
described. method relies hand selection
set text strings which common one more
messages. These phrases then stored only once.
storage technique gives rise mathematical
optimization problem: determine each message should
use available phrases minimize its storage
requirement. problem nontrivial phrases
which overlap exist. However, dynamic programming
algorithm presented which solves problem time
which grows linearly number characters
text. Algorithm 444 applies paper.
.B
CACM March, 1973
.A
Wagner, R. A.
.K
diagnostic messages, error messages, common phrases,
minimum space, text storage, optimization,
dynamic programming
.C
3.73 4.10 5.41
.N
CA730302 JB January 24, 1978 1:12 PM
.X
1973 4 2537
1992 4 2537
2138 4 2537
2203 4 2537
2251 4 2537
2530 4 2537
2537 4 2537
2537 4 2537
2543 4 2537
2559 4 2537
2573 4 2537
2991 4 2537
3053 4 2537
3083 4 2537
2107 5 2537
2530 5 2537
2537 5 2537
2537 5 2537
2537 5 2537
2623 5 2537
2819 5 2537
2107 6 2537
2501 6 2537
2537 6 2537
2537 6 2537
2537 6 2537
.I 2538
.T
Computer Science Course Program Small Colleges
.W
ACM Subcommittee Small College Programs
Committee Curriculum Computer Science
(CCCS) appointed 1969 consider unique
problems small colleges universities,
make recommendations regarding computer science programs
such schools. report, authorized
both subcommittee (CCCS), supplies set
recommendations courses necessary resources.
Implementation problems discussed, specifically
within constraints limited faculty
purposes satisfying wide variety objectives.
Detailed description four courses given;
suggestions made more advanced work;
extensive library list included.
.B
CACM March, 1973
.A
Austing, R. H.
Engel, G. L.
.K
computer science education, course proposals, small
colleges, programming course, social implications
course, computer organization course, file organization course, bibliographies
.C
1.52
.N
CA730301 JB January 24, 1978 1:22 PM
.X
2538 5 2538
2538 5 2538
2538 5 2538
2899 5 2538
3003 5 2538
1659 6 2538
1678 6 2538
1771 6 2538
1927 6 2538
1945 6 2538
2097 6 2538
2147 6 2538
2163 6 2538
2187 6 2538
2329 6 2538
2345 6 2538
2367 6 2538
2407 6 2538
2478 6 2538
2479 6 2538
2480 6 2538
2538 6 2538
2538 6 2538
.I 2539
.T
Solution Transcendental Equation w*exp(w)=x [C5] (Algorithm A443)
.B
CACM February, 1973
.A
Fritsch, F. N.
Shafer, R. E.
Crowley,W. P.
.K
transcendental function evaluation, solution transcendental equation
.C
5.12 5.15
.N
CA730209 JB January 24, 1978 1:26 PM
.X
2539 5 2539
2539 5 2539
2539 5 2539
.I 2540
.T
Properties Working Set Model (Corrigendum)
.B
CACM February, 1973
.A
Denning, P. J.
Schwartz, S. C.
.N
CA730208 JB January 24, 1978 1:28 PM
.X
2540 5 2540
2540 5 2540
2540 5 2540
.I 2541
.T
Overview ISPL Computer System Design
.W
paper explores advantages concurrent
design language, operating system,
machine (via microcode) create interactive programming
laboratory. describes synergistic
effect freedom move alter features
one these domains another has had
design system (which has not been implemented).
freedom simplified both incremental compilation
system's addressing structure, centralized
communication mechanisms enabling construction
hierarchical subsystems. also suggested important
new concept operating systems: separation
scheduling maintenance functions resource
allocation. separation enables incorporation
new scheduling algorithms (decision do) without
endangering system integration (correctly
performing scheduling decisions).
.B
CACM February, 1973
.A
Balzer, R. M.
.K
concurrent design, operating-system, scheduling,
interprogram communication, incremental compilation,
virtual addressing, debugging, hierarchical subsystems
.C
4.0 4.13 4.22 4.30 4.32 4.41 4.42 6.20
.N
CA730207 JB January 24, 1978 1:59 PM
.X
1323 4 2541
1358 4 2541
1380 4 2541
1665 4 2541
1781 4 2541
1787 4 2541
1989 4 2541
2112 4 2541
2193 4 2541
2326 4 2541
2477 4 2541
2534 4 2541
2541 4 2541
2541 4 2541
2594 4 2541
2698 4 2541
2733 4 2541
2820 4 2541
3004 4 2541
3073 4 2541
3155 4 2541
2541 5 2541
2541 5 2541
2541 5 2541
3186 5 2541
799 5 2541
.I 2542
.T
Software Design Evaluation System
.W
critical failure current software system
design implementation methodology
performance proposed design not evaluated
before actually implemented. paper
reasons failure explored, new methodology
which overcomes many difficulties
proposed. system which integrates performance evaluation
design implementation described.
system based simple, high level language
which used describe evolving system
all stages its development. source language
description used direct input performance
analysis simulation routines. Using performance
information obtained these routines
feedback, problems which adversely affect performance
detected early enough so they can
corrected without costly major reimplementation proposed system.
.B
CACM February, 1973
.A
Graham, R. M.
Clancy, G. J. Jr.
DeVaney, D. B.
.K
operating system development, language processing
software evaluation, compilers, system programming,
supervisory systems, debugging, program maintenance,
modeling, system integration, simulation
.C
4.0 4.12 4.22 4.30 4.42 4.43 8.1
.N
CA730206 JB January 24, 1978 2:07 PM
.X
2542 5 2542
2542 5 2542
2542 5 2542
.I 2543
.T
Reducing Retrieval Time Scatter Storage Techniques
.W
new method entering retrieving information
hash table described. method
intended efficient if most entries looked
up several times. expected number probes
look up entry, predicted theoretically verified
Monte Carlo experiments, considerably
less than other comparable methods if table
nearly full. example possible Fortran
implementation given.
.B
CACM February, 1973
.A
Brent, R. P.
.K
address calculation, content addressing, file searching,
hash addressing, hash code, linear probing,
linear quotient method, scatter storage, searching, symbol table
.C
3.7 3.73 3.74 4.1 4.9
.N
CA730205 JB January 24, 1978 2:12 PM
.X
1271 4 2543
1676 4 2543
1682 4 2543
1728 4 2543
1785 4 2543
1860 4 2543
1860 4 2543
1973 4 2543
1973 4 2543
1973 4 2543
1973 4 2543
1992 4 2543
1992 4 2543
2018 4 2543
2018 4 2543
2018 4 2543
2032 4 2543
2033 4 2543
2033 4 2543
2107 4 2543
2107 4 2543
2109 4 2543
2109 4 2543
2138 4 2543
2203 4 2543
2203 4 2543
2203 4 2543
2203 4 2543
2251 4 2543
2251 4 2543
2251 4 2543
2251 4 2543
2251 4 2543
2359 4 2543
2524 4 2543
2530 4 2543
2534 4 2543
2537 4 2543
2543 4 2543
2543 4 2543
2543 4 2543
2543 4 2543
2543 4 2543
2543 4 2543
2552 4 2543
2552 4 2543
2559 4 2543
2559 4 2543
2559 4 2543
2573 4 2543
2573 4 2543
2770 4 2543
2770 4 2543
2770 4 2543
2974 4 2543
2991 4 2543
2991 4 2543
3053 4 2543
3053 4 2543
3053 4 2543
3053 4 2543
3083 4 2543
3083 4 2543
911 4 2543
1785 5 2543
1786 5 2543
1973 5 2543
332 5 2543
2107 5 2543
2109 5 2543
2412 5 2543
2543 5 2543
2543 5 2543
2543 5 2543
3053 5 2543
3083 5 2543
1328 6 2543
1329 6 2543
1785 6 2543
1973 6 2543
1973 6 2543
1992 6 2543
2107 6 2543
2107 6 2543
2109 6 2543
2412 6 2543
2543 6 2543
2543 6 2543
2543 6 2543
2552 6 2543
2673 6 2543
2707 6 2543
2770 6 2543
.I 2544
.T
Automatic Error bounds Simple Zeros Analytic Functions
.W
Cauchy-Ostrowski theorem convergence
Newton iterates analytic function
one variable extended include computational errors
using complex interval arithmetic. Several numerical
examples given polynomials real complex
roots one example Bessel function
first kind.
.B
CACM February, 1973
.A
Rokne, J.
.K
real intervals, complex intervals, real interval
arithmetic, complex interval arithmetic, Newton's
method, Cauchy-Ostrowski theorem, zeros
polynomials, zeros Bessel functions
.C
5.11 5.12 5.15
.N
CA730204 JB January 24, 1978 2:51 PM
.X
1524 4 2544
1931 4 2544
2214 4 2544
2544 4 2544
2544 4 2544
2544 4 2544
1524 5 2544
311 5 2544
2214 5 2544
2544 5 2544
2544 5 2544
2544 5 2544
.I 2545
.T
Theory Discrete Patterns Their Implementation SNOBOL4
.W
notion discrete pattern formalized
certain properties deduced. pattern
shown generalization formal language.
Algorithms implementing kinds patterns
SNOBOL4 given. general approach create,
in-so-far possible, bottom-up parse
top-down specification.
.B
CACM February, 1973
.A
Gimpel, J. F.
.K
patterns, SNOBOL4, pattern theory, parsing, pattern matching,
string processing, pattern implementation
.C
4.29 5.39
.N
CA730203 JB January 24, 1978 3:13 PM
.X
1665 4 2545
1768 4 2545
1787 4 2545
1824 4 2545
1825 4 2545
1836 4 2545
1861 4 2545
2015 4 2545
2110 4 2545
2127 4 2545
2187 4 2545
2317 4 2545
2545 4 2545
2545 4 2545
2545 4 2545
2698 4 2545
2733 4 2545
2746 4 2545
1739 5 2545
1781 5 2545
2341 5 2545
2545 5 2545
2545 5 2545
2545 5 2545
2746 5 2545
1665 6 2545
1739 6 2545
2139 6 2545
2545 6 2545
2786 6 2545
.I 2546
.T
Use Grammatical Inference Designing Programming Languages
.W
Both designing new programming language
extending existing language, designer
faced problem deriving "natural" grammar
language. We proposing interactive
approach grammar design problem wherein designer
presents sample sentences structures
input grammatical inference algorithm. algorithm
then constructs grammar which reasonable
generalization examples submitted designer.
implementation presently restricted
subclass operator precedence grammars, but
second algorithm outlined which applies
larger class context-free grammars.
.B
CACM February, 1973
.A
Crespi-Reghizzi, S.
Melkanoff, M. A.
Lichten, L.
.K
grammar design, language definition, inference,
identification limit, extensible languages
.C
3.61 4.2 5.23
.N
CA730202 JB January 24, 1978 3:20 PM
.X
1046 4 2546
1086 4 2546
1105 4 2546
1132 4 2546
1139 4 2546
1140 4 2546
1234 4 2546
1234 4 2546
1263 4 2546
1263 4 2546
1265 4 2546
1265 4 2546
1270 4 2546
1323 4 2546
1358 4 2546
1379 4 2546
1379 4 2546
1380 4 2546
1453 4 2546
1464 4 2546
1484 4 2546
1491 4 2546
1496 4 2546
1498 4 2546
1542 4 2546
1613 4 2546
1614 4 2546
1683 4 2546
1693 4 2546
1693 4 2546
1781 4 2546
1781 4 2546
1781 4 2546
1781 4 2546
1787 4 2546
1824 4 2546
1825 4 2546
1836 4 2546
1836 4 2546
1860 4 2546
1945 4 2546
1945 4 2546
2015 4 2546
2060 4 2546
2060 4 2546
2061 4 2546
2061 4 2546
2083 4 2546
2082 4 2546
2091 4 2546
2091 4 2546
2126 4 2546
2152 4 2546
2178 4 2546
2179 4 2546
2179 4 2546
2179 4 2546
2252 4 2546
2317 4 2546
2325 4 2546
2341 4 2546
2340 4 2546
2356 4 2546
2546 4 2546
2546 4 2546
2546 4 2546
2546 4 2546
2546 4 2546
464 4 2546
2603 4 2546
2645 4 2546
2652 4 2546
2684 4 2546
2698 4 2546
2698 4 2546
2708 4 2546
2708 4 2546
2824 4 2546
2842 4 2546
2929 4 2546
2934 4 2546
2982 4 2546
2986 4 2546
584 4 2546
3045 4 2546
3045 4 2546
3069 4 2546
3093 4 2546
631 4 2546
653 4 2546
669 4 2546
679 4 2546
680 4 2546
691 4 2546
761 4 2546
763 4 2546
795 4 2546
799 4 2546
945 4 2546
949 4 2546
989 4 2546
1477 5 2546
1491 5 2546
2126 5 2546
2546 5 2546
2546 5 2546
2546 5 2546
404 5 2546
3184 5 2546
.I 2547
.T
Representation Contours ad Regions Efficient Computer Search
.W
novel computer-searchable representation
three basic pictorial features, contour
maps, region coverage, line structures, described.
representation, which has practical storage
requirements, provides rapid mean searching large
files data associated geometric position
well attribute value. application
representation handling terrain information
illustrates its utility. algebraic properties
data structure make computationally easy
determine whether point lies within closed boundary;
compute area contained closed boundary;
generate closed boundary representing union
intersection two closed boundaries; determine
neighboring boundaries point
minimum distances between them point.
.B
CACM February, 1973
.A
Merrill, R. D.
.K
contour map representation, region boundary representation,
computer-search-able structure, graphic
data retrieval, graphic language, two-dimensional
patterns, computer graphics, graphic display
.C
3.21 3.23 3.79 6.35
.N
CA730201 JB January 24, 1978 3:30 PM
.X
1630 4 2547
2287 4 2547
2547 4 2547
2547 4 2547
2987 4 2547
3062 4 2547
3165 4 2547
1326 5 2547
1925 5 2547
2547 5 2547
2547 5 2547
2547 5 2547
2987 5 2547
1326 6 2547
1630 6 2547
2125 6 2547
2547 6 2547
2633 6 2547
421 6 2547
524 6 2547
.I 2548
.T
Normal Deviate [S14] (Algorithm A442)
.B
CACM January, 1973
.A
Hill, G. W.
Davis, A. W.
.K
normal distribution inverse, probit
transform, Taylor series approximation
.C
5.12 5.5
.N
CA730113 JB January 24, 1978 3:39 PM
.X
1157 4 2548
1779 4 2548
1920 4 2548
1944 4 2548
1987 4 2548
2548 4 2548
2548 5 2548
2548 5 2548
2548 5 2548
714 5 2548
.I 2549
.T
Random Deviates Dipole Distribution [G5] (Algorithm A441)
.B
CACM January, 1973
.A
Knop, R. E.
.K
random number, probability density, probability distribution,
Dipole distribution, Cauchy distribution,
simulation, Monte Carlo
.C
3.17 5.5
.N
CA730112 JB January 24, 1978 3:42 PM
.X
2549 5 2549
2549 5 2549
2549 5 2549
.I 2550
.T
Multidimensional Monte Carlo Quadrature
Adaptive Stratified Sampling [D1] (Algorithm A440)
.B
CACM January, 1973
.A
Gallaher, L. J.
.K
Monte Carloquadrature, stratified sampling,
adaptive quadrature, sequential stratification
.C
5.16 5.5
.N
CA730111 JB January 24, 1978 3:44 PM
.X
1352 4 2550
2048 4 2550
2074 4 2550
2093 4 2550
2093 4 2550
2415 4 2550
2550 4 2550
2550 4 2550
2550 4 2550
1573 5 2550
2074 5 2550
2550 5 2550
2550 5 2550
2550 5 2550
429 5 2550
.I 2551
.T
Mutual Recursion Algol 60 Using Restricted Compilers
.B
CACM January, 1973
.A
Atkins,M. S.
.K
Algol 60, mutual recursion, compiler restrictions
.C
4.12 4.22
.N
CA730110 JB January 24, 1978 3:46 PM
.X
2551 5 2551
2551 5 2551
2551 5 2551
2658 5 2551
2551 6 2551
.I 2552
.T
Note Chain Overflow Items Within Direct-Access Table
.B
CACM January, 1973
.A
Bays, C.
.K
hash code, open hash, chaining, information retrieval, collision
.C
3.7 4.9
.N
CA730109 JB January 24, 1978 4:07 PM
.X
1271 4 2552
1676 4 2552
1682 4 2552
1728 4 2552
1785 4 2552
1785 4 2552
1860 4 2552
1973 4 2552
2018 4 2552
2032 4 2552
2033 4 2552
2107 4 2552
2109 4 2552
2203 4 2552
2203 4 2552
2251 4 2552
2258 4 2552
2319 4 2552
2313 4 2552
2359 4 2552
2359 4 2552
2437 4 2552
2524 4 2552
2543 4 2552
2543 4 2552
2552 4 2552
2552 4 2552
2552 4 2552
2552 4 2552
2559 4 2552
2781 4 2552
2860 4 2552
2991 4 2552
2991 4 2552
3053 4 2552
911 4 2552
911 5 2552
1785 5 2552
332 5 2552
2203 5 2552
2552 5 2552
2552 5 2552
2552 5 2552
3083 5 2552
1328 6 2552
1973 6 2552
2107 6 2552
2543 6 2552
2552 6 2552
.I 2553
.T
Practical Aspect Computer Science Education-Discussion
.B
CACM January, 1973
.A
Blount, S. E.
.K
education, computer engineering, computer
science curriculum, systems design
.C
1.52 6.0
.N
CA730108 JB January 24, 1978 4:09 PM
.X
2553 5 2553
2553 5 2553
2553 5 2553
.I 2554
.T
Reduction Band-Symmetric Generalized Eigenvalue Problem
.W
algorithm described reducing
generalized eigenvalue problem Ax = lambda Bx
ordinary problem, case B symmetric band
matrices B positive definite. If n
order matrix m bandwidth, matrices
B partitioned into m-by-m blocks;
algorithm described terms these blocks.
algorithm reduces generalized problem
ordinary eigenvalue problem symmetric band
matrix C whose bandwidth same B.
algorithm similar those Rutishauser
Schwartz reduction symmetric matrices
band form. calculation C requires order mn^2
operation. round-off error calculation
C same order sum errors
each n/m steps algorithm, latter
errors being largely determined condition B respect inversion.
.B
CACM January, 1973
.A
Crawford, C. R.
.K
generalized eigenvalues, symmetric band matrices
.C
5.14
.N
CA730107 JB January 24, 1978 4:26 PM
.X
2554 5 2554
2554 5 2554
2554 5 2554
.I 2555
.T
Variable-Precision Exponentiation
.W
previous paper presented efficient algorithm,
called Recomputation Algorithm,
evaluating rational expression within any desired tolerance
computer which performs variable-precision
arithmetic operations. Recomputation Algorithm can
applied expressions involving any variable-precision
operations having O(10^(-p) + SUM{|Ei|}) error bounds,
p denotes operation's precision
Ei denotes error operation's ith argument.
paper presents efficient variable-precision
exponential operation error bound above
order. Other operations such log, sin,
cos, which have simple series expansions, can handled similarly.
.B
CACM January, 1973
.A
Richman, P. L.
.K
variable-precision, exponential function,
error analysis, interval arithmetic
.C
5.11
.N
CA730106 JB January 24, 1978 4:32 PM
.X
2555 4 2555
2605 4 2555
2286 5 2555
2555 5 2555
2555 5 2555
2555 5 2555
.I 2556
.T
Adaptive Correction Program Statements
.W
method analyzing statements programming
language which can tolerate considerable
inaccuracy their specification proposed. method
involves principles present mainly confined
studies area artificial intelligence such
feature extraction, approximate tree matching,
strategy improvement feedback matching process.
pilot program incorporating principles
described preliminary operating results presented.
final section surveys further principles
which currently being investigated.
.B
CACM January, 1973
.A
James, E. B.
Partridge, D. P.
.K
adaptive, linguistic pattern matching, automatic
parsing, approximate match, compiler, program
statement analysis, syntax analysis
.C
3.62 3.63 3.65
.N
CA730105 JB January 24, 1978 4:38 PM
.X
1179 4 2556
1288 4 2556
1544 4 2556
1646 4 2556
2111 4 2556
2257 4 2556
2360 4 2556
2451 4 2556
2451 4 2556
2452 4 2556
2534 4 2556
2534 4 2556
2556 4 2556
2556 4 2556
2556 4 2556
2556 4 2556
2650 4 2556
2650 4 2556
2708 4 2556
2765 4 2556
2887 4 2556
2978 4 2556
1935 5 2556
1936 5 2556
2111 5 2556
2556 5 2556
2556 5 2556
2556 5 2556
2698 5 2556
2708 5 2556
830 5 2556
1477 6 2556
1477 6 2556
1491 6 2556
1491 6 2556
1781 6 2556
1787 6 2556
2110 6 2556
2111 6 2556
2534 6 2556
2556 6 2556
2556 6 2556
680 6 2556
680 6 2556
799 6 2556
.I 2557
.T
Time Required Sequence Matrix Products
.W
paper discusses multiplication conformable
sequences row vectors, column vectors,
square matrices. minimum time required evaluate
such products ordinary serial computers
well parallel computers discussed. Algorithms
presented which properly parse such matrix
sequences subject constraints machine organization.
.B
CACM January, 1973
.A
Muraoka, Y.
Kuck, D. J.
.K
matrix expressions, matrix multiplication, operation
minimization, parallel machine, time minimization
.C
4.22 5.14
.N
CA730104 JB January 24, 1978 4:41 PM
.X
1614 4 2557
2253 4 2557
2557 4 2557
2557 5 2557
2557 5 2557
2557 5 2557
437 5 2557
3075 5 2557
3085 5 2557
2289 6 2557
2557 6 2557
2557 6 2557
2664 6 2557
2714 6 2557
.I 2558
.T
Protection Programming Languages
.W
Linguistic mechanisms which can used protect
one subprogram another's malfunctioning
described. Function-producing functions various
type-tagging schemes considered. attempt
made distinguish between access limitation authentication.
.B
CACM January, 1973
.A
Morris, J. H. Jr.
.K
protection, types, environments,trademarks, seals,
access keys, access control authentication,
secrecy
.C
4.2 4.3
.N
CA730103JB January 24, 1978 4:45 PM
.X
1458 4 2558
1523 4 2558
1603 4 2558
1698 4 2558
1747 4 2558
1748 4 2558
1854 4 2558
1877 4 2558
1960 4 2558
2155 4 2558
2294 4 2558
2377 4 2558
2378 4 2558
2497 4 2558
2558 4 2558
2558 4 2558
2625 4 2558
2632 4 2558
2840 4 2558
2842 4 2558
2941 4 2558
3077 4 2558
3105 4 2558
3144 4 2558
3150 4 2558
1471 5 2558
2060 5 2558
2558 5 2558
2558 5 2558
2558 5 2558
2868 5 2558
2939 5 2558
2941 5 2558
1471 6 2558
2080 6 2558
2204 6 2558
2356 6 2558
2377 6 2558
2380 6 2558
2558 6 2558
2558 6 2558
2558 6 2558
2625 6 2558
2632 6 2558
2651 6 2558
.I 2559
.T
Reallocation Hash-Coded Tables
.W
space allocation hash-coded table
altered, table entries must rescattered
over new space. technique accomplishing
rescattering presented. technique
independent both length table hashing
function used, can utilized conjunction
linear reallocation table being rescattered.
Moreover, can used eliminate previously
flagged deletions any hash-coded table, change
one hashing method another. efficiency
technique discussed theoretical statistics given.
.B
CACM January, 1973
.A
Bays, C.
.K
reallocation, dynamic storage, hash code, scatter storage, deletions
.C
3.7 3.73 3.74 4.9
.N
CA730102 JB January 24, 1978 4:50 PM
.X
1676 4 2559
1682 4 2559
1728 4 2559
1860 4 2559
1973 4 2559
1973 4 2559
1992 4 2559
2018 4 2559
2032 4 2559
2033 4 2559
2107 4 2559
2109 4 2559
2138 4 2559
2203 4 2559
2203 4 2559
2251 4 2559
2251 4 2559
2251 4 2559
2359 4 2559
2524 4 2559
2530 4 2559
2534 4 2559
2537 4 2559
2543 4 2559
2543 4 2559
2543 4 2559
2552 4 2559
2559 4 2559
2559 4 2559
2559 4 2559
2573 4 2559
2770 4 2559
2991 4 2559
2991 4 2559
3053 4 2559
3053 4 2559
3053 4 2559
3083 4 2559
3083 4 2559
1785 5 2559
1973 5 2559
2107 5 2559
2559 5 2559
2559 5 2559
2559 5 2559
.I 2560
.T
Queuing Model Multiprogrammed
Computer Two-Level Storage System
.W
results presented analysis
probabilistic model multiprogrammed computer
system two-level storage system which there
sequential dependency accesses between
devices. Expressions obtained long-run probability
both CPU each storage
devices busy. Some numerical results given which
quantify gains CPU utilization obtainable
multiprogramming presence type storage system.
.B
CACM January, 1973
.A
Shedler, G. S.
.K
multiprogrammed computer system, storage system, hierarchical index sets
.C
4.32
.N
CA730101 JB January 24, 1978 4:55 PM
.X
2560 5 2560
2560 5 2560
2560 5 2560
.I 2561
.T
Heuristic Approach Inductive Inference Fact Retrieval Systems
.W
Heuristic procedures presented which have
been developed perform inferences generalizing
available information. procedures make use
similarity structure which imposed
data base using nonnumerical clustering algorithms. They
implemented model fact retrieval system
which uses formal query language property-list data
structure. program experiments described
wherein procedures used test data bases
which altered deleting part data
purposely introducing false data. found
system can infer correct response under
variety conditions involving incomplete inconsistent data.
.B
CACM December, 1974
.A
Skinner, C. W.
.K
inference, inductive inference, clustering, fact retrieval, heuristics
.C
3.61 3.71 3.79
.N
CA741213 JB January 13, 1978 3:40 PM
.X
2178 4 2561
2396 4 2561
2561 4 2561
2127 5 2561
2561 5 2561
2561 5 2561
2561 5 2561
.I 2562
.T
Routing Problem (Algorithm R456)
.B
CACM December, 1974
.A
Tesch, G.
.N
CA741212 JB January 13, 1978 3:42 PM
.X
2562 5 2562
2562 5 2562
2562 5 2562
.I 2563
.T
Merge Sort Algorithm (R426)
.B
CACM December, 1974
.A
Bron, C.
.N
CA741211 JB January 13, 1978 3:43 PM
.X
2563 4 2563
2348 5 2563
2563 5 2563
2563 5 2563
2563 5 2563
.I 2564
.T
Hidden-Line Plotting Program (Algorithm R420)
.B
CACM December, 1974
.A
Ellis, T. M. R.
.N
CA741210 JB January 13, 1978 3:45 PM
.X
2564 5 2564
2564 5 2564
2564 5 2564
.I 2565
.T
Gaussian Pseudo-Random Number Generator (Algorithm 488)
.B
CACM December, 1974
.A
Brent, R. P.
.K
random numbers, pseudo-random numbers,
Gaussian distribution, normal distribution
.C
5.39 5.5
.N
CA741209 JB January 13, 1978 3:57 PM
.X
2349 4 2565
2565 4 2565
2565 4 2565
1716 5 2565
2276 5 2565
2565 5 2565
2565 5 2565
2565 5 2565
.I 2566
.T
Exact Cumulative Distribution Kolmogorov-Smirnov
Statistic Small Samples (Algorithm
A487)
.B
CACM December, 1974
.A
Pomeranz, J.
.K
Kolmogorov-Smirnov test, K-S statistic, goodness-of-fit testing
.C
8.1 5.5
.N
CA741208 JB January 13, 1978 4:08 PM
.X
2566 5 2566
2566 5 2566
2566 5 2566
.I 2567
.T
Exponential Method Solution
Systems Ordinary Differential Equations
.W
explicit, coupled, single-step method
numerical solution initial value problems
systems ordinary differential equations presented.
method designed general purpose
nature but especially efficient dealing
stiff systems differential equations.
is, general, second order except case
linear system constant coefficients
linear forcing terms; case, method third
order. has been implemented put routine
usage biological applications-where stiffness frequently
appears-with favorable results. compared
standard fourth order Runge-Kutta implementation,
computation time required method has ranged
comparable certain nonstiff problems better
than two orders magnitude faster some
highly stiff systems.
.B
CACM December, 1974
.A
Chu, S. C.
Berman, M.
.K
numerical solution, ordinary differential equations,
initial value problems, stiff systems
.C
5.17
.N
CA741207 JB January 13, 1978 4:20 PM
.X
2567 4 2567
2567 4 2567
2268 5 2567
2567 5 2567
2567 5 2567
2567 5 2567
755 5 2567
.I 2568
.T
Graph Formulation School Scheduling Algorithm
.W
problem classically titled "The Examination
Schedule Problem" takes various forms
literature. Most these formulations can presented
terminology classical Network Theory.
One such formulation is: Given nondirected network,
partition its nodes into minimal number
subsets such no two members same subset
connected anarc. obvious lower limit
number size largest strongly connected
subgraph. Kirchgassner proved upper
limit size plus one. One logical extension
previous work introduction variable
length examinations W(I) number periods
exam I. object paper generalize
definition largest strongly connected subgraph
include weighting nodes, present
approximate algorithm which usually finds largest
strongly connected subgraph, discuss
application algorithm solution
school scheduling exam scheduling problems.
.B
CACM December, 1974
.A
Salazar, A.
Oakford, R. V.
.K
scheduling, school scheduling, examination scheduling,
nondirected network, graph, subgraph, strongly
connected subgraph
.C
3.51 3.52
.N
CA741206 JB January 13, 1978 4:37 PM
.X
2568 5 2568
2568 5 2568
2568 5 2568
.I 2569
.T
Computer Generation Gamma Random Variates
Non-integral Shape Parameters
.W
shape parameter, a, integral,
generating gamma random variables digital
computer straightforward. There no simple method
generating gamma random variates non-integral
shape parameters. common procedure approximately
generate such random variables use
so-called probability switch method. Another procedure,
which exact, due Johnk. paper
presents rejection method exactly generating
gamma random variables greater than 1.
efficiency rejection method shown
better than efficiency Johnk's method.
paper concludes non-integral following
mix procedures yields best combination
accuracy efficiency: (1) less than
1, use Johnk's method; (2) 1 less than
less than 5, use rejection method; (3)
greater than 5, use probability switch
method.
.B
CACM December,1974
.A
Wallace, N. D.
.K
simulation, gamma random variables,
probability distribution, random numbers
.C
5.5 8.1
.N
CA741205 JB January 16, 1978 9:35 AM
.X
2569 5 2569
2569 5 2569
2569 5 2569
2847 5 2569
2928 5 2569
3046 5 2569
3098 5 2569
3107 5 2569
1751 6 2569
2277 6 2569
2380 6 2569
2522 6 2569
2569 6 2569
2569 6 2569
2569 6 2569
2569 6 2569
2569 6 2569
2847 6 2569
2847 6 2569
3098 6 2569
.I 2570
.T
Comparison List Schedules Parallel Processing Systems
.W
problem scheduling two more processors
minimize execution time program
which consists set partially ordered tasks
studied. Cases task execution times
deterministic others which execution times
random variables analyzed. shown
different algorithms suggested literature vary significantly
execution time B-schedule
Coffman Graham near-optimal. dynamic programming
solution case which execution
times random variables presented.
.B
CACM December, 1974
.A
Adam, T. L.
Chandy, K. M.
Dickson, J. R.
.K
parallel processing, precedence graphs, scheduling,
list scheduling, optimization, dynamic programming
.C
4.3 4.32 4.34 4.35 5.3 5.32 5.4 5.42 8.1
.N
CA741204 JB January 16, 1978 9:42 AM
.X
2570 5 2570
2570 5 2570
2570 5 2570
.I 2571
.T
Analytic Model Hasp Execution Task Monitor
.W
HASP Execution Task Monitor periodically
rearranges OS/360 dispatching chain give
tasks preemptive execution priority inverse order
their cpu utilization history. effect
keep I/O bound tasks active prevent
cpu bound tasks locking out other tasks.
paper develops simple model Execution Task
Monitor employs study effectiveness
monitor improving system performance.
modified strategy monitor control investigated
case task execution memory hierarchy varying speeds.
.B
CACM December, 1974
.A
Strauss, J. C.
.K
Hasp, OS/360, dispatching, scheduling, modeling, performance evaluation
.C
4.32 8.1
.N
CA741203 JB January 16, 1978 9:51 AM
.X
2571 4 2571
3072 4 2571
3119 4 2571
2245 5 2571
2571 5 2571
2571 5 2571
2571 5 2571
.I 2572
.T
Arguments Moratorium Construction
Community Information Utility
.W
article author urges prudent
decentralized approach question
design desirability computerized community information
utilities. Before accepting inevitability
desirability any technology, we should:
(1) sure feasibility (internally
externally) proposed; (2) project perhaps
wait changes complementary techniques;
(3) evaluate current projected supplementary techniques;
(4) establish existence demand
proposed; (5) take steps involve representative
group ultimate users systems design,
(6) carefully think through possible side effects
man his world view. Current proposals
community information utilities examined
framework, conclusion drawn society
not yet position justify either construction
information utility prototype
community acceptance policy
favor its widespread implementation.
.B
CACM December, 1974
.A
Press, L. I.
.K
community information utilities, social implications, public policy
.C
2.1 2.3
.N
CA741202 JB January 16, 1978 10:02 AM
.X
2572 5 2572
2572 5 2572
2572 5 2572
3179 5 2572
2572 6 2572
2607 6 2572
3076 6 2572
.I 2573
.T
Computer Programming Art
.B
CACM December, 1974
.A
Knuth, D. E.
.N
CA741201 JB January 16, 1978 10:04 AM
.X
1860 4 2573
1973 4 2573
1973 4 2573
1992 4 2573
1992 4 2573
2018 4 2573
2033 4 2573
2107 4 2573
2109 4 2573
2138 4 2573
2203 4 2573
2203 4 2573
2251 4 2573
2251 4 2573
2251 4 2573
2530 4 2573
2537 4 2573
2543 4 2573
2543 4 2573
2559 4 2573
2573 4 2573
2573 4 2573
2573 4 2573
2770 4 2573
2770 4 2573
2991 4 2573
3053 4 2573
3083 4 2573
1786 5 2573
2018 5 2573
2107 5 2573
2573 5 2573
2573 5 2573
2573 5 2573
.I 2574
.T
Multiple Exists Loop Using Neither GO nor Labels
.B
CACM November, 1974
.A
Evans, R. V.
.K
goto free programming, control structures,
multiple exists loops, exit statement
.C
4.20 4.22
.N
CA741110 JB January 16, 1978 10:07 AM
.X
2574 4 2574
2709 4 2574
2477 5 2574
2574 5 2574
2574 5 2574
2574 5 2574
.I 2575
.T
Best-Match Problem Document Retrieval
.B
CACM November, 1974
.A
Van Rijsbergen, C. J.
.K
document retrieval, best match, clustering, file
searching, matching, dissimilarity, hierarchy,
classification
.C
3.73 3.74 3.79 5.30
.N
CA741109 JB January 16, 1978 10:09 AM
.X
2575 4 2575
2966 4 2575
3134 4 2575
2524 5 2575
2575 5 2575
2575 5 2575
2575 5 2575
.I 2576
.T
Simple Technique Representing Strings Fortran IV
.B
CACM November, 1974
.A
Hanson, D. R.
.K
string processing, Fortran IV, string representation,structured
programming, data structures
.C
3.70 4.0 4.19 4.9
.N
CA741108 JB January 16, 1978 10:12 AM
.X
2576 5 2576
2576 5 2576
2576 5 2576
.I 2577
.T
On-Site Data Management System Application Field Archaeology
.B
CACM November, 1974
.A
Brown, J. A.
Werner, B.
.K
APL-PLUS, archaeology, Koster prehistoric
site data management, retrieval systems
.C
3.36 3.70 3.73 3.89
.N
CA741107 JB January 16, 1978 10:15 AM
.X
2577 5 2577
2577 5 2577
2577 5 2577
.I 2578
.T
Self-stabilizing Systems Spite Distributed Control
.B
CACM November, 1974
.A
Dijkstra, E. W.
.K
multiprocessing, networks, self-stabilization, synchronization,
mutual exclusion, robustness, sharing,
error recovery, distributed control, harmonious cooperation, self-repair
.C
4.32
.N
CA741106 JB January 16,1978 10:18 AM
.X
2578 5 2578
2578 5 2578
2578 5 2578
.I 2579
.T
Register Allocation Via Usage Counts
.W
paper introduces notion usage counts,
shows usage counts can developed
algorithms eliminate redundant computations,
describes usage counts can provide basis
register allocation. paper compares register
allocation based usage counts other commonly
used register allocation techniques, presents evidence
which shows usage count technique
significantly better than these other techniques.
.B
CACM November, 1974
.A
Freiburghouse, R. A.
.K
optimization, redundant computations, common subexpressions,
register allocation, compilers, programming
languages, virtual memory, demand paging
.C
4.12 4.2 4.39
.N
CA741105 JB January 16, 1978 10:24 AM
.X
1781 4 2579
1807 4 2579
2034 4 2579
2290 4 2579
2579 4 2579
2579 4 2579
2579 4 2579
2923 4 2579
2923 4 2579
2945 4 2579
1535 5 2579
1807 5 2579
1947 5 2579
2579 5 2579
2579 5 2579
2579 5 2579
.I 2580
.T
Method Composing Simple Traditional Music Computer
.W
method described composing musical
rounds computer. method uses some music
theory plus additional heuristics. Fundamental
method set productions together sets
applicability rules weight rules which operate
productions deciding extent
they available use. Several rounds generated
computer implementation method
presented. Generally, resultant music sounds mediocre
professional although usually pleasing
layman. appears full-blown music theory
not needed rounds--all hardware required
structural levels not necessary these pieces.
author has tried address both musicians
computer scientists.
.B
CACM November, 1974
.A
Rader, G. M.
.K
artificial intelligence, heuristic programming,
models cognitive processes, computer music,
computer composition, music theory, formal languages, probabilistic grammars
.C
3.44 3.65 5.23
.N
CA741104 JB January 16, 1978 10:35 AM
.X
2580 5 2580
2580 5 2580
2580 5 2580
.I 2581
.T
Locally-Organized Parser Spoken Input
.W
paper describes LPARS, locally-organized
parsing system, designed use continuous
speech recognizer. LPARS processes string phonemes
which contains ambiguity error. system
locally-organized sense builds local
parse structures reliable word candidates
recognized anywhere input utterance. These local
structures used "islands reliability"
guide search more highly garbled
words which might complete utterance.
.B
CACM November, 1974
.A
Miller, P. L.
.K
parsing, speech recognition, speech understanding,
augmented transition network, local parsing
.C
3.42 3.65 3.69
.N
CA741103 JB January 16, 1978 10:41 AM
.X
2581 4 2581
2739 4 2581
2795 4 2581
2921 4 2581
3087 4 2581
1989 5 2581
2581 5 2581
2581 5 2581
2581 5 2581
.I 2582
.T
Improving Locality Critical Working Sets
.W
new approach program locality improvement
via restructuring described. method
particularly suited those systems primary memory
managed according working set strategy.
based concept critical working set,
working set which does not contain next memory
reference. data method operates upon extracted
trace program restructured.
shown that, except some special cases,
method not optimum. However, experimental
results obtained using method restructure
interactive text editor file system module
operating system have shown its substantial superiority
over other methods proposed
literature.
.B
CACM November, 1974
.A
Ferrari, D.
.K
program restructuring, program segmentation, locality
improvement, memory hierarchies, virtual
memory, multiprogramming, restructuring techniques, static
restructuring, dynamic restructuring, working
set strategy, critical working set
.C
4.32 4.39 4.43 4.49 4.9
.N
CA741102 JB January 16, 1978 10:50 AM
.X
1892 4 2582
1901 4 2582
2085 4 2582
2095 4 2582
2218 4 2582
2277 4 2582
2319 4 2582
2319 4 2582
2329 4 2582
2358 4 2582
2365 4 2582
2373 4 2582
2380 4 2582
2434 4 2582
2499 4 2582
2501 4 2582
2582 4 2582
2582 4 2582
2582 4 2582
2582 4 2582
2669 4 2582
2669 4 2582
2828 4 2582
2863 4 2582
2881 4 2582
2928 4 2582
2996 4 2582
3006 4 2582
3054 4 2582
3067 4 2582
3152 4 2582
1751 5 2582
1924 5 2582
2017 5 2582
2130 5 2582
2582 5 2582
2582 5 2582
2582 5 2582
.I 2583
.T
Guidelines Humanizing Computerized Information
Systems: Report Stanley House
.B
CACM November, 1974
.A
Sterling, T. D.
.K
humanization, social implication, management, information
systems, regulations, social behavioral
sciences, philosophy
.C
1.5 2 3.3 3.4 3.5
.N
CA741101 JB January 16, 1978 10:53 AM
.X
2583 5 2583
2583 5 2583
2583 5 2583
3142 5 2583
2583 6 2583
3076 6 2583
.I 2584
.T
Enumerating Full-Time Programmers
.W
Data 1970 Census Department
Labor's Area Wage Surveys used derive
estimates number full-time programmers employed
during years 1969 through 1973. 1973
figure 180,000 considerably less than suggested
earlier reports. recommended educational
administrators consider whether many courses aimed
training programmers justified vocational
basis.
.B
CACM October, 1974
.A
Gilchrist, B.
Weber, R. E.
.K
programmer, employment, 1970 Census, Area Wage Survey
.C
1.50 2.2 2.42
.N
CA741014 JB January 16, 1978 11:00 AM
.X
2584 5 2584
2584 5 2584
2584 5 2584
.I 2585
.T
Efficient Implementation Variable Projection
Algorithm Nonlinear Least Squares Problems
(Errata)
.B
CACM October 1974
.A
Krogh, F. T.
.N
CA741013 JB January 16, 1978 11:02 AM
.X
2585 5 2585
2585 5 2585
2585 5 2585
.I 2586
.T
Adapting Optimal Code Generation Arithmetic
Expressions Instruction Sets Available
Present-Day Computers (Errata)
.B
CACM October, 1974
.A
Stockhausen, P. F.
.N
CA741012 JB January 16, 1978 11:05 AM
.X
2586 5 2586
2586 5 2586
2586 5 2586
.I 2587
.T
Construction Representative Synthetic Workload (Errata)
.B
CACM October, 1974
.A
Sreenivarsan, K.
Kleinman, A. J.
.N
CA741011 JB January 16, 1978 11:07 AM
.X
2587 4 2587
2588 4 2587
2587 5 2587
2587 5 2587
2587 5 2587
2612 5 2587
.I 2588
.T
Rosenbrock Function Minimization (Algorithm R450)
.B
CACM October, 1974
.A
Klemes, J.
Klemsa, J.
.N
CA741010 JB January 16, 1978 11:09 AM
.X
2587 4 2588
2588 4 2588
2588 5 2588
2588 5 2588
2588 5 2588
2612 5 2588
.I 2589
.T
Computer Routine Quadratic Linear
Programming Problems (Algorithm R431)
.B
CACM October, 1974
.A
Proll, L. G.
.N
CA741009 JB January 16, 1978 11:10 AM
.X
2589 4 2589
1353 5 2589
2589 5 2589
2589 5 2589
2589 5 2589
.I 2590
.T
Hypergeometric (Algorithm C191)
.B
CACM October, 1974
.A
Kopelaar, H.
.N
CA741008 JB January 16, 1978 11:14 AM
.X
2590 4 2590
2590 5 2590
2590 5 2590
2590 5 2590
888 5 2590
.I 2591
.T
Numerical Inversion Laplace Transform (Algorithm A486)
.B
CACM October, 1974
.A
Veillon, F.
.K
Laplace transform inversion
.C
5.16
.N
CA741007 JB January 16, 1978 11:17 AM
.X
2591 4 2591
2124 5 2591
2591 5 2591
2591 5 2591
2591 5 2591
.I 2592
.T
Generation Test Problems Linear Programming Codes
.W
Users linear programming computer codes have
realized necessity evaluating capacity,
effectiveness, accuracy solutions provided
such codes. Large scale linear programming
codes most installations assumed generating correct
solutions without ever having been "bench-marked"
test problems known solutions. reason
failure adequately test codes
rarely there large problems known solutions readily
available. paper presents theoretical
justification illustrative implementation method
generating linear programming test problems
known solutions. method permits generation
test problems arbitrary size
have wide range numerical characteristics.
.B
CACM October, 1974
.A
Charnes, A.
Raike, W. M.
Stutz, J. D.
Walters, A. S.
.K
linear programming, test problem generation,
LP program evaluation, LP program validation
.C
5.41
.N
CA741006 JB January 16, 1978 12:28 PM
.X
2592 5 2592
2592 5 2592
2592 5 2592
.I 2593
.T
Back-end Computer Data Base Management
.W
proposed data base management
function placed dedicated back-end computer
which accepts commands (in relatively high level language
such CODASYL Data Base Task Group,
April 1971 Report) host computer, accesses
data base secondary storage, returns results.
advantages such configuration discussed.
experimental implementation, called experimental
Data Management System, XDMS, described certain
conclusions back-end approach drawn
implementation.
.B
CACM October, 1974
.A
Canaday, R. H.
Harrison, R. D.
Ivie, E. L.
Ryder, J. L.
Wehr, L. A.
.K
data base management, information retrieval, computer
configurations, computer networks, Data Base
Task Group Language, data base protection,
data base portability, back-end computer
.C
3.79 4.22 4.33 4.35
.N
CA741005 JB January 16,1978 12:35 PM
.X
2593 5 2593
2593 5 2593
2593 5 2593
2919 5 2593
2536 6 2593
2593 6 2593
2629 6 2593
.I 2594
.T
Structured Data Structures
.W
Programming systems which permit arbitrary
linked list structures enable user create
complicated structures without sufficient protection.
Deletions can result unreachable data elements,
there no guarantee additions performed
properly. remedy situation,
paper proposes gauge which provides creation
restricted class data structures but ensures
correctness program. accomplished
explicit structure declaration facility,
restriction permissible operations, execution-time checks.
.B
CACM October, 1974
.A
Shneiderman, B.
Scheuermann, P.
.K
structured programming, data structures, data base management system
.C
3.50 3.51 3.72 3.73 3.79 4.20 4.22
.N
CA741004 JB January 16, 1978 12:46 PM
.X
1720 4 2594
1927 4 2594
2147 4 2594
2163 4 2594
2193 4 2594
2252 4 2594
2319 4 2594
2326 4 2594
2345 4 2594
2478 4 2594
2477 4 2594
2480 4 2594
2541 4 2594
2594 4 2594
2594 4 2594
2594 4 2594
2594 4 2594
2709 4 2594
2852 4 2594
2899 4 2594
2939 4 2594
2972 4 2594
3004 4 2594
3130 4 2594
3155 4 2594
1771 5 2594
2155 5 2594
2204 5 2594
2594 5 2594
2594 5 2594
2594 5 2594
2975 5 2594
3186 5 2594
2594 6 2594
.I 2595
.T
Note Calculation Working Set Size
.W
Finite-length reference string arbitrary
structure considered, exact expression
average working set size terms "corrected"
interreference interval statistics derived.
example discussed; upper lower bounds obtained;
average working set size function
shown efficiently obtained set page
sizes, single pass reference string.
work follows developments paper Denning
Schwartz, consider infinite-length
reference strings which satisfy certain statistical
properties derive expression relating
asymptotic average working set size asymptotic
missing page rate function under working set
replacement.
.B
CACM October, 1974
.A
Slutz, D. R.
Traiger, I. L.
.K
working-set model, paging, program behavior
.C
4.3
.N
CA741003 JB January 16, 1978 12:56 PM
.X
2374 4 2595
2380 4 2595
2450 4 2595
2595 4 2595
2996 4 2595
3006 4 2595
3067 4 2595
2373 5 2595
2595 5 2595
2595 5 2595
2595 5 2595
2996 5 2595
3006 5 2595
3067 5 2595
1751 6 2595
1751 6 2595
1751 6 2595
1884 6 2595
2374 6 2595
2374 6 2595
2373 6 2595
2373 6 2595
2373 6 2595
2595 6 2595
2595 6 2595
2595 6 2595
2682 6 2595
2863 6 2595
2864 6 2595
3006 6 2595
.I 2596
.T
Weighted Buddy Method Dynamic Storage Allocation
.W
extension buddy method, called weighted
buddy method, dynamic storage allocation
presented. weighted buddy method allows block
sizes 2^k 3(2^k), whereas original buddy
method allowed only block sizes 2^k. extension
achieved additional cost only two
bits per block. Simulation results presented which
compare method buddy method. These
results indicate uniform request distribution,
buddy system has less total memory fragmentation
than weighted buddy algorithm. However, total
fragmentation smaller weighted buddy
method requests exponentially distributed block sizes.
.B
CACM October, 1974
.A
Shen, K. K.
Peterson, J. L.
.K
weighted buddy algorithm, buddy systems,
memory allocation, dynamic storage allocation
.C
3.89 4.32 4.39
.N
CA741002 JB January 16, 1978 1:07 PM
.X
1389 4 2596
1552 4 2596
2095 4 2596
2162 4 2596
2218 4 2596
2435 4 2596
2498 4 2596
2596 4 2596
2596 4 2596
2596 4 2596
2734 4 2596
2747 4 2596
2768 4 2596
2768 4 2596
2845 4 2596
2845 4 2596
2902 4 2596
2902 4 2596
2902 4 2596
2911 4 2596
2911 4 2596
2955 4 2596
2955 4 2596
3000 4 2596
1184 5 2596
1879 5 2596
2435 5 2596
2596 5 2596
2596 5 2596
2596 5 2596
2902 5 2596
2955 5 2596
1051 6 2596
1062 6 2596
1184 6 2596
1184 6 2596
1211 6 2596
1552 6 2596
1879 6 2596
2435 6 2596
2435 6 2596
2596 6 2596
2596 6 2596
2734 6 2596
2747 6 2596
2747 6 2596
2768 6 2596
2773 6 2596
.I 2597
.T
Monitors: Operating System Structuring Concept
.W
paper develops Brinch-Hansen's concept
monitor method structuring operating
system. introduces form synchronization, describes
possible method implementation terms
semaphores gives suitable proof rule. Illustrative
examples include single resource scheduler,
bounded buffer, alarm clock, buffer pool,
disk head optimizer, version problem
readers writers.
.B
CACM October, 1974
.A
Hoare, C. A. R.
.K
monitors, operating systems, scheduling, mutual
exclusion, synchronization, system implementation
languages, structured multiprogramming
.C
4.31 4.22
.N
CA741001 JB January 16, 1978 1:23 PM
.X
2320 4 2597
2597 4 2597
2597 4 2597
2777 4 2597
2851 4 2597
2895 4 2597
2912 4 2597
2946 4 2597
3128 4 2597
2150 5 2597
2320 5 2597
2597 5 2597
2597 5 2597
2597 5 2597
2865 5 2597
2866 5 2597
2898 5 2597
2972 5 2597
3043 5 2597
3128 5 2597
3144 5 2597
970 6 2597
1471 6 2597
1834 6 2597
2150 6 2597
2204 6 2597
2298 6 2597
2356 6 2597
2376 6 2597
2436 6 2597
2491 6 2597
2597 6 2597
2597 6 2597
2597 6 2597
2597 6 2597
2597 6 2597
2597 6 2597
2597 6 2597
2624 6 2597
2625 6 2597
2632 6 2597
2732 6 2597
2732 6 2597
2738 6 2597
2796 6 2597
2865 6 2597
2866 6 2597
2870 6 2597
2912 6 2597
2946 6 2597
3082 6 2597
.I 2598
.T
Extending Information Theory Approach Converting
Limited-Entry Decision Tables Computer
Programs
.W
paper modifies earlier algorithm
converting decision tables into flowcharts which
minimize subsequent execution time compiled into
computer program. algorithms considered
paper perform limited search and, accordingly,
do not necessarily result globally optimal
solutions. However, greater search effort needed
obtain globally optimal solution complex
decision tables usually not justified sufficient
savings execution time. There analogy
between problem converting decision tables into
efficient flowcharts well-understood problem
information theory noiseless coding. results
noiseless coding literature used
explore limitations algorithms used solve
decision table problem. analogy between
two problems also used develop improvements
information algorithm extending depth
search under certain conditions proposing
additional conditions added decision
table. Finally, information algorithm compared
algorithm proposed recent paper
Verhelst.
.B
CACM September, 1974
.A
Shwayder, K.
.K
coding, decision tables, flowcharting, information
theory, noiseless channel, sorting
.C
3.50 5.31
.N
CA740910 JB January 17, 1978 8:40 AM
.X
1354 4 2598
2053 4 2598
2220 4 2598
2220 4 2598
2273 4 2598
2273 4 2598
2453 4 2598
2453 4 2598
2492 4 2598
2518 4 2598
2598 4 2598
2598 4 2598
2598 4 2598
2598 4 2598
2598 4 2598
2598 4 2598
2616 4 2598
2691 4 2598
2726 4 2598
2726 4 2598
2726 4 2598
2726 4 2598
2856 4 2598
2856 4 2598
2856 4 2598
3113 4 2598
3113 4 2598
1172 5 2598
1548 5 2598
2220 5 2598
2263 5 2598
2453 5 2598
2598 5 2598
2598 5 2598
2598 5 2598
2691 5 2598
2845 5 2598
2856 5 2598
3113 5 2598
1172 6 2598
1184 6 2598
1327 6 2598
1354 6 2598
1354 6 2598
2053 6 2598
2220 6 2598
2263 6 2598
2435 6 2598
2453 6 2598
2598 6 2598
2598 6 2598
2598 6 2598
2691 6 2598
2736 6 2598
2747 6 2598
2768 6 2598
2856 6 2598
.I 2599
.T
First Order Approximation Optimum Checkpoint Interval
.B
CACM September, 1974
.A
Young, J. W.
.K
checkpoint, job failure, operations, programming
checkpoint, random failure, operations, programming
.C
2.43 4.0
.N
CA740909 JB January 17, 1978 8:42 AM
.X
2599 5 2599
2599 5 2599
2599 5 2599
3089 5 2599
2599 6 2599
.I 2600
.T
Computation g-Splines via Factorization
Method [E2] (Algorithm A485)
.B
CACM September, 1974
.A
Eidson, H. D.
Schumaker, L. L.
.K
approximation, spline approximation
.C
5.13
.N
CA740908 JB January 17, 1978 8:44 AM
.X
2600 5 2600
2600 5 2600
2600 5 2600
.I 2601
.T
Evaluation Modified Bessel Functions K0(Z)
K1(Z) Complex Arguments [S17] (Algorithm
A484)
.B
CACM September, 1974
.A
Burrell, K. H.
.K
Bessel functions, Hankel functions, modified
Bessel functions, Gauss-Hermite quadrature
.C
5.12
.N
CA740907 JB January 17, 1978 8:47 AM
.X
2601 5 2601
2601 5 2601
2601 5 2601
.I 2602
.T
Masked Three-Dimensional Plot Program
Rotations [J6] (Algorithm A483)
.B
CACM September, 1974
.A
Watkins, S. L.
.K
plotting, three-dimensional plotting
.C
4.41
.N
CA740906 JB January 17, 1978 8:49 AM
.X
2602 5 2602
2602 5 2602
2602 5 2602
.I 2603
.T
Equivalence Reducing Transition
Languages Deterministic Languages
.W
class reducing transition languages
introduced Eickel, Paul, Bauer, Samelson
shown Morris proper superclass
simple precedence languages. paper
result extended, showing that, fact, first class
equivalent class deterministic
context free languages.
.B
CACM September, 1974
.A
Schkolnick, M.
.K
reducing transition languages, syntax controlled
generators, deterministic context-free grammars
.C
4.12 5.23
.N
CA740905 JB January 17, 1978 8:52 AM
.X
1215 4 2603
1542 4 2603
1683 4 2603
1693 4 2603
1781 4 2603
1781 4 2603
1787 4 2603
1787 4 2603
1836 4 2603
1945 4 2603
1945 4 2603
2060 4 2603
2061 4 2603
2082 4 2603
2091 4 2603
2152 4 2603
2179 4 2603
2340 4 2603
2356 4 2603
2546 4 2603
2603 4 2603
2603 4 2603
2698 4 2603
2708 4 2603
2824 4 2603
2982 4 2603
2986 4 2603
3045 4 2603
3093 4 2603
1491 5 2603
2603 5 2603
2603 5 2603
2603 5 2603
763 5 2603
.I 2604
.T
Interactive Graphic Display Region
Partitioning Linear Programming
.W
Using linear programming, interactive graphic
display system has been implemented solve
region design problem partitioning region into
N nonoverlapping subregions such way
their areas specified proportions
total cost servicing them minimum.
conversational manner, user can easily obtain different
partitionings specifying modifying
boundary, service centers' locations, area
proportions, cost functions. Examples
included.
.B
CACM September, 1974
.A
Cheung, T.
.K
interactive graphic display, region partitioning,
area specification, linear programming
.C
5.41 8.2 8.3
.N
CA740904 JB January 17, 1978 8:56 AM
.X
2604 4 2604
1977 5 2604
2604 5 2604
2604 5 2604
2604 5 2604
.I 2605
.T
Precise Numerical Analysis Program
.W
description given program computing
solution small number standard
numerical analysis problems any specified accuracy,
up limit 2000 correct decimal places.
Each computed number bounded interval
multiple precision midpoint. Arithmetic operations
involving these numbers executed according interval
arithmetic concepts, non-significant
digits automatically discarded. Details supplied
problem specification problem computation.
.B
CACM September, 1974
.A
Aberth, O.
.K
interval arithmetic, multiple precision, list structure, error control
.C
4.49 5.10 5.11 5.12 5.14 5.19
.N
CA740903 JB January 17, 1978 9:01 AM
.X
1258 4 2605
1292 4 2605
1497 4 2605
1975 4 2605
2555 4 2605
2605 4 2605
2605 4 2605
1026 5 2605
2286 5 2605
2605 5 2605
2605 5 2605
2605 5 2605
.I 2606
.T
New Integration Algorithm Ordinary Differential
Equations Based Continued Fraction Approximations
.W
new integration algorithm found,
implementation compared other programmed
algorithms. new algorithm step-by-step procedure
solving initial value problem ordinary
differential equations. designed approximate
poles small integer order solutions
differential equations continued fractions obtained
manipulating sums truncated Taylor
series expansions. new method compared
Gragg-Bulirsh-Stoer, Taylor series method.
Taylor series method new method shown
superior speed accuracy, while
new method shown most superior solution
required near singularity. new method
can finally seen pass automatically through singularities
all other methods which
discussed have failed.
.B
CACM September, 1974
.A
Willers, I. M.
.K
ordinary differential equations, initial value problem,
integration, Taylor series, singularities,
continued fractions, program comparison
.C
5.17
.N
CA740902 JB January 17, 1978 9:06 AM
.X
2606 5 2606
2606 5 2606
2606 5 2606
.I 2607
.T
Problem-List Issues Concerning Computers Public Policy
.B
CACM September, 1974
.A
ACM Committee
.K
economic sociological effects, public computers
.C
2.11 2.12
.N
CA740901 JB January 17, 1978 9:08 AM
.X
2607 5 2607
2607 5 2607
2607 5 2607
2756 5 2607
3076 5 2607
3179 5 2607
2572 6 2607
2607 6 2607
2607 6 2607
2607 6 2607
2840 6 2607
3076 6 2607
.I 2608
.T
Recurrence Relations Fresnel Integral Similar Integrals
.B
CACM August,1974
.A
Acton, F. S.
.K
recurrence relations, Fresnel integral, exponential integral
.C
5.12
.N
CA740816 JB January 17, 1978 9:14 AM
.X
2608 5 2608
2608 5 2608
2608 5 2608
.I 2609
.T
Interpolation Rounded Ramp Functions
.W
new interpolation function introduced.
has infinitely many continuous derivatives
composition ramp functions smoothed bends
called Rounded Ramp Functions. interpolation
function can extended more than one variable
shown. efficient Fortran program given
which interpolation function can obtained given point set.
.B
CACM August, 1974
.A
Lagerlof, R. O. E.
.K
interpolation, approximation, smooth interpolation,
multi variable interpolation, interpolation
function, approximation function, spline-like function
.C
5.13
.N
CA740815 JB January 17, 1978 9:18 AM
.X
2609 5 2609
2609 5 2609
2609 5 2609
.I 2610
.T
Gauss Harmonic Interpolation Formulas
.W
Let R open, bounded, simply connected
region (x,y)-plane let (x*,y*)
point R. Assuming R starlike respect
(x*,y*), we discuss method computing Gauss
harmonic interpolation formulas R point (x*,y*).
Such formulas approximate harmonic function
(x*,y*) terms linear combination its
values certain selected points boundary
R. Such formulas useful approximating
solution Dirichlet problem R.
.B
CACM August, 1974
.A
Stroud, A. H.
.K
interpolation, quadrature, harmonic interpolation,
harmonic quadrature, Dirichlet problem
.C
5.13 5.16 5.17
.N
CA740814 JB January 17, 1978 9:23 AM
.X
2610 5 2610
2610 5 2610
2610 5 2610
.I 2611
.T
Complex Method Constrained Optimization (Algorithm R454)
.B
CACM August, 1974
.A
Shere, K. D.
.N
CA740813 JB January 17, 1978 9:28 AM
.X
2611 5 2611
2611 5 2611
2611 5 2611
.I 2612
.T
Rosenbrock Function Minimization (Algorithm R450)
.B
CACM August, 1974
.A
Bultheel, A.
.N
CA740812 JB January 17, 1978 9:33 AM
.X
2587 5 2612
2588 5 2612
2612 5 2612
2612 5 2612
2612 5 2612
2612 6 2612
2612 6 2612
.I 2613
.T
Transitivity Sets [G7] (Algorithm A482)
.B
CACM August, 1974
.A
McKay, J.
Regener, E.
.K
transitivity, sets
.C
5.39
.N
CA740811 JB January 17, 1978 9:35 AM
.X
2613 5 2613
2613 5 2613
2613 5 2613
.I 2614
.T
Arrow Precedence Network Transformation [H] (Algorithm A481)
.B
CACM August, 1974
.A
Crandall, K. C.
.K
critical path, networks, precedence networks
.C
3.23 5.40
.N
CA740810 JB January 17, 1978 9:37 AM
.X
2614 5 2614
2614 5 2614
2614 5 2614
.I 2615
.T
Procedures computing Smoothing Interpolating
Natural Splines [E1] (Algorithm A480)
.B
CACM August, 1974
.A
Lyche, T.
Schumaker, L. L.
.K
approximation, interpolation, spline, natural spline, spline smoothing
.C
5.13
.N
CA740809 JB January 17, 1978 9:40 AM
.X
2615 5 2615
2615 5 2615
2615 5 2615
.I 2616
.T
Conversion Programs Decision Tables: Method Objectives
.W
problems converting programs decision
tables investigated. Objectives these
conversions mainly program debugging optimization
practice. Extensions theory computation
computability suggested.
.B
CACM August, 1974
.A
Cavouras, J. C.
.K
decision tables, program optimization, debugging,
semantics, theory programming, systems analysis
.C
4.19 4.42 4.43 5.21 5.29
.N
CA740808 JB January 17, 1978 9:43 AM
.X
2053 4 2616
2220 4 2616
2492 4 2616
2517 4 2616
2518 4 2616
2518 4 2616
2598 4 2616
2616 4 2616
2616 4 2616
2616 4 2616
2616 4 2616
2726 4 2616
3034 4 2616
3034 4 2616
795 4 2616
931 5 2616
1548 5 2616
1684 5 2616
2517 5 2616
2616 5 2616
2616 5 2616
2616 5 2616
.I 2617
.T
Note Subexpression Ordering
Evaluation Arithmetic Expressions
.B
CACM August, 1974
.A
Denning, P. J.
Graham, G. S.
.N
CA740807 JB January 17, 1978 9:44 AM
.X
2617 5 2617
2617 5 2617
2617 5 2617
.I 2618
.T
New Solution Dijkstra's Concurrent Programming Problem
.W
simple solution mutual exclusion problem
presented which allows system continue
operate despite failure any individual component.
.B
CACM August, 1974
.A
Lamport, L.
.K
critical section, concurrent programming, multiprocessing, semaphores
.C
4.32
.N
CA740806 JB January 17, 1978 9:48 AM
.X
1781 4 2618
1828 4 2618
1854 4 2618
1877 4 2618
1960 4 2618
2150 4 2618
2150 4 2618
2150 4 2618
2228 4 2618
2228 4 2618
2256 4 2618
2256 4 2618
2317 4 2618
2317 4 2618
2319 4 2618
2377 4 2618
2342 4 2618
2342 4 2618
2342 4 2618
2376 4 2618
2376 4 2618
2379 4 2618
2424 4 2618
2482 4 2618
2618 4 2618
2618 4 2618
2618 4 2618
2618 4 2618
2632 4 2618
2704 4 2618
2723 4 2618
2738 4 2618
2740 4 2618
2741 4 2618
2867 4 2618
3184 4 2618
3184 4 2618
1198 5 2618
1338 5 2618
1749 5 2618
2256 5 2618
2618 5 2618
2618 5 2618
2618 5 2618
2895 5 2618
2150 6 2618
2618 6 2618
.I 2619
.T
Graph Coloring Conditions Existence
Solutions Timetable Problem
.W
necessary sufficient condition presented
existence solution Gotlieb
class-teacher timetable problem. Several relationships
established between class-teacher timetable
problem graphs preconditions. These preconditions
place additional restrictions coloration
graph. preconditions correspond unavailability
constraints preassigned meetings
class-teacher timetable problem. Using some recent
results convert graphs preconditions
graphs without them, shown existence
coloration graph required necessary
sufficient condition.
.B
CACM August, 1974
.A
Neufeld, G. A.
Tartar, J.
.K
graphs, coloration, preassignment, prevention
assignment, class-teacher timetables
.C
3.9 5.30 5.32 5.59
.N
CA740805 JB January 17, 1978 9:55 AM
.X
1355 4 2619
2619 4 2619
2619 4 2619
2772 4 2619
2787 4 2619
1419 5 2619
1429 5 2619
2619 5 2619
2619 5 2619
2619 5 2619
.I 2620
.T
Execution Time Requirements Encipherment Programs
.W
Although encipherment has often been discussed
means protect computer data, its costs
not well established. Five experiments were conducted
measure cpu time CDC 6400 required
additive ciphers programmed both assembly language
Fortran: "null transformation" measure
time move data without encipherment; encipherment
one-word key; encipherment 125-word
key; double key encipherment; encipherment using
pseudo random key. results were analyzed
consistency over 100 runs, effects constant
intermittent errors were considered.
Timing rates assembly language encipherment ranged
498,800 characters per second pseudo
random key cipher 2,092,000 characters per second
constant one-word key cipher. latter
almost equivalent rate required simply move
data without encipherment. Fortran tests required
over four times much cpu time. paper introduces
idea enciphering time coefficient
ratio enciphering time time taken
fetch store data without encipherment.
.B
CACM August, 1974
.A
Friedman, T. D.
offman, L. J.
.K
encipherment, ciphers, security, privacy transformations,
protection, cryptography, cryptology
.C
2.12 2.43 3.70 3.81 4.32 4.39
.N
CA740804 JB January 17, 1978 10:05 AM
.X
2620 5 2620
2620 5 2620
2620 5 2620
.I 2621
.T
High Security Log-in Procedure
.W
protection time sharing systems
unauthorized users often achieved use
passwords. using one-way ciphers code passwords,
risks involved storing passwords
computer can avoided. We discuss selection
suitable one-way cipher suggest
purpose polynomials over prime modulus
superior one-way ciphers derived Sannon
codes.
.B
CACM August, 1974
.A
Purdy, G. B.
.K
operating systems, time sharing systems, security, cryptography
.C
4.35
.N
CA740803 JB January 17, 1978 10:10 AM
.X
2621 5 2621
2621 5 2621
2621 5 2621
.I 2622
.T
User Authentication Scheme Not Requiring Secrecy Computer
.W
many computer operating systems user authenticates
himself entering secret password
known solely himself system. system compares
password one recorded Password
Table which available only authentication
program. integrity system depends
keeping table secret. paper password
scheme presented which does not require secrecy
computer. All aspects system, including
all relevant code data bases, may known
anyone attempting intrude. scheme based
using function H which would-be intruder
unable invert. function applied
user's password result compared table
entry, match being interpreted authentication
user. intruder may know all H
have access table, but he can penetrate system
only if he can invert H determine input
produces given output. paper discusses
issues surrounding selection suitable H. Two
different plausible arguments given penetration
would exceedingly difficult, then
argued more rigorous results unlikely. Finally,
some human engineering problems relating
scheme discussed.
.B
CACM August, 1974
.A
Evans, A. Jr.
Kantrowitz, W.
Weiss, E.
.K
operating system security, security, authentication,
passwords, one-way encryption, cryptology
.C
4.39 5.39
.N
CA740802 JB January 17, 1978 10:19 AM
.X
2622 5 2622
2622 5 2622
2622 5 2622
.I 2623
.T
New Technique Compression Storage Data
.W
widespread tendency toward storage
large programs blocks off text has produced
need efficient methods compressing storing
data. paper describes techniques can,
most cases, decrease storage size factor
two four. techniques involve special
handling leading trailing blanks, encoding
other symbols groups fixed size
unique fixed point numbers. efficiency
system considered pertinent statistics
given compared statistics other information coding techniques.
.B
CACM August, 1974
.A
Hahn, B.
.K
file maintenance, information retrieval, utility
programs, text compression, coding techniques,
data storage, data management
.C
3.70 3.73 4.49
.N
CA740801 JB January 17, 1978 10:25 AM
.X
2530 4 2623
2623 4 2623
2623 4 2623
2819 4 2623
2501 5 2623
2537 5 2623
2623 5 2623
2623 5 2623
2623 5 2623
.I 2624
.T
Formal Requirements Virtualizable Third Generation Architectures
.W
Virtual machine systems have been implemented
limited number third generation computer
systems, e.g. CP-67 IBM 360/67. previous
empirical studies, known certain third
generation computer systems, e.g. DEC PDP-10, cannot
support virtual machine system. paper,
model third-generation-like computer system
developed. Formal techniques used derive
precise sufficient conditions test whether such
architecture can support virtual machines.
.B
CACM July, 1974
.A
Popek, G. J.
Goldberg, R. P.
.K
operating system, third generation architecture,
sensitive instruction, formal requirements, abstract
model, proof, virtual machine, virtual memory,
hypervisor, virtual machine monitor
.C
4.32 4.35 5.21 5.22
.N
CA740707 JB January 17, 1978 11:19 AM
.X
2624 5 2624
2624 5 2624
2624 5 2624
3144 5 2624
1471 6 2624
2298 6 2624
2491 6 2624
2597 6 2624
2624 6 2624
2625 6 2624
2632 6 2624
.I 2625
.T
Capability-Based Addressing
.W
Various addressing schemes making use segment
tables examined. inadequacies
these schemes dealing shared addresses
explained. These inadequacies traced
lack efficient absolute address objects
these systems. direct use capability
address shown overcome these difficulties
because provides needed absolute address.
Implementation capability-based addressing discussed.
predicted use tags
identify capabilities dominate. hardware address
translation scheme which never requires
modification representation capabilities
suggested. scheme uses main memory hash table
obtaining segment's location main memory given
its unique code. hash table avoided
recently accessed segments means set associative
registers. computer using capability-based
addressing may substantially superior present
systems basis protection, simplicity
programming conventions, efficient implementation.
.B
CACM July, 1974
.A
Fabry, R. S.
.K
addressing, capabilities, addressing hardware,
protection, protection hardware, shared addresses,
information sharing, operating systems, computer
utility, segmentation, tagged architecture
.C
4.30 4.32 4.34 6.21
.N
CA740706 JB January 17, 1978 12:39 PM
.X
1458 4 2625
1523 4 2625
1603 4 2625
1698 4 2625
1747 4 2625
1748 4 2625
1854 4 2625
1877 4 2625
1960 4 2625
2317 4 2625
2358 4 2625
2377 4 2625
2377 4 2625
2378 4 2625
2497 4 2625
2558 4 2625
2625 4 2625
2625 4 2625
2625 4 2625
2625 4 2625
2626 4 2625
2632 4 2625
2669 4 2625
2840 4 2625
2922 4 2625
2941 4 2625
3081 4 2625
3101 4 2625
3105 4 2625
3112 4 2625
3144 4 2625
1471 5 2625
1753 5 2625
2358 5 2625
2438 5 2625
2625 5 2625
2625 5 2625
2625 5 2625
2626 5 2625
2868 5 2625
3105 5 2625
3144 5 2625
1471 6 2625
1471 6 2625
1746 6 2625
2080 6 2625
2298 6 2625
2358 6 2625
2377 6 2625
2377 6 2625
2380 6 2625
2491 6 2625
2558 6 2625
2597 6 2625
2624 6 2625
2625 6 2625
2625 6 2625
2625 6 2625
2625 6 2625
2629 6 2625
2632 6 2625
2632 6 2625
2632 6 2625
2868 6 2625
2939 6 2625
3068 6 2625
.I 2626
.T
Protection Control Information Sharing Multics
.W
design mechanisms control sharing
information Multics system described.
Five design principles help provide insight into
tradeoffs among different possible designs.
key mechanisms described include access control lists,
hierarchical control access specifications,
identification authentication users, primary
memory protection. paper ends discussion
several known weaknesses current protection mechanism design.
.B
CACM July, 1974
.A
Saltzer, J. H.
.K
Multics, protection, security, privacy, access control,
authentication, computer utilities, time-sharing
systems, proprietary programs, protected subsystems, virtual memory, descriptors
.C
3.70 4.30 6.2
.N
CA740705 JB January 17, 1978 12:49 PM
.X
1753 4 2626
2358 4 2626
2377 4 2626
2377 4 2626
2372 4 2626
2436 4 2626
2625 4 2626
2626 4 2626
2626 4 2626
2626 4 2626
2626 4 2626
2626 4 2626
2669 4 2626
2786 4 2626
2840 4 2626
2840 4 2626
2868 4 2626
2868 4 2626
2870 4 2626
2919 4 2626
3017 4 2626
3105 4 2626
3110 4 2626
3144 4 2626
3174 4 2626
1746 5 2626
2358 5 2626
2377 5 2626
2625 5 2626
2626 5 2626
2626 5 2626
2626 5 2626
2629 5 2626
2840 5 2626
1471 6 2626
1746 6 2626
2436 6 2626
2626 6 2626
2629 6 2626
.I 2627
.T
Scheduling Independent Tasks Reduce Mean Finishing Time
.W
Sequencing minimize mean finishing time
(or mean time system) not only desirable
user, but also tends minimize each point
time storage required hold incomplete
tasks. paper deterministic model independent
tasks introduced new results derived
which extend generalize algorithms known
minimizing mean finishing time. addition
presenting analyzing new algorithms shown
most general mean-finishing-time problem
independent tasks polynomial complete, hence unlikely
admit non-enumerative solution
.B
CACM July, 1974
.A
Bruno, J.
Coffman, E. G. Jr.
Sethi, R.
.K
minimizing mean finishing time, minimizing mean flow
time, sequencing algorithms, optimal scheduling
algorithms, deterministic scheduling models
.C
4.32 5.39
.N
CA740704 JB January 17, 1978 12:56 PM
.X
2627 5 2627
2627 5 2627
2627 5 2627
.I 2628
.T
Minimal-Total-Processing Time Drum Disk Scheduling Disciplines
.W
article investigates application
minimal-total-processing-time (MTPT) scheduling
disciplines rotating storage units random arrival
requests allowed. Fixed-head drum
moving-head drum moving-head disk storage units
considered, emphasis placed relative
merits MTPT scheduling discipline respect
shortest-latency-time-first (SLTF) scheduling
discipline. results simulation studies
presented show neither scheduling discipline
unconditionally superior other. most
fixed-head drum applications, SLTF discipline
preferable MTPT, but intra-cylinder disk scheduling
MTPT discipline offers distinct advantage
over SLTF discipline. computational requirements
algorithm implements MTPT scheduling
discipline shown comparable SLTF algorithms.
both cases, sorting procedure
most time-consuming phase algorithm.
.B
CACM July, 1974
.A
Fuller, S. H.
.K
drum scheduling, disk scheduling, shortest-latency-time-first
(SLTF), minimal-total-processing-time
(MTPT), rotating storage units
.C
4.31 4.41 6.34 6.35
.N
CA740703 JB January 17, 1978 1:07 PM
.X
2628 4 2628
2628 4 2628
2891 4 2628
3072 4 2628
3097 4 2628
2375 5 2628
2496 5 2628
2628 5 2628
2628 5 2628
2628 5 2628
2891 5 2628
2375 6 2628
2628 6 2628
.I 2629
.T
UNIX Time-Sharing system
.W
UNIX general-purpose, multi-user, interactive
operating system Digital Equipment
Corporation PDP-11/40 11/45 computers. offers
number features seldom found even larger
operating systems, including: (1) hierarchical file system
incorporating demountable volumes; (2) compatible
file, device, inter-process I/O; (3) ability
initiate asynchronous processes; (4) system command
language selectable per-user basis; (5) over
100 subsystems including dozen languages.This
paper discusses nature implementation
file system user command interface.
.B
CACM July, 1974
.A
Ritchie, D. M.
Thompson, K.
.K
time-sharing, operating system, file system, command language, PDP-11
.C
4.30 4.32
.N
CA740702 JB January 17, 1978 1:40 PM
.X
2299 4 2629
2501 4 2629
2629 4 2629
2629 4 2629
2868 4 2629
2915 4 2629
2928 4 2629
2951 4 2629
3114 4 2629
1502 5 2629
2380 5 2629
2626 5 2629
2629 5 2629
2629 5 2629
2629 5 2629
2786 5 2629
2840 5 2629
2919 5 2629
3017 5 2629
3110 5 2629
3174 5 2629
1471 6 2629
1746 6 2629
1746 6 2629
2194 6 2629
2358 6 2629
2377 6 2629
2436 6 2629
2536 6 2629
2593 6 2629
2625 6 2629
2626 6 2629
2629 6 2629
2629 6 2629
2629 6 2629
2629 6 2629
2629 6 2629
2629 6 2629
2629 6 2629
2858 6 2629
.I 2630
.T
Computing Sets Shortest Paths Graph
.W
Two algorithms presented construct
k shortest paths between every pair vertices
directed graph. These algorithms generalize Floyd
algorithm Dantzig algorithm finding
shortest path between every pair vertices directed graph.
.B
CACM June, 1974
.A
Minieka, E.
.K
graph, network, shortest path, algorithm
.C
5.32
.N
CA740616 JB January 17, 1978 1:55 PM
.X
1846 4 2630
2630 4 2630
2650 4 2630
2630 5 2630
2630 5 2630
2630 5 2630
2757 5 2630
2933 5 2630
576 5 2630
1059 6 2630
2630 6 2630
2630 6 2630
2757 6 2630
.I 2631
.T
Information-Theoretic Approach
Text Searching Direct Access Systems
.W
Using direct access computer files bibliographic
information, attempt made overcome
one problems often associated information
retrieval, namely, maintenance use large
dictionaries, greater part which used only
infrequently. novel method presented, which
maps hyperbolic frequency distribution.
more suited implementation storage devices.
method treats text string characters rather
than words bounded spaces, chooses subsets
strings such their frequencies occurrence
more even than those word types. members
subset then used index keys retrieval.
rectangular distribution key frequencies
results much simplified file organization
promises considerable cost advantages.
.B
CACM June, 1974
.A
Barton, I. J.
Creasey, S. E.
Lynch, M. F.
Snell, M. J.
.K
text searching, information theory, file organization,
direct access, information retrieval, character
string, bit vector
.C
3.42 3.70 3.73 3.74 5.6
.N
CA740615 JB January 17, 1978 2:07 PM
.X
2532 4 2631
2631 4 2631
2631 4 2631
2746 4 2631
3001 4 2631
2139 5 2631
2532 5 2631
2631 5 2631
2631 5 2631
2631 5 2631
.I 2632
.T
HYDRA: Kernel Multiprocessor Operating System
.W
paper describes design philosophy
HYDRA-the kernel operating system C.mmp,
Carnegie-Mellon Multi-Mini-Processor. philosophy
realized through introduction
generalized notion "resource", both physical virtual,
called "object". Mechanisms presented
dealing objects, including creation new
types, specification new operations applicable
given type, sharing, protection any reference
given object against improper application
any operations defined respect
type object. mechanisms provide coherent
basis extension system two directions:
introduction new facilities, creation
highly secure systems.
.B
CACM June, 1974
.A
Wulf, W.
Cohen, E.
Corwin, W.
Jones, A.
Levin, R.
Pierson, C.
Pollack, F.
.K
operating system, kernel, nucleus, protection, security
.C
4.3 6.2
.N
CA740614 JB January 17, 1978 2:40 PM
.X
1458 4 2632
1523 4 2632
1603 4 2632
1698 4 2632
1747 4 2632
1748 4 2632
1828 4 2632
1854 4 2632
1854 4 2632
1877 4 2632
1877 4 2632
1960 4 2632
1960 4 2632
2150 4 2632
2317 4 2632
2319 4 2632
2319 4 2632
2377 4 2632
2377 4 2632
2378 4 2632
2378 4 2632
2342 4 2632
2376 4 2632
2379 4 2632
2320 4 2632
2424 4 2632
2482 4 2632
2497 4 2632
2558 4 2632
2618 4 2632
2625 4 2632
2632 4 2632
2632 4 2632
2632 4 2632
2704 4 2632
2723 4 2632
2738 4 2632
2738 4 2632
2740 4 2632
2740 4 2632
2741 4 2632
2840 4 2632
2867 4 2632
2868 4 2632
2941 4 2632
3105 4 2632
3127 4 2632
3144 4 2632
3184 4 2632
1471 5 2632
1749 5 2632
2080 5 2632
2632 5 2632
2632 5 2632
2632 5 2632
2868 5 2632
2870 5 2632
2876 5 2632
3105 5 2632
3144 5 2632
953 6 2632
1471 6 2632
1471 6 2632
2080 6 2632
2298 6 2632
2377 6 2632
2377 6 2632
2380 6 2632
2491 6 2632
2558 6 2632
2597 6 2632
2624 6 2632
2625 6 2632
2625 6 2632
2625 6 2632
2632 6 2632
2632 6 2632
2632 6 2632
2632 6 2632
2632 6 2632
2685 6 2632
2868 6 2632
2939 6 2632
3068 6 2632
.I 2633
.T
Compact Representation Contour Plots Phone Line Transmission
.W
Methods compact representation contour
plots described tested. These
intended reduce cost transmitting contour plots
over phone lines. We feel some these methods
could used transmit contour plots over voice grade phone lines.
.B
CACM June, 1974
.A
Adams, J.
Gary, J.
.K
contour plotting, data transmission, remote terminal, data compaction
.C
4.41 5.13
.N
CA740613 JB January 17, 1978 2:48 PM
.X
2633 4 2633
2633 5 2633
2633 5 2633
2633 5 2633
2987 5 2633
699 5 2633
1326 6 2633
1630 6 2633
2125 6 2633
2547 6 2633
2633 6 2633
421 6 2633
524 6 2633
.I 2634
.T
Evaluation Statistical Software Social Sciences
.W
Several hundred college university computer
installations now offer various types statistical
packages general use. Among those most widely available
OSIRIS, SPSS, BMD, DATA-TEXT, TSAR.
order provide users basis selection
use, tests were made each these systems,
results summarized cost performance.
.B
CACM June, 1974
.A
Slysz, W. D.
.K
statistical computation, statistical software,
descriptive statistics, bivariate tables, Pearson
correlation, regression, factor analysis, one-way analysis variance
.C
1.3 3.30 4.19 4.22 4.49 5.5
.N
CA740612 JB January 17, 1978 2:54 PM
.X
2634 5 2634
2634 5 2634
2634 5 2634
.I 2635
.T
Exact Probabilities R X C Contingency Tables (Algorithm R434)
.B
CACM June, 1974
.A
Boulton, D. M.
.N
CA740611 JB January 17, 1978 2:56 PM
.X
2635 5 2635
2635 5 2635
2635 5 2635
.I 2636
.T
Generation Random Correlated Normal Variables (Algorithm R425)
.B
CACM June, 1974
.A
Page, R. L.
.N
CA740610 JB January 17, 1978 2:57 PM
.X
2636 5 2636
2636 5 2636
2636 5 2636
.I 2637
.T
Hidden-Line Plotting Program (Algorithm R420)
.B
CACM June, 1974
.A
Ellis, T. M. R.
.N
CA740609 JB January 17, 1978 2:59 PM
.X
2637 5 2637
2637 5 2637
2637 5 2637
.I 2638
.T
Hidden-Line Plotting Program (Algorithm R420)
.B
CACM June, 1974
.A
Gaither, B.
.N
CA740608 JB January 17, 1978 3:00 PM
.X
2638 5 2638
2638 5 2638
2638 5 2638
.I 2639
.T
Calculation Fourier Integrals (Algorithm R418)
.B
CACM June, 1974
.A
Piessens, R.
.N
CA740607 JB January 17, 1978 3:01 PM
.X
2639 5 2639
2639 5 2639
2639 5 2639
.I 2640
.T
Modified Havie Integration (Algorithm R400)
.B
CACM June, 1974
.A
Piessens, R.
.N
CA740606 JB January 17, 1978 3:04 PM
.X
2350 4 2640
2354 4 2640
2640 4 2640
2355 5 2640
2640 5 2640
2640 5 2640
2640 5 2640
.I 2641
.T
Minimal Spanning Tree clustering Method [Z] (Algorithm A479)
.B
CACM June, 1974
.A
Page, R. L.
.K
clustering, pattern recognition, feature
selection, minimal spanning trees
.C
3.63 5.39 5.5
.N
CA740605 JB January 17, 1978 3:06 PM
.X
2641 4 2641
2363 5 2641
2641 5 2641
2641 5 2641
2641 5 2641
.I 2642
.T
Solution Overdetermined System Equations
L1 Norm [F4] (Algorithm A478)
.B
CACM June, 1974
.A
Barrodale, I.
Roberts, F. D. K.
.K
L1 approximation, L1 norm, overdetermined system
equations, linear programming, simplex method
.C
5.13 5.41
.N
CA740604 JB January 17, 1978 3:25 PM
.X
2642 5 2642
2642 5 2642
2642 5 2642
2759 5 2642
2642 6 2642
.I 2643
.T
Minimization Spatially-Multiplexed Character Sets
.W
paper describes technique compacting
character sets digital computer while retaining
fast access individual bits. considers problem
minimizing storage needed contain
such tables. Reduction techniques developed,
problem shown reduce covering problem.
.B
CACM June, 1974
.A
Gimpel, J. F.
.K
parsing, lexical analysis,scanning,
string processing, spatial multiplexing
.C
4.9
.N
CA740603 JB January 17, 1978 3:31 PM
.X
2643 5 2643
2643 5 2643
2643 5 2643
2706 5 2643
2643 6 2643
.I 2644
.T
Theorem-Proving Language Experimentation
.W
Because large number strategies
inference rules presently under consideration
automated theorem proving, there need developing
language especially oriented toward automated
theorem proving. paper discusses some features
instructions language. use
language permits easy extension automated
theorem-proving programs include new strategies
and/or new inference rules. Such extend ability
permit general experimentation various
alternative systems.
.B
CACM June, 1974
.A
Henschen, L.
Overbeek, R.
Wos, L.
.K
theorem proving, resolution, factoring,
paramodulation, programming languages
.C
3.60 4.22 5.21
.N
CA740602 JB January 17, 1978 3:37 PM
.X
2644 5 2644
2644 5 2644
2644 5 2644
.I 2645
.T
Two Languages Estimating Program Efficiency
.W
Two languages enabling their users estimate
efficiency computer programs presented.
program whose efficiency one wishes estimate written
first language, go-to-less programming
language which includes most features Algol
60. second language consists interactive
commands enabling its users provide additional information
program written first
language output results estimating its efficiency.
Processors two languages also
described. first processor syntax-directed
translator which compiles program into symbolic
formula representing execution time program.
sound processor set procedures
program. second processor set
procedures algebraic manipulation which can
called user operate formula produced
first processor. Examples usage
two languages included. limitations
present system, its relation Knuth's work
analysis algorithms, some directions
further research also discussed.
.B
CACM June, 1974
.A
CCohen, J.
Zuckerman, C.
.K
programming languages, syntax-directed translation,
symbolic manipulation, program efficiency,
analysis algorithms
.C
4.12 4.20 5.24 5.25
.N
CA740601 JB January 17, 1978 3:48 PM
.X
1086 4 2645
1132 4 2645
1234 4 2645
1263 4 2645
1265 4 2645
1270 4 2645
1323 4 2645
1358 4 2645
1379 4 2645
1380 4 2645
1453 4 2645
1464 4 2645
1484 4 2645
1491 4 2645
1498 4 2645
1613 4 2645
1614 4 2645
1781 4 2645
1825 4 2645
1860 4 2645
2083 4 2645
2178 4 2645
2179 4 2645
2252 4 2645
2325 4 2645
2341 4 2645
2546 4 2645
2645 4 2645
2652 4 2645
2684 4 2645
2842 4 2645
2929 4 2645
2934 4 2645
3069 4 2645
669 4 2645
679 4 2645
691 4 2645
761 4 2645
949 4 2645
989 4 2645
2645 5 2645
2645 5 2645
2645 5 2645
2719 5 2645
3094 5 2645
3184 5 2645
1265 6 2645
1626 6 2645
210 6 2645
2151 6 2645
2167 6 2645
2179 6 2645
2210 6 2645
2645 6 2645
2645 6 2645
2657 6 2645
.I 2646
.T
Model Masking Rotational Latency Dynamic Disk Allocation
.W
paper presents background algorithms
masking rotational latency disk
drum. discusses anticipatory input output
blocks data buffer primary memories
mono-programmed computer system. basic permutation
algorithm several variations given.
Because anticipatory nature I/O scheduling,
these algorithms restricted classes
programs predictable behavior. While methods
not restricted numerical computations,
matrix partial differential equation methods
typical examples their use. shown
latency may masked using small amount buffer
memory. methods discussed independent
overall size data base being considered.
.B
CACM May, 1974
.A
Gold, D. E.
Kuck, D. J.
.K
buffer memory, memory hierarchy, permutation algorithm,
rotational latency, staging, storage allocation
.C
4.41 6.20
.N
CA740507 JB January 17, 1978 3:59 PM
.X
2646 5 2646
2646 5 2646
2646 5 2646
.I 2647
.T
More Algorithms Reveal Properties
Floating Point Arithmetic Units
.B
CACM May, 1974
.A
Gentleman, W. M.
Marovich, S. B.
.K
floating-point arithmetic, high-level
languages, philosophy language design
.C
4.9 5.19
.N
CA740506 JB January 17, 1978 4:04 PM
.X
2647 4 2647
2792 4 2647
2267 5 2647
2647 5 2647
2647 5 2647
2647 5 2647
2792 5 2647
2267 6 2647
2647 6 2647
.I 2648
.T
Design Number Theory Package
Optimized Trial Division routine
.W
number theory package described which uses
doubly linked list structures storing multiprecise
integers. package has been coded IBM's Basic
Assembly Language makes heavy use macro
language conditional assembly. optimally coded
trial division routine also described which
can used determine unique factorization large integers.
.B
CACM May, 1974
.A
Wunderlich, M. C.
Selfridge, J. L.
.K
number theory package, trial division, multiprecise
arithmetic, factorization, doubly linked lists,
pseudoprime
.C
3.15
.N
CA740505 JB January 17, 1978 4:09 PM
.X
2648 5 2648
2648 5 2648
2648 5 2648
.I 2649
.T
Distributions Significant Digits Roundoff Errors
.W
Generalized logarithmic law derived
distribution first t significant digits
random digital integer. result then used
determine distribution roundoff
errors floating-point operations, which mixture
uniform reciprocal distributions.
.B
CACM May, 1974
.A
Tsao, N.
.K
significant digits, floating-point operations,
roundoff errors, uniform distribution, reciprocal
distribution, variance, mean valve
.C
5.10 5.11
.N
CA740504 JB January 17, 1978 4:12 PM
.X
2649 5 2649
2649 5 2649
2649 5 2649
.I 2650
.T
Order-n Correction Regular Languages
.W
method presented calculating string
B, belonging given regular language L,
which "nearest" (in number edit operations)
given input string a. B viewed reasonable
"correction" possibly erroneous string a,
originally intended string L.
calculation B method presented requires
time proportional |a|, number characters
a. method should find applications information
retrieval, artificial intelligence, spelling
correction systems.
.B
CACM May, 1974
.A
Wagner, R. A.
.K
error correction, regular languages, regular events,
finite state automata, compiler error recovery,
spelling correction, string best match problem, correction,
corrector, errors, nondeterministic finite-state
automata
.C
4.12 4.20 5.22 5.23 5.42
.N
CA740503 JB January 17, 1978 4:26 PM
.X
1179 4 2650
1225 4 2650
1288 4 2650
1350 4 2650
1544 4 2650
1646 4 2650
1646 4 2650
1781 4 2650
1846 4 2650
1945 4 2650
2111 4 2650
2534 4 2650
2534 4 2650
2556 4 2650
2556 4 2650
2630 4 2650
2650 4 2650
2650 4 2650
2650 4 2650
2650 4 2650
2698 4 2650
2708 4 2650
2708 4 2650
2887 4 2650
3093 4 2650
2111 5 2650
2650 5 2650
2650 5 2650
2650 5 2650
576 5 2650
680 5 2650
830 5 2650
.I 2651
.T
Treatment Data Types EL1
.W
constructing general purpose programming
language, key issue providing sufficient
set data types associated operations manner
permits both natural problem-oriented notation
efficient implementation. EL1 language contains
number features specifically designed
simultaneously satisfy both requirements. resulting
treatment data types includes provision
programmer-defined data types data types generic
routines, programmer control over type conversion,
very flexible data type behavior, context
allows efficient compiled code compact data
representation.
.B
CACM May, 1974
.A
Wegbreit, B.
.K
data types, modes, mode unions, type conversion,
coercion, generic functions, extensible languages,
data type definition, data description language, compilation
.C
4.12 4.13 4.22
.N
CA740502 JB January 17, 1978 4:32 PM
.X
2651 5 2651
2651 5 2651
2651 5 2651
2723 5 2651
2941 5 2651
2956 5 2651
3030 5 2651
1379 6 2651
1471 6 2651
1549 6 2651
1749 6 2651
1826 6 2651
210 6 2651
2247 6 2651
2356 6 2651
2356 6 2651
2457 6 2651
2558 6 2651
2651 6 2651
2651 6 2651
2651 6 2651
2651 6 2651
2958 6 2651
2972 6 2651
627 6 2651
731 6 2651
.I 2652
.T
Reduction Compilation Costs Through Language Contraction
.W
Programming languages tailored particular
groups users can often constructed removing
unwanted features general purpose language.
paper describes use simulation techniques
predict savings compilation cost achievable
such approach. results suggest function
which describes effect changes power
language compilation cost algorithm
expressed language: features not actually
used algorithm removed language,
cost compiling algorithm decreases moderately,
but features needed removed,
compilation cost increases sharply.
.B
CACM May, 1974
.A
Shaw, M.
.K
design programming languages, language contraction,
compiler design, compilation cost, Algol
.C
4.12 4.20
.N
CA740501 JB January 17, 1978 4:39 PM
.X
1086 4 2652
1132 4 2652
1234 4 2652
1263 4 2652
1265 4 2652
1270 4 2652
1323 4 2652
1358 4 2652
1379 4 2652
1380 4 2652
1453 4 2652
1464 4 2652
1484 4 2652
1491 4 2652
1498 4 2652
1613 4 2652
1614 4 2652
1781 4 2652
1825 4 2652
1860 4 2652
2083 4 2652
2178 4 2652
2179 4 2652
2252 4 2652
2325 4 2652
2341 4 2652
2546 4 2652
2645 4 2652
2652 4 2652
2684 4 2652
2842 4 2652
2929 4 2652
2934 4 2652
3069 4 2652
669 4 2652
679 4 2652
691 4 2652
761 4 2652
949 4 2652
989 4 2652
2652 5 2652
2652 5 2652
2652 5 2652
3184 5 2652
.I 2653
.T
Solution Transcendental Equation w*exp(x)=x (Algorithm R443)
.B
CACM April, 1974
.A
Einarsson, B.
.N
CA740417 JB January 17, 1978 4:44 PM
.X
2653 4 2653
2654 4 2653
1955 5 2653
2653 5 2653
2653 5 2653
2653 5 2653
.I 2654
.T
Generator Set-Partitions Exactly R Subsets [G7] (Algorithm A477)
.B
CACM April, 1974
.A
Ehrich, G.
.K
partitions, subset generation, permutations
.C
5.39
.N
CA740416 JB January 17, 1978 4:46 PM
.X
2653 4 2654
2654 4 2654
1955 5 2654
2654 5 2654
2654 5 2654
2654 5 2654
.I 2655
.T
Six Subprograms Curve Fitting Using
Splines Under Tension [E2] (Algorithm A476)
.B
CACM April, 1974
.A
Cline, A. K.
.K
interpolation, splines, contouring, curve fitting
.C
5.13 8.2
.N
CA740415 JB January 17, 1978 4:48 PM
.X
2655 4 2655
2655 5 2655
2655 5 2655
2655 5 2655
2656 5 2655
2655 6 2655
.I 2656
.T
Scalar- Planar- Valued Curve Fitting Using Splines Under Tension
.W
spline under tension introduced
Schweikert attempt imitate cubic splines
but avoid spurious critical points they induce.
defining equations presented here, together
efficient method determining necessary
parameters computing resultant spline.
standard scalar-valued curve fitting problem discussed,
well fitting open closed
curves plane. use these curves
importance tension fitting contour
lines mentioned application.
.B
CACM April, 1974
.A
Cline, A. K.
.K
interpolation, splines, contouring, curve fitting
.C
5.13 8.2
.N
CA740414 JB January 18, 1978 9:23 AM
.X
2656 4 2656
2655 5 2656
2656 5 2656
2656 5 2656
2656 5 2656
2656 6 2656
.I 2657
.T
Improved Program-Synthesizing Algorithm Its Correctness
.W
improved program-synthesizing algorithm
based algorithm proposed Waldinger
Lee 1969 given. old algorithm, program-synthesizing
problem translated into theorem-proving
problem, program obtained analyzing proof.
improved algorithm, analysis
not necessary, program obtained soon
proof completed. achieved using
modified variable tracing mechanism invented Green
1969. correctness improved algorithm
also proved; i.e. program thus obtained
always satisfies specification.
.B
CACM April, 1974
.A
Lee, R. C. T.
Chang, C. L.
Waldinger, R. J.
.K
program-synthesizing algorithms, theorem proving,
consequence finding, primitive resolutions
.C
3.60 3.64 4.20 4.42 5.21 5.22 5.24
.N
CA740413 JB January 18, 1978 9:32 AM
.X
2657 4 2657
2719 4 2657
2210 5 2657
2657 5 2657
2657 5 2657
2657 5 2657
2719 5 2657
1626 6 2657
210 6 2657
2151 6 2657
2167 6 2657
2210 6 2657
2645 6 2657
2657 6 2657
.I 2658
.T
Alternative Approach Mutual Recursion
Algol 60 Using Restricted Compilers
.B
CACM April, 1974
.A
Balfour, A.
.K
Algol 60, mutual recursion, compiler restrictions
.C
4.12 4.22
.N
CA740412 JB February 1, 1978 10:32 AM
.X
2658 4 2658
2551 5 2658
2658 5 2658
2658 5 2658
2658 5 2658
.I 2659
.T
Some Remarks Lookup Structured Variables
.B
CACM April, 1974
.A
Abrahams, P. W.
.K
PL/1, symbol table, structured variables,
qualified references, compilers
.C
4.12 4.22
.N
CA740411 JB February 1, 1978 10:34 AM
.X
2659 4 2659
2449 5 2659
2659 5 2659
2659 5 2659
2659 5 2659
.I 2660
.T
Addendum M. L. Patrick Paper
.B
CACM April, 1974
.A
Simmons, G. C.
.K
parallelism, polynomial root finding, real zeros
.C
5.15
.N
CA740410 JB February 1, 1978 10:36 AM
.X
2660 4 2660
2266 5 2660
2660 5 2660
2660 5 2660
2660 5 2660
.I 2661
.T
Ideal Teaching Machines-A Solution Pedagogic Language Problem
.B
CACM April, 1974
.A
Sterling, T. D.
Pollack, S. V.
.K
education, programming languages, simulators
.C
1.52 4.2
.N
CA740409 JB February 1, 1978 10:38 AM
.X
2661 5 2661
2661 5 2661
2661 5 2661
.I 2662
.T
Graduate Education: Ph.D. Glut: Response Rebuttal
.B
CACM April, 1974
.A
Freeman, P.
Malcolm, M. A.
Payne, W. H.
.K
graduate education, Ph.D. production, accreditation
.C
1.5 2.2 2.3
.N
CA740408 JB February 1, 1978 10:40 AM
.X
2662 4 2662
2531 5 2662
2662 5 2662
2662 5 2662
2662 5 2662
.I 2663
.T
Study Computer Use Graduate School Business
.B
CACM April, 1974
.A
Lucas, H. C. Jr.
Montgomery, D. B.
Larreche, J. C.
.K
education, management, business schools
.C
1.50 1.52
.N
CA740407 JB January 18, 1978 9:35 AM
.X
2663 5 2663
2663 5 2663
2663 5 2663
.I 2664
.T
Parallelism Tape-Sorting
.W
Two methods employing parallelism tape-sorting
presented. Method natural
way use parallelism. Method B new. Both approximately
achieve goal reducing processing
time divisor which number processors.
.B
CACM April, 1974
.A
Even, S.
.K
tape sorting, parallelism, external sorting, queues, stacks
.C
5.31 6.22
.N
CA740406 JB January 18, 1978 9:44 AM
.X
2664 5 2664
2664 5 2664
2664 5 2664
2714 5 2664
3075 5 2664
2289 6 2664
2557 6 2664
2664 6 2664
2664 6 2664
2714 6 2664
.I 2665
.T
Copying List Structures Using Bounded Workspace
.W
Two new algorithms presented list structure
copying using bounded workspace. first,
primarily theoretical interest, shows without
cell tag bits task can performed time
n^2. second algorithm, assuming one tag bit
each cell, delivers attractive practical speed.
Any noncyclic structure copied linear speed, while
cyclic structures copied average time
less than nlogn. No foreknowledge cycle absence
necessary achieve linear speed. variation
second algorithm solves open problem concerning
list structure marking. result demonstrates
marking can done average time nlogn without
aid supplemental tag bits stacks.
.B
CACM April, 1974
.A
Lindstrom, G.
.K
list processing, copying, marking, space complexity
.C
4.34 5.25
.N
CA740405 JB January 18, 1978 9:55 AM
.X
1869 4 2665
2513 4 2665
2665 4 2665
2665 4 2665
2723 4 2665
2855 4 2665
3106 4 2665
1383 5 2665
1549 5 2665
2665 5 2665
2665 5 2665
2665 5 2665
2766 5 2665
2954 5 2665
3106 5 2665
1549 6 2665
210 6 2665
1972 6 2665
2665 6 2665
2665 6 2665
2665 6 2665
2766 6 2665
2766 6 2665
2855 6 2665
2954 6 2665
2998 6 2665
.I 2666
.T
Lions' Counter Example Gotlieb's Method
Construction School Timetables
.W
timetable problem essentially discrete
problem. Although discrete problem may
have no feasible solution, there may exist solution
equivalent continuous problem. example
given, which nondiscrete solution can
interpreted set timetables, differing
week week, which together satisfy long-term
requirements timetable problem.
.B
CACM April, 1974
.A
Smith, G.
Sefton, I. M.
.K
combinatorial, multi-index problem, necessary
conditions, schedule, school timetable, timetable
.C
3.51 5.39
.N
CA740404 JB January 18, 1978 10:02 AM
.X
2666 5 2666
2666 5 2666
2666 5 2666
.I 2667
.T
Execution Characteristics Programs Page-on-Demand System
.W
Data presented which show execution characteristics
two types commonly used programs
large-scale, time-shared computer system. software
monitoring facility built into supervisor
used data collection during normal system operation.
These data were analyzed, results
analysis presented Fortran compiler
interactive line file editor. Probability
distribution functions other data given
such things CPU intervals, I/O intervals,
number such intervals during execution. Empirical
distributions compared simple theoretical
distributions (exponential, hyperexponential, geometric).
Other data show paging characteristics
tasks function number pages those tasks have core.
.B
CACM April, 1974
.A
Boyse, J. W.
.K
program behavior, virtual memory, paging, demand paging,
software monitor, program execution characteristics,
compiler execution behavior, editor execution behavior
.C
4.12 4.19 4.32 4.39 4.9 8.1
.N
CA740403 JB January 18, 1978 10:12 AM
.X
1533 4 2667
1892 4 2667
1924 4 2667
1951 4 2667
2095 4 2667
2218 4 2667
2297 4 2667
2374 4 2667
2526 4 2667
2667 4 2667
2667 4 2667
2667 4 2667
2668 4 2667
2668 4 2667
2668 4 2667
2862 4 2667
2863 4 2667
1604 5 2667
1728 5 2667
1827 5 2667
2667 5 2667
2667 5 2667
2667 5 2667
.I 2668
.T
Computation Page Fault Probability Program Transition Diagram
.W
algorithm given calculating page fault
probability virtual memory system operating
under demand paging various memory sizes replacement
rules. first order Markov model program
behavior assumed, representation system
based memory states, control states, memory
substates presented. algorithm general
sense page fault probabilities can
calculated nonpredictive replacement rules applied
any program represented one-step Markov
chain. detailed example given illustrate
algorithm Random Least Recently Used (LRU)
replacement rules.
.B
CACM April, 1974
.A
Franklin, M. A.
Gupta, R. K.
.K
virtual memory, demand paging, replacement rule,
program model, program behavior, Markov model,
page fault, page fault probability
.C
4.30 6.20
.N
CA740402 JB January 18, 1978 10:31 AM
.X
1533 4 2668
1892 4 2668
1924 4 2668
1951 4 2668
2095 4 2668
2218 4 2668
2297 4 2668
2374 4 2668
2526 4 2668
2667 4 2668
2667 4 2668
2667 4 2668
2668 4 2668
2668 4 2668
2668 4 2668
2668 4 2668
2668 4 2668
2862 4 2668
2863 4 2668
1604 5 2668
1728 5 2668
1761 5 2668
1827 5 2668
2668 5 2668
2668 5 2668
2668 5 2668
2677 5 2668
.I 2669
.T
Simple Linear Model Demand Paging Performance
.W
Predicting performance proposed automatically
managed multilevel memory system requires
model patterns which programs refer
information stored memory. Some recent
experimental measurements Multics virtual memory
suggest that, rough approximations, remarkably
simple program reference model suffice. simple
model combines effect information
reference pattern effect automatic management
algorithm produce single, composite
statement: mean number memory references between
paging exceptions increases linearly
size paging memory. resulting model easy
manipulate, applicable such diverse
problems choosing optimum size paging memory,
arranging reproducible memory usage charges,
estimating amount core memory sharing.
.B
CACM April, 1974
.A
Saltzer, J. H.
.K
paging, demand paging, memory models, program models,
performance measurement, multilevel memory
systems, virtual memory, associative memory, memory usage accounting, Multics
.C
3.79 4.30 4.32
.N
CA740401 JB January 18, 1978 10:41 AM
.X
1892 4 2669
1901 4 2669
2085 4 2669
2095 4 2669
2218 4 2669
2277 4 2669
2319 4 2669
2319 4 2669
2329 4 2669
2358 4 2669
2377 4 2669
2373 4 2669
2374 4 2669
2380 4 2669
2434 4 2669
2499 4 2669
2481 4 2669
2501 4 2669
2582 4 2669
2582 4 2669
2625 4 2669
2626 4 2669
2669 4 2669
2669 4 2669
2669 4 2669
2669 4 2669
2828 4 2669
2863 4 2669
2863 4 2669
2881 4 2669
2928 4 2669
2996 4 2669
3006 4 2669
3016 4 2669
3052 4 2669
3054 4 2669
3067 4 2669
1751 5 2669
1901 5 2669
2017 5 2669
2358 5 2669
2669 5 2669
2669 5 2669
2669 5 2669
.I 2670
.T
Efficient Implementation Variable Projection
Algorithm Nonlinear Least Squares Problems
.W
Nonlinear least squares frequently arise which
variables solved can separated
into linear nonlinear part. variable projection
algorithm has been developed recently which
designed take advantage structure problem
whose variables separate way.
paper gives slightly more efficient slightly more
general version algorithm than has appeared
earlier.
.B
CACM March, 1974
.A
Krogh, F. T.
.K
nonlinear least squares, parameter estimation, variable projection
.C
5.14 5.15
.N
CA740313 JB January 18, 1978 10:49 AM
.X
2670 5 2670
2670 5 2670
2670 5 2670
.I 2671
.T
Note Combinatorial Problem Burnett Coffman
.B
CACM March, 1974
.A
Stone, H. S.
.K
memories, interleaving, derangements, rencontres, combinatorial analysis
.C
5.39 6.34
.N
CA740312 JB January 18, 1978 10:54 AM
.X
2671 5 2671
2671 5 2671
2671 5 2671
.I 2672
.T
Emotional Content Considered Dangerous
.B
CACM March, 1974
.A
Smoliar, S. W.
.K
artificial intelligence, heuristic programming, models
cognitive processes, computer music, computer
composition, music theory
.C
3.44 3.65
.N
CA740311 JB January 18, 1978 10:56 AM
.X
2672 5 2672
2672 5 2672
2672 5 2672
.I 2673
.T
Quadratic Search Hash Tables Size p^n
.B
CACM March, 1974
.A
Ackerman, A. F.
.K
hashing, quadratic search
.C
4.10
.N
CA740310 JB January 18, 1978 10:58 AM
.X
2673 5 2673
2673 5 2673
2673 5 2673
2704 5 2673
2770 5 2673
3053 5 2673
1247 6 2673
1329 6 2673
1552 6 2673
1749 6 2673
1785 6 2673
1786 6 2673
1869 6 2673
1973 6 2673
1973 6 2673
1992 6 2673
1992 6 2673
2018 6 2673
2107 6 2673
2109 6 2673
2109 6 2673
2356 6 2673
2379 6 2673
2412 6 2673
2543 6 2673
2673 6 2673
2673 6 2673
2673 6 2673
2707 6 2673
2770 6 2673
.I 2674
.T
Scan Conversion Algorithms Cell Organized Raster Display
.W
Raster scan computer graphics "real time"
character generators have previously been limited
alphanumeric characters. display has been described
which extends capabilities organization
include general graphics. Two fundamentally different
scan conversion algorithms which have been
developed support display presented. One
most suitable non-interactive applications
other interactive applications. algorithms
were implemented Fortran CDC 6400
computer. Results obtained implementations show
noninteractive algorithms can significantly
reduce display file storage requirements little cost
execution time over conventional
raster display. interactive algorithm can improve
response time reduce storage requirements.
.B
CACM March, 1974
.A
Barrett, R. C.
Fordan, B. W. Jr.
.K
graphics, scan conversion, raster display, line
drawing, discrete image, dot generation, matrix
displays
.C
4.41 6.35 8.2
.N
CA740309 JB January 18, 1978 11:08 AM
.X
1891 4 2674
2211 4 2674
2421 4 2674
2674 4 2674
2674 4 2674
2674 4 2674
2674 4 2674
2687 4 2674
2687 4 2674
2828 4 2674
1741 5 2674
2004 5 2674
2421 5 2674
2674 5 2674
2674 5 2674
2674 5 2674
2687 5 2674
.I 2675
.T
Computer Routine Quadratic Linear
Programming Problems (Algorithm R431)
.B
CACM March, 1974
.A
Ravindran, A.
.N
CA740308 JB January 18, 1978 11:10 AM
.X
2675 5 2675
2675 5 2675
2675 5 2675
.I 2676
.T
Zeros Complex Polynomial (Algorithm R419)
.B
CACM March, 1973
.A
Withers, D. H.
.N
CA740307 JB January 18, 1978 11:11 AM
.X
2676 5 2676
2676 5 2676
2676 5 2676
.I 2677
.T
Incomplete Beta Ratio (Algorithm R179)
.B
CACM March, 1974
.A
Bosten, N. E.
Battiste, E. L.
.N
CA740306 JB January 18, 1978 11:13 AM
.X
2668 5 2677
2677 5 2677
2677 5 2677
2677 5 2677
1604 6 2677
1728 6 2677
1761 6 2677
1827 6 2677
2677 6 2677
.I 2678
.T
Visible Surface Plotting Program [J6] (Algorithm A475)
.B
CACM March, 1974
.A
Wright, T.
.K
hidden line problem, computer graphics, contour surface
.C
3.65 4.41 8.2
.N
CA740305 JB January 18, 1978 11:18 AM
.X
2678 5 2678
2678 5 2678
2678 5 2678
.I 2679
.T
Some Performance Tests "quicksort" Descendants
.W
Detailed performance evaluations presented
six ACM algorithms: quicksort (No. 64),
Shellsort (No. 201), stringsort (No. 207), "TREESORT3"
(No. 245), quickersort (No. 271), qsort (No.
402). Algorithms 271 402 refinements algorithm
64, all three discussed some detail.
evidence given here demonstrates qsort (No.
402) requires many more comparisons than its author
claims. all these algorithms, quickersort requires
fewest comparisons sort random arrays.
.B
CACM March, 1974
.A
Loeser, R.
.K
sorting, in-place sorting, sorting efficiency,
sorting performance tests, quicksort, quickersort,
qsort, Shellsort, stringsort, TREESORT3,utility sort
algorithm, general-purpose sort algorithm, sorting
algorithm documentation
.C
4.49 5.31
.N
CA740304 JB January 18, 1978 11:26 AM
.X
1175 4 2679
1663 4 2679
1919 4 2679
1919 4 2679
1919 4 2679
1969 4 2679
1969 4 2679
1997 4 2679
1997 4 2679
2042 4 2679
2042 4 2679
2118 4 2679
2191 4 2679
2195 4 2679
2216 4 2679
2216 4 2679
2222 4 2679
2222 4 2679
2356 4 2679
2388 4 2679
2348 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2679 4 2679
2844 4 2679
2972 4 2679
3054 4 2679
3054 4 2679
3054 4 2679
3054 4 2679
3121 4 2679
970 5 2679
1175 5 2679
1190 5 2679
1228 5 2679
1969 5 2679
1997 5 2679
308 5 2679
2042 5 2679
2679 5 2679
2679 5 2679
2679 5 2679
507 5 2679
3054 5 2679
3187 5 2679
716 5 2679
783 5 2679
1175 6 2679
1880 6 2679
1919 6 2679
1969 6 2679
1980 6 2679
1997 6 2679
307 6 2679
308 6 2679
309 6 2679
2017 6 2679
2679 6 2679
776 6 2679
.I 2680
.T
Optimal Space Allocation Disk Storage Devices
.W
amount space required file storage
exceeds amount which can kept on-line,
decisions must made which files permanently
resident which mountable. These decisions
affect number mount requests issued
operators. often bottleneck computing
facility, reducing number mounts thus decreases
turnaround time. optimization model
assignment files disk packs, packs either
resident nonresident status presented.
Heuristics suggested those cases which
inefficient compute actual optimum.
.B
CACM March, 1974
.A
Morgan, H. L.
.K
disk analysis, disk optimization, disk files,file
systems, file scheduling, space allocation,
memory hierarchy
.C
3.72 3.73 4.39
.N
CA740303 JB January 18, 1978 12:32 PM
.X
2680 5 2680
2680 5 2680
2680 5 2680
.I 2681
.T
Dynamic Memory Repacking
.W
probabilistic model multiprogramming system
exercised order determine conditions
under which dynamic repacking main memory beneficial.
expression derived maximum
interference repacking process may introduce
before original performance system
degraded. Alternative approaches repacking discussed,
operating conditions lead
improved system throughput through repacking delineated.
.B
CACM March, 1974
.A
Balkovich, E.
Chiu, W.
Presser, L.
Wood, R.
.K
dynamic memory repacking, memory compaction,storage
fragmentation, multiprogramming system model,
probabilistic model, central processor productivity,
resource utilization, system throughput
.C
4.32 5.5 6.20
.N
CA740302 JB January 18, 1978 12:37 PM
.X
2681 4 2681
2218 5 2681
2681 5 2681
2681 5 2681
2681 5 2681
.I 2682
.T
Construction Representative Synthetic Workload
.W
general method constructing drive workload
representative real workload described.
real workload characterized its demands
various system resources. These characteristics
real workload obtained system accounting
data. characteristics drive workload
determined matching joint probability density
real workload drive
workload. drive workload realized using
synthetic program which characteristics can
varied varying appropriate parameters. Calibration
experiments conducted determine expressions
relating synthetic program parameters workload
characteristics. general method applied
case two variables, cpu seconds number
I/O activities; synthetic workload 88
jobs constructed represent month's
workload consisting 6000 jobs.
.B
CACM March, 1974
.A
Sreenivasan, K.
Kleinman, A. J.
.K
benchmarks, calibration, drive workload, input
simulation, probability distribution, representative
workload, synthetic workload, workload characteristics
.C
5.5 5.9 8.1
.N
CA740301 JB January 18, 1978 12:46 PM
.X
2682 5 2682
2682 5 2682
2682 5 2682
3067 5 2682
1751 6 2682
2374 6 2682
2373 6 2682
2595 6 2682
2682 6 2682
2863 6 2682
2864 6 2682
3006 6 2682
.I 2683
.T
Synthesis Loop Predicates
.W
Current methods mechanical program verification
require complete predicate specification
each loop. Because tedious error prone,
producing program complete, correct predicates
reasonably difficult would facilitated machine
assistance. paper discusses techniques
mechanically synthesizing loop predicates. Two classes
techniques considered: (1) heuristic
methods which derive loop predicates boundary conditions
and/or partially specified inductive assertions:
(2) extraction methods which use input predicates
appropriate weak interpretations obtain certain
classes loop predicates evaluation weak interpretation.
.B
CACM March, 1974
.A
Wegbreit, B.
.K
program verification, loop predicates, inductive
assertions, synthesis loop predicates, weak
interpretations, well-founded sets, property extraction, theorem proving
.C
3.64 4.19 4.22 5.24
.N
CA740206 JB January 18, 1978 12:55 PM
.X
2683 5 2683
2683 5 2683
2683 5 2683
2874 5 2683
3104 5 2683
1682 6 2683
2227 6 2683
2317 6 2683
2457 6 2683
2683 6 2683
2683 6 2683
2871 6 2683
521 6 2683
.I 2684
.T
Production Systems: Can We Do Better than BNF?
.W
Since development BNF, definition
syntax programming languages has been
almost universally associated context-free requirements.
Yet numerous interesting difficult
issues syntax stem context-sensitive requirements,
notably compatibility between
declaration identifier its uses, correspondence
between actual formal parameters,
issues arising block structure. paper explores
use formal notation called Production
Systems providing readable complete formal definition
syntax. practical illustration,
small but significant subset PL/I considered.
more detailed presentation, well application
define abstract syntax translations between languages,
given previous paper author.
.B
CACM February, 1974
.A
Ledgard, H. F.
.K
syntax, translation, context-sensitive grammars,
compilers, formal definition, PL/I standards
.C
4.2 5.21 5.23
.N
CA740205 JB January 18, 1978 1:07 PM
.X
1086 4 2684
1132 4 2684
1234 4 2684
1263 4 2684
1265 4 2684
1270 4 2684
1323 4 2684
1358 4 2684
1379 4 2684
1380 4 2684
1453 4 2684
1464 4 2684
1469 4 2684
1484 4 2684
1486 4 2684
1491 4 2684
1491 4 2684
1498 4 2684
1613 4 2684
1614 4 2684
1781 4 2684
1781 4 2684
1781 4 2684
1825 4 2684
1860 4 2684
2083 4 2684
2178 4 2684
2178 4 2684
2178 4 2684
2179 4 2684
2252 4 2684
2325 4 2684
2326 4 2684
2326 4 2684
2341 4 2684
2470 4 2684
2546 4 2684
2645 4 2684
2652 4 2684
2684 4 2684
2684 4 2684
2684 4 2684
2842 4 2684
2929 4 2684
2934 4 2684
3044 4 2684
3069 4 2684
669 4 2684
679 4 2684
691 4 2684
761 4 2684
949 4 2684
989 4 2684
1303 5 2684
1323 5 2684
2684 5 2684
2684 5 2684
2684 5 2684
3184 5 2684
.I 2685
.T
Parallel Execution DO Loops
.W
Methods developed parallel execution
different iterations DO loop. Both
asynchronous multiprocessor computers array computers
considered. Practical application
design compilers such computers discussed.
.B
CACM February, 1974
.A
Lamport, L.
.K
parallel computing, multiprocessor computers,
array computers, vector computers, loops
.C
4.12 5.24
.N
CA740204 JB January 18, 1978 1:14 PM
.X
2685 5 2685
2685 5 2685
2685 5 2685
2785 5 2685
2876 5 2685
2433 6 2685
2632 6 2685
2685 6 2685
2685 6 2685
.I 2686
.T
Approximate Method Generating Asymmetric Random Variables
.W
Tukey's lambda distribution generalized
provide algorithm generating values
unimodal asymmetric random variables. algorithm
has same advantages symmetric random
variable generator previously given authors, except
addition another parameter complicates
problem finding parameter values fit distribution.
.B
CACM February, 1974
.A
Ramberg, J. S.
Schmeiser,B. W.
.K
simulation, Monte Carlo, probability, statistics,
approximations, random variables, random numbers,
moments, distribution
.C
5.5 8.1
.N
CA740203 JB January 18, 1978 1:19 PM
.X
2686 4 2686
2261 5 2686
2686 5 2686
2686 5 2686
2686 5 2686
.I 2687
.T
Cell Organized Raster Display Line Drawings
.W
Raster scan computer graphics displays
"real time" character generators have previously
been limited alphanumeric characters. display
described which extends capabilities
organization include general graphics. feasibility
such display shown deriving
minimum number patterns required read only
memory character generator synthesize
arbitrary line. synthesis process does not compromise
picture quality since resulting dot
patterns identical those conventional
raster display. Furthermore, time constraints
raster display shown satisfied
typical design very complex line drawings.
.B
CACM February, 1974
.A
Jordan, B. W. Jr.
Barrett, R. C.
.K
graphics, raster display, line drawing, discrete
image, dot generation, matrix displays
.C
4.41 6.35 8.2
.N
CA740202 JB January 18, 1978 1:28 PM
.X
1891 4 2687
2004 4 2687
2211 4 2687
2421 4 2687
2674 4 2687
2674 4 2687
2687 4 2687
2687 4 2687
2687 4 2687
2692 4 2687
2828 4 2687
1741 5 2687
1915 5 2687
2004 5 2687
2674 5 2687
2687 5 2687
2687 5 2687
2687 5 2687
1741 6 2687
2004 6 2687
2421 6 2687
2687 6 2687
.I 2688
.T
Attribute Based File Organization Paged Memory Environment
.W
high cost page accessing implies need
more careful data organization paged
memory than typical most inverted file similar
approaches multi-key retrieval. article
analyses cost proposes method called multiple
key hashing which attempts minimize it.
Since approach not always preferable inversion,
combined method described. exact
specifications combination file given
data traffic characteristics formulated
mathematical program. proposed heuristic solution
program can often improve simple
inversion technique factor 2 3.
.B
CACM February,1974
.A
Rothnie, J. B. Jr.
Lozano, T.
.K
file organization, paging, retrieval algorithm,
inverted file, multiple key hashing
.C
3.70 3.73 3.74 3.79
.N
CA740201 JB January 18, 1978 1:37 PM
.X
2160 4 2688
2688 4 2688
2114 5 2688
2688 5 2688
2688 5 2688
2688 5 2688
2976 5 2688
2688 6 2688
2765 6 2688
2882 6 2688
.I 2689
.T
CRT Report Generating System
.B
CACM January, 1974
.A
Lucas, H. C. Jr.
.K
report generation, automated systems design, data processing, management
.C
3.50 4.12 4.22
.N
CA740110 JB January 18, 1978 1:40 PM
.X
2689 5 2689
2689 5 2689
2689 5 2689
.I 2690
.T
Numbering Systems Combinations
.B
CACM January, 1974
.A
Knott, G. D.
.K
combinatorics, coding system, storage mapping function
.C
4.9 5.30
.N
CA740109 JB January 18, 1978 1:42 PM
.X
2690 4 2690
2690 4 2690
2853 4 2690
3115 4 2690
203 5 2690
2690 5 2690
2690 5 2690
2690 5 2690
2853 5 2690
579 5 2690
2690 6 2690
579 6 2690
.I 2691
.T
Comments Algorithms Verhelst
Conversion Limited-Entry Decision Tables
Flowcharts
.B
CACM January, 1974
.A
King, P. J. H.
Johnson, R. G.
.K
decision table, flowcharting, preprocessor, optimal programs, search
.C
3.50 3.59 4.19 4.29 4.49 5.31
.N
CA740108 JB January 18, 1978 1:45 PM
.X
2598 4 2691
2691 4 2691
2726 4 2691
3113 4 2691
2263 5 2691
2598 5 2691
2691 5 2691
2691 5 2691
2691 5 2691
3113 5 2691
1172 6 2691
1354 6 2691
1548 6 2691
2220 6 2691
2263 6 2691
2263 6 2691
2453 6 2691
2598 6 2691
2691 6 2691
2691 6 2691
2856 6 2691
.I 2692
.T
Reentrant Polygon Clipping
.W
new family clipping algorithms described.
These algorithms able clip polygons
against irregular convex plane-faced volumes three
dimensions, removing parts polygon which
lie outside volume. two dimensions algorithms
permit clipping against irregular convex windows.
Polygons clipped represented ordered
sequence vertices without repetition first
last, marked contrast representation
collection edges heretofore common
procedure. Output polygons have identical format,
new vertices introduced sequence describe
any newly-cut edge edges. algorithms easily handle
particularly difficult problem detecting
new vertex may required corner
clipping window. algorithms described achieve
considerable simplicity clipping separately against
each clipping plane window boundary. Code
capable clipping polygon against single boundary
reentered clip against subsequent boundaries.
Each such reentrant stage clipping need store only
two vertex values may begin its processing
soon first output vertex proceeding
stage ready. Because same code reentered
clipping against subsequent boundaries, clipping
against very complex window shapes practical.
perspective applications three dimentions, six-plane
truncated pyramid chosen clipping
volume. two additional planes parallel projection
screen serve limit range depth
preserved through projection. perspective projection
method which provides arbitrary view
angles depth field spite simple fixed clipping
planes described. method ideal
subsequent hidden-surface computations.
.B
CACM January, 1974
.A
Sutherland, I. E.
Hodgman, G. W.
.K
computer graphics, hidden-surface, clipping
.C
5.31 6.32 6.35
.N
CA740107 JB January 18, 1978 2:04 PM
.X
2004 4 2692
2687 4 2692
2692 4 2692
1915 5 2692
2692 5 2692
2692 5 2692
2692 5 2692
.I 2693
.T
Bivariate Interpolation Smooth Surface Fitting
Based Local Procedures [E2] (Algorithm
A474)
.B
CACM January, 1974
.A
Akima, H.
.K
bivariate interpolation, interpolation, partial
derivative, polynomial, smooth surface fitting
.C
5.13
.N
CA740106 JB January 18, 1978 2:07 PM
.X
1845 4 2693
1900 4 2693
2083 4 2693
2154 4 2693
2270 4 2693
2693 4 2693
2693 4 2693
2693 4 2693
2696 4 2693
988 5 2693
2270 5 2693
2693 5 2693
2693 5 2693
2693 5 2693
2696 5 2693
2270 6 2693
2693 6 2693
.I 2694
.T
Computation Legendre Series Coefficients [C6] (Algorithm A473)
.B
CACM January, 1974
.A
Piessens, R.
.K
Legendre series, Chebyshev series
.C
5.13
.N
CA740105 JB January 18, 1978 2:21 PM
.X
2694 4 2694
1478 5 2694
2694 5 2694
2694 5 2694
2694 5 2694
.I 2695
.T
Tridiagonalization Permutations
.W
Tridiagonalizing matrix similarity transformations
important computational tool
numerical linear algebra. Consider class sparse
matrices which can tridiagonalized using
only row corresponding column permutations.
advantages using such transformation include
absence round-off errors improved computation time
compared standard transformations.
graph theoretic algorithm which examines arbitrary
n x n matrix determines whether not
can permuted into tridiagonal form given.
algorithm requires no arithmetic while number
comparisons, number assignments, number
increments linear n. compares
very favorably standard transformation methods.
If matrix permutable into tridiagonal form,
algorithm gives explicit tridiagonal form.
Otherwise, early rejection occur.
.B
CACM January, 1974
.A
Gibbs, N. E.
Poole, W. G. Jr.
.K
tridiagonal matrix, permutation, algorithm,
eigenvalues, graph, bandwidth, sparse matrix
.C
5.14 5.32
.N
CA740104 JB January 18, 1978 2:31 PM
.X
2695 5 2695
2695 5 2695
2695 5 2695
.I 2696
.T
Method Bivariate Interpolation Smooth
Surface Fitting Based Local Procedures
.W
method designed interpolating values
given points rectangular grid plane
smooth bivariate function z=z(x,Y). interpolating
function bicubic polynomial each
cell rectangular grid. Emphasis avoiding
excessive undulation between given grid points.
proposed method extension method
univariate interpolation developed earlier
author likewise based local procedures.
.B
CACM January, 1974
.A
Akima, H.
.K
bivariate interpolation, interpolation, partial
derivative, polynomial, smooth surface fitting
.C
5.13
.N
CA740103 JB January 18, 1978 2:38 PM
.X
2693 4 2696
2696 4 2696
2696 4 2696
2270 5 2696
2693 5 2696
2696 5 2696
2696 5 2696
2696 5 2696
988 6 2696
2270 6 2696
2696 6 2696
.I 2697
.T
Fast Method Solving Class Tridiagonal Linear Systems
.W
solution linear systems having real, symmetric,
diagonally dominant,tridiagonal coefficient
matrices constant diagonals considered.
proved diagonals LU decomposition
converges floating-point precision. also
proved computed LU decomposition converges
floating-point arithmetic used limits
LU diagonals using floating point
roughly within machine precision limits using
real arithmetic. fact exploited reduce
number floating-point operations required
solve linear system 8n-7 5n+2k-3,
k much less than n, order matrix. If
elements subdiagonals superdiagonals
1, then only 4n+2k-3 operations needed.
entire LU decomposition takes k words storage,
considerable savings array subscripting achieved.
Upper lower bounds k obtained
terms ratio coefficient matrix diagonal
constants parameters floating-point
number system. Various generalizations these results discussed.
.B
CACM January, 1974
.A
Malcolm, M. A.
Palmer, J.
.K
numerical linear algebra, linear systems,
Toeplitz matrices, tridiagonal matrices
.C
5 5.1 5.11 5.14 5.17
.N
CA740102 JB January 18, 1978 2:50 PM
.X
2697 5 2697
2697 5 2697
2697 5 2697
.I 2698
.T
Syntax-Directed Least-Errors Analysis
Context-Free Languages: Practical Approach
.W
least-errors recognizer developed informally
using well-known recognizer Earley,
along elements Bellman's dynamic programming.
analyzer takes general class context-free
grammars drivers, any finite string input.
Recognition consists least-errors count
corrected version input relative driver
grammar. algorithm design emphasizes practical
aspects which help programming it.
.B
CACM January, 1974
.A
Lyon, G.
.K
arbitrary input strings, context-free grammars,
parsing, dynamic programming, stored subanalyses,
separability, state merging, least-errors correction
.C
4.12 5.23 5.42
.N
CA740101 JB January 18, 1978 2:57 PM
.X
1225 4 2698
1323 4 2698
1350 4 2698
1358 4 2698
1379 4 2698
1380 4 2698
1542 4 2698
1646 4 2698
1665 4 2698
1665 4 2698
1683 4 2698
1693 4 2698
1693 4 2698
1768 4 2698
1781 4 2698
1781 4 2698
1781 4 2698
1781 4 2698
1787 4 2698
1787 4 2698
1787 4 2698
1824 4 2698
1825 4 2698
1836 4 2698
1836 4 2698
1836 4 2698
1861 4 2698
1945 4 2698
1945 4 2698
1945 4 2698
1989 4 2698
1989 4 2698
2015 4 2698
2015 4 2698
2060 4 2698
2060 4 2698
2060 4 2698
2061 4 2698
2061 4 2698
2082 4 2698
2091 4 2698
2091 4 2698
2110 4 2698
2112 4 2698
2127 4 2698
2152 4 2698
2179 4 2698
2179 4 2698
2179 4 2698
2187 4 2698
2317 4 2698
2340 4 2698
2356 4 2698
2534 4 2698
2541 4 2698
2545 4 2698
2546 4 2698
2546 4 2698
2603 4 2698
2650 4 2698
2698 4 2698
2698 4 2698
2698 4 2698
2698 4 2698
2698 4 2698
2698 4 2698
2698 4 2698
2708 4 2698
2708 4 2698
2708 4 2698
2708 4 2698
2733 4 2698
2733 4 2698
2820 4 2698
2824 4 2698
2921 4 2698
2982 4 2698
2986 4 2698
3045 4 2698
3045 4 2698
3073 4 2698
3093 4 2698
3093 4 2698
3155 4 2698
3154 4 2698
1477 5 2698
1491 5 2698
1781 5 2698
2110 5 2698
2556 5 2698
2698 5 2698
2698 5 2698
2698 5 2698
680 5 2698
799 5 2698
.I 2699
.T
Automatic Data Structure Choice Language Very High Level
.W
SETL set-theoretically oriented language
very high level whose repertoire semantic
objects includes finite sets, ordered n-tuples,
sets ordered n-tuples usable mappings.
paper describes structure optimizer
language. Among other methods interest,
optimizer uses techniques which allow relations inclusion
membership established, domains
ranges (tabulated) mappings estimated
above below, single-valuedness
(tabulated) mappings proved. Once facts
kind have been established, automatic choice
data structures becomes possible. methods employed
based upon, extend, known techniques
data flow analysis.
.B
CACM December, 1975
.A
Schwartz, J. T.
.K
program optimization, automatic programming, high-level
languages, set-theoretic languages, data
structure choice
.C
4.12 4.20 4.22
.N
CA751208 JB January 5, 1978 3:53 PM
.X
2699 5 2699
2699 5 2699
2699 5 2699
.I 2700
.T
Reduction: Method Proving Properties Parallel Programs
.W
proving parallel program has
given property often convenient assume
statement indivisible, i.e. statement
cannot interleaved rest program.
Here sufficient conditions obtained show
assumption statement indivisible
can relaxed still preserve properties such
halting. Thus correctness proofs parallel
system can often greatly simplified.
.B
CACM December, 1975
.A
Lipton, R. J.
.K
deadlock free, reduction, interruptible, indivisible,
parallel program, semaphore, verification
method, process, computation sequence
.C
4.32 4.35 5.24
.N
CA751207 JB January 5, 1978 3:59 PM
.X
2700 4 2700
3128 4 2700
2376 5 2700
2700 5 2700
2700 5 2700
2700 5 2700
.I 2701
.T
Fast Usually Linear Algorithm Global
Flow Analysis (Abstract only--Complete paper JACM
23,1 January, 1976)
.W
new algorithm global flow analysis
reducible graphs presented. algorithm
shown treat very general class function spaces.
graph e edges, algorithm has
worst case time bound O(e log e) function operations.
also shown programming terms,
number operations proportional e plus
number exits program loops. Consequently
restriction one-entry one-exit control structures
linearity. algorithm can extended yet
larger classes function spaces graphs relaxing
time bound. Examples given code
improvement problems which can solved using algorithm.
.B
CACM December, 1975
.A
Graham, S. L.
Wegman, M.
.K
global flow analysis, data flow, code optimization,
common subexpression elimination, live-dead
analysis, information propagation, flow graph, reducibility,
go-to-less programming, depth-first search,
path compression
.C
4.12 5.24 5.25 5.32
.N
CA751206 JB January 5, 1978 4:08 PM
.X
2701 5 2701
2701 5 2701
2701 5 2701
.I 2702
.T
Complexity LR(k) Testing
.W
problem determining whether arbitrary
context-free grammar member some easily
parsed subclass grammars such LR(k) grammars
considered. time complexity problem
analyzed both k considered fixed
integer k considered parameter
test. first case, shown
every k there exists O(n(k+2)) algorithm
testing LR(k) property, n size
grammar question. other hand, if both
k subject grammar problem parameters, then
complexity problem depends very strongly
representation chosen k. More specifically,
shown problem NP-complete
k expressed unary. k expressed
binary problem complete nondeterministic
exponential time. These results carry over many
other parameterized classes grammars, such
LL(k), strong LL(k), SLR(k), LC(k), strong LC(k) grammars.
.B
CACM December, 1975
.A
Hunt, H. B. III
Szymanski, T. G.
Ullman, J. D.
.K
computational complexity, context-free grammars,
parsing, LR(k) grammars, NP-complete problems
.C
4.12 5.23 5.25
.N
CA751205 JB January 5, 1978 4:28 PM
.X
2702 5 2702
2702 5 2702
2702 5 2702
.I 2703
.T
Intrinsically Exponential Complexity
Circularity Problem Attribute Grammars
.W
Attribute grammars extension context-free
grammars devised Knuth mechanism
including semantics context-free language
syntax language. circularity
problem grammar determine whether semantics
all possible sentences (programs)
fact well defined. proved problem
is, general, computationally intractable.
Specifically, shown any deterministic algorithm
which solves problem must infinitely
many cases use exponential amount time.An improved
version Knuth's circularity testing algorithm
also given, which actually solves problem within exponential time.
.B
CACM December, 1975
.A
Jazayeri, M.
Ogden, W. F.
Rounds, W. C.
.K
attribute grammars, circularity problem, context-free
grammars, computational complexity, exponential
time, semantics
.C
4.12 5.25
.N
CA751204 JB January 5, 1978 4:38 PM
.X
2703 4 2703
2703 5 2703
2703 5 2703
2703 5 2703
2886 5 2703
.I 2704
.T
Exception Handling: Issues Proposed Notation
.W
paper defines exception conditions, discusses
requirements exception handling language
features must satisfy, proposes some new language
features dealing exceptions orderly
reliable way. proposed language features serve
highlight exception handling issues showing
deficiencies current approaches can remedied.
.B
CACM December, 1975
.A
Goodenough, J. B.
.K
multilevel exit, goto statement, error conditions,
structured programming, conditions, programming
languages
.C
4.22
.N
CA751203 JB January 5, 1978 4:47 PM
.X
1397 4 2704
1828 4 2704
1854 4 2704
1877 4 2704
1960 4 2704
2150 4 2704
2317 4 2704
2319 4 2704
2377 4 2704
2342 4 2704
2376 4 2704
2379 4 2704
2424 4 2704
2482 4 2704
2618 4 2704
2632 4 2704
2704 4 2704
2704 4 2704
2704 4 2704
2704 4 2704
2704 4 2704
2704 4 2704
2723 4 2704
2738 4 2704
2738 4 2704
2740 4 2704
2741 4 2704
2770 4 2704
2866 4 2704
2867 4 2704
2867 4 2704
2869 4 2704
2902 4 2704
2941 4 2704
2958 4 2704
3004 4 2704
3030 4 2704
3053 4 2704
3184 4 2704
1247 5 2704
1552 5 2704
1749 5 2704
2356 5 2704
2379 5 2704
2673 5 2704
2704 5 2704
2704 5 2704
2704 5 2704
2945 5 2704
3150 5 2704
1947 6 2704
2060 6 2704
2704 6 2704
2704 6 2704
2842 6 2704
2870 6 2704
2939 6 2704
2940 6 2704
2941 6 2704
2943 6 2704
3073 6 2704
3148 6 2704
.I 2705
.T
Programming Languages, Natural Languages, Mathematics
.W
Some social aspects programming illuminated
through analogies similar aspects
mathematics natural languages. split between
pure applied mathematics found similarly
programming. development natural languages toward
flexion less, word-order based language types
speaks programming language design based general,
abstract constructs. analogy incidents
history artificial, auxiliary languages
suggested Fortran Cobol remain
dominant long time come. most promising
avenues further work wide influence
seen high quality program literature (i.e. programs)
general utility studies questions
related program style.
.B
CACM December, 1975
.A
Naur, P.
.K
analogies related social aspects,pure applied
mathematics, language quality, language development,
artificial auxiliary languages, literature, style,
descriptive prescriptive attitudes
.C
4.20
.N
CA751202 JB January 6, 1978 8:30 AM
.X
2705 4 2705
2705 4 2705
2984 4 2705
3101 4 2705
1908 5 2705
2705 5 2705
2705 5 2705
2705 5 2705
3185 5 2705
.I 2706
.T
Note Set Basis Problem Related
Compaction Character Sets
.W
note discusses reduction
set basis problem clique cover problem.
.B
CACM November, 1975
.A
Kou, L. T.
Wong, C. K.
.K
compaction character sets, set basis, set covering,
computational complexity, polynomial completeness,
clique cover
.C
4.9 5.25 5.39
.N
CA751106 JB January 6, 1978 8:55 AM
.X
2706 4 2706
2643 5 2706
2706 5 2706
2706 5 2706
2706 5 2706
.I 2707
.T
Backtrack Programming Techniques
.W
purpose paper twofold. First,
brief exposition general backtrack technique
its history given. Second, shown use
macros can considerably shorten computation
time many cases. particular, technique has allowed
solution two previously open combinatorial
problems, computation new terms well-known
series, substantial reduction computation
time solution another combinatorial problem.
.B
CACM November, 1975
.A
Bitner, J. R.
Reingold, E. M.
.K
backtrack, depth-first search, exhaustive search,
macros, combinatorial computing, non-attacking
queen's problem, difference-preserving codes, pentominoes,
tiling problems, squaring square
.C
5.30
.N
CA751105 JB January 6, 1978 9:03 AM
.X
1531 4 2707
2707 4 2707
2753 4 2707
1185 5 2707
2707 5 2707
2707 5 2707
2707 5 2707
3053 5 2707
1329 6 2707
1785 6 2707
1973 6 2707
1992 6 2707
2107 6 2707
2109 6 2707
2412 6 2707
2543 6 2707
2673 6 2707
2707 6 2707
2770 6 2707
.I 2708
.T
Practical Syntactic Error Recovery
.W
paper describes recovery scheme syntax
errors which provides automatically-generated
high quality recovery good diagnostic information
relatively low cost. Previous recovery techniques
summarized empirical comparisons made. Suggestions
further research topic conclude
paper.
.B
CACM November, 1975
.A
Graham, S. L.
Rhodes, S. P.
.K
syntax errors, error recovery, error correction,
parsing, simple precedence, compilers, debugging
.C
4.12 4.42 5.23
.N
CA751104 JB January 6, 1978 9:42 AM
.X
1225 4 2708
1350 4 2708
1379 4 2708
1542 4 2708
1646 4 2708
1683 4 2708
1693 4 2708
1693 4 2708
1781 4 2708
1781 4 2708
1781 4 2708
1781 4 2708
1787 4 2708
1836 4 2708
1836 4 2708
1945 4 2708
1945 4 2708
1945 4 2708
2015 4 2708
2060 4 2708
2060 4 2708
2061 4 2708
2061 4 2708
2082 4 2708
2091 4 2708
2091 4 2708
2152 4 2708
2179 4 2708
2179 4 2708
2340 4 2708
2356 4 2708
2534 4 2708
2534 4 2708
2546 4 2708
2546 4 2708
2556 4 2708
2603 4 2708
2650 4 2708
2650 4 2708
2698 4 2708
2698 4 2708
2698 4 2708
2698 4 2708
2708 4 2708
2708 4 2708
2708 4 2708
2708 4 2708
2708 4 2708
2708 4 2708
2708 4 2708
2820 4 2708
2824 4 2708
2887 4 2708
2971 4 2708
2982 4 2708
2986 4 2708
3045 4 2708
3045 4 2708
3045 4 2708
3093 4 2708
3093 4 2708
1477 5 2708
1491 5 2708
1787 5 2708
2111 5 2708
2534 5 2708
2556 5 2708
2708 5 2708
2708 5 2708
2708 5 2708
3093 5 2708
680 5 2708
1491 6 2708
2179 6 2708
2708 6 2708
680 6 2708
.I 2709
.T
Genealogy Control Structures
.W
issue program control structures has
had history heated controversy. put
issue solid footing, paper reviews numerous theoretical
results control structures explores
their practical implications. classic result
Bohm Jacopini theoretical completeness
if-then-else while-do discussed. Several recent
ideas control structures then explored.
These include review various other control structures,
results time/space limitations, theorems
relating relative power control structures under
notions equivalence. conclusion, impact
theoretical results practicing programmer
importance one-in, one-out control structures
operational abstractions discussed. argued
further there insufficient evidence
warrant more than if-then-else, while-do, their variants.
.B
CACM November, 1975
.A
Ledgard, H. F.
Marcotty, M.
.K
structured programming, control structures,
goto statements, language design, PASCAL
.C
4.2 5.24
.N
CA751103 JB January 6, 1978 9:53 AM
.X
2319 4 2709
2411 4 2709
2480 4 2709
2574 4 2709
2594 4 2709
2709 4 2709
2709 4 2709
2709 4 2709
2709 4 2709
2709 4 2709
2802 4 2709
2889 4 2709
2937 4 2709
2939 4 2709
2972 4 2709
2989 4 2709
3004 4 2709
3004 4 2709
3005 4 2709
3025 4 2709
3101 4 2709
3121 4 2709
3155 4 2709
1425 5 2709
2138 5 2709
2204 5 2709
2456 5 2709
2477 5 2709
2709 5 2709
2709 5 2709
2709 5 2709
2821 5 2709
3121 5 2709
1312 6 2709
308 6 2709
309 6 2709
2456 6 2709
2709 6 2709
2709 6 2709
.I 2710
.T
Specifying Queries Relational Expressions:
SQUARE Data Sublanguage
.W
paper presents data sublanguage called
SQUARE, intended use ad hoc, interactive
problem solving non-computer specialists. SQUARE
based relational model data,
shown relationally complete; however, avoids
quantifiers bound variables required
languages based relational calculus. Facilities
query, insertion, deletion, update
tabular data bases described. syntax given,
suggestions made alternative syntaxes,
including syntax based English key words
users limited mathematical background.
.B
CACM November, 1975
.A
Boyce, R. F
Chamberlin, D. D.
King, W. F. III
.K
database, data sublanguages, relations, query languages,
casual user, relational data model, tabular
data, interactive problem solving, nonprocedural
languages, relational completeness
.C
3.50 3.70 4.20
.N
CA751102 JB January 6, 1978 10:04 AM
.X
1135 4 2710
1136 4 2710
2046 4 2710
2155 4 2710
2406 4 2710
493 4 2710
2710 4 2710
2710 4 2710
2710 4 2710
2710 4 2710
2715 4 2710
2716 4 2710
2716 4 2710
2717 4 2710
2718 4 2710
2765 4 2710
2765 4 2710
2817 4 2710
2888 4 2710
2888 4 2710
2901 4 2710
2901 4 2710
2906 4 2710
2957 4 2710
2959 4 2710
2965 4 2710
3087 4 2710
3154 4 2710
729 4 2710
1515 5 2710
2046 5 2710
2710 5 2710
2710 5 2710
2710 5 2710
2715 5 2710
616 5 2710
.I 2711
.T
Vector Space Model Automatic Indexing
.W
document retrieval, other pattern matching
environment stored entities (documents)
compared each other incoming patterns
(search requests), appears best indexing
(property) space one each entity lies far away
others possible; these circumstances
value indexing system may expressible
function density object space;
particular, retrieval performance may correlate inversely
space density. approach based
space density computations used choose optimum
indexing vocabulary collection documents.
Typical evaluation results shown, demonstrating
usefulness model.
.B
CACM November, 1975
.A
Salton, G.
Wong, A.
Yang, C. S.
.K
automatic information retrieval, automatic
indexing, content analysis, document space
.C
3.71 3.73 3.74 3.75
.N
CA751101 JB January 6, 1978 10:14 AM
.X
2711 5 2711
2711 5 2711
2711 5 2711
.I 2712
.T
Horner's Rule Evaluation General Closed Queueing Networks
.W
solution separable closed queueing networks
requires evaluation homogeneous multinomial
expressions. number terms those expressions
grows combinatorially size of network
such direct summation may become impractical.
algorithm given which does not show combinatorial
operation count. algorithm based generalization
Horner's rule polynomials.
also shown mean queue size throughput obtained
negligible extra cost once normalization
constant evaluated.
.B
CACM October, 1975
.A
Reiser, M.
Kobayashi, H.
.K
Queueing networks, queueing theory Horner's rule,
evaluation multinomial sums, load-dependent
service rate
.C
5.12 5.5 8.1 8.3
.N
CA751007 JB January 6, 1978 10:35 AM
.X
2712 4 2712
2741 4 2712
3070 4 2712
2454 5 2712
2712 5 2712
2712 5 2712
2712 5 2712
.I 2713
.T
Remark Stably Updating Mean
Standard Deviation Data (Corrigendum)
.B
CACM October, 1975
.A
Cotton, I.
.N
CA751006 JB January 6, 1978 10:38 AM
.X
2713 5 2713
2713 5 2713
2713 5 2713
.I 2714
.T
Merging Parallel Processors
.W
Consider two linearly ordered sets A, B, |A|=m,
|B|=n, m<=n, p, p<=m, parallel processors
working synchronously. paper presents algorithm
merging B p parallel processors,
which requires most 2[log2 (2m+1)]+[3m/p] + [m/p][log2
(n/m)] steps. If n = (2^B)m (B integer),
algorithm requires most 2[log2 (m+1)] + [m/p](2+B)
steps. case m n
same order magnitude, i.e. n=km k being constant,
algorithm requires 2[log2 (m+1)] + [m/p](3+k)
steps. These performances compare very favorably
previous best parallel merging algorithm,
Batcher's algorithm, which requires n/p + ((m+n)/2p)log2 m
steps general case km/p + ((k+1)/2)(m/p)log2
m special case n=km.
.B
CACM October, 1975
.A
Gavril, F.
.K
parallel processing, parallel merging, parallel binary insertion
.C
5.31
.N
CA751005 JB January 6, 1978 10:50 AM
.X
2714 4 2714
3075 4 2714
2664 5 2714
2714 5 2714
2714 5 2714
2714 5 2714
3075 5 2714
2289 6 2714
2557 6 2714
2664 6 2714
2714 6 2714
.I 2715
.T
Implementation Structured English Query Language
.W
relational model data, XRM Relational
Memory System, SEQUEL language have
been covered previous papers reviewed.
SEQUEL relational data sublanguages intended
ad hoc interactive problem solving non-computer
specialists. version SEQUEL has
been implemented prototype interpreter described.
interpreter designed minimize
data accessing operations required respond arbitrary
query. optimization algorithms designed
purpose described.
.B
CACM October, 1975
.A
Astrahan, M. M.
Chamberlin,D. D.
.K
relational model, query language, nonprocedural language,
database, data structure, data organization
.C
3.74 3.75 4.22 4.33 4.34
.N
CA751004 JB January 6, 1978 11:02 AM
.X
2155 4 2715
2406 4 2715
2710 4 2715
2715 4 2715
2716 4 2715
2717 4 2715
2718 4 2715
2765 4 2715
2817 4 2715
2888 4 2715
2901 4 2715
2957 4 2715
2959 4 2715
2965 4 2715
3087 4 2715
3154 4 2715
2046 5 2715
2710 5 2715
2715 5 2715
2715 5 2715
2715 5 2715
2716 5 2715
2901 5 2715
1515 6 2715
1976 6 2715
2046 6 2715
2046 6 2715
2046 6 2715
2715 6 2715
2715 6 2715
2715 6 2715
616 6 2715
.I 2716
.T
Optimizing Performance Relational Algebra Database Interface
.W
approach implementing "smart" interface
support relational view data proposed.
basic idea employ automatic programming techniques
so interface analyzes efficiently
refines high level query specification supplied
user. relational algebra interface, called
SQUIRAL, which designed using approach, described
detail. SQUIRAL seeks minimize query
response time space utilization by: (1) performing
global query optimization, (2) exploiting disjoint
pipelined concurrency, (3) coordinating sort orders
temporary relations, (4) employing directory
analysis, (5) maintaining locality page references.
Algorithms implementing operators
E. F. Codd's relational algebra presented,
methodology composing them optimize
performance particular user query described.
.B
CACM October, 1975
.A
Smith, J. M.
Yen-Tang Chang, P.
.K
relational database, database optimization, inverted
file, automatic programming, query language,
data manipulation language, very high level language
.C
3.70 4.13 4.33
.N
CA751003 JB January 6, 1978 11:19 AM
.X
2155 4 2716
2406 4 2716
2710 4 2716
2710 4 2716
2715 4 2716
2716 4 2716
2716 4 2716
2717 4 2716
2718 4 2716
2765 4 2716
2817 4 2716
2888 4 2716
2901 4 2716
2901 4 2716
2957 4 2716
2959 4 2716
2965 4 2716
3087 4 2716
3154 4 2716
2046 5 2716
2715 5 2716
2716 5 2716
2716 5 2716
2716 5 2716
.I 2717
.T
CONVERT: High Level Translation
Definition Language Data Conversion
.W
paper describes high level nonprocedural
translation definition language, CONVERT,
which provides very powerful highly flexible data
restructuring capabilities. Its design based
simple underlying concept form which enables
users visualize translation processes,
thus makes data translation much simpler task.
"CONVERT" has been chosen conveying purpose
language should not confused any
other language program bearing same name.
.B
CACM October, 1975
.A
Shu, N. C.
Housel, B. C.
Lum, V. Y.
.K
data conversion, data restructuring, data translation,
database reorganization, translation definition,
utility program, programming languages, nonprocedural languages
.C
3.50 3.75 4.29 4.4 4.9
.N
CA751002 JB January 6, 1978 1:45 PM
.X
2155 4 2717
2406 4 2717
2710 4 2717
2715 4 2717
2716 4 2717
2717 4 2717
2717 4 2717
2718 4 2717
2765 4 2717
2817 4 2717
2888 4 2717
2901 4 2717
2957 4 2717
2959 4 2717
2965 4 2717
3087 4 2717
3154 4 2717
2046 5 2717
2406 5 2717
2717 5 2717
2717 5 2717
2717 5 2717
.I 2718
.T
Preliminary System Design DBTG Data Structures
.W
functional approach database design
introduced. approach goal design
derive data structure which capable supporting
set anticipated queries rather than
structure which "models business" some other
way. operational computer program described
which utilizers functional approach design data
structures conforming Data Base Task Group
specifications. automatic programming technology
utilized program, although typically used
generate procedure, here used generate declaratives.
.B
CACM October, 1975
.A
Gerritsen, R.
.K
network model databases, Data Base Task Group, database
design, data structure, automatic programming,
translation, nonprocedural languages
.C
3.5 3.64 3.7 4.2 5.23
.N
CA751001 JB January 6, 1978 2:02 PM
.X
2155 4 2718
2406 4 2718
2710 4 2718
2715 4 2718
2716 4 2718
2717 4 2718
2718 4 2718
2765 4 2718
2817 4 2718
2888 4 2718
2901 4 2718
2957 4 2718
2959 4 2718
2965 4 2718
3087 4 2718
3154 4 2718
2046 5 2718
2718 5 2718
2718 5 2718
2718 5 2718
3147 5 2718
2718 6 2718
.I 2719
.T
Mechanical Program Analysis
.W
One means analyzing program performance
deriving closed-form expressions their
execution behavior. paper discusses mechanization
such analysis, describes system,
Metric, which able analyze simple Lisp programs
produce, example, closed-form expressions
their running time expressed terms size input.
paper presents reasons mechanizing
program analysis, describes operation Metric, explains
its implementation, discusses its limitations.
.B
CACM September, 1975
.A
Wegbreit, B.
.K
analysis programs, performance analysis, execution
time, execution behavior, difference equations,
generating functions, list processing, Lisp, algebraic
manipulation, programming languages, analysis
algorithms
.C
3.69 4.22 5.24 5.25
.N
CA750905 JB January 6, 1978 2:11 PM
.X
1024 4 2719
1051 4 2719
1102 4 2719
1132 4 2719
1390 4 2719
1486 4 2719
1549 4 2719
1706 4 2719
1708 4 2719
1781 4 2719
1826 4 2719
1826 4 2719
1860 4 2719
1878 4 2719
378 4 2719
2060 4 2719
2155 4 2719
2156 4 2719
2168 4 2719
2168 4 2719
2164 4 2719
2170 4 2719
2249 4 2719
2314 4 2719
2323 4 2719
2657 4 2719
2719 4 2719
2719 4 2719
2719 4 2719
2719 4 2719
2719 4 2719
2719 4 2719
2719 4 2719
2723 4 2719
2736 4 2719
2833 4 2719
2838 4 2719
2842 4 2719
2855 4 2719
2879 4 2719
2967 4 2719
3077 4 2719
3080 4 2719
3094 4 2719
3106 4 2719
627 4 2719
106 4 2719
210 5 2719
1626 5 2719
2151 5 2719
2167 5 2719
2210 5 2719
2645 5 2719
2657 5 2719
2719 5 2719
2719 5 2719
2719 5 2719
.I 2720
.T
Optimal Balancing I/O Requests Disks
.W
Determining policy efficient allocation
utilization set disk drives
differing operational characteristics examined using
analytical techniques. Using standard queueing
theory, each disk drive characterized queueing
model service time disk drive represented
probability density function sum two
uniform distributions. Total response time
set disk models then minimized under varying
load conditions. results indicate faster
devices should have higher utilization factors
number different device types utilized
tends decrease decreasing load. Specific examples
using 2314 3330 combinations examined.
.B
CACM September, 1975
.A
Piepmeier, W. F.
.K
disk drive hierarchies, system evaluation, input/output,
modeling, queueing theory, balancing,
scheduling, device assignment
.C
2.44 4.35 5.15 5.5 6.35 8.1 8.3
.N
CA750904 JB January 6, 1978 2:42 PM
.X
2720 5 2720
2720 5 2720
2720 5 2720
.I 2721
.T
Digital Simulation River Plankton Population Dynamics
.W
paper deals development
mathematical model digital simulation
Fortran IV phytoplankton zooplankton population
densities river using previously developed
rate expressions. order study relationships
between ecological mechanisms involved,
simulation parameters were varied illustrating
response ecosystem different conditions,
including those corresponding certain types chemical
thermal pollution. investigation
accuracy simulation methods, simulation
actual population dynamics Asterionella
Columbia River made based approximations
conditions river. Although not totally
accurate, simulation found predict general
annual pattern plankton growth fairly well
and, specifically, revealed importance annual
velocity cycle determining such patterns.
addition, study demonstrates usefulness
digital simulations examinations certain
aquatic ecosystems, well environmental
planning involving such examinations.
.B
CACM September, 1975
.A
Claudson, R. M.
.K
digital simulation, mathematical modeling, plankton
population dynamics, phytoplankton, zooplankton,
river ecosystems, ecological mechanisms, environmental simulation,
modeling ecosystems, pollution, environmental
impact, environmental planning
.C
3.12 3.19
.N
CA750903 JB January 6, 1978 2:55 PM
.X
2721 5 2721
2721 5 2721
2721 5 2721
.I 2722
.T
Multidimensional Binary Search Trees Used Associative Searching
.W
paper develops multidimensional binary
search tree (or k-d tree, k dimensionality
search space) data structure storage
information retrieved associative searches.
k-d tree defined examples given.
shown quite its storage requirements.
significant advantage structure single
data structure can handle many types queries
very efficiently. Various utility algorithms developed;
their proven average running times
n record file are: insertion, O (log n); deletion
root, O (n^(k-1)/k); deletion random node,
O (log n); optimization (guarantees logarithmic performance
searches), O (n log n). Search algorithms
given partial match queries t keys specified
[proven maximum running time O (n^(k-t)/k)]
nearest neighbor queries [empirically observed average
running time O (log n).] These performances
far surpass best currently known algorithms
these tasks. algorithm presented handle
any general intersection query. main focus
paper theoretical. felt, however,
k-d trees could quite useful many applications,
examples potential uses given.
.B
CACM September, 1975
.A
Bently, J. L.
.K
associative retrieval, binary search trees, key,
attribute, information retrieval system, nearest
neighbor queries, partial match queries, intersection
queries, binary tree insertion
.C
3.63 3.70 3.74 4.49
.N
CA750902 JB January 6, 1978 3:22 PM
.X
2722 5 2722
2722 5 2722
2722 5 2722
.I 2723
.T
Multiprocessing Compactifying Garbage Collection
.W
Algorithms multiprocessing compactifying
garbage collector presented discussed.
simple case two processors, one performing LISP-like
list operations other performing
garbage collection continuously, thoroughly examined.
necessary capabilities each processor
defined, well interprocessor communication
interlocks. Complete procedures garbage
collection standard list processing primitives
presented thoroughly explained. Particular
attention given problems marking relocating
list cells while another processor may
operating them. primary aim throughout
allow list processor run unimpeded while
other processor reclaims list storage. more
complex cases involving several list processors
one more garbage collection processors also briefly discussed.
.B
CACM September, 1975
.A
Steele, G. L. Jr.
.K
garbage collection, storage reclamation, reclaimer,
storage allocation, multiprocessing, synchronization,
semaphores, parallel processing, compactification, relocation,
LISP, list processing, free storage, pointers,
data structures, gc processor
.C
4.19 4.32 4.40 4.49 4.9
.N
CA750901 JB January 6, 1978 3:39 PM
.X
1024 4 2723
1024 4 2723
1050 4 2723
1051 4 2723
1051 4 2723
1098 4 2723
1102 4 2723
1132 4 2723
1214 4 2723
1380 4 2723
1388 4 2723
1390 4 2723
1393 4 2723
1485 4 2723
1486 4 2723
1487 4 2723
1549 4 2723
1549 4 2723
1549 4 2723
1570 4 2723
1706 4 2723
1826 4 2723
1828 4 2723
1854 4 2723
1869 4 2723
1877 4 2723
1878 4 2723
1878 4 2723
1946 4 2723
1957 4 2723
1960 4 2723
1972 4 2723
378 4 2723
2060 4 2723
2150 4 2723
2155 4 2723
2156 4 2723
2168 4 2723
2168 4 2723
2168 4 2723
2317 4 2723
2319 4 2723
2377 4 2723
2342 4 2723
2376 4 2723
2379 4 2723
2424 4 2723
2438 4 2723
2482 4 2723
2513 4 2723
2618 4 2723
2632 4 2723
2665 4 2723
2704 4 2723
2719 4 2723
2723 4 2723
2723 4 2723
2723 4 2723
2723 4 2723
2723 4 2723
2723 4 2723
2723 4 2723
2736 4 2723
2738 4 2723
2740 4 2723
2741 4 2723
2833 4 2723
2838 4 2723
2842 4 2723
2855 4 2723
2855 4 2723
2855 4 2723
2857 4 2723
2867 4 2723
2879 4 2723
2882 4 2723
2941 4 2723
2956 4 2723
3030 4 2723
3074 4 2723
3077 4 2723
3080 4 2723
3106 4 2723
3106 4 2723
3112 4 2723
3112 4 2723
3184 4 2723
627 4 2723
731 4 2723
793 4 2723
106 4 2723
210 5 2723
1549 5 2723
1749 5 2723
1826 5 2723
2651 5 2723
2723 5 2723
2723 5 2723
2723 5 2723
2838 5 2723
2896 5 2723
3039 5 2723
3074 5 2723
3112 5 2723
627 5 2723
731 5 2723
106 6 2723
1380 6 2723
1826 6 2723
1826 6 2723
210 6 2723
1834 6 2723
1853 6 2723
1972 6 2723
1972 6 2723
2438 6 2723
2723 6 2723
2723 6 2723
2723 6 2723
2723 6 2723
2723 6 2723
2732 6 2723
2732 6 2723
2736 6 2723
2833 6 2723
2838 6 2723
2896 6 2723
731 6 2723
.I 2724
.T
Lemniscate Constants (Corrigendum)
.B
CACM August, 1975
.A
Todd, J.
.N
CA750811 JB January 6, 1978 3:44 PM
.X
2724 5 2724
2724 5 2724
2724 5 2724
.I 2725
.T
Comparison Simulation Event List Algorithms (Corrigendum)
.B
CACM August, 1975
.A
Vaucher, J. C.
Duval, P.
.N
CA750810 JB January 6, 1978 3:43 PM
.X
2725 5 2725
2725 5 2725
2725 5 2725
.I 2726
.T
Combining Decision Rules Decision Table
.W
techniques minimizing logic circuits
applied simplification decision
tables combining decision rules. method
logically equivalent Quien-McCluskey
method finding prime implicants. If some
decision rules implied ELSE Rule occur
low frequency, then ELSE Rule can used further
simplify decision table. Several objectives
merit consideration optimizing decision table:(1)
reducing machine execution time; (2) reducing
preprocessing time; (3) reducing required machine memory;
(4) reducing number decision rules.
(This often improves clarity decision table
human reader.) shown objectives
(3) (4) can furthered above methods.
Objective (1) also attained if overspecified
decision rules not combined. Objective (2) must
compared against potential benefits objectives
(1), (3), (4) deciding whether use above methods.
.B
CACM August, 1975
.A
Shwayder, K.
.K
Quine-McCluskey method, prime implicants, minimization,
maximization, logic circuit, boolean
method, coding, decision tables, flowcharting, sorting
.C
3.5 3.74 4.12 5.31 5.6
.N
CA750809 JB January 6, 1978 3:53 PM
.X
1354 4 2726
1354 4 2726
1488 4 2726
1548 4 2726
1548 4 2726
1684 4 2726
2053 4 2726
2053 4 2726
2053 4 2726
2220 4 2726
2220 4 2726
2220 4 2726
2220 4 2726
2220 4 2726
2273 4 2726
2273 4 2726
2273 4 2726
2273 4 2726
2453 4 2726
2453 4 2726
2453 4 2726
2492 4 2726
2517 4 2726
2518 4 2726
2598 4 2726
2598 4 2726
2598 4 2726
2598 4 2726
2616 4 2726
2691 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2726 4 2726
2856 4 2726
2856 4 2726
2856 4 2726
2856 4 2726
3113 4 2726
3113 4 2726
1172 5 2726
1327 5 2726
1354 5 2726
1488 5 2726
1489 5 2726
1548 5 2726
2220 5 2726
2221 5 2726
2263 5 2726
2726 5 2726
2726 5 2726
2726 5 2726
.I 2727
.T
Multiple Byte Processing Full-Word Instructions
.W
method described which allows parallel
processing packed data items using only ordinary
full-word computer instructions, even though processing
requires operations whose execution contingent
upon value datum. provides useful technique
processing small data items such alphanumeric
characters.
.B
CACM August, 1975
.A
Lamport, L.
.K
byte processing, character processing, packed data
.C
4.9
.N
CA750808 JB January 6, 1978 4:21 PM
.X
2727 5 2727
2727 5 2727
2727 5 2727
2952 5 2727
142 6 2727
162 6 2727
163 6 2727
192 6 2727
2185 6 2727
2727 6 2727
.I 2728
.T
Consecutive Storage Relevant Records Redundancy
.W
paper studies properties new
class file organizations (CRWR) records
relevant every query stored consecutive storage
locations but organizations contain redundancy.
Some theorems which provide tools reducing redundancy
CRWR organizations have been also developed.
Redundancies obtained application these theorems
compared query-inverted file
organizations. Some CRWR organization minimum redundancy
have also been developed queries which
specify sets keys.
.B
CACM August, 1975
.A
Ghosh, S. P.
.K
consecutive, retrieval, storage, file, records, query, redundancy, key
.C
3.70 3.73 3.74
.N
CA750807 JB January 6, 1978 4:34 PM
.X
2728 5 2728
2728 5 2728
2728 5 2728
.I 2729
.T
Comments Paper T. C. Chen I. T. Ho
.B
CACM August, 1975
.A
Smith, A. J.
.K
binary coded decimal digits, decimal data storage,
data compression, Huffman codes, variable length
codes
.C
6.32 6.34
.N
CA750806 JB January 6, 1978 4:37 PM
.X
2729 4 2729
2729 4 2729
2288 5 2729
2729 5 2729
2729 5 2729
2729 5 2729
2801 5 2729
.I 2730
.T
Interactive Consulting via Natural Language
.W
Interactive programming systems often contain
help commands give programmer on-line
instruction regarding use various systems
commands. argued would relatively
easy make these help commands significantly more
helpful having them accept requests natural
language. demonstration, Weizenbaum's ELIZA program
has been provided script turns
into natural language system consultant.
.B
CACM August, 1975
.A
Sharo, S. C.
Kwasny, S. C.
.K
interactive programming, time-sharing systems, natural
language processing, computer assisted instruction
.C
3.32 3.42 3.79 4.49
.N
CA750805 DMM January 30, 1978 4:13 PM
.X
1400 4 2730
1553 4 2730
1945 4 2730
2127 4 2730
2396 4 2730
2730 4 2730
1487 5 2730
2730 5 2730
2730 5 2730
2730 5 2730
.I 2731
.T
Remark Stably Updating Mean Standard Deviation Data
.B
CACM August, 1975
.A
Cotton, I. W.
.K
mean, standard deviation
.C
5.5 5.19
.N
CA750804 JB January 6, 1978 4:40 PM
.X
2731 4 2731
3159 4 2731
3166 4 2731
3167 4 2731
2731 5 2731
2731 5 2731
2731 5 2731
2799 5 2731
3159 5 2731
3166 5 2731
3167 5 2731
1411 6 2731
2731 6 2731
2731 6 2731
2731 6 2731
2799 6 2731
2799 6 2731
2799 6 2731
3159 6 2731
3167 6 2731
3166 6 2731
.I 2732
.T
Guarded Commands, Nondeterminacy Formal Derivation Programs
.W
So-called "guarded commands" introduced
building block alternative repetitive
constructs allow nondeterministic program components
which least activity evoked, but
possible even final state, not necessarily uniquely
determined initial state.
formal derivation programs expressed terms
these constructs, calculus shown.
.B
CACM August, 1975
.A
Dijkstra, E. W.
.K
programming languages, sequencing primitives, program
semantics, programming language semantics,
nondeterminacy, case-construction, repetition, termination,
correctness proof, derivation programs,
programming methodology
.C
4.20 4.22
.N
CA750803 JB January 6, 1978 4:46 PM
.X
249 4 2732
254 4 2732
272 4 2732
1102 4 2732
1109 4 2732
1140 4 2732
1188 4 2732
1306 4 2732
1464 4 2732
1491 4 2732
1767 4 2732
1781 4 2732
1787 4 2732
1949 4 2732
321 4 2732
2021 4 2732
2059 4 2732
2126 4 2732
2222 4 2732
2227 4 2732
2315 4 2732
2326 4 2732
2470 4 2732
435 4 2732
437 4 2732
463 4 2732
483 4 2732
491 4 2732
2732 4 2732
2732 4 2732
2865 4 2732
2896 4 2732
2943 4 2732
560 4 2732
583 4 2732
3014 4 2732
3068 4 2732
3073 4 2732
3077 4 2732
3143 4 2732
627 4 2732
631 4 2732
632 4 2732
642 4 2732
644 4 2732
653 4 2732
680 4 2732
761 4 2732
762 4 2732
763 4 2732
123 4 2732
140 4 2732
919 4 2732
989 4 2732
196 5 2732
1834 5 2732
2732 5 2732
2732 5 2732
2732 5 2732
2896 5 2732
2972 5 2732
3037 5 2732
3039 5 2732
3043 5 2732
3073 5 2732
196 6 2732
970 6 2732
1834 6 2732
2204 6 2732
2597 6 2732
2597 6 2732
2723 6 2732
2723 6 2732
2732 6 2732
2732 6 2732
2732 6 2732
2732 6 2732
2732 6 2732
2732 6 2732
2738 6 2732
2896 6 2732
2927 6 2732
799 6 2732
.I 2733
.T
Deterministic Parsing Ambiguous Grammars
.W
Methods describing syntax programming
languages ways more flexible
natural than conventional BNF descriptions considered.
These methods involve use ambiguous
context-free grammars together rules resolve
syntactic ambiguities. shown efficient
LR LL parsers can constructed directly
certain classes these specifications.
.B
CACM August, 1975
.A
Aho, A. V.
Johnson, S. C.
Ullman, J. D.
.K
programming language specification, parser generation,
translator writing systems, syntax analysis,
LR parsing, LL parsing, ambiguous grammars
.C
4.12 4.22 5.23
.N
CA750802 JB January 9, 1978 9:28 AM
.X
1323 4 2733
1358 4 2733
1380 4 2733
1665 4 2733
1665 4 2733
1768 4 2733
1781 4 2733
1787 4 2733
1787 4 2733
1824 4 2733
1825 4 2733
1836 4 2733
1861 4 2733
1989 4 2733
2015 4 2733
2110 4 2733
2112 4 2733
2127 4 2733
2187 4 2733
2317 4 2733
2534 4 2733
2541 4 2733
2545 4 2733
2698 4 2733
2698 4 2733
2733 4 2733
2733 4 2733
2733 4 2733
2733 4 2733
2733 4 2733
2746 4 2733
2820 4 2733
2986 4 2733
3073 4 2733
3093 4 2733
3094 4 2733
3155 4 2733
1781 5 2733
2179 5 2733
2423 5 2733
2733 5 2733
2733 5 2733
2733 5 2733
2786 5 2733
799 5 2733
.I 2734
.T
External Storage Fragmentation Produced
First-Fit Best-Fit Allocation Strategies
.W
Published comparisons external fragmentation
produced first-fit best-fit memory
allocation have not been consistent. Through simulation,
series experiments were performed order
obtain better data relative performance
first-fit best-fit better understanding
reasons underlying observed differences.
time-memory-product efficiencies first-fit
best-fit were generally within 1 3 percent each
other. Except small populations, size
request population had little effect allocation
efficiency. exponential hyperexponential
distributions requests, first-fit outperformed best-fit;
but normal uniform distributions,
exponential distributions distorted various
ways, best-fit outperformed first-fit.
hypothesized first-fit outperforms best-fit,
does so because first-fit, preferentially
allocating toward one end memory, encourages large blocks
grow other end. Sufficient contiguous
space thereby more likely available relatively
large requests. Results simulation experiments
supported hypothesis showed relative
performance first-fit best-fit depends
frequency request. coefficient
variation request distribution greater
than approximately equal unity, first-fit outperformed best-fit.
.B
CACM August, 1975
.A
Shore, J. E.
.K
storage fragmentation, dynamic memory allocation, first-fit, best-fit
.C
3.73 4.32 4.35
.N
CA750801 JB January 9, 1978 9:41 AM
.X
2095 4 2734
2218 4 2734
2218 4 2734
2498 4 2734
2596 4 2734
2734 4 2734
2734 4 2734
2902 4 2734
2911 4 2734
3000 4 2734
3000 4 2734
1879 5 2734
2095 5 2734
2734 5 2734
2734 5 2734
2734 5 2734
2902 5 2734
2911 5 2734
2983 5 2734
1051 6 2734
1062 6 2734
1184 6 2734
1211 6 2734
1552 6 2734
1879 6 2734
1879 6 2734
273 6 2734
2435 6 2734
2435 6 2734
2498 6 2734
2596 6 2734
2734 6 2734
2734 6 2734
2734 6 2734
2747 6 2734
2768 6 2734
2773 6 2734
2983 6 2734
.I 2735
.T
Discrimination Employment Women Computer Industry
.B
CACM July, 1975
.A
Weber, R. E.
Gilchrist, B.
.K
discrimination against women, salaries, employment,
programmers, systems analysis, keypunch operators,
machine operators
.C
2.40 2.41 2.42
.N
CA750707 JB January 9, 1978 9:55 AM
.X
2735 5 2735
2735 5 2735
2735 5 2735
2823 5 2735
2735 6 2735
.I 2736
.T
Note Hash Linking
.B
CACM July, 1975
.A
Bobrow, D. G.
.K
hash search, address space extension,
implicit pointers, monitor conditions
.C
3.7 3.73 4.1
.N
CA750706 JB January 9, 1978 9:59 AM
.X
1708 4 2736
1781 4 2736
1826 4 2736
1860 4 2736
1972 4 2736
1972 4 2736
2156 4 2736
2156 4 2736
2156 4 2736
2168 4 2736
2168 4 2736
2249 4 2736
2249 4 2736
2314 4 2736
2361 4 2736
2438 4 2736
2513 4 2736
2719 4 2736
2723 4 2736
2736 4 2736
2736 4 2736
2736 4 2736
2736 4 2736
2833 4 2736
2833 4 2736
2855 4 2736
2855 4 2736
3074 4 2736
3074 4 2736
3074 4 2736
3106 4 2736
3112 4 2736
3112 4 2736
1626 5 2736
1826 5 2736
1853 5 2736
1972 5 2736
2736 5 2736
2736 5 2736
2736 5 2736
2833 5 2736
2845 5 2736
3112 5 2736
106 6 2736
1184 6 2736
1380 6 2736
1626 6 2736
1826 6 2736
1826 6 2736
1972 6 2736
2435 6 2736
2438 6 2736
2598 6 2736
2723 6 2736
2736 6 2736
2736 6 2736
2736 6 2736
2747 6 2736
2768 6 2736
2833 6 2736
2838 6 2736
731 6 2736
.I 2737
.T
Determining Minimum-Area Encasing
Rectangle Arbitrary Closed Curve
.W
paper describes method finding
rectangle minimum area which given arbitrary
plane curve can contained. method interest
certain packing optimum layout problems.
consists first determining minimal-perimeter
convex polygon encloses given curve
then selecting rectangle minimum area capable
containing polygon. Three theorems
introduced show one side minimum-area
rectangle must colinear edge
enclosed polygon minimum-area encasing rectangle
convex polygon also minimum-area
rectangle curve.
.B
CACM July, 1975
.A
Freeman, H.
Shapira, R.
.K
enclosed curve, optimum layout, optimum
packing, minimum-area encasing rectangle
.C
5.19 5.49
.N
CA750705 JB January 9, 1978 10:08 AM
.X
2737 5 2737
2737 5 2737
2737 5 2737
2997 5 2737
2737 6 2737
.I 2738
.T
Use Concept Transparency
Design Hierarchically Structured Systems
.W
paper deals design hierarchically
structured programming systems. develops
method evaluating cost requiring programmers
work abstraction real machine.
number examples hardware software
given illustrations method.
.B
CACM July, 1975
.A
Parnas, D. L.
Siewiorek, D. P.
.K
hierarchical systems, bottom up design, levels
abstraction, synchronization primitives
.C
4.20 4.30 6.1 6.20
.N
CA750704 DMM January 31, 1978 3:46 PM
.X
1828 4 2738
1854 4 2738
1877 4 2738
1960 4 2738
2150 4 2738
2317 4 2738
2319 4 2738
2319 4 2738
2377 4 2738
2378 4 2738
2342 4 2738
2376 4 2738
2379 4 2738
2320 4 2738
2424 4 2738
2482 4 2738
2480 4 2738
2618 4 2738
2632 4 2738
2632 4 2738
2704 4 2738
2704 4 2738
2723 4 2738
2738 4 2738
2738 4 2738
2738 4 2738
2738 4 2738
2738 4 2738
2740 4 2738
2740 4 2738
2741 4 2738
2866 4 2738
2867 4 2738
2867 4 2738
2868 4 2738
2869 4 2738
2941 4 2738
2958 4 2738
3004 4 2738
3004 4 2738
3030 4 2738
3030 4 2738
3127 4 2738
3155 4 2738
3184 4 2738
1749 5 2738
2080 5 2738
2247 5 2738
2356 5 2738
2738 5 2738
2738 5 2738
2738 5 2738
2777 5 2738
2972 5 2738
970 6 2738
2204 6 2738
2597 6 2738
2732 6 2738
2738 6 2738
.I 2739
.T
Restriction Language Computer Grammars Natural Language
.W
Over past few years, number systems
computer analysis natural language
sentences have been based augmented context-free
grammars: context-free grammar which defines
set parse trees sentence, plus group restrictions
which tree must conform order
valid sentence analysis. coverage
grammar increased, efficient representation
becomes essential further development. paper
presents programming language designed specifically
compact perspicuous statement restrictions
natural language grammar. based
ten years' experience parsing text sentences
comprehensive English grammar N.Y.U.
Linguistic String Project, embodies its syntax
routines relations which were found
useful adequate computerized natural language
analysis. language used current
implementation Linguistic String Parser.
.B
CACM July 1975
.A
Sager, N.
Grishman, R.
.K
natural language, parsing, grammar, programming languages
.C
3.42 3.79 4.22
.N
CA750703 JB January 9, 1978 10:17 AM
.X
2581 4 2739
2739 4 2739
2795 4 2739
2921 4 2739
3087 4 2739
1989 5 2739
2739 5 2739
2739 5 2739
2739 5 2739
.I 2740
.T
Large Semaphore Based Operating System
.W
paper describes internal structure
large operating system set cooperating
sequential processes. processes synchronize
means semaphores extended semaphores (queue
semaphores). number parallel processes carefully
justified, various semaphore constructions
explained. system proved free "deadly
embrace" (deadlock). design principle
alternative Dijkstra's hierarchical structuring
operating systems. project management
performance discussed, too. operating
system first large one using RC 4000
multiprogramming system.
.B
CACM July, 1975
.A
Lauesen, S.
.K
cooperating processes, operating system, semaphores,
semaphore applications, queue semaphores,
deadlock, deadly embrace, hierarchical structuring, multiprogramming,
operating system structure, asynchronous
structuring, buffering, parallel processes, synchronizing
primitives, reentrant code, RC 4000, project
management, time schedule, debugging, project planning,
project scheduling, reliability, program proving,
coroutines, correctness, program maintenance, software paging
.C
4.30 4.31 4.32 4.42 4.43 5.24
.N
CA750702 JB January 9, 1978 10:32 AM
.X
1828 4 2740
1854 4 2740
1877 4 2740
1960 4 2740
2150 4 2740
2228 4 2740
2280 4 2740
2317 4 2740
2319 4 2740
2319 4 2740
2377 4 2740
2378 4 2740
2342 4 2740
2376 4 2740
2379 4 2740
2379 4 2740
2320 4 2740
2424 4 2740
2482 4 2740
2482 4 2740
2618 4 2740
2632 4 2740
2632 4 2740
2704 4 2740
2723 4 2740
2738 4 2740
2738 4 2740
2740 4 2740
2740 4 2740
2740 4 2740
2741 4 2740
2851 4 2740
2867 4 2740
2868 4 2740
2920 4 2740
3127 4 2740
3184 4 2740
1749 5 2740
1877 5 2740
2080 5 2740
2740 5 2740
2740 5 2740
2740 5 2740
.I 2741
.T
Decomposability, Instabilities,
Saturation Multiprogramming Systems
.W
step-by-step approach model dynamic
behavior evaluate performance computing
systems proposed. based technique variable
aggregation concept nearly decomposable
system, both borrowed Econometrics. approach
taken order identify multiprogramming
paging systems (i) unstable regimes operations (ii)
critical computing loads which bring system
into states saturation. analysis leads
more complete definition circumstances
which "thrashing" can set in.
.B
CACM July, 1975
.A
Courtois, P. J.
.K
multiprogramming, paging, performance evaluation,
saturation, instabilities, thrashing, aggregation,
system levels, hierarchy,networks queues
.C
4.31 4.32 8.1 8.2
.N
CA750701 JB January 9, 1978 10:39 AM
.X
1828 4 2741
1854 4 2741
1877 4 2741
1892 4 2741
1960 4 2741
2068 4 2741
2150 4 2741
2317 4 2741
2319 4 2741
2377 4 2741
2342 4 2741
2376 4 2741
2379 4 2741
2424 4 2741
2482 4 2741
2618 4 2741
2632 4 2741
2704 4 2741
2712 4 2741
2723 4 2741
2738 4 2741
2740 4 2741
2741 4 2741
2741 4 2741
2741 4 2741
2867 4 2741
3070 4 2741
3184 4 2741
1526 5 2741
1749 5 2741
2454 5 2741
2741 5 2741
2741 5 2741
2741 5 2741
3016 5 2741
3070 5 2741
3153 5 2741
1805 6 2741
1901 6 2741
2454 6 2741
2741 6 2741
2741 6 2741
2741 6 2741
2891 6 2741
2988 6 2741
.I 2742
.T
Improved Event-Scanning Mechanisms Discrete Event Simulation
.W
Simulation models large, complex "real-world"
applications have occasionally earned
reputation eating up hours computer time.
problem may attributed part difficulties
such slow stochastic convergence. However, additional
problem lies fact significant
amount bookkeeping time required keep future events
their proper sequence. paper presents
method significantly reducing time spent scanning
future event lists discrete event simulations.
There models presented, all which improve effectiveness
events-list scan problem becomes
more burdensome.
.B
CACM June, 1975
.A
Wyman, F. P.
.K
discrete event simulation, simulation, event scanning mechanisms
.C
4.34 5.5 8.1
.N
CA750611 JB January 9, 1978 12:43 PM
.X
2742 5 2742
2742 5 2742
2742 5 2742
2844 5 2742
2936 5 2742
3064 5 2742
970 6 2742
1059 6 2742
1846 6 2742
1939 6 2742
2742 6 2742
2742 6 2742
2742 6 2742
2767 6 2742
2767 6 2742
2767 6 2742
2936 6 2742
.I 2743
.T
Sorting X + Y
.B
CACM June, 1975
.A
Harper, L. H.
Payne, T. H.
Savage, J. E.
Straus, E.
.K
merge sorting, computational complexity, data
modeling, computing models, binary comparisons
.C
5.25 5.31
.N
CA750610 JB January 9, 1978 12:45 PM
.X
2743 5 2743
2743 5 2743
2743 5 2743
.I 2744
.T
Addition Arbitrary Base Without Radix Conversion
.W
paper presents generalization
old programming technique; using it,one may add
subtract numbers represented any radix, including
mixed radix, stored one digit per byte
bytes sufficient size. Radix conversion unnecessary,
no looping required, numbers may
even stored display (I/O) format. Applications
Cobol, MIX, hexadecimal sums discussed.
.B
CACM June, 1975
.A
Soule, S.
.K
addition, subtraction, decimal arithmetic, arbitrary
radix arithmetic, radix conversion, MIX arithmetic,
Cobol display arithmetic, mixed radix arithmetic
.C
4.49 4.9 5.9
.N
CA750609 JB January 9, 1978 12:52 PM
.X
2744 5 2744
2744 5 2744
2744 5 2744
.I 2745
.T
Linear Space Algorithm Computing Maximal Common Subsequences
.W
problem finding longest common subsequence
two strings has been solved quadratic
time space. algorithm presented which
solve problem quadratic time linear
space.
.B
CACM June, 1975
.A
Hirschberg, D. S.
.K
subsequence, longest common subsequence, string correction, editing
.C
3.63 3.73 3.79 4.22 5.25
.N
CA750608 JB January 9, 1978 12:56 PM
.X
2745 5 2745
2745 5 2745
2745 5 2745
2963 5 2745
3114 5 2745
1502 6 2745
2499 6 2745
2745 6 2745
2745 6 2745
.I 2746
.T
Efficient String Matching: Aid Bibliographic Search
.W
paper describes simple, efficient algorithm
locate all occurrences any finite
number keywords string text. algorithm
consists constructing finite state pattern
matching machine keywords then using
pattern matching machine process text string
single pass. Construction pattern matching
machine takes time proportional sum
lengths keywords. number state transitions
made pattern matching machine
processing text string independent number
keywords. algorithm has been used
improve speed library bibliographic
search program factor 5 10.
.B
CACM June, 1975
.A
Aho, A. V.
Corasick, M. J.
.K
keywords phrases, string pattern matching, bibliographic
search, information retrieval, text-editing,
finite state machines, computational complexity.
.C
3.74 3.71 5.22 5.25
.N
CA750607 JB January 9, 1978 1:03 PM
.X
2532 4 2746
2545 4 2746
2631 4 2746
2733 4 2746
2746 4 2746
2746 4 2746
2746 4 2746
2746 4 2746
2746 4 2746
3001 4 2746
1665 5 2746
1739 5 2746
2139 5 2746
2545 5 2746
2746 5 2746
2746 5 2746
2746 5 2746
2786 5 2746
2916 5 2746
2746 6 2746
.I 2747
.T
Simplified Recombination Scheme Fibonacci Buddy System
.W
simplified recombination scheme Fibonacci
buddy system which requires neither tables
nor repetitive calculations uses only two
additional bits per buffer presented.
.B
CACM June, 1975
.A
Cranston, B.
Thomas, R.
.K
Fibonacci buddy system, dynamic storage allocation, buddy system
.C
3.89 4.32 4.39
.N
CA750606 JB January 9, 1978 1:07 PM
.X
2596 4 2747
2747 4 2747
2768 4 2747
2845 4 2747
2902 4 2747
2911 4 2747
2955 4 2747
2435 5 2747
2747 5 2747
2747 5 2747
2747 5 2747
2773 5 2747
2845 5 2747
2902 5 2747
2955 5 2747
1051 6 2747
1062 6 2747
1184 6 2747
1184 6 2747
1184 6 2747
1211 6 2747
1552 6 2747
1879 6 2747
2435 6 2747
2435 6 2747
2435 6 2747
2596 6 2747
2596 6 2747
2598 6 2747
2734 6 2747
2736 6 2747
2747 6 2747
2747 6 2747
2747 6 2747
2747 6 2747
2768 6 2747
2768 6 2747
2773 6 2747
.I 2748
.T
Indirect Threaded Code
.W
efficient arrangement interpretive code
described. related Bell's notion
threaded code but requires less space more
amenable machine independent implementations.
.B
CACM June, 1975
.A
Dewar, R. B. K.
.K
threaded code, SNOBOL4, interpretors, code generation
.C
4.12 4.13
.N
CA750605 JB January 9, 1978 1:11 PM
.X
2748 4 2748
3144 4 2748
2491 5 2748
2748 5 2748
2748 5 2748
2748 5 2748
.I 2749
.T
Significant Event Simulation
.W
paper compares new method simulation
organization, called significant event method,
old one, called clock pulse method, using
examples two automobile traffic models.
significant event method found more efficient
than clock pulse method low levels system
interaction less efficient high levels. simple
mathematical model trade-off
relative running time two methods developed.
model aids choosing between two simulation
methods particular experiment. concluded
significant event method can value
simulation some systems computational
efficiency sufficient importance.
.B
CACM June, 1975
.A
Babich, A. F.
Grason, J.
Parnas, D. L.
.K
simulation organization, event simulation, clock
pulse simulation, significant event simulation.
.C
8.1
.N
CA750604 JB January 9, 1978 1:20 PM
.X
2749 5 2749
2749 5 2749
2749 5 2749
.I 2750
.T
Cost Oriented Algorithm Data Set Allocation Storage Hierarchies
.W
Data set allocation today's multilevel
storage systems usually based qualitative,
ad hoc decisions. While would desirable obtain
optimal solution allocation problem,
clear number parameters involved makes
intractable straight-forward solution.
such situation, we must find set assumptions
which simplify problem greatly, but which
still provide basis considering all significant
cost elements. paper presents such first,
quantitative allocation step. considers many
significant detailed costs system utilization,
data storage, data staging, data migration. Although
many avenues further improvement available,
present algorithm seems usefully accurate.
such, can aid quantifying problems
data set allocation, storage system configuration, new device designs.
.B
CACM June, 1975
.A
Lum, V. Y.
Senko, M. E
Wang, C. P.
Ling, H.
.K
data set allocation, hierarchical storage, storage
system configuration, data staging, data migration,
storage allocation analysis
.C
3.5 3.9 6.2
.N
CA750603 JB January 9, 1978 1:31 PM
.X
2750 5 2750
2750 5 2750
2750 5 2750
.I 2751
.T
Illumination Computer Generated Pictures
.W
quality computer generated images
three-dimensional scenes depends shading
technique used paint objects cathode-ray
tube screen. shading algorithm itself depends
part method modeling object, which
also determines hidden surface algorithm.
various methods object modeling, shading, hidden
surface removal thus strongly interconnected.
Several shading techniques corresponding different
methods object modeling related hidden
surface algorithms presented here. Human visual
perception fundamental laws optics
considered development shading rule
provides better quality increased realism
generated images.
.B
CACM June, 1975
.A
Phong, B. T.
.K
computer graphics, graphic display, hidden surface removal.
.C
3.26 3.41 8.2
.N
CA750602 JB January 9, 1978 1:46 PM
.X
2751 5 2751
2751 5 2751
2751 5 2751
2816 5 2751
2827 5 2751
2828 5 2751
2913 5 2751
3047 5 2751
1751 6 2751
2004 6 2751
2493 6 2751
2751 6 2751
2751 6 2751
2751 6 2751
2751 6 2751
2751 6 2751
2771 6 2751
2829 6 2751
2829 6 2751
2841 6 2751
.I 2752
.T
Generation All Cycles Graph
Set Basic Cycles [H] (Algorithm 492)
.B
CACM June 1975
.A
Gibbs, N. E.
.K
basic cycle, cycle, graph
.C
5.32 3.24
.N
CA750601 JB January 9, 1978 1:55 PM
.X
2752 5 2752
2752 5 2752
2752 5 2752
.I 2753
.T
Heuristic Problem Solving Design System
Equipment Furniture Layouts
.W
Designer Problem Solver (DPS) demonstrates
computer can perform simple design
tasks. particular, designs furniture equipment
layouts. task chosen because
simple, well defined, characteristic many design
tasks architecture, engineering, urban planning,
natural resource management. These space planning
tasks usually involve manipulating two-dimensional
representations objects create feasible optimal
solutions problems involving topological
metric spatial constraints. paper describes
extensive tests performed program. DPS
heuristic problem solver planning phase prefixed
it. uses planning process give
sense direction, diagnostic procedures locate
difficulties, remedial actions recover
difficulties. uses convex polygon representation
accurately describe objects
layout. representation allows topological
metric constraints tested design
easily updated. DPS has been applied 50 problems.
While slow limited scope,
ideas behind general. demonstrates need
selectivity controlling search
methods used achieve it: task-specific information,
planning, diagnostic procedures, remedial actions,
selective alternative generators.
.B
CACM May, 1975
.A
Pfefferkorn, C. E.
.K
artificial intelligence, computer-aided design,
design synthesis, diagnostic search, heuristics,
planning, problem solving, representations, search strategies,
space planning, spatial representations
.C
3.20 3.25 3.64 3.66
.N
CA750514 JB January 9, 1978 2:10 PM
.X
1531 4 2753
2707 4 2753
2753 4 2753
1185 5 2753
2753 5 2753
2753 5 2753
2753 5 2753
.I 2754
.T
Syntactic Algorithm Peak Detection
Waveforms Applications Cardiography
.W
Peaks digitized waveform detected
algorithm incorporating piecewise linear approximation
tabular parsing techniques. Several parameters serve
identify waveform context enabling accurate
measurement peak amplitude, duration, shape.
algorithm sufficient speed allow on-line
real-time processing. example its application
demonstrated electrocardiogram.
.B
CACM May, 1975
.A
Horowitz, S. L.
.K
peak detection, digitized waveform, piecewise linear
approximation, context-free grammar, bottom-up
parsing, electrocardiogram.
.C
3.12 3.24 3.34 3.63 4.19 5.13 5.23
.N
CA750513 JB January 9, 1978 2:18 PM
.X
2754 5 2754
2754 5 2754
2754 5 2754
.I 2755
.T
New Math Computer Programming (Corrigendum)
.B
CACM May, 1975
.A
Mills, H. D.
.N
CA750512 JB January 9, 1978 2:20 PM
.X
2755 5 2755
2755 5 2755
2755 5 2755
.I 2756
.T
Problem-List Public Policy Issues
Concerning Computers Health Care
.B
CACM May, 1975
.A
Wasserman, A. I.
.K
economic social implications, public
computing, medicine health care
.C
2.11 2.12 3.34
.N
CA750511 JB January 9, 1978 2:22 PM
.X
2756 4 2756
3076 4 2756
3179 4 2756
2607 5 2756
2756 5 2756
2756 5 2756
2756 5 2756
.I 2757
.T
More kth Shortest Paths
.B
CACM May, 1975
.A
Fox, B.L.
.K
networks, kth shortest paths
.C
5.32
.N
CA750510 JB January 9, 1978 2:24 PM
.X
2757 4 2757
2757 4 2757
2844 4 2757
2933 4 2757
1059 5 2757
2630 5 2757
2757 5 2757
2757 5 2757
2757 5 2757
2933 5 2757
2630 6 2757
2757 6 2757
.I 2758
.T
Note LU Factorization Symmetric Matrix
.B
CACM May, 1975
.A
Evans, D. J.
Hatzopoulos, M.
.K
symmetric matrices, factorization, test matrices,
matrix inversion, separable systems
.C
5.14
.N
CA750509 JB January 9, 1978 2:26 PM
.X
2758 5 2758
2758 5 2758
2758 5 2758
.I 2759
.T
Solution Overdetermined System
Equations L1 Norm (Algorithm R478)
.B
CACM May, 1975
.A
Fritsch, F. N.
Hindmarsh, A. C.
.N
CA750508 JB January 9, 1978 2:32 PM
.X
2759 4 2759
2642 5 2759
2759 5 2759
2759 5 2759
2759 5 2759
.I 2760
.T
Visible Surface Plotting Program (Algorithm R475)
.B
CACM May, 1975
.A
Doran, C. J.
.N
CA750507 JB January 9, 1978 2 2:33 PM
.X
2760 5 2760
2760 5 2760
2760 5 2760
.I 2761
.T
Visible Surface Plotting Program (Algorithm R475)
.B
CACM May, 1975
.A
Mashburn, R. G.
.N
CA750506 JB January 9, 1978 2:35 PM
.X
2761 5 2761
2761 5 2761
2761 5 2761
.I 2762
.T
Ten Subroutines Manipulation
Chebyshev Series (Algorithm R446, C446)
.B
CACM May, 1975
.A
Piessens, R.
Mertens, I.
.N
CA750505 JB January 9, 1978 2:37 PM
.X
2762 4 2762
2521 5 2762
2762 5 2762
2762 5 2762
2762 5 2762
.I 2763
.T
Basic Cycle Generation [H] (Algorithm 491)
.B
CACM May, 1975
.A
Gibbs, N. E.
.K
Graph, basic cycles,fundamental cycle,
spanning tree, vertex adjacency matrix
.C
5.32 3.24
.N
CA750504 JB January 9, 1978 2:39 PM
.X
1961 4 2763
2177 4 2763
2763 4 2763
1847 5 2763
2763 5 2763
2763 5 2763
2763 5 2763
.I 2764
.T
Intelligent Analyzer Understander English
.W
paper describes working analysis generation
program natural language, which handles
paragraph length input. Its core system preferential
choice between deep semantic patterns,
based we call "semantic density." system
contrasted: (1) syntax oriented linguistic
approaches, (2) theorem proving
approaches understanding problem.
.B
CACM May, 1975
.A
Wilks, Y.
.K
artificial intelligence, computational linguistics,
template, paraplate, stereotype, machine translation,
understanding, natural language processing,
semantic preference, semantic density
.C
3.36 3.42 3.63
.N
CA750503 JB January 9, 1978 3:00 PM
.X
2764 5 2764
2764 5 2764
2764 5 2764
.I 2765
.T
Analysis performance Inverted Data Base Structures
.W
need envision architecture data base
systems hierarchical level level framework
stressed. inverted data base (file) organization
then analyzed, considering implementation
oriented aspects. inverted directory viewed realistically
another large data base which itself
subjected inversion. Formulations derived
estimate average access time (read only)
storage requirements, formalizing interaction data
base content characteristics, logical complexity
queries, machine timing blocking specifications
identified having first-order effect
performance. formulations presented necessary
used conjunction any index selection
criteria determine optimum set index keys.
.B
CACM May, 1975
.A
Cardenas, A. F.
.K
data base architecture, inverted file organization,
data base performance measurement, secondary
index organization, information storage retrieval, query answering
.C
3.70 3.71 3.72 3.74 3.79 4.0
.N
CA750502 JB January 9, 1978 3:15 PM
.X
1135 4 2765
1136 4 2765
2140 4 2765
2155 4 2765
2257 4 2765
2360 4 2765
2406 4 2765
2451 4 2765
2452 4 2765
2452 4 2765
2556 4 2765
493 4 2765
2710 4 2765
2710 4 2765
2715 4 2765
2716 4 2765
2717 4 2765
2718 4 2765
2765 4 2765
2765 4 2765
2765 4 2765
2765 4 2765
2765 4 2765
2765 4 2765
2817 4 2765
2882 4 2765
2888 4 2765
2888 4 2765
2901 4 2765
2901 4 2765
2906 4 2765
2957 4 2765
2959 4 2765
2965 4 2765
2965 4 2765
3087 4 2765
3134 4 2765
3154 4 2765
729 4 2765
1936 5 2765
1976 5 2765
2046 5 2765
2451 5 2765
2452 5 2765
2765 5 2765
2765 5 2765
2765 5 2765
2976 5 2765
616 5 2765
2688 6 2765
2765 6 2765
2882 6 2765
.I 2766
.T
Copying Cyclic List Structures Linear Time Using Bounded Workspace
.W
bounded workspace copying algorithm arbitrary
list structures given. algorithm
operates linear time does not require tag bits.
best previous bounded workspace copying algorithms
achieved n^2 time without tag bits n log n time
one tag. only restriction algorithm
given here copy must placed into contiguous
section memory. method applicable
fixed variable size nodes.
.B
CACM May, 1975
.A
Fisher, D. A.
.K
list processing, copying, linear time, space complexity
.C
4.49 5.25
.N
CA750501 JB January 9, 1978 3:22 PM
.X
2766 4 2766
2954 4 2766
3106 4 2766
2665 5 2766
2766 5 2766
2766 5 2766
2766 5 2766
2855 5 2766
2954 5 2766
3106 5 2766
1549 6 2766
1549 6 2766
1826 6 2766
210 6 2766
210 6 2766
1972 6 2766
1972 6 2766
2513 6 2766
2665 6 2766
2665 6 2766
2766 6 2766
2766 6 2766
2766 6 2766
2833 6 2766
2855 6 2766
2954 6 2766
2998 6 2766
2998 6 2766
.I 2767
.T
Comparison Simulation Event List Algorithms
.W
Four algorithms considered which can used
schedule events general purpose discrete
simulation system. Two algorithms new, one
based end-order tree structure event
notices, another uses indexed linear list. algorithms
tested set typical stochastic
scheduling distributions especially chosen show
advantages limitations algorithms.
end-order tree algorithm shown advantageous,
immediate replacement algorithm
use current simulation languages. most
promising algorithm uses indexed list concept.
require adaptive routine before can
employed general purpose simulators,but its
performance such further study would fruitful.
.B
CACM April, 1975
.A
Vaucher, J. G.
Duval, P.
.K
simulation, time flow mechanisms, event list algorithm,
simulation, time flow mechanisms, event
list algorithm, simulation executive, event scheduling
routine, discrete system simulation, sorting
.C
3.74 4.22 8.1
.N
CA750410 JB January 9, 1978 3:43 PM
.X
2767 4 2767
3064 4 2767
1939 5 2767
2767 5 2767
2767 5 2767
2767 5 2767
2844 5 2767
2936 5 2767
3051 5 2767
3064 5 2767
3109 5 2767
970 6 2767
1059 6 2767
1846 6 2767
1939 6 2767
2742 6 2767
2742 6 2767
2742 6 2767
2767 6 2767
2767 6 2767
2767 6 2767
2767 6 2767
2767 6 2767
2844 6 2767
2844 6 2767
2936 6 2767
.I 2768
.T
Algorithm Locating Adjacent Storage Blocks Buddy System
.W
simple scheme determination
location block storage relative other
blocks described. scheme applicable
buddy type storage allocation systems.
.B
CACM April, 1975
.A
Hinds, J. A.
.K
dynamic storage allocation, buddy system, generalized Fibonacci sequences
.C
3.89 4.32 4.39
.N
CA750409 JB January 9, 1978 3:46 PM
.X
1389 4 2768
1552 4 2768
2162 4 2768
2435 4 2768
2596 4 2768
2596 4 2768
2747 4 2768
2768 4 2768
2768 4 2768
2845 4 2768
2845 4 2768
2902 4 2768
2902 4 2768
2911 4 2768
2955 4 2768
2955 4 2768
1184 5 2768
2435 5 2768
2768 5 2768
2768 5 2768
2768 5 2768
2845 5 2768
2902 5 2768
1051 6 2768
1062 6 2768
1184 6 2768
1184 6 2768
1211 6 2768
1552 6 2768
1879 6 2768
2435 6 2768
2435 6 2768
2596 6 2768
2598 6 2768
2734 6 2768
2736 6 2768
2747 6 2768
2747 6 2768
2768 6 2768
2768 6 2768
.I 2769
.T
Modification Warshall's Algorithm
Transitive Closure Binary Relations
.W
algorithm given computing transitive
closure binary relation represented
Boolean matrix. algorithm similar Warshall's
although executes faster sparse matrices
most computers, particularly paging environment.
.B
CACM April, 1975
.A
Warren, H. S. Jr.
.K
Warshall's algorithm, transitive closure, reachability
matrix, directed graph, digraph, Boolean
matrix, binary relation
.C
5.30 5.32
.N
CA750408 JB January 9, 1978 3:49 PM
.X
1151 4 2769
1265 4 2769
2769 4 2769
2769 5 2769
2769 5 2769
2769 5 2769
635 5 2769
.I 2770
.T
Quadratic Hash Method Table Size Not Prime Number
.W
Previous work quadratic hash methods
limited mainly case table size
prime number. Here, certain results derived
composite numbers. shown all composite
numbers containing least square one component
primes have full-period integer-coefficient
quadratic hash functions.
.B
CACM April, 1975
.A
Batagelj, V.
.K
quadratic search, hash code, scatter storage, table size
.C
3.74 4.10
.N
CA750407 JB January 9, 1978 3:54 PM
.X
1860 4 2770
1973 4 2770
1973 4 2770
1992 4 2770
2018 4 2770
2018 4 2770
2033 4 2770
2060 4 2770
2107 4 2770
2109 4 2770
2203 4 2770
2203 4 2770
2251 4 2770
2251 4 2770
2251 4 2770
2251 4 2770
2534 4 2770
2543 4 2770
2543 4 2770
2543 4 2770
2559 4 2770
2573 4 2770
2573 4 2770
2704 4 2770
2770 4 2770
2770 4 2770
2770 4 2770
2770 4 2770
2770 4 2770
2770 4 2770
2770 4 2770
2974 4 2770
3053 4 2770
3053 4 2770
3053 4 2770
3053 4 2770
3083 4 2770
1786 5 2770
1869 5 2770
1973 5 2770
1992 5 2770
2018 5 2770
2109 5 2770
2673 5 2770
2770 5 2770
2770 5 2770
2770 5 2770
3053 5 2770
1329 6 2770
1785 6 2770
1973 6 2770
1992 6 2770
2107 6 2770
2109 6 2770
2412 6 2770
2543 6 2770
2673 6 2770
2707 6 2770
2770 6 2770
.I 2771
.T
Synthesis Solids Bounded Many Faces
.W
technique presented which allows class
solid objects synthesized stored
using computer. Synthesis begins primitive solids
like cube, wedge, cylinder. Any solid
can moved, scaled, rotated. Solids may also
added together subtracted. Two algorithms
perform addition described. practical designers,
technique has advantage operations
concise, readily composed, given terms
easily imagined solids.Quite short sequences
operations suffice build up complex solids bounded many faces.
.B
CACM April, 1975
.A
Braid, I. C.
.K
computational geometry, computer-aided design,
graphics, machined components, polyhedra, shape
synthesis, three-dimensional modeling
.C
3.2 8.2
.N
CA750406 JB January 9, 1978 3:59 PM
.X
2771 5 2771
2771 5 2771
2771 5 2771
2827 5 2771
3116 5 2771
2751 6 2771
2771 6 2771
2771 6 2771
.I 2772
.T
Maintenance Opportunity List
Class-Teacher Timetable Problems
.W
One principal components procedures
solution class-teacher timetable problems
maintenance opportunity list. Opportunity
list maintenance methods based necessary
conditions existence solution. general
framework necessary conditions, together
four specific sets necessary conditions, given.
.B
CACM April, 1975
.A
Smith, G.
.K
combinatorial, necessary conditions, opportunity
list, schedule,school timetable, timetable
.C
3.51 5.39
.N
CA750405 JB January 9, 1978 4:03 PM
.X
1367 4 2772
2619 4 2772
2772 4 2772
2772 4 2772
2787 4 2772
2787 4 2772
1116 5 2772
1429 5 2772
2772 5 2772
2772 5 2772
2772 5 2772
.I 2773
.T
Weighted Buddy Method Dynamic Storage Allocation (Corrigendum)
.B
CACM April, 1975
.A
Shen, K. K.
Peterson, J. L.
.N
CA750404 JB January 9, 1978 4:06 PM
.X
2773 4 2773
2845 4 2773
2902 4 2773
2955 4 2773
2747 5 2773
2773 5 2773
2773 5 2773
2773 5 2773
2911 5 2773
2955 5 2773
1184 6 2773
1879 6 2773
273 6 2773
2435 6 2773
2435 6 2773
2498 6 2773
2596 6 2773
2734 6 2773
2747 6 2773
2773 6 2773
2773 6 2773
2983 6 2773
.I 2774
.T
Remark Algorithm 475
.B
CACM April, 1975
.A
Frederick, L. W.
.N
CA750403 JB January 9, 1978 4:07 PM
.X
2774 5 2774
2774 5 2774
2774 5 2774
.I 2775
.T
Dilogarithm Function Real Argument [S22] (Algorithm 490)
.B
CACM April, 1975
.A
Ginsberg, E. S.
Zaborowski, D.
.K
dilogarithm
.C
5.12
.N
CA750402 JB January 9, 1978 4:09 PM
.X
2775 5 2775
2775 5 2775
2775 5 2775
.I 2776
.T
Computer Networks Higher Education: Socio-Economic-Political Factors
.W
study presents results nationwide
survey computer networks higher education
conducted during 1971-73. Five major 18 minor networks
were identified. five major networks
included: ARPA Net, California State College network,
University Iowa/Iowa State University
network, Michigan Educational Research Information Triad,
Inc., Triangle Universities Computation
Center network North Carolina. In-depth studies were
conducted latter two nets. Based
experiences these operating networks, number factors
identified consideration developing
networks. Finally, recommendations advanced regarding
development networks higher education
future.
.B
CACM April, 1975
.A
Chambers, J. A.
Poore, R. V.
.K
networks, higher education
.C
1.3 2.45
.N
CA750401 JB January 9, 1978 4:17 PM
.X
2776 5 2776
2776 5 2776
2776 5 2776
.I 2777
.T
Solution Cigarette Smoker's
Problem (Without Conditional Statements)
.W
report discusses problem first introduced
Patil, has claimed cigarette
smoker's problem cannot solved using P V operations
introduced Dijkstra unless conditional
statements used. examination Patil's proof
shows he has established claim only under
strong restrictions use P V. These restrictions
eliminate programming techniques used
Dijkstra others since first introduction
semaphore concept. paper contains
solution problem. also discusses need
generalized operators suggested Patil.
.B
CACM March, 1975
.A
Parnas, D. L.
.K
operating systems, co-operating processes,process
synchronization primitives
.C
4.3
.N
CA750311 JB January 9, 1978 4:24 PM
.X
2320 4 2777
2597 4 2777
2777 4 2777
2851 4 2777
2895 4 2777
2912 4 2777
2946 4 2777
3128 4 2777
2150 5 2777
2738 5 2777
2777 5 2777
2777 5 2777
2777 5 2777
1749 6 2777
2080 6 2777
2247 6 2777
2356 6 2777
2777 6 2777
.I 2778
.T
Perturbations Eigenvalues Non-normal Matrices (Corrigendum)
.B
CACM March, 1975
.A
Sluis, A.
.N
CA750310 JB January 9, 1978 4:26 PM
.X
2778 5 2778
2778 5 2778
2778 5 2778
.I 2779
.T
Discrete Least Squares Polynomial Fits
.W
recurrence relation between orthogonal polynomials
widely used discrete least squares
data fitting. variant classical algorithm
which has better numerical properties presented
reason its improved performance explained.
.B
CACM March, 1975
.A
Shampine, L. F.
.K
orthogonal polynomials, data fitting, least squares,
recurrence relation between orthogonal polynomials,
residual
.C
5.11 5.13
.N
CA750309 JB January 9, 1978 4:29 PM
.X
2779 5 2779
2779 5 2779
2779 5 2779
.I 2780
.T
Computing Certain Elements Inverse Sparse Matrix
.W
recursive algorithm computing inverse
matrix LU factors based relationships
Takahashi, et al., examined. formulas
algorithm given; dependency relationships
derived; computational costs developed; some
general comments application stability
made.
.B
CACM March, 1975
.A
Erisman, E. M.
Tinney, W. F.
.K
sparse matrices, triangular factorization, elements
inverse, tridiagonal matrix, sensitivities
.C
3.24 5.14
.N
CA750308 JB January 9, 1978 4:34 PM
.X
2780 5 2780
2780 5 2780
2780 5 2780
.I 2781
.T
Algorithm Sequential Access Method:
Alternative Index Sequential
.B
CACM March, 1975
.A
Whitt, J. D.
Sullenberger, A. G.
.K
keys, direct access method, sequential access
method, randomizing information retrieval
.C
3.7
.N
CA750307 JB January 9, 1978 4:37 PM
.X
2258 4 2781
2319 4 2781
2313 4 2781
2359 4 2781
2437 4 2781
2552 4 2781
2781 4 2781
2860 4 2781
2991 4 2781
2203 5 2781
2781 5 2781
2781 5 2781
2781 5 2781
.I 2782
.T
Reply Gentleman Marovich
.B
CACM March, 1975
.A
Karp, R. A.
.K
high-level languages, philosophy language design
.C
4.22 5.19
.N
CA750306 JB January 9, 1978 4:38 PM
.X
2782 5 2782
2782 5 2782
2782 5 2782
.I 2783
.T
Algorithm SELECT-for Finding ith
Smallest n Elements [M1] (Algorithm 489)
.B
CACM March, 1975
.A
Floyd, R. W.
Rivest, R. L.
.K
selection, medians, quantiles
.C
5.30 5.39
.N
CA750305 JB January 9, 1978 4:43 PM
.X
1919 4 2783
2191 4 2783
2227 4 2783
2388 4 2783
2783 4 2783
2783 4 2783
2784 4 2783
3054 4 2783
3054 4 2783
3121 4 2783
864 4 2783
307 5 2783
309 5 2783
2783 5 2783
2783 5 2783
2783 5 2783
2784 5 2783
1729 6 2783
309 6 2783
2783 6 2783
.I 2784
.T
Expected Time Bounds Selection
.W
new selection algorithm presented which
shown very efficient average,
both theoretically practically. number comparisons
used select ith smallest n numbers
n+min(i,n-i)+o(n). lower bound within 9
percent above formula also derived.
.B
CACM March, 1975
.A
Floyd, R. W.
Rivest, R. L.
.K
selection, computational complexity, medians, tournaments, quantiles
.C
5.30 5.39
.N
CA750304 JB January 9, 1978 4:52 PM
.X
1919 4 2784
2191 4 2784
2388 4 2784
2783 4 2784
2784 4 2784
2784 4 2784
2784 4 2784
3054 4 2784
3121 4 2784
864 4 2784
1729 5 2784
309 5 2784
2783 5 2784
2784 5 2784
2784 5 2784
2784 5 2784
2837 5 2784
2784 6 2784
2842 6 2784
.I 2785
.T
Glypnir-A Programming Language Illiac IV
.W
GLYPNIR one earliest existing languages
designed programming Illiac IV computer.
syntax language based ALGOL 60, but has
been extended allow programmer explicitly
specify parallelism his algorithm terms 64-word
vectors. paper describes characteristics,
goals philosophy language, discusses some
problems associated parallel computer
architectures.
.B
CACM March, 1975
.A
Lawrie, D. H.
Layman, T.
Baer, D.
Randal, J. M.
.K
GLYPNIR, Illiac IV, Programming language,
parallel computation, parallel architecture
.C
4.2 4.21 4.22
.N
CA750303JB January 9, 1978 4:57 PM
.X
2785 4 2785
2785 4 2785
2876 4 2785
2433 5 2785
2685 5 2785
2785 5 2785
2785 5 2785
2785 5 2785
.I 2786
.T
System Typesetting Mathematics
.W
paper describes design implementation
system typesetting mathematics.
language has been designed easy learn
use people (for example, secretaries
mathematical typists) know neither mathematics nor
typesetting. Experience indicates language
can learned hour so, has few rules
fewer exceptions. typical expressions,
size font changes, positioning, line drawing,
like necessary print according mathematical
conventions all done automatically. example,
input sum i=o infinity x sub i=pi over
2 produces (formula). syntax language specified
small context-free grammar; compiler-compiler
used make compiler translates language
into typesetting commands. Output maybe produced
either phototypesetter terminal forward
reverse half-line motions. system
interfaces directly text formatting programs, so
mixtures text mathematics may handled
simply. paper typeset authors using system described
.B
CACM March, 1975
.A
Kernighan, B. W.
Cherry, L. L.
.K
typesetting, photocomposition,compiler-compiler,
graphics, printing, text processing.
.C
4.12 4.22 8.2
.N
CA750302 JB January 10, 1978 8:56 AM
.X
2626 4 2786
2786 4 2786
2840 4 2786
2919 4 2786
3017 4 2786
3110 4 2786
3174 4 2786
2629 5 2786
2733 5 2786
2746 5 2786
2786 5 2786
2786 5 2786
2786 5 2786
1665 6 2786
1739 6 2786
1781 6 2786
2139 6 2786
2179 6 2786
2423 6 2786
2545 6 2786
2786 6 2786
2786 6 2786
799 6 2786
.I 2787
.T
Matrix Reduction-An Efficient Method
.W
paper describes efficient method
reduction binary matrices which arise
some school time-tabling problems. development
described John Lions. has been
generalized adapted fit into complete timetabling
process; use more compact data representation
more efficient processing techniques; take fuller
advantage possible available previous knowledge
matrix. designed structured
program, which can readily coded reader
high level low level programming language
his choice. Practical tests method have
shown good basis realistic timetabling algorithm.
.B
CACM March, 1975
.A
Johnston, H. C.
Hoare, C. A. R.
.K
binary matrices, matrix reduction, tight set, school
timetable construction, structured programming
.C
3.51 4.9 5.39
.N
CA750301 JB January 10, 1978 9:03 AM
.X
1367 4 2787
2619 4 2787
2772 4 2787
2772 4 2787
2787 4 2787
2787 4 2787
1116 5 2787
1429 5 2787
2787 5 2787
2787 5 2787
2787 5 2787
.I 2788
.T
Finding Circles Array Accumulators
.B
CACM February, 1975
.A
Kimme, C.
Balard, D.
Sklansky, J.
.K
picture processing, pattern recognition, curve detection,line fitting
.C
3.63
.N
CA750211 JB January 10, 1978 9:15 AM
.X
2788 4 2788
2910 4 2788
2400 5 2788
2788 5 2788
2788 5 2788
2788 5 2788
2910 5 2788
2400 6 2788
2788 6 2788
.I 2789
.T
Minimal Spanning Tree Clustering Method (Algorithm R479)
.B
CACM February, 1975
.A
Magnuski, H. S.
.N
CA750210 JB January 12, 1978 2:52 PM
.X
2789 5 2789
2789 5 2789
2789 5 2789
.I 2790
.T
Elementary Circuits Graph (Algorithm R459)
.B
CACM February, 1975
.A
Syslo, M. M.
.N
CA750209 JB January 12, 1978 2:54 PM
.X
2790 5 2790
2790 5 2790
2790 5 2790
.I 2791
.T
Exact Probabilities R x C Contingency Tables (Algorithm R434)
.B
CACM February, 1975
.A
Hancock, T. W.
.N
CA750208 JB January 12, 1978 2:55 PM
.X
2791 5 2791
2791 5 2791
2791 5 2791
.I 2792
.T
Jacobi Polynomials (Algorithm R332)
.B
CACM February, 1975
.A
Skovgaard, O.
.N
CA750207 JB January 10, 1978 9:32 AM
.X
2647 4 2792
2792 4 2792
2792 4 2792
2267 5 2792
2647 5 2792
2792 5 2792
2792 5 2792
2792 5 2792
.I 2793
.T
Chi-Square Quantiles (Algorithm C451)
.B
CACM February, 1975
.A
Knight,W.
.N
CA750206 JB January 10, 1978 9:40 AM
.X
2467 4 2793
2793 4 2793
1606 5 2793
2793 5 2793
2793 5 2793
2793 5 2793
.I 2794
.T
State-Space, Problem-Reduction, Theorem Proving-Some Relationships
.W
paper suggests bidirectional relationship
between state-space problem-reduction
representations. presents formalism based multiple-input
multiple-output operators which
provides basis viewing two types representations
manner. representation
language recognition problem which based Cocke
parsing algorithm used illustration.
method representing problems first-order logic
such way inference system employed
resolution-based theorem prover determines whether
set clauses interpreted state-spacer
mode problem-reduction mode presented.
analogous concepts problem-reduction
theorem proving, terminology used refer them,
noted. relationship between problem-reduction,
input resolution, linear resolution discussed.
.B
CACM February, 1975
.A
VanderBrug, G. J.
Minker, J.
.K
artificial intelligence, state-space representation,
problem-reduction representation, theorem
proving, language recognition
.C
3.64
.N
CA750205 JB January 12, 1978 8:27 AM
.X
2794 5 2794
2794 5 2794
2794 5 2794
.I 2795
.T
Sentence Paraphrasing Conceptual Base
.W
model natural language based underlying
language-free representation meaning
described. program based model able
produce sentence paraphrases which demonstrate
understanding respect given context.
generator operates conjunction natural
language analyzer combined memory inference model.
generating sentences meaning structures,
program employs both information retrieval
deduction capabilities memory model.
model encompasses several diverse classes linguistic
knowledge, which include: (1) executable tests
conceptual properties stored discrimination nets;
(2) information relating conceptual syntactic
roles, stored word-sense dictionary, (3) surface
grammatical knowledge, stored formal grammar.
.B
CACM February, 1975
.A
Goldman, N. M.
.K
artificial intelligence, natural language processing,
language generation, models cognitive
processes, semantic representation
.C
3.42 3.60 3.65
.N
CA750204 JB January 12, 1978 8:43 AM
.X
1885 4 2795
2581 4 2795
2739 4 2795
2795 4 2795
2795 4 2795
2795 4 2795
2921 4 2795
3087 4 2795
1928 5 2795
1989 5 2795
2274 5 2795
2795 5 2795
2795 5 2795
2795 5 2795
.I 2796
.T
Monitors: Operating System Structuring Concept (Corrigendum)
.B
CACM February, 1975
.A
Hoare, C. A. R.
.N
CA750203 JB January 12, 1978 8:45 AM
.X
2796 5 2796
2796 5 2796
2796 5 2796
2866 5 2796
2356 6 2796
2597 6 2796
2796 6 2796
.I 2797
.T
First Order Approximation Optimal
Checkpoint Interval (Corrigendum)
.B
CACM February, 1975
.A
Young, J. W.
.N
CA750202 JB January 12, 1978 8:47 AM
.X
2797 5 2797
2797 5 2797
2797 5 2797
.I 2798
.T
Analysis Interleaved Memory Systems Using Blockage Buffers
.W
model interleaved memory systems presented,
analysis model Monte
Carlo simulation discussed. simulations investigate
performance various system structures,
i.e. schemes sending instruction data requests
memory system. Performance measured
determining distribution number memory
modules operation during memory cycle.
important observation these investigations
separately grouping instruction data requests
memory can substantially increase average number
memory modules operation during memory
cycle. Results simulations analytical
study displayed various system structures.
.B
CACM February, 1975
.A
Burnett, G. J.
Coffman, E. G. Jr.
.K
interleaved memory systems, modular memory systems,
memory performance analysis, blockage buffer,
conflict buffer, simulation, Monte Carolo simulation
.C
5.5 6.34
.N
CA750201 JB January 12,1978 8:54 AM
.X
2798 5 2798
2798 5 2798
2798 5 2798
3119 5 2798
2245 6 2798
2798 6 2798
2849 6 2798
2859 6 2798
.I 2799
.T
Stably Updating Mean Standard Deviation Data
.W
considering (sample) mean set
data fit data constant function,
computational method given based matrix formulation
Givens transformations. (sample)
mean standard deviation can updated data
accumulates. procedure numerically stable
does not require storage data. Methods
dealing weighted data data removal
presented. updating mean square
standard deviation, process requires no square
roots.
.B
CACM January, 1975
.A
Hanson, R. J.
.K
mean, standard deviation, least squares, Givens
transformation, updating estimates, removing data
.C
5.5 5.19
.N
CA750112 JB January 12, 1978 9:05 AM
.X
2731 5 2799
2799 5 2799
2799 5 2799
2799 5 2799
3159 5 2799
3166 5 2799
3167 5 2799
1411 6 2799
2731 6 2799
2731 6 2799
2731 6 2799
2799 6 2799
2799 6 2799
2799 6 2799
2799 6 2799
3159 6 2799
3167 6 2799
3166 6 2799
.I 2800
.T
Connections Between Accuracy Stability
Properties Linear Multistep Formulas
.W
paper concerned stability accuracy
families linear k-step formulas depending
parameters, particular emphasis numerical
solution stiff ordinary differential equations.
upper bound, p=k, derived order accuracy
A(inf)-stable formulas. Three criteria
given A(0)-stability. shown (1)
p=k, k arbitrary, A(inf)-stability implies certain
necessary conditions A(0)-stability strict
stability (meaning extraneous roots
p(psi) satisfy |psi|<1); (2) p=k=2,3,4,and 5, A(inf)-stability
(for k=5 together another constraint)
implies strict stability; (3) certain one-parameter
classes formulas p=k=3,4,and/or 5,
A(inf)-stability implies A(0)-stability.
.B
CACM January, 1975
.A
Liniger, W.
.K
stiff equations, parametrized linear multistep formulas,
order accuracy, A(0)-stability, A(inf)-stability,
strict stability
.C
5.17
.N
CA750111 JB January 12, 1978 9:26 AM
.X
2800 5 2800
2800 5 2800
2800 5 2800
.I 2801
.T
Storage-Efficient Representation Decimal Data
.W
Usually n decimal digits represented
4n bits computers. Actually, two BCD digits
can compressed optimally reversibly into 7 bits,
three digits into 10 bits, very simple
algorithm based fixed-length combination two
variable field-length encodings. over half
cases compressed code results conventional
BCD code simple removal redundant
0 bits. long decimal message can subdivided into
three-digit blocks, separately compressed;
result differs asymptotic minimum length
only 0.34 percent. hardware requirement
small, mappings can done manually.
.B
CACM January, 1975
.A
Chi Chen, T.
Ho, I. T.
.K
binary-coded decimal digits, decimal data storage
.C
6.32 6.34
.N
CA750110 JB January 12, 1978 9:42 AM
.X
2729 5 2801
2801 5 2801
2801 5 2801
2801 5 2801
2288 6 2801
2801 6 2801
.I 2802
.T
New Math Computer Programming
.W
Structured programming has proved important
methodology systematic program design
development. Structured programs identified
compound function expressions algebra
functions. algebraic properties these function
expressions permit reformulation (expansion
well reduction) nested subexpression independently
its environment, thus modeling
known stepwise program refinement well program
execution. Finally, structured programming
characterized terms selection solution
certain elementary equations defined
algebra functions. These solutions can given
general formulas, each involving single parameter,
which display entire freedom available
creating correct structured programs.
.B
CACM January, 1975
.A
Mills, H. D.
.K
structured programming, algebra functions,
stepwise refinement, program correctness
.C
4.6 5.21 5.24
.N
CA750109 JB January 12, 1978 9:50 AM
.X
2709 4 2802
2802 4 2802
3004 4 2802
1425 5 2802
2802 5 2802
2802 5 2802
2802 5 2802
.I 2803
.T
Pseudoinverses Conjugate Gradients
.W
paper devoted study connections
between pseudoinverses matrices conjugate
gradients conjugate direction routines.
.B
CACM January, 1975
.A
Hestenes, M. R.
.K
pseudoinverse, conjugate gradients, hermitian matrix, minimization
.C
5.14
.N
CA750108 JB January 12, 1978 10:08 AM
.X
2803 5 2803
2803 5 2803
2803 5 2803
.I 2804
.T
Elementary Divisors Tensor Products
.W
elementary divisors tensor product
linear transformations have been known 40
years. paper provides short, easily accessible
proof these results, points out interesting
combinatorial consequence proof.
.B
CACM January, 1975
.A
Marcus, M.
Robinson, H.
.K
elementary divisors, tensor products, linear transformations
.C
5.14
.N
CA750107 JB January 12, 1978 10:13 AM
.X
2804 5 2804
2804 5 2804
2804 5 2804
.I 2805
.T
Perturbations Eigenvalues Non-normal Matrices
.W
problem considered give bounds finite
perturbations simple multiple eigenvalues
nonnormal matrices, these bounds terms
eigenvalues, departure normality,
Frobenius norm perturbation matrix, but
not terms eigen system. bounds which
derived shown almost attainable any set matrices.
.B
CACM January, 1975
.A
van der Sluis, A.
.K
perturbation eigenvalues, non-normal matrices,
departure normality, Gershgorin circles
.C
5.14
.N
CA750106 JB January 12, 1978 10:31 AM
.X
2805 5 2805
2805 5 2805
2805 5 2805
.I 2806
.T
Two Hadamard Numbers Matrices
.W
discussion given two functions entries
square matrix, both related Hadamard's
determinant theorem, which have some merits alternatives
norm-bound "condition numbers." One (for
linear systems) known; other (for eigen systems) seems new.
.B
CACM January, 1975
.A
Birkhoff, G.
.K
matrices, eigenvalues, norms, condition numbers,
error analysis, Gram-Schmidt orthogonalization
.C
5.11 5.14
.N
CA750105 JB January 12, 1978 10:37 AM
.X
2806 5 2806
2806 5 2806
2806 5 2806
.I 2807
.T
Stability Gauss-Jordan Elimination Pivoting
.W
stability Gauss-Jordan algorithm
partial pivoting solution general
systems linear equations commonly regarded suspect.
shown many respects suspicions
unfounded, general absolute error solution
strictly comparable corresponding
Gaussian elimination partial pivoting plus back
substitution. However, ill conditioned,
residual corresponding Gauss-Jordan solution
often much greater than corresponding
Gaussian elimination solution.
.B
CACM January, 1975
.A
Peters, G.
Wilkinson, J. H.
.K
Gauss-Jordan algorithm, Gaussian elimination, back-substitution,
backward error analysis, bounds
error solution, bound residual
.C
5.11 5.14
.N
CA750104 JB January 12, 1978 10:44 AM
.X
2807 5 2807
2807 5 2807
2807 5 2807
.I 2808
.T
Lemniscate Constants
.W
lemniscate constants, indeed some
methods used actually computing them,
have played enormous part development
mathematics. account given here some
methods used-most derivations can made
elementary methods. material can used
teaching purposes, there much relevant
interesting historical material. acceleration
methods developed purpose evaluating
these constants useful other problems.
.B
CACM January, 1975
.A
Todd, J.
.K
lemniscate, acceleration, elliptic functions, Euler transformation
.C
1.2 5.0
.N
CA750103 JB January 12, 1978 10:51 AM
.X
2808 5 2808
2808 5 2808
2808 5 2808
.I 2809
.T
Positivity Norms
.W
Following some lines joint work A.
S. Householder, character use algebraic
methods theory norms demonstrated. New results
concerning norms values Archimedian
vector lattice (not necessarily being totally ordered)
given, particular generalization
order unit norms, L-norms M-norms. example
application operator norms given concerning
contraction properties positive operators.
.B
CACM January, 1975
.A
Bauer, F. L.
.K
matrices, norms, positivity, numerical range, positivity
cones, vector lattice,absolute, monotonic
.C
5.11 5.14
.N
CA750102 JB January 12, 1978 10:56 AM
.X
2809 5 2809
2809 5 2809
2809 5 2809
.I 2810
.T
Professionalism Computing Field
.W
term professional means different things
different people; nevertheless, there certain
general technical social standards normally associated
professional. Further, term
more generally applied practitioner rather than
researcher. But within rather broad
definition specified, computing practitioner is,
yet, not regarded professional. Each
four types institutions-academic, industry, government,
professional society- educate,
employ, regulate, mold practitioner contributes
"nonprofessional" status computing
practitioner. roles these institutions examined,
various shortcomings noted, recommended
changes suggested. last analysis, professional
status not bestowed; earned. However,
universities industry, specifically, can make certain
improvements help computing practitioner
achieve professional status.
.B
CACM January, 1975
.A
Finerman, A.
.K
professional aspects, educational programs, industry
attitudes, professional societies, licensing
certification
.C
1.50 2.10 2.2
.N
CA750101 JB January 12, 1978 11:05 AM
.X
2810 5 2810
2810 5 2810
2810 5 2810
.I 2811
.T
Structural Pattern Recognition Carotid Pulse
Waves Using General Waveform Parsing System
.W
general waveform parsing system application
structural pattern recognition carotid
pulse waves described. carotid arterial pulse
wave medical importance because variation
its structure induced arterial aging cardiovascular
disease. syntax-driven waveform analysis
system has been applied good results these pulse
waves detect measure structural variations.
waveform parsing system modeled compiler-compiler
system allows user enter application
specific information data. thus general
enough applicable other waveforms.
.B
CACM December, 1976
.A
Stockman, G.
Kanal, L.
Kyle, M. C.
.K
structural pattern recognition, parsing, waveform analysis, pulse waves
.C
3.12 3.34 3.63 4.12
.N
CA761204 JB January 3, 1978 1:43 PM
.X
2811 5 2811
2811 5 2811
2811 5 2811
.I 2812
.T
Computer-Aided Analysis Design Information Systems
.W
paper describes use computer-aided
analysis design development
integrated financial management system Navy Material
Command Support Activity (NMCSA). Computer-aided
analysis consists set procedures computer
programs specifically designed aid process
applications software design, computer selection
performance evaluation. There four major
components: Problem Statement Language, Problem Statement
Analyzer, Generator Alternative Designs,
Performance Evaluator. statement requirements
written ADS (Accurately Defined Systems)
analyzed Problem Statement Analyzer ADS.
ADS problem definition supplemented
additional information order create complete
problem definition. analyzed problem statement
translated form necessary use
SODA (Systems Optimization Design Algorithm)
program generation alternative specifications
program modules logical database structures.
.B
CACM December, 1976
.A
Nunamaker, J. F. Jr.
Konsynski, B. R. Jr.
Ho, T.
Singer, C.
.K
computer-aided analysis, information systems, logical
system design, problem statement language,
problem statement analyzer, physical system design,
accurately defined systems, systems optimization
design algorithm
.C
2.44 3.50 4.33 4.9 8.1
.N
CA761203 JB January 3, 1978 2:31 PM
.X
2812 5 2812
2812 5 2812
2812 5 2812
.I 2813
.T
Computer Science Engineering Research Study (COSERS)
.W
Computer Science Engineering Research
Study (COSERS) briefly described. motivation,
organization, schedule NSF supported study
given. possible further reference,
subject area panel chairmen members
Steering Committee identified.
.B
CACM December, 1976
.A
Arden, B.
.K
computer science research, computer engineering
research, national research study
.C
1.0 1.52
.N
CA761202 JB January 3, 1978 2:35 PM
.X
2813 5 2813
2813 5 2813
2813 5 2813
.I 2814
.T
Roster Programming Languages 1974-75
.B
CACM December, 1976
.A
Sammet, J. E.
.N
CA761201 JB January 3, 1978 2:38 PM
.X
2814 5 2814
2814 5 2814
2814 5 2814
.I 2815
.T
High-Level Binding Low-Level Linkers
.W
easy implement scheme described
which compiler can enforce agreement between
complex data types separately compiled modules.
scheme designed work any existing
link editor linking loader, no matter deficient.
Obscure run-time errors caused inconsistent
usages forestalled static errors detected linking time.
.B
CACM November, 1976
.A
Hamlet, R. G.
.K
separate compilation, binding, linking, strong typing
.C
4.10 4.22
.N
CA761108 JB January 3, 1978 2:44 PM
.X
2815 5 2815
2815 5 2815
2815 5 2815
.I 2816
.T
Optimal Reorganization Distributed Space Disk Files
.W
most database organizations, cost accessing
database increase due structural
changes caused updates insertions. reorganizing
database,the access costs can reduced.
basic problem establish proper tradeoff between
performance, storage costs, reorganization
costs. paper considers optimum points which
reorganize database. disk file organization
which allows distributed free space described.
cost function describing excess costs due
physical disorganization defined, function
minimized obtain optimum reorganization
points. Numerical examples based characteristics
existing disk storage devices given.
.B
CACM November, 1976
.A
Maruyama, K.
Smith, S. E.
.K
disk file, free space,retrieval, insertion, deterioration, reorganization
.C
3.70 3.73
.N
CA761107 JB January 3, 1978 2:59 PM
.X
2816 4 2816
2816 4 2816
2816 4 2816
2828 4 2816
2827 4 2816
2913 4 2816
3047 4 2816
3047 4 2816
3129 4 2816
2493 5 2816
2751 5 2816
2816 5 2816
2816 5 2816
2816 5 2816
2829 5 2816
3129 5 2816
2493 6 2816
2816 6 2816
.I 2817
.T
Notions Consistency Predicate Locks Database System
.W
database systems, users access shared data
under assumption data satisfies
certain consistency constraints. paper defines
concepts transaction, consistency schedule
shows consistency requires transaction
cannot request new locks after releasing lock.
Then argued transaction needs lock logical
rather than physical subset database.
These subsets may specified predicates.
implementation predicate locks which satisfies
consistency condition suggested.
.B
CACM November, 1976
.A
Eswarran, K..
Gray, J..
Lorie, R..
Traiger, I. L.
.K
consistency, lock, database, concurrency, transaction
.C
4.32 4.33
.N
CA761106 JB January 3, 1978 3:14 PM
.X
2155 4 2817
2406 4 2817
2710 4 2817
2715 4 2817
2716 4 2817
2717 4 2817
2718 4 2817
2765 4 2817
2817 4 2817
2888 4 2817
2901 4 2817
2957 4 2817
2959 4 2817
2965 4 2817
3087 4 2817
3154 4 2817
2046 5 2817
2817 5 2817
2817 5 2817
2817 5 2817
3148 5 2817
1860 6 2817
2817 6 2817
2865 6 2817
2939 6 2817
3073 6 2817
.I 2818
.T
Interference Multiprocessor Computer
Systems Interleaved Memory (Corrigendum)
.B
CACM November, 1976
.A
Baskett, F.
Smith, A. J.
.N
CA761105 JB January 3, 1978 3:18 PM
.X
2818 5 2818
2818 5 2818
2818 5 2818
.I 2819
.T
Experiments Text File Compression
.W
system compression data files,
viewed strings characters, presented.
method general, applies equally well
English, PL/I, digital data. system
consists encoder, analysis program, decoder.
Two algorithms encoding string differ
slightly earlier proposals. analysis program attempts
find optimal set codes representing
substrings file. Four new algorithms
operation described compared. Various
parameters algorithms optimized obtain
high degree compression sample texts.
.B
CACM November, 1976
.A
Rubin, F.
.K
text compression, data file compaction, Huffman
codes, N-gram encoding, comparison algorithms
.C
3.7 3.73 4.33
.N
CA761104 JB January 3, 1978 3:26 PM
.X
2530 4 2819
2623 4 2819
2819 4 2819
2537 5 2819
2819 5 2819
2819 5 2819
2819 5 2819
.I 2820
.T
Design Implementation Table Driven,
Interactive Diagnostic Programming System
.W
CAPS highly interactive diagnostic compiler/interpreter
allows beginning programmers
prepare, debug, execute fairly simple programs
graphics display terminal. Complete syntax
checking most semantic analysis performed
program entered subsequently
edited. Analysis performed character character.
most remarkable feature CAPS its ability
automatically diagnose errors both compile time
run time. Errors not automatically
corrected. Instead, CAPS interacts student help
him find cause his error. Most components
CAPS table driven, both reduce space needed
implementation increase flexibility
multilingual system. Over 500 students have used
CAPS learn Fortran, PL/I, Cobolin conjunction
computer assisted course introductory computer science.
.B
CACM November, 1976
.A
Wilcox, T. R.
Davis, A. M.
Tindall, M. H.
.K
interactive programming, table driven compilers,
error correction, interpreters, debugging, computer
assisted instruction, computer science education
.C
1.5 4.12 4.13 4.42 8.2
.N
CA761103 JB January 3, 1978 3:37 PM
.X
1323 4 2820
1358 4 2820
1380 4 2820
1665 4 2820
1781 4 2820
1787 4 2820
1989 4 2820
2112 4 2820
2534 4 2820
2541 4 2820
2698 4 2820
2708 4 2820
2733 4 2820
2820 4 2820
2820 4 2820
2971 4 2820
3045 4 2820
3073 4 2820
3155 4 2820
2534 5 2820
2820 5 2820
2820 5 2820
2820 5 2820
799 5 2820
.I 2821
.T
Cobol Under Control
.W
sample set Cobol programming standards
offered. These standards constrain code
developed "structured" form both data
control structures. They do not require syntax
beyond existing Cobol language fact utilize
typical limited subset 1974 ANS Cobol
standard. These standards have proved extremely valuable
practice have reduced cost time
produce maintain large software systems have
been deployed live multiple customer environments.
.B
CACM November, 1976
.A
Ledgard, H. F.
Cave, W. C.
.K
Cobol, structured programming,software development, program standards
.C
3.5 4.22 4.43
.N
CA761102 JB January 3, 1978 3:43 PM
.X
2821 4 2821
3121 4 2821
2709 5 2821
2821 5 2821
2821 5 2821
2821 5 2821
.I 2822
.T
Homilies Humble Standards
.W
Copyright 1976, Association Computing
Machinery, Inc. General permission republish,
but not profit, all part material granted
provided ACM's copyright notice given
reference made publication, its
data issue, fact reprinting
privileges were granted permission
Association Computing Machinery.
.B
CACM November, 1976
.A
Ross, D. T.
.K
standards, CASE Standards criteria standards, standardization
.C
1.3 2.1 2.3
.N
CA761101 JB January 3, 1978 3:47 PM
.X
2822 5 2822
2822 5 2822
2822 5 2822
.I 2823
.T
Status Women Minorities Academic Computer Science
.W
results survey concerning women
minority students faculty computer science
during years 1971 1975 presented. Analysis
data indicated effective affirmative
action programs recruitment into graduate degree
programs needed enlarge number women
minorities qualified later employment computer
science. Also, possible discrimination
employment women minority graduate students revealed.
.B
CACM October, 1976
.A
Montanelli, R. G. Jr.
Mamrak, S. A.
.K
discrimination against women, discrimination against
minorities, graduate students, undergraduate
students, academic employment, faculty, computer science
degree programs, affirmative action, Title VII,
Title IX
.C
1.52 1.53 2.2 2.3
.N
CA761008 JB January 3, 1978 4:10 PM
.X
2823 4 2823
2735 5 2823
2823 5 2823
2823 5 2823
2823 5 2823
3022 5 2823
3123 5 2823
2823 6 2823
2823 6 2823
2861 6 2823
2962 6 2823
3022 6 2823
.I 2824
.T
Improvement Martin's Algorithm
Computation Linear Precedence Functions
.B
CACM October, 1976
.A
Duong-Kien, C.
Hoffmann, H. J.
Muth, D.
.K
syntax analysis, precedence functions, Boolean matrices
.C
4.12
.N
CA761007 JB January 3, 1978 4:13 PM
.X
1542 4 2824
1683 4 2824
1693 4 2824
1781 4 2824
1787 4 2824
1836 4 2824
1945 4 2824
2060 4 2824
2061 4 2824
2082 4 2824
2091 4 2824
2152 4 2824
2179 4 2824
2221 4 2824
2340 4 2824
2340 4 2824
2356 4 2824
2546 4 2824
2603 4 2824
2698 4 2824
2708 4 2824
2824 4 2824
2824 4 2824
2824 4 2824
2982 4 2824
2982 4 2824
2986 4 2824
2986 4 2824
2986 4 2824
3045 4 2824
3093 4 2824
1491 5 2824
1683 5 2824
2340 5 2824
2824 5 2824
2824 5 2824
2824 5 2824
.I 2825
.T
BMD BMDP Series Statistical Computer Programs
.B
CACM October, 1976
.A
Frane, J. W.
.K
analysis variance, cluster analysis, contingency
tables, data analysis, discriminant analysis,
factor analysis, graphics, outliers, regression, time series, transformations
.C
1.3 3.3 4.0 5.5
.N
CA761006 JB January 3, 1978 4:18 PM
.X
2825 4 2825
2419 5 2825
2825 5 2825
2825 5 2825
2825 5 2825
.I 2826
.T
Interactive Skeleton Techniques Enhancing
Motion Dynamics Key Frame Animation
.W
significant increase capability
controlling motion dynamics key frame animation
achieved through skeleton control. technique
allows animator develop complex motion
sequence animating stick figure representation
image. control sequence then used
drive image sequence through same movement.
simplicity stick figure image encourages
high level interaction during design stage.
Its compatibility basic key frame animation
technique permits skeleton control applied selectively
only those components composite
image sequence require enhancement.
.B
CACM October, 1976
.A
Burtnyk, N.
Wein, M.
.K
interactive graphics, computer generated animation,
key frame animation, interactive skeleton control,
stick figure animation
.C
3.41 3.49 4.9 8.2
.N
CA761005 JB January 3, 1978 4:24 PM
.X
2826 5 2826
2826 5 2826
2826 5 2826
.I 2827
.T
Parametric Algorithm Drawing Pictures
Solid Objects Composed Quadric Surfaces
.W
algorithm drawing pictures three-dimensional
objects, surfaces made up patches
quadric surfaces, described. emphasis
algorithm calculating intersections
quadric surfaces. parameterization scheme used.
Each quadric surface intersection curve (QSIC)
represented set coefficients parameter
limits. Each value parameter represents
most two points, these may easily distinguished.
scheme can find coordinates points
even quartic (fourth-order) intersection curves, using
equations no more than second order. Methods
parameterization each type OSIC discussed,
well surface bounding hidden surface
removal.
.B
CACM October, 1976
.A
Levin, J.
.K
computer graphics, hidden surface removal,
quadric surface intersection curves
.C
3.41 5.12 5.13 5.19 8.2
.N
CA761004 JB January 3, 1978 4:32 PM
.X
2816 4 2827
2828 4 2827
2827 4 2827
2827 4 2827
2913 4 2827
3047 4 2827
3116 4 2827
2751 5 2827
2771 5 2827
2827 5 2827
2827 5 2827
2827 5 2827
.I 2828
.T
Hierarchical Geometric Models Visible Surface Algorithms
.W
geometric structure inherent definition
shapes three-dimensional objects
environments used not just define their relative
motion placement, but also assist
solving many other problems systems producing
pictures computer. using extension
traditional structure information, geometric hierarchy,
five significant improvements current
techniques possible. First, range complexity
environment greatly increased while
visible complexity any given scene kept within
fixed upper limit. Second, meaningful way
provided vary amount detail presented
scene. Third, "clipping" becomes very fast
logarithmic search resolvable parts environment
within field view. Fourth, frame
frame coherence clipping define graphical
"working set," fraction total structure
should present primary store immediate
access visible surface algorithm. Finally,
geometric structure suggests recursive descent,
visible surface algorithm which computation
time potentially grows linearly visible complexity scene.
.B
CACM October, 1976
.A
Clark, J. H.
.K
visible surface algorithms, hidden surface algorithms,
hierarchical data structures, geometric
models
.C
5.31 8.2
.N
CA761003 JB January 3, 1978 4:42 PM
.X
1892 4 2828
1901 4 2828
2085 4 2828
2095 4 2828
2218 4 2828
2277 4 2828
2319 4 2828
2329 4 2828
2358 4 2828
2373 4 2828
2380 4 2828
2434 4 2828
2499 4 2828
2501 4 2828
2582 4 2828
2669 4 2828
2674 4 2828
2687 4 2828
2816 4 2828
2828 4 2828
2828 4 2828
2828 4 2828
2828 4 2828
2827 4 2828
2863 4 2828
2881 4 2828
2913 4 2828
2928 4 2828
2996 4 2828
3006 4 2828
3047 4 2828
3067 4 2828
1751 5 2828
2004 5 2828
2751 5 2828
2828 5 2828
2828 5 2828
2828 5 2828
2841 5 2828
.I 2829
.T
Texture Reflection Computer Generated Images
.W
1974 Catmull developed new algorithm
rendering images bivariate surface patches.
paper describes extensions algorithm
areas texture simulation lighting models.
parameterization patch defines coordinate
system which used key mapping patterns
onto surface. intensity pattern each
picture element computed weighted average
regions pattern definition function. shape
size weighting function chosen
using digital signal processing theory. patch rendering
algorithm allows accurate computation
surface normal patch each picture element,
permitting simulation mirror reflections.
amount light coming given direction
modeled similar manner texture mapping
then added intensity obtained texture
mapping. Several examples images synthesized
using these new techniques included.
.B
CACM October, 1976
.A
Blinn, J. F.
Newell, M. E.
.K
computer graphics, graphic display, shading, hidden surface removal
.C
3.41 5.12 5.15 8.2
.N
CA761002 JB January 4, 1978 8:36 AM
.X
2816 5 2829
2829 5 2829
2829 5 2829
2829 5 2829
3047 5 2829
2493 6 2829
2751 6 2829
2751 6 2829
2829 6 2829
2829 6 2829
.I 2830
.T
Practitioner's Guide Addressing Algorithms (Corrigendum)
.B
CACM September, 1976
.A
Severance, D. G.
Duhne, R. A.
.N
CA760909 JB January 4, 1978 8:43 AM
.X
2830 5 2830
2830 5 2830
2830 5 2830
.I 2831
.T
Analysis PFF Replacement Algorithm
via Semi-Markov Model (Corrigendum)
.B
CACM September, 1976
.A
Chu, W. W.
Opderbeck, H.
.N
CA760908 DMM February 1, 1978 9:54 AM
.X
2831 5 2831
2831 5 2831
2831 5 2831
.I 2832
.T
Faster Retrieval Context Trees (Corrigendum)
.W
Context trees provide convenient way
storing data which viewed hierarchy
contexts. note presents algorithm which improves
previous context tree retrieval algorithms.
based observation typical uses context
changes infrequent relative retrievals,
so data can cached speed up retrieval. retrieval
started position previous
retrieval auxiliary structures built up make
search rapid. Algorithms addition
deletion data garbage collection outlined.
.B
CACM September, 1976
.A
Wegbreit, B.
.K
context trees, frame problem, variable bindings, data structures
.C
3.69 3.74 4.10
.N
CA760907 JB January 4, 1978 8:49 AM
.X
2832 5 2832
2832 5 2832
2832 5 2832
.I 2833
.T
Efficient, Incremental, Automatic Garbage Collector
.W
paper describes new way solving
storage reclamation problem system such
Lisp allocates storage automatically
heap, does not require programmer give
any indication particular items no longer useful
accessible. reference count scheme
reclaiming non-self-referential structures, linearizing,
compacting, copying scheme reorganize
all storage users discretion proposed.
algorithms designed work well systems
which use multiple levels storage, large virtual
address space. They depend fact
most cells referenced exactly once, reference
counts need only accurate storage
reclaimed. transaction file stores changes
reference counts, multiple reference
table stores count items which referenced more than once.
.B
CACM September, 1976
.A
Deutsch, L. P.
Bobrow, D. G.
.K
storage management, garbage collection, Lisp
.C
4.19
.N
CA760906 JB January 4, 1978 8:58 AM
.X
1708 4 2833
1781 4 2833
1826 4 2833
1860 4 2833
1972 4 2833
2156 4 2833
2156 4 2833
2168 4 2833
2168 4 2833
2249 4 2833
2314 4 2833
2438 4 2833
2719 4 2833
2723 4 2833
2736 4 2833
2736 4 2833
2833 4 2833
2833 4 2833
2833 4 2833
2845 4 2833
2855 4 2833
3074 4 2833
3112 4 2833
3112 4 2833
1626 5 2833
1826 5 2833
2736 5 2833
2833 5 2833
2833 5 2833
2833 5 2833
2855 5 2833
2944 5 2833
3112 5 2833
106 6 2833
1380 6 2833
1549 6 2833
1826 6 2833
1826 6 2833
210 6 2833
1972 6 2833
1972 6 2833
2438 6 2833
2513 6 2833
2723 6 2833
2736 6 2833
2766 6 2833
2833 6 2833
2833 6 2833
2833 6 2833
2838 6 2833
2998 6 2833
2998 6 2833
731 6 2833
.I 2834
.T
Efficient Generation Binary
Reflected Gray Code Its Applications
.W
Algorithms presented generate n-bit
binary reflected Gray code codewords
fixed weight code. Both algorithms efficient
time required generate next
element current one constant. Applications
generation combinations n things
taken k time, compositions integers,
permutations multiset discussed.
.B
CACM September, 1976
.A
Bitner, J. R.
Ehrlich, G.
Reingold, E. M.
.K
Gray code, combinations, subsets, compositions, combinatorial computing
.C
5.39
.N
CA760905 JB January 4, 1978 9:14 AM
.X
2466 4 2834
2834 4 2834
2834 4 2834
2834 4 2834
2834 4 2834
2884 4 2834
3115 4 2834
3115 4 2834
3115 4 2834
969 5 2834
2045 5 2834
2417 5 2834
2466 5 2834
2834 5 2834
2834 5 2834
2834 5 2834
.I 2835
.T
Recursion Analysis Compiler Optimization
.W
relatively simple method detection
recursive use procedures presented
use compiler optimization. Implementation considerations
discussed, modification
algorithm given further improve optimization.
analysis can also used determine
possible subset values could assumed variables
which can only take relatively small discrete
set values. most common parameters variables
assuming values label, procedure, Pascal's
enumerated type.
.B
CACM September, 1976
.A
Walter, K. G.
.K
recursion, compiler optimization
.C
4.12
.N
CA760904 JB January 4, 1978 9:36 AM
.X
2835 5 2835
2835 5 2835
2835 5 2835
.I 2836
.T
Weighted Derivation Trees
.W
nodes weighted derivation tree associated
weighting functions over vocabulary
context-free grammar. algorithm presented
constructing optimal derivation tree having
same structure given weighted derivation tree.
addition, correctness algorithm
established. method may applied problems
involving probabilistic parsing combinatorial
optimization.
.B
CACM September, 1976
.A
Loui, M. C.
.K
derivation tree, parse tree, probabilistic grammar,
structural ambiguity, combinatorial optimization
.C
5.23 5.49
.N
CA760903 JB January 4, 1978 9:41 AM
.X
2836 5 2836
2836 5 2836
2836 5 2836
.I 2837
.T
New Upper Bounds Selection
.W
worst-case minimum number comparisons
complexity Vi(n) i-th selection problem
considered. new upper bound Vi(n) improves
bound given standard Hadian-Sobel algorithm
generalization Kirkpatrick-Hadian-Sobel
algorithm, extends Kirkpatrick's method
much wider range application. generalization
compares favorably recent algorithm Hyafil.
.B
CACM September, 1976
.A
Yap, C. K.
.K
selection problem, algorithms, comparison problems,
concrete computational complexity, upper bounds,
worst-case analysis
.C
5.25 5.31
.N
CA760902 JB January 4, 1978 9:48 AM
.X
2837 4 2837
2837 4 2837
3150 4 2837
2784 5 2837
2837 5 2837
2837 5 2837
2837 5 2837
2842 5 2837
.I 2838
.T
Analysis Algorithm Real Time Garbage Collection
.W
real time garbage collection system avoids
suspending operations list processor
long times garbage collection normally requires
performing garbage collection second
processor parallel list processing operations,
single processor time-shared them.
Algorithms recovering discarded list structures
manner presented analyzed determine
sufficient conditions under which list processor never
needs wait collector. These techniques
shown require most twice much processing
power regular garbage collectors, if they
used efficiently. average behavior program
shown very nearly equal worst-case
performance, so sufficient conditions also
suitable measuring typical behavior
algorithm.
.B
CACM September, 1976
.A
Wadler, P. L.
.K
garbage collection, storage reclamation, list
processing, Lisp, time-sharing, multiprocessing,
parallel processing, real time, data structures, analysis algorithms
.C
3.69 3.89 4.19 4.29 4.32 4.34 4.9 5.25
.N
CA760901 JB January 4, 1978 9:57 AM
.X
1024 4 2838
1051 4 2838
1102 4 2838
1132 4 2838
1390 4 2838
1486 4 2838
1549 4 2838
1706 4 2838
1826 4 2838
1878 4 2838
378 4 2838
2060 4 2838
2155 4 2838
2168 4 2838
2719 4 2838
2723 4 2838
2838 4 2838
2838 4 2838
2842 4 2838
2855 4 2838
2879 4 2838
2896 4 2838
3039 4 2838
3074 4 2838
3077 4 2838
3080 4 2838
3106 4 2838
3112 4 2838
627 4 2838
106 4 2838
210 5 2838
2723 5 2838
2838 5 2838
2838 5 2838
2838 5 2838
3112 5 2838
106 6 2838
1380 6 2838
1826 6 2838
1972 6 2838
2438 6 2838
2723 6 2838
2736 6 2838
2833 6 2838
2838 6 2838
731 6 2838
.I 2839
.T
Insertion Technique One-Sided Height-Balanced Trees
.W
restriction height-balanced binary trees
presented. seen restriction
reduces extra memory requirements half (from
two extra bits per node one) maintains fast
search capabilities cost increased
time requirements inserting new nodes.
.B
CACM August, 1976
.A
Hirschberg, D. S.
.K
balanced, binary, search, trees
.C
3.73 3.74 4.34 5.25 5.31
.N
CA760805 JB January 4, 1978 10:04 AM
.X
2839 4 2839
3042 4 2839
3096 4 2839
3163 4 2839
2839 5 2839
2839 5 2839
2839 5 2839
2889 5 2839
3009 5 2839
3042 5 2839
3065 5 2839
3096 5 2839
3163 5 2839
2455 6 2839
2839 6 2839
2839 6 2839
2839 6 2839
2839 6 2839
2839 6 2839
2889 6 2839
2889 6 2839
2889 6 2839
2968 6 2839
3009 6 2839
3009 6 2839
3065 6 2839
3096 6 2839
3096 6 2839
.I 2840
.T
Protection Operating Systems
.W
model protection mechanisms computing
systems presented its appropriateness
argued. "safety" problem protection systems
under model determine given situation
whether subject can acquire particular right
object. restricted cases, can shown
problem decidable, i.e. there algorithm
determine whether system particular
configuration safe. general, under surprisingly
weak assumptions, cannot decided if
situation safe. Various implications fact discussed.
.B
CACM August, 1976
.A
Harrison, M. A.
Ruzzo, W. L.
Ullman, J. D.
.K
protection, protection system, operating
system, decidability, Turing machine
.C
4.30 4.31 5.24
.N
CA760804 JB January 4, 1978 10:12 AM
.X
1458 4 2840
1523 4 2840
1603 4 2840
1698 4 2840
1747 4 2840
1748 4 2840
1753 4 2840
1854 4 2840
1877 4 2840
1960 4 2840
2358 4 2840
2377 4 2840
2377 4 2840
2378 4 2840
2372 4 2840
2497 4 2840
2558 4 2840
2625 4 2840
2626 4 2840
2626 4 2840
2632 4 2840
2786 4 2840
2840 4 2840
2840 4 2840
2840 4 2840
2840 4 2840
2840 4 2840
2869 4 2840
2919 4 2840
2941 4 2840
3017 4 2840
3105 4 2840
3110 4 2840
3128 4 2840
3144 4 2840
3158 4 2840
3174 4 2840
1471 5 2840
1746 5 2840
2436 5 2840
2626 5 2840
2629 5 2840
2840 5 2840
2840 5 2840
2840 5 2840
3076 5 2840
2607 6 2840
2840 6 2840
.I 2841
.T
Designing Surfaces 3-D
.W
experimental system computer-aided
design free-form surfaces three dimensions
described. surfaces represented system
parametric basis splines. principal features
system are: (1) surfaces rendered isoparametric
line drawings head-mounted display,
they designed aid three-dimensional
"wand," which allows 3-D movements points
controlling shapes surfaces, (2) all
interactions surfaces real-time,
(3) mathematical formulations used assume no
knowledge them user system. Also
examined some features should part
practical 3-D system designing space-forms.
.B
CACM August, 1976
.A
Clark, J. H.
.K
real-time graphics, computer-aided design,
picture processing, B-splines, 3-D displays
.C
3.80 6.22 8.2
.N
CA760803 JB January 4, 1978 10:25 AM
.X
2828 5 2841
2841 5 2841
2841 5 2841
2841 5 2841
1751 6 2841
2004 6 2841
2751 6 2841
2841 6 2841
.I 2842
.T
Denotational Semantics Programming Languages
.W
paper tutorial introduction
theory programming language semantics developed
D. Scott C. Strachey. application theory
formal language specification demonstrated
other applications surveyed. first language
considered, LOOP, very elementary its
definition merely introduces notation methodology
approach. Then semantic concepts
environments, stores, continuations introduced
model classes programming language features
underlying mathematical theory computation
due Scott motivated outlined. Finally,
paper presents formal definition language GEDANKEN.
.B
CACM August, 1976
.A
Tennent, R. D.
.K
semantics, programming language, applicative, imperative,
environment, store, continuation, theory
computation, higher-order function, recursive definition, LOOP, GEDANKEN
.C
4.22 5.24
.N
CA760802 JB January 4, 1978 10:33 AM
.X
1024 4 2842
1051 4 2842
1086 4 2842
1102 4 2842
1132 4 2842
1132 4 2842
1234 4 2842
1263 4 2842
1265 4 2842
1270 4 2842
1323 4 2842
1358 4 2842
1379 4 2842
1380 4 2842
1390 4 2842
1453 4 2842
1464 4 2842
1484 4 2842
1486 4 2842
1491 4 2842
1498 4 2842
1549 4 2842
1613 4 2842
1614 4 2842
1706 4 2842
1781 4 2842
1825 4 2842
1826 4 2842
1860 4 2842
1878 4 2842
378 4 2842
2060 4 2842
2083 4 2842
2155 4 2842
2155 4 2842
2168 4 2842
2178 4 2842
2179 4 2842
2252 4 2842
2294 4 2842
2314 4 2842
2317 4 2842
2325 4 2842
2326 4 2842
2341 4 2842
2457 4 2842
2546 4 2842
2558 4 2842
2645 4 2842
2652 4 2842
2684 4 2842
2719 4 2842
2723 4 2842
2838 4 2842
2842 4 2842
2842 4 2842
2842 4 2842
2842 4 2842
2842 4 2842
2855 4 2842
2879 4 2842
2903 4 2842
2929 4 2842
2934 4 2842
3069 4 2842
3077 4 2842
3077 4 2842
3080 4 2842
3106 4 2842
3150 4 2842
627 4 2842
669 4 2842
679 4 2842
691 4 2842
761 4 2842
106 4 2842
949 4 2842
989 4 2842
210 5 2842
2060 5 2842
2148 5 2842
2192 5 2842
2837 5 2842
2842 5 2842
2842 5 2842
2842 5 2842
3150 5 2842
3184 5 2842
2060 6 2842
2704 6 2842
2784 6 2842
2842 6 2842
2842 6 2842
2939 6 2842
2940 6 2842
2941 6 2842
2943 6 2842
3073 6 2842
3148 6 2842
.I 2843
.T
Tools Philosophy Software Education
.W
paper describes set tools philosophy
teaching software have been found
very useful course MIT over past seven years.
tools include programs such simulators,
graders, compilers, monitor. These allow instructor
augment basic concepts relevant,
exciting, economical student project activities.
.B
CACM August, 1976
.A
Donovan, J. J.
.K
software education, simulators, grading programs, student assignments
.C
1.5 4.0
.N
CA760801 JB January 4, 1978 10:39 AM
.X
2843 5 2843
2843 5 2843
2843 5 2843
.I 2844
.T
Heaps Applied Event Driven Mechanisms
.B
CACM July, 1976
.A
Gonnet, G. H.
.K
discrete event simulation, event-scanning
mechanisms, priority queues, heaps
.C
4.34 8.1
.N
CA760709 JB January 4, 1978 11:05 AM
.X
2042 4 2844
2222 4 2844
2356 4 2844
2679 4 2844
2757 4 2844
2844 4 2844
2844 4 2844
2844 4 2844
2844 4 2844
2936 4 2844
2936 4 2844
2972 4 2844
3051 4 2844
3064 4 2844
3064 4 2844
3109 4 2844
970 5 2844
1059 5 2844
2742 5 2844
2767 5 2844
2844 5 2844
2844 5 2844
2844 5 2844
3051 5 2844
3109 5 2844
2767 6 2844
2767 6 2844
2844 6 2844
2844 6 2844
.I 2845
.T
Buddy System Variation Disk Storage Allocation
.W
generalization buddy system storage
allocation described. set permitted
block sizes {SIZE(i)}, i=0,n, must satisfy condition
SIZE(i)=SIZE(i-1)+SIZE(i-k(i)) k may
any meaningful integral-valued function. makes
possible force logical storage blocks coincide
physical storage blocks, such tracks cylinders.
.B
CACM July, 1976
.A
Burton, W.
.K
buddy system, dynamic storage allocation
.C
3.89 4.32 4.39
.N
CA760708 JB January 4, 1978 11:24 AM
.X
1389 4 2845
1552 4 2845
2162 4 2845
2435 4 2845
2596 4 2845
2596 4 2845
2747 4 2845
2768 4 2845
2768 4 2845
2773 4 2845
2833 4 2845
2845 4 2845
2845 4 2845
2845 4 2845
2845 4 2845
2845 4 2845
2845 4 2845
2856 4 2845
2902 4 2845
2902 4 2845
2902 4 2845
2902 4 2845
2911 4 2845
2955 4 2845
2955 4 2845
2955 4 2845
3112 4 2845
3113 4 2845
1184 5 2845
2435 5 2845
2598 5 2845
2736 5 2845
2747 5 2845
2768 5 2845
2845 5 2845
2845 5 2845
2845 5 2845
.I 2846
.T
Compressed Tries
.W
paper presents new data structure,
called compressed trie C-trie, used
information retrieval systems. has same underlying
m-ary tree structure trie, m
parameter trie, but whereas fields
nodes trie have large enough hold
key least pointer, fields C-trie
only one bit long. analysis part
paper shown collection n keys
retrieval time, measured terms bit inspections
one key, order logm(n) storage
requirement order n*(m+log2 n) bits.
improvement storage requirements retrieval time
achieved cost decreasing flexibility
structure, therefore updating costs increased.
First C-trie analyzed data
structure, then several methods its use
relatively static databases discussed.
.B
CACM July, 1976
.A
Maly, K.
.K
data structure, database, m-ary tree, trie,
retrieval time, storage requirement, keys
.C
3.70 3.74 3.75
.N
CA760707 JB January 4, 1978 12:26 PM
.X
2846 4 2846
849 4 2846
944 4 2846
155 5 2846
2846 5 2846
2846 5 2846
2846 5 2846
3041 5 2846
2846 6 2846
2905 6 2846
.I 2847
.T
Sampling Gamma Distribution Computer
.W
paper describes method generating
gamma variates appears less costly than
Wallace's recently suggested method. large shape parameter
(a); cost computation proportional
(a), whereas Wallace's method proportional (a).
Experimentation Robinson Lewis indicates
small (a) method suggested here also dominates
methods recently suggested Dieter
Ahrens, albeit those methods dominate large (a).
method suggested here uses rejection technique.
.B
CACM July, 1976
.A
Fishman, G. S.
.K
gamma variates, reflection method, sampling
.C
5.5 8.1 8.3
.N
CA760706 JB January 4, 1978 12:34 PM
.X
2847 4 2847
2928 4 2847
3046 4 2847
3098 4 2847
3107 4 2847
2569 5 2847
2847 5 2847
2847 5 2847
2847 5 2847
3046 5 2847
3098 5 2847
2569 6 2847
2569 6 2847
2847 6 2847
2847 6 2847
3098 6 2847
.I 2848
.T
Synthesis Decision Rules
.W
Decision tables can used effective
tool during interview record logic
processes automated. result such interview
not structure complete decision tables
but rather sets decision rules. purpose
paper provide procedure synthesizing
decision rules thus provide aid developing
structure complete decision tables.
.B
CACM July, 1976
.A
Cheng, C.
Rabin, J.
.K
decision rules, decision tables, logical tables,
logical design, system design, specification language
.C
3.50 4.33
.N
CA760705 JB January 4, 1978 12:39 PM
.X
2848 5 2848
2848 5 2848
2848 5 2848
.I 2849
.T
Ethernet: Distributed Packet Switching Local Computer Networks
.W
Ethernet branching broadcast communication
system carrying digital data packets among
locally distributed computing stations. packet
transport mechanism provided Ethernet has been
used build systems which can viewed either local
computer networks loosely coupled multiprocessors.
Ethernet's shared communication facility, its Ether,
passive broadcast medium no central
control. Coordination access Ether packet
broadcasts distributed among contending
transmitting stations using controlled statistical arbitration.
Switching packets their destinations
Ether distributed among receiving stations
using packet address recognition. Design principles
implementation described, based experience
operating Ethernet 100 nodes along
kilometer coaxial cable. model estimating performance
under heavy loads packet protocol
error controlled communication included completeness.
.B
CACM July, 1976
.A
Metcalfe, R. M.
Boggs, D. R.
.K
computer networks, packet switching, multiprocessing,
distributed control, distributed computing,
broadcast communication, statistical arbitration
.C
3.81 4.32 6.35
.N
CA760704 JB January 4, 1978 12:49 PM
.X
2849 4 2849
2371 5 2849
2849 5 2849
2849 5 2849
2849 5 2849
3032 5 2849
3119 5 2849
2245 6 2849
2798 6 2849
2849 6 2849
2849 6 2849
2859 6 2849
.I 2850
.T
Symbolic Execution Program Testing
.W
paper describes symbolic execution
programs. Instead supplying normal inputs
program (e.g. numbers) one supplies symbols representing
arbitrary values. execution proceeds
normal execution except values may symbolic
formulas over input symbols. difficult,
yet interesting issues arise during symbolic execution
conditional branch type statements.
particular system called EFFIGY which provides symbolic
execution program testing debugging
also described. interpretively executes programs written
simple PL/I style programming language.
includes many standard debugging features, ability
manage prove things symbolic
expressions, simple program testing manager, program
verifier. brief discussion relationship
between symbolic execution program proving also included.
.B
CACM July, 1976
.A
King, J. C.
.K
symbolic execution, program testing, program debugging,
program proving, program verification,
symbolic interpretation
.C
4.13 5.21 5.24
.N
CA760703 JB January 4, 1978 12:59 PM
.X
2850 5 2850
2850 5 2850
2850 5 2850
3080 5 2850
210 6 2850
2850 6 2850
.I 2851
.T
Formal Verification Parallel Programs
.W
Two formal models parallel computation
presented: abstract conceptual model
parallel-program model. former model does not
distinguish between control data states.
latter model includes capability representation
infinite set control states allowing
there arbitrarily many instruction pointers (or
processes) executing program. induction
principle presented which treats control
data state sets same ground. Through
use "place variables," observed certain
correctness conditions can expressed without
enumeration set all possible control states.
Examples presented which induction
principle used demonstrate proofs mutual exclusion.
shown assertions-oriented proof
methods special cases induction principle.
special case assertions method, which
called parallel place assertions, shown
incomplete. formalization "deadlock" then
presented. concept "norm" introduced, which
yields extension, deadlock problem,
Floyd's technique proving termination. Also discussed
extension program model which
allows each process have its own local variables
permits shared global variables. Correctness
certain forms implementation also discussed.
Appendix included which relates work
previous work satisfiability certain logical formulas.
.B
CACM July, 1976
.A
Keller, R. M.
.K
parallel program, correctness, verification,
assertions, deadlock, mutual exclusion, Petrinet
.C
4.6 5.2 6.9 8.1
.N
CA760702 JB January 4, 1978 1:20 PM
.X
2228 4 2851
2280 4 2851
2379 4 2851
2320 4 2851
2482 4 2851
2597 4 2851
2740 4 2851
2777 4 2851
2851 4 2851
2851 4 2851
2895 4 2851
2912 4 2851
2920 4 2851
2946 4 2851
3128 4 2851
1877 5 2851
2150 5 2851
2851 5 2851
2851 5 2851
2851 5 2851
.I 2852
.T
Technology Computer Center Management:
Proposed Course Graduate Professional Programs
Computer Science Information Systems
.W
McFarlan Nolan have made strong case
adding course information systems administration
13 courses proposed ACM Curriculum Committee
Computer Education Management Graduate
Professional Programs Information Systems. paper
report course entitled, "The Technology
Computer Center Management," which has been offered
Purdue past four years. course
suitable either graduate professional programs
information systems graduate professional
programs computer science.
.B
CACM July, 1976
.A
Conte, S. D.
Halstead, M. H.
.K
education, information systems administration, computer
center management, computer system performance
.C
1.52 2.4 3.51 4.6
.N
CA760701 JB January 4, 1978 1:31 PM
.X
1653 4 2852
1720 4 2852
1927 4 2852
2147 4 2852
2163 4 2852
2345 4 2852
2387 4 2852
2407 4 2852
2478 4 2852
2594 4 2852
2852 4 2852
2852 4 2852
2852 4 2852
2852 4 2852
2852 4 2852
2899 4 2852
3003 4 2852
3003 4 2852
3011 4 2852
3050 4 2852
3050 4 2852
3130 4 2852
1417 5 2852
1771 5 2852
2345 5 2852
2387 5 2852
2479 5 2852
2852 5 2852
2852 5 2852
2852 5 2852
.I 2853
.T
Numbering System Permutations Combinations
.B
CACM June, 1976
.A
Knott, G. D.
.K
combinatorics,coding systems, storage mapping functions
.C
4.9 5.30
.N
CA760609 JB January 4, 1978 1:33 PM
.X
2690 4 2853
2853 4 2853
2853 4 2853
3115 4 2853
2690 5 2853
2853 5 2853
2853 5 2853
2853 5 2853
579 5 2853
.I 2854
.T
Multiprocessing Compactifying Garbage Collection (Corrigendum)
.B
CACM June, 1976
.A
Steele, G. L. Jr.
.N
CA760608 JB January 4, 1978 1:36 PM
.X
2854 5 2854
2854 5 2854
2854 5 2854
.I 2855
.T
Efficient List-Moving Algorithm Using Constant Workspace
.W
efficient algorithm presented moving
arbitrary list structures, using no storage
(apart program variables) other than required
hold original list copy.
original list destroyed moved. No mark
bits necessary, but pointers copy must
distinguishable pointers original.
algorithm superior execution speed previous
algorithms same problem. Some variations
extensions algorithm discussed.
.B
CACM June, 1976
.A
Clark, D. W.
.K
list moving, list copying, LISP, space complexity, constant workspace
.C
4.34 4.49 5.25
.N
CA760607 JB January 4, 1978 1:43 PM
.X
1024 4 2855
1051 4 2855
1102 4 2855
1132 4 2855
1390 4 2855
1486 4 2855
1549 4 2855
1706 4 2855
1826 4 2855
1869 4 2855
1878 4 2855
1972 4 2855
378 4 2855
2060 4 2855
2155 4 2855
2156 4 2855
2156 4 2855
2168 4 2855
2168 4 2855
2361 4 2855
2438 4 2855
2513 4 2855
2513 4 2855
2665 4 2855
2719 4 2855
2723 4 2855
2723 4 2855
2723 4 2855
2736 4 2855
2736 4 2855
2833 4 2855
2838 4 2855
2842 4 2855
2855 4 2855
2855 4 2855
2855 4 2855
2855 4 2855
2855 4 2855
2855 4 2855
2855 4 2855
2855 4 2855
2879 4 2855
2944 4 2855
2944 4 2855
2954 4 2855
3074 4 2855
3074 4 2855
3077 4 2855
3080 4 2855
3106 4 2855
3106 4 2855
3106 4 2855
3106 4 2855
3106 4 2855
3112 4 2855
3112 4 2855
3112 4 2855
627 4 2855
106 4 2855
210 5 2855
1549 5 2855
1826 5 2855
1972 5 2855
2513 5 2855
2766 5 2855
2833 5 2855
2855 5 2855
2855 5 2855
2855 5 2855
2998 5 2855
3106 5 2855
1549 6 2855
210 6 2855
1972 6 2855
2665 6 2855
2766 6 2855
2855 6 2855
2954 6 2855
2998 6 2855
.I 2856
.T
Synthetic Approach Decision Table Conversion
.W
Previous approaches problem automatically
converting decision tables computer
programs have been based decomposition. any
stage, one condition selected testing,
two smaller problems (decision tables one less
condition) created. optimal program (with
respect average execution time storage space,
example) located only through implicit enumeration
all possible decision trees using technique such
branch-and-bound. new approach described
paper uses dynamic programming synthesize
optimal decision tree which program can
created. Using approach, efficiency creating
optimal program increased substantially,
permitting generation optimal programs decision
tables many ten twelve conditions.
.B
CACM June, 1976
.A
Schumacher, H.
Sevcik, K. C.
.K
decision tables, decision trees, dynamic programming, optimal programs
.C
3.50 4.12 5.30 8.3
.N
CA760606 JB January 4, 1978 1:50 PM
.X
1354 4 2856
1354 4 2856
1488 4 2856
1684 4 2856
2053 4 2856
2053 4 2856
2053 4 2856
2220 4 2856
2220 4 2856
2220 4 2856
2221 4 2856
2273 4 2856
2273 4 2856
2273 4 2856
2273 4 2856
2273 4 2856
2453 4 2856
2453 4 2856
2453 4 2856
2453 4 2856
2517 4 2856
2598 4 2856
2598 4 2856
2598 4 2856
2726 4 2856
2726 4 2856
2726 4 2856
2726 4 2856
2845 4 2856
2856 4 2856
2856 4 2856
2856 4 2856
2856 4 2856
2856 4 2856
2856 4 2856
2856 4 2856
3034 4 2856
3113 4 2856
3113 4 2856
1172 5 2856
1327 5 2856
1354 5 2856
2053 5 2856
2220 5 2856
2453 5 2856
2598 5 2856
2856 5 2856
2856 5 2856
2856 5 2856
3033 5 2856
3113 5 2856
1354 6 2856
2263 6 2856
2598 6 2856
2691 6 2856
2856 6 2856
2856 6 2856
.I 2857
.T
Referencing Lists Edge
.W
edge reference into list structure pair
pointers adjacent nodes. Such reference
often requires little additional space, but its use can
yield efficient algorithms. instance, circular
link between ends list redundant if list
always referenced edge, list traversal
easier link null. Edge references also
allow threading nonrecursive lists, can replace
some header cells, enhance famous
exclusive-or-trick double-link lists
.B
CACM June, 1976
.A
Wise, D. S.
.K
list processing, circular, doubly linked, overlapping
sublist, header cell, pointer, cursor
.C
3.73 4.10 4.22
.N
CA760605 JB January 4, 1978 2:00 PM
.X
1024 4 2857
1051 4 2857
1098 4 2857
1214 4 2857
1380 4 2857
1388 4 2857
1393 4 2857
1396 4 2857
1485 4 2857
1487 4 2857
1549 4 2857
1570 4 2857
1878 4 2857
1946 4 2857
1946 4 2857
1957 4 2857
2167 4 2857
2168 4 2857
2723 4 2857
2857 4 2857
2857 4 2857
3112 4 2857
1393 5 2857
2857 5 2857
2857 5 2857
2857 5 2857
731 5 2857
.I 2858
.T
Process Determination
Addresses Variable Length Addressing
.W
algorithm presented assignment
instruction addresses formats under
following conditions: (1) length instruction varies
function distance instruction
its target; (2) there exists optimality criterion
which implies some preferential choices subject
addressing constraints. may be, example,
achieving smallest number long instructions,
which case total code length minimized,
minimizing assigned address specified point
program. algorithm suitable arbitrary
program structure choice optimization
criteria.
.B
CACM June, 1976
.A
Frieder, G.
Saal, H. J.
.K
variable length addressing, assembler, paging
.C
4.11 4.12
.N
CA760604 JB January 4, 1978 2:09 PM
.X
2858 4 2858
3110 4 2858
2194 5 2858
2858 5 2858
2858 5 2858
2858 5 2858
3110 5 2858
2194 6 2858
2629 6 2858
2858 6 2858
.I 2859
.T
Interference Multiprocessor Computer Systems Interleaved Memory
.W
paper analyzes memory interference
caused several processors simultaneously using
several memory modules. Exect results computed
simple model such system. limiting
value derived relative degree memory interference
system size increases. model
limiting behavior system yields approximate
results simple model also suggests
results valid much larger class models,
including those more nearly like real systems
simple model tested against some measurements
program behavior simulations systems
using memory references real programs. model
results provide good indication performance
should expected real system type.
.B
CACM June, 1976
.A
Baskett, F.
Smith, A. J.
.K
memory, memory interference, multiprocessing,
interleaved memory, trace driven simulation
.C
4.32 6.21 6.34 8.1
.N
CA760603 JB January 4, 1978 2:19 PM
.X
1668 4 2859
1669 4 2859
1679 4 2859
1728 4 2859
2859 4 2859
2859 4 2859
1525 5 2859
1676 5 2859
2859 5 2859
2859 5 2859
2859 5 2859
2918 5 2859
3119 5 2859
2245 6 2859
2798 6 2859
2849 6 2859
2859 6 2859
2859 6 2859
.I 2860
.T
Practitioner's Guide Addressing Algorithms
.W
paper consolidates number popular
rules thumb which have been suggested
design record addressing algorithms, discusses
applicability these rules large commercial
databases. Guidelines selecting identifier transformations,
overflow techniques, loading factors,
bucket sizes, loading order considered. Particular
attention focused reasonableness
common heuristics determining primary secondary
bucket sizes. mathematical model which explicitly
considers storage device characteristics time/space
cost tradeoffs used analyze effect
design parameters overall system costs.
specific design example presented solved.
.B
CACM June, 1976
.A
Severance, D.
Duhne, R.
.K
data management, file retrieval, searching, addressing
techniques, hashing functions, synonym resolution,
loading factor, bucket size, heuristic design, rules thumb
.C
3.50 3.72 3.74 4.33 4.34 4.41 8.1
.N
CA760602 JB January 4, 1978 2:47 PM
.X
1785 4 2860
2203 4 2860
2258 4 2860
2282 4 2860
2319 4 2860
2313 4 2860
2359 4 2860
2437 4 2860
2552 4 2860
2781 4 2860
2860 4 2860
2860 4 2860
2860 4 2860
2991 4 2860
3083 4 2860
911 4 2860
1328 5 2860
2203 5 2860
2860 5 2860
2860 5 2860
2860 5 2860
492 5 2860
.I 2861
.T
Production Employment Ph.D.'s Computer Science
.B
CACM June, 1976
.A
Taulbee, O. E.
Conte, S. D.
.N
CA760601 JB January 4, 1978 2:51 PM
.X
2861 5 2861
2861 5 2861
2861 5 2861
2962 5 2861
3123 5 2861
3122 5 2861
2823 6 2861
2861 6 2861
2861 6 2861
2861 6 2861
2962 6 2861
2962 6 2861
3022 6 2861
.I 2862
.T
Analysis PFF Replacement Algorithm via Semi-Markov Model
.W
analytical model presented estimate
performance Page Fault Frequency (PFF)
replacement algorithm. model, program behavior
represented LRU stack distance model
PFF replacement algorithm represented semi-Markov
model. Using these models, such parameters
inter-page-fault interval distribution,
probability number distinct pages being
referenced during inter-page-fault interval, etc.
able analytically determined. Using these
models evaluate these parameter values permits study
performance replacement algorithm
simulating page fault events rather than every
page reference event. significantly reduces
required computation time estimating
performance PFF algorithm.
.B
CACM May, 1976
.A
Chu, W. W.
Opderbeck, H.
.K
PFF replacement algorithm, semi-Markov
model, simulation replacement algorithm
.C
4.31 4.32
.N
CA760509 JB January 4, 1978 2:59 PM
.X
1892 4 2862
1924 4 2862
2095 4 2862
2218 4 2862
2297 4 2862
2374 4 2862
2526 4 2862
2667 4 2862
2668 4 2862
2862 4 2862
2863 4 2862
1728 5 2862
2862 5 2862
2862 5 2862
2862 5 2862
.I 2863
.T
VMIN-An Optimal Variable-Space Page Replacement Algorithm
.W
criterion comparing variable space page
replacement algorithms presented. optimum
page replacement algorithm, called VMIN, described
shown optimum respect criterion.
results simulating VMIN, Denning's working set,
page partitioning replacement algorithms
five virtual memory programs presented demonstrate
improvement possible over known
realizable variable space algorithms.
.B
CACM May, 1976
.A
Prieve, B. G.
Fabry, R. S.
.K
demand paging, performance measurement, multilevel
memory systems, virtual memory, working set,
page replacement algorithms, optimal page replacement
.C
4.30 4.32
.N
CA760508 JB January 4, 1978 3:06 PM
.X
1892 4 2863
1892 4 2863
1901 4 2863
1924 4 2863
2085 4 2863
2095 4 2863
2095 4 2863
2218 4 2863
2218 4 2863
2277 4 2863
2297 4 2863
2319 4 2863
2329 4 2863
2358 4 2863
2373 4 2863
2374 4 2863
2374 4 2863
2380 4 2863
2434 4 2863
2499 4 2863
2481 4 2863
2501 4 2863
2526 4 2863
2582 4 2863
2667 4 2863
2668 4 2863
2669 4 2863
2669 4 2863
2828 4 2863
2862 4 2863
2863 4 2863
2863 4 2863
2863 4 2863
2863 4 2863
2881 4 2863
2928 4 2863
2996 4 2863
3006 4 2863
3016 4 2863
3052 4 2863
3067 4 2863
3067 4 2863
1728 5 2863
1751 5 2863
1901 5 2863
2863 5 2863
2863 5 2863
2863 5 2863
2863 5 2863
3067 5 2863
1728 6 2863
1751 6 2863
1751 6 2863
1901 6 2863
2374 6 2863
2373 6 2863
2595 6 2863
2682 6 2863
2863 6 2863
2863 6 2863
2864 6 2863
3006 6 2863
.I 2864
.T
Characteristics Program Localities
.W
term "locality" has been used denote
subset program's segments which referenced
during particular phase its execution. program's
behavior can characterized terms its
residence localities various sizes lifetimes,
transitions between these localities.
paper concept locality made more explicit
through formal definition constitutes
phase localized reference behavior, corresponding
mechanism detection localities
actual reference strings. definition provides
existence hierarchy localities
any given time, reasonableness definition
supported examples taken actual
programs. Empirical data sample production
Algol 60 programs used display distributions
locality sizes lifetimes, these results
discussed terms their implications
modeling program behavior memory management virtual memory systems.
.B
CACM May, 1976
.A
Madison, A. W.
Batson, A. P.
.K
program behavior, memory management, locality
.C
4.22 4.35 4.6 4.9 6.21
.N
CA760507 JB January 4, 1978 3:15 PM
.X
2864 5 2864
2864 5 2864
2864 5 2864
3000 5 2864
3067 5 2864
1751 6 2864
1879 6 2864
2095 6 2864
2374 6 2864
2373 6 2864
2595 6 2864
2682 6 2864
2863 6 2864
2864 6 2864
2864 6 2864
3006 6 2864
.I 2865
.T
Verifying Properties Parallel Programs: Axiomatic Approach
.W
axiomatic method proving number
properties parallel programs presented.
Hoare has given set axioms partial correctness,
but they not strong enough most cases.
paper defines more powerful deductive system which
some sense complete partial correctness.
crucial axiom provides use auxiliary variables,
which added parallel program
aid proving correct. information partial
correctness proof can used prove such
properties mutual exclusion, freedom deadlock,
program termination. Techniques verifying
these properties presented illustrated
application dining philosophers problem.
.B
CACM May, 1976
.A
Owicki, S.
Gries, D.
.K
structured multiprogramming correctness proofs, program
verification, concurrent processes, synchronization,
mutual exclusion, deadlock
.C
4.32 4.35 5.21 5.24
.N
CA760506 JB January 4, 1978 3:23 PM
.X
2021 4 2865
2222 4 2865
2227 4 2865
2315 4 2865
2326 4 2865
2470 4 2865
2732 4 2865
2865 4 2865
2865 4 2865
2866 4 2865
2896 4 2865
2898 4 2865
2943 4 2865
2972 4 2865
3014 4 2865
3043 4 2865
3068 4 2865
3077 4 2865
3128 4 2865
3143 4 2865
3144 4 2865
1834 5 2865
2597 5 2865
2865 5 2865
2865 5 2865
2865 5 2865
3128 5 2865
3148 5 2865
1860 6 2865
2150 6 2865
2376 6 2865
2436 6 2865
2597 6 2865
2817 6 2865
2865 6 2865
2865 6 2865
2866 6 2865
2870 6 2865
2912 6 2865
2939 6 2865
3073 6 2865
3082 6 2865
.I 2866
.T
Proving Monitors
.W
Interesting scheduling sequential properties
monitors can proved using state variables
which record monitor's history defining extended
proof rules their wait signal operations.
These two techniques defined, discussed, applied
examples prove properties such freedom
indefinitely repeated overtaking unnecessary waiting
upper bounds queue lengths, historical
behavior.
.B
CACM May, 1976
.A
Howard, J.H.
.K
monitors, correctness, proof rules, historical variables,
concurrency, scheduling, bounded buffer,
semaphores, alarm clock, disk head
.C
4.32 4.35 5.24
.N
CA760505 JB January 4, 1978 3:28 PM
.X
2704 4 2866
2738 4 2866
2865 4 2866
2866 4 2866
2866 4 2866
2866 4 2866
2869 4 2866
2898 4 2866
2941 4 2866
2958 4 2866
2972 4 2866
3004 4 2866
3030 4 2866
3043 4 2866
3128 4 2866
3144 4 2866
2356 5 2866
2597 5 2866
2796 5 2866
2866 5 2866
2866 5 2866
2866 5 2866
2938 5 2866
2946 5 2866
3128 5 2866
2150 6 2866
2150 6 2866
2376 6 2866
2436 6 2866
2597 6 2866
2865 6 2866
2866 6 2866
2866 6 2866
2866 6 2866
2870 6 2866
2912 6 2866
3082 6 2866
.I 2867
.T
Modularization Hierarchy Family Operating Systems
.W
paper describes design philosophy
used construction family operating
systems. shown concepts module
level do not coincide hierarchy functions.
Family members can share much software result
implementation run-time modules
lowest system level.
.B
CACM May, 1976
.A
Habermann,A. N.
Flon, L.
Cooprider, L.
.K
incremental machine design, module,
data type, address space, virtual memory
.C
4.0 4.30 4.35
.N
CA760504 JB January 4, 1978 3:33 PM
.X
1828 4 2867
1854 4 2867
1877 4 2867
1960 4 2867
2150 4 2867
2317 4 2867
2319 4 2867
2377 4 2867
2342 4 2867
2376 4 2867
2379 4 2867
2424 4 2867
2482 4 2867
2480 4 2867
2618 4 2867
2632 4 2867
2704 4 2867
2704 4 2867
2723 4 2867
2738 4 2867
2738 4 2867
2740 4 2867
2741 4 2867
2867 4 2867
2867 4 2867
2867 4 2867
3004 4 2867
3030 4 2867
3155 4 2867
3184 4 2867
1749 5 2867
2247 5 2867
2379 5 2867
2867 5 2867
2867 5 2867
2867 5 2867
.I 2868
.T
Reflections Operating System Design
.W
main features general purpose multiaccess
operating system developed CDC 6400
Berkeley presented, its good bad points
discussed they appear retrospect. Distinctive
features design were use capabilities
protection, organization system
into sequence layers, each building facilities
provided earlier ones protecting itself
malfunctions later ones. There were serious
problems maintaining protection between
layers levels were added memory hierarchy;
these problems discussed new solution
described.
.B
CACM May, 1976
.A
Lampson, B. W.
Sturgis, H. E.
.K
operating system, protection, capabilities,
layering domains, memory hierarchy, faults
.C
4.35
.N
CA760503 JB January 4, 1978 3:57 PM
.X
2319 4 2868
2378 4 2868
2320 4 2868
2436 4 2868
2626 4 2868
2626 4 2868
2629 4 2868
2632 4 2868
2738 4 2868
2740 4 2868
2868 4 2868
2868 4 2868
2868 4 2868
2868 4 2868
2868 4 2868
2868 4 2868
2870 4 2868
2870 4 2868
2876 4 2868
2928 4 2868
2939 4 2868
2941 4 2868
2951 4 2868
3105 4 2868
3105 4 2868
3127 4 2868
3144 4 2868
3144 4 2868
2080 5 2868
2377 5 2868
2380 5 2868
2558 5 2868
2625 5 2868
2632 5 2868
2868 5 2868
2868 5 2868
2868 5 2868
3105 5 2868
1471 6 2868
2625 6 2868
2632 6 2868
2868 6 2868
2939 6 2868
3068 6 2868
.I 2869
.T
Security Kernel Validation Practice
.W
security kernel software hardware
mechanism enforces access controls within
computer system. correctness security kernel
PDP-11/45 being proved. paper describes
technique used carry out first step
proof: validating formal specification
program respect axioms secure system.
.B
CACM May, 1976
.A
Millen, J. K.
.K
validation, verification, correctness, security
kernel, formal specification, protection
.C
4.35 4.6 5.24
.N
CA760502 JB January 4,1978 4:01 PM
.X
2704 4 2869
2738 4 2869
2840 4 2869
2866 4 2869
2869 4 2869
2869 4 2869
2941 4 2869
2958 4 2869
3004 4 2869
3030 4 2869
3128 4 2869
3158 4 2869
2356 5 2869
2436 5 2869
2869 5 2869
2869 5 2869
2869 5 2869
3068 5 2869
1834 6 2869
2869 6 2869
.I 2870
.T
Lattice Model Secure Information Flow
.W
paper investigates mechanisms guarantee
secure information flow computer system.
These mechanisms examined within mathematical framework
suitable formulating requirements
secure information flow among security classes.
central component model lattice structure
derived security classes justified semantics
information flow. lattice properties
permit concise formulations security requirements
different existing systems facilitate
construction mechanisms enforce security.
model provides unifying view all systems
restrict information flow, enables classification
them according security objectives,
suggests some new approaches. also leads construction
automatic program certification mechanisms
verifying secure flow information through program.
.B
CACM May, 1976
.A
Denning, D. E.
.K
protection, security, information flow, security
class, lattice, program certification
.C
4.35
.N
CA760501 JB January 4, 1978 4:10 PM
.X
2436 4 2870
2626 4 2870
2868 4 2870
2868 4 2870
2870 4 2870
2870 4 2870
2870 4 2870
2876 4 2870
3105 4 2870
3144 4 2870
953 5 2870
2377 5 2870
2632 5 2870
2870 5 2870
2870 5 2870
2870 5 2870
2945 5 2870
3128 5 2870
1947 6 2870
2150 6 2870
2376 6 2870
2436 6 2870
2597 6 2870
2704 6 2870
2865 6 2870
2866 6 2870
2870 6 2870
2870 6 2870
2912 6 2870
3082 6 2870
.I 2871
.T
Logical Analysis Programs
.W
Most present systems verification computer
programs incomplete intermediate
inductive assertions must provided manually
user, termination not proven, incorrect
programs not treated. unified solution
these problems, paper suggests conducting
logical analysis programs using invariants which
express actually occurring program.
first part paper devoted techniques
automatic generation invariants.
second part provides criteria using invariants
check simultaneously correctness (including
termination) incorrectness. third part examines
implications approach automatic
diagnosis correction logical errors.
.B
CACM April, 1976
.A
Katz, S.
Manna, Z.
.K
logical analysis, invariants, program verification,
correctness, incorrectness, termination, automatic
debugging
.C
3.66 4.42 5.24
.N
CA760405 JB January 4, 1978 4:15 PM
.X
2871 5 2871
2871 5 2871
2871 5 2871
2874 5 2871
1682 6 2871
2227 6 2871
2317 6 2871
2683 6 2871
2871 6 2871
521 6 2871
.I 2872
.T
Counterintuitive Example Computer Paging (Corrigendum)
.B
CACM April, 1976
.A
Fagin, R.
.N
CA760404 JB January 4, 1978 4:19 PM
.X
2872 5 2872
2872 5 2872
2872 5 2872
.I 2873
.T
LG: Language Analytic Geometry
.W
conversational programming language analytic
geometry described, together some
aspects its implementation. language allows
flexible definition geometric objects
elements, computes their parameters, displays results.
also provides capability specifying
geometric figure via collection parameters
displaying various loci corresponding these
parameters. third characteristic consists possibility
using language design other
user oriented languages. LG has been specifically designed
use nonprogrammers; easy
learn very close natural language used geometry.
.B
CACM April, 1976
.A
Raymond, J.
.K
interactive programming, problem oriented languages,
computer graphics, interpreters, analytic
geometry
.C
3.20 4.13 4.22 4.9
.N
CA760403 JB January 4, 1978 4:26 PM
.X
2873 5 2873
2873 5 2873
2873 5 2873
.I 2874
.T
Comparative Evaluation Versions BASIC
.W
its inception, BASIC language has
grown terms its usage, scope usage,
its features. article compares ten current
versions BASIC each other, two earlier
versions, proposed standard minimal
BASIC. comparison arranged features
versions computational comparison
computation times processing costs.
.B
CACM April, 1976
.A
Lientz, B. P.
.K
BASIC, interpretive language summary
.C
4.20 4.6
.N
CA760402 JB January 4, 1978 4:34 PM
.X
2044 4 2874
2189 4 2874
2356 4 2874
2417 4 2874
2420 4 2874
2505 4 2874
2874 4 2874
2874 4 2874
2874 4 2874
2874 4 2874
2874 4 2874
2874 4 2874
2908 4 2874
3104 4 2874
3143 4 2874
1682 5 2874
2227 5 2874
2317 5 2874
2683 5 2874
2871 5 2874
2874 5 2874
2874 5 2874
2874 5 2874
521 5 2874
.I 2875
.T
Development International System
Legal Protection Computer Programs
.B
CACM April, 1976
.A
Smoot, O. R.
.K
copyright software, patenting
software, legal protection software
.C
2.3 4.5
.N
CA760401 JB January 4, 1978 4:42 PM
.X
2875 5 2875
2875 5 2875
2875 5 2875
.I 2876
.T
Intentional Resolution Privacy Protection Database Systems
.W
Traditionally, privacy protection database
systems understood control over
information given user can get database.
paper concerned another, independent,
dimension privacy protection, control over
user allowed do piece information
supplied him database. ability condition
supply information its intended
use called here "intentional resolution" privacy
protection. practical importance intentional
resolution demonstrated several examples, its realization
discussed. shown intentional
resolution can achieved, but involves radical
change traditional approach
process user-database interaction. particular,
appears necessary database
impose certain amount control over internal
behavior users' programs which interact
it. model user-database interaction
which admits such control developed.
.B
CACM March, 1976
.A
Minsky, N.
.K
protection database, protection programming
languages, privacy, security, intentional resolution
privacy, interaction databases
.C
3.50 3.70 4.20 4.30
.N
CA760304 JB January 4, 1978 4:44 PM
.X
2785 4 2876
2868 4 2876
2870 4 2876
2876 4 2876
2876 4 2876
3105 4 2876
3144 4 2876
2632 5 2876
2685 5 2876
2876 5 2876
2876 5 2876
2876 5 2876
.I 2877
.T
Program Data Flow Analysis Procedure
.W
global data relationships program
can exposed codified static analysis
methods described paper. procedure given
which determines all definitions which can
possibly "reach" each node control flow graph
program all definitions
"live" each edge graph. procedure uses
"interval" ordered edge listing data structure
handles reducible irreducible graphs indistinguishably.
.B
CACM March, 1976
.A
Allen, J. E.
Cocke, J.
.K
program optimization, data flow analysis,
flow graphs, algorithms, compilers
.C
4.12 5.24
.N
CA760303 JB January 5, 1978 8:33 AM
.X
2877 5 2877
2877 5 2877
2877 5 2877
3103 5 2877
1860 6 2877
2877 6 2877
.I 2878
.T
Joining Policies Multipriority Multiclass Batch Computer System
.W
Consider multipriority batch computer system
which users several different classes may
join, its toll, service, waiting charges. Such
system formulated here semi-Markov decision
process, which aim arriving users minimize
their expected loss. optimal joining
policy one arriving users may join system
some its queues control limit policy,
single control number any possible queue
user's class; newly arriving user
join queue not filled up control number
corresponding queue user's class.
paper control numbers, well lower upper
bounds control numbers capacities
system's queues, derived.
.B
CACM March, 1976
.A
Babad, J. M.
Modiano, M. M.
.K
priority queues, semi-Markov process, price scheduling, operating system
.C
4.39 8.3
.N
CA760302 DMM January 9, 1978 2:14 PM
.X
2878 5 2878
2878 5 2878
2878 5 2878
.I 2879
.T
Computer Science Empirical Inquiry: Symbols Search
.B
CACM March, 1976
.A
Newell, A.
Simon, H. A.
.K
symbols, search, science, computer science, empirical,
Turing, artificial intelligence, intelligence,
list processing, cognition, heuristics, problem solving
.C
1.0 2.1 3.3 3.6 5.7
.N
CA760301 JB January 5, 1978 8:39 AM
.X
1024 4 2879
1051 4 2879
1102 4 2879
1132 4 2879
1390 4 2879
1486 4 2879
1549 4 2879
1706 4 2879
1826 4 2879
1878 4 2879
378 4 2879
2060 4 2879
2155 4 2879
2168 4 2879
2719 4 2879
2723 4 2879
2838 4 2879
2842 4 2879
2855 4 2879
2879 4 2879
3077 4 2879
3080 4 2879
3106 4 2879
627 4 2879
106 4 2879
210 5 2879
2879 5 2879
2879 5 2879
2879 5 2879
.I 2880
.T
Fast Division Technique Constant Divisors
.W
fast algorithm division constant divisors
presented. method has proved very
useful implemented microcode ona binary machine,
can adapted directly into hardware.
mathematical foundations algorithm presented
well some performance measures.
.B
CACM February, 1976
.A
Artzy, E.
Hinds, J. A.
Saal, H. J.
.K
constant divisors, division algorithms,
bit addressable memory, microprogram
.C
4.13 4.49 6.32
.N
CA760207 JB January 5, 1978 8:48 AM
.X
2880 5 2880
2880 5 2880
2880 5 2880
.I 2881
.T
Counterintuitive Example Computer Paging
.W
counterexample exhibited natural conjecture
concerning optimal way group records
into pages independent reference model computer
paging (an organization said optimal
if "least recently used" miss ratio minimized).
.B
CACM February, 1976
.A
Fagin, R.
.K
least recently used, most likely together, independent
reference model, storage organization, record
allocation
.C
3.70 3.73 4.0 5.30
.N
CA760206 JB January 5, 1978 8:53 AM
.X
1892 4 2881
1901 4 2881
2085 4 2881
2095 4 2881
2218 4 2881
2277 4 2881
2319 4 2881
2329 4 2881
2358 4 2881
2373 4 2881
2380 4 2881
2434 4 2881
2499 4 2881
2501 4 2881
2582 4 2881
2669 4 2881
2828 4 2881
2863 4 2881
2881 4 2881
2928 4 2881
2996 4 2881
3006 4 2881
3067 4 2881
1751 5 2881
2881 5 2881
2881 5 2881
2881 5 2881
.I 2882
.T
Stochastic Evaluation Model Database
Organization Data Retrieval Systems
.W
Experimental work valuation large
scale data retrieval systems has been scarce due
its difficulty prohibitive cost. paper
discusses simulation model data retrieval
system which has effect significantly reducing
cost experimentation enabling research
never attempted before. model designed estimate
retrieval workload alternative data
retrieval systems. These data retrieval systems can
organized under several database organizations,
including inverted list, threaded list, cellular
list organizations hybrid combinations these
systems. Effectiveness methodology demonstrated
using model study effect
database organizations data retrieval systems. particular,
impact query complexity analyzed.
.B
CACM February, 1976
.A
Siler, K. F.
.K
database architecture, database performance
evaluation, invented list, threaded list, cellular
list, information retrieval, database organizations,
query complexity, stochastic model, Monte Carlo
simulation
.C
3.70 3.71 3.72 3.73 3.74 3.79
.N
CA760205 JB January 5, 1978 9:20 AM
.X
1050 4 2882
1549 4 2882
2452 4 2882
2723 4 2882
2765 4 2882
2882 4 2882
2882 4 2882
2882 4 2882
731 4 2882
793 4 2882
2198 5 2882
2452 5 2882
2882 5 2882
2882 5 2882
2882 5 2882
2976 5 2882
627 5 2882
2688 6 2882
2765 6 2882
2882 6 2882
.I 2883
.T
Application Heuristic Search Methods Edge Contour Detection
.W
paper presents method detecting edges
contours noisy pictures. properties
edge embedded figure merit edge
detection problem becomes problem minimizing
given figure merit. problem can represented
shortest path problem graph
can solved using well-known graph search algorithms.
relations between representation
minimization problem dynamic programming approach
discussed, showing graph search
method can lead substantial improvements computing
time. Moreover, if heuristic search methods
used, computing time depend amount
noise picture. Some experimental results
given; these show various information
shape contour object can embedded
figure merit, thus allowing extraction
contours noisy picture separation
touching objects.
.B
CACM February, 1976
.A
Martelli, A.
.K
picture processing, pattern recognition, edge
detection, contour detection, contour following,
optimization problems, dynamic programming, shortest
path, heuristic search methods, problem solving
methods
.C
3.63 3.64 3.66 5.42
.N
CA760204 JB January 5, 1978 9:30 AM
.X
2883 4 2883
2195 5 2883
2883 5 2883
2883 5 2883
2883 5 2883
.I 2884
.T
Permutation Enumeration: Four New Permutation Algorithms
.W
Classical permutation enumeration algorithms encounter
special cases requiring additional computation
every nth permutation generating n! permutations
n marks. Four new algorithms have attribute
special cases occur every n(n-1)permutations.
Two algorithms produce next permutation
single exchange two marks. other two algorithms
infrequently exchange more than two marks,
but rules generating next permutation
very simple. Performance tests which have counted
execution assignment statements, comparisons, arithmetic
operations, subscripted array references
have shown superiority new algorithms compared
Boothroyd's implementation M. B. Well's algorithm
Ehrlich's implementation Johnson-Trotter algorithm.
.B
CACM February, 1976
.A
Ives, F. M.
.K
permutations, loop-free algorithms
.C
5.30
.N
CA760203 JB January 5, 1978 9:33 AM
.X
2834 4 2884
2884 4 2884
3115 4 2884
2417 5 2884
2884 5 2884
2884 5 2884
2884 5 2884
2908 5 2884
3115 5 2884
907 6 2884
2045 6 2884
2417 6 2884
2466 6 2884
2505 6 2884
2884 6 2884
2884 6 2884
521 6 2884
579 6 2884
785 6 2884
.I 2885
.T
Self-Organizing Sequential Search Heuristics
.W
paper examines class heuristics
maintaining sequential list approximately
optimal order respect average time required
search specified element, assuming
each element searched fixed probability
independent previous searches performed.
"move front" "transposition" heuristics shown
optimal within constant factor,
transposition rule shown more efficient
two. Empirical evidence suggests
transposition fact optimal any distribution search probabilities.
.B
CACM February, 1976
.A
Rivest, R.
.K
searching, self-organizing, list-processing, heuristics
.C
3.74 5.25
.N
CA760202 JB January 5, 1978 9:44 AM
.X
2885 5 2885
2885 5 2885
2885 5 2885
3061 5 2885
2885 6 2885
.I 2886
.T
Semantic Evaluation Left Right
.W
paper describes attribute grammars their
use definition programming languages
compilers; formal definition attribute grammars
discussion some its important aspects
included. paper concentrates evaluation
semantic attributes few passes left
right over derivation tree program.
condition attribute grammar given which
assures semantics any program can evaluated
single pass over derivation tree,
algorithm discussed which decides many
passes left right general necessary,
given attribute grammar. These notions explained
terms example grammar which describes
scope rules Algol 60. Practical questions, such
relative efficiency different evaluation
schemes, ease adapting attribute grammar
given programming language left-to-right
evaluation scheme discussed.
.B
CACM February, 1976
.A
Bochmann, G. V.
.K
attribute grammars, semantics programming languages,
semantic attributes, left-to-right parsing,
multipass compilers, semantic evaluation, semantic conditions
.C
4.10 4.20 5.23 5.24
.N
CA760201 JB January 5, 1978 9:54 AM
.X
2886 4 2886
2301 5 2886
2703 5 2886
2886 5 2886
2886 5 2886
2886 5 2886
2886 6 2886
.I 2887
.T
Study Errors, Error-Proneness, Error Diagnosis Cobol
.W
paper provides data Cobol error frequency
correction errors student-oriented
compilers, improvement teaching, changes programming
language. Cobol studied because
economic importance, widespread usage, possible error-including
design, lack research. types
errors were identified pilot study; then, using
132 error types found, 1,777 errors were
classified 1,4000 runs 73 Cobol students. Error
density high: 20 percent types contained
80 percent total frequency, which implies high
potential effectiveness software based correction
Cobol. Surprisingly, only four high-frequency errors
were error-prone, which implies minimal error
inducing design. 80 percent Cobol misspellings were classifiable
four error categories previous
researchers, which implies Cobol misspellings
correctable existent algorithms. Reserved
word usage not error-prone, which implies minimal
interference usage reserved words. Over
80 percent error diagnosis found inaccurate.
Such feedback not optimal users, particularly
learning user Cobol.
.B
CACM January, 1976
.A
Litecky, C. R.
Davis, G. B.
.K
errors programming, error correction, Cobol, programming
language errors, error analysis, diagnostics,
error-proneness, error frequency, spelling errors, syntactic
errors, learning programming, teaching
programming
.C
4.22 4.2 4.6
.N
CA760106 JB January 5, 1978 10:06 AM
.X
2534 4 2887
2556 4 2887
2650 4 2887
2708 4 2887
2887 4 2887
2887 4 2887
1646 5 2887
2111 5 2887
2887 5 2887
2887 5 2887
2887 5 2887
3145 5 2887
2887 6 2887
.I 2888
.T
Information Reference Coding
.W
Items business systems have identified
reference codes, which can later used
data codes file keys associated data processing
system. business systems associated
large collections integrated files (database)
vital assign codes methodical way
so control future extension changes while maintaining
correct program action. principles
methodical coding discussed, way
which logical connections between data items must
reflected reference code framework shown
through set-theoretic information model.
.B
CACM January, 1976
.A
Florentin, J. J.
.K
data, file, reference code, systems
analysis, information modeling, database
.C
3.50
.N
CA760105 JB January 5, 1978 10:11 AM
.X
1135 4 2888
1136 4 2888
2155 4 2888
2406 4 2888
493 4 2888
2710 4 2888
2710 4 2888
2715 4 2888
2716 4 2888
2717 4 2888
2718 4 2888
2765 4 2888
2765 4 2888
2817 4 2888
2888 4 2888
2888 4 2888
2901 4 2888
2906 4 2888
2957 4 2888
2959 4 2888
2965 4 2888
3087 4 2888
3154 4 2888
729 4 2888
2046 5 2888
2888 5 2888
2888 5 2888
2888 5 2888
616 5 2888
.I 2889
.T
Performance Height-Balanced Trees
.W
paper presents results simulations
investigate performance height-balanced
(HB[k]) trees. shown only statistic
HB[1] trees (AVL trees) function
size tree time search item
tree. sufficiently large trees,
execution times all procedures maintaining HB[1]
trees independent size tree.
particular, average .465 restructures required
per insertion, average 2.78 nodes
revisited restore HB[1] property; average
.214 restructures required per deletion,
average 1.91 nodes revisited restore HB[1]
property. Moreover,the execution times procedures
maintaining HB[k] trees, k>1, also independent
size tree except average
number nodes revisited delete operation
order restore HB[k] property trace back.
cost maintaining HB[k] trees drops sharply
allowable imbalance (k) increases. Both analytical
experimental results show cost maintaining
HB[k] trees function k discussed.
.B
CACM January, 1976
.A
Karlton, P. L.
Fuller, S. H.
Scroggs, R. E.
Kaehler, E. B.
.K
HB[k] trees, balanced trees, AVL trees,
information storage retrieval, searching
.C
3.7 3.72 3.74 4.49 5.39
.N
CA760104 JB January 5, 1978 10:27 AM
.X
2411 4 2889
2455 4 2889
2493 4 2889
2709 4 2889
2889 4 2889
2889 4 2889
2889 4 2889
2937 4 2889
2968 4 2889
2968 4 2889
2989 4 2889
3005 4 2889
3025 4 2889
3042 4 2889
3101 4 2889
2138 5 2889
2388 5 2889
2455 5 2889
2839 5 2889
2889 5 2889
2889 5 2889
2889 5 2889
3042 5 2889
3096 5 2889
3163 5 2889
2455 6 2889
2839 6 2889
2839 6 2889
2839 6 2889
2889 6 2889
2889 6 2889
2889 6 2889
2889 6 2889
2968 6 2889
3009 6 2889
3009 6 2889
3065 6 2889
3096 6 2889
.I 2890
.T
Quadratic Adaptive Routing Algorithms
.W
Two analytic models store-and-forward communications
network constructed, one find
optimal message routing other illustrate
equilibrium (stationary state) maintained
adaptive routing algorithm. These models show
adaptive routing does not satisfy necessary
conditions optimal routing, Adaptive routing tends
overuse direct path underuse alternate
routes because does not consider impact its
current routing decision future state
network. form optimality conditions suggests
modification adaptive algorithm
result optimality. modification requires
substitution quadratic bias term instead
linear one routing table maintained each
network node. Simulation results presented
which confirm theoretical analysis simple network.
.B
CACM January, 1976
.A
Agnew, C. E.
.K
routing algorithms, adaptive routing, quadratic routing,
alternate routing, store-and-forward network,
distributed network, computer network, message switching
.C
3.81 8.0 8.1 8.3
.N
CA760103 JB January 5, 1978 10:37 AM
.X
2890 5 2890
2890 5 2890
2890 5 2890
.I 2891
.T
Anomaly Disk Scheduling: Comparison
FCFS SSTF Seek Scheduling Using Empirical
Model Disk Accesses
.W
model disk accesses based published
measurements developed. model used
show under highly probable conditions, FCFS
seek scheduling superior SSTF scheduling
sense having lower mean queue length. simple
example arrival sequence illustration
anomaly presented.
.B
CACM January, 1976
.A
Wilhelm, N. C.
.K
disks, disk scheduling, seek scheduling
.C
3.72 4.35 4.41 4.6 6.35
.N
CA760102 JB January 5, 1978 10:42 AM
.X
2628 4 2891
2891 4 2891
2891 4 2891
3072 4 2891
2375 5 2891
2628 5 2891
2891 5 2891
2891 5 2891
2891 5 2891
3153 5 2891
2741 6 2891
2891 6 2891
.I 2892
.T
Study Line Overhead Arpanet
.W
form, extent, effect communication line
overhead ARPANET considered.
source over head separated into various
levels protocol hierarchy characteristics
each level summarized. Then line efficiency
various models system use studied.
Some measurements line efficiency ARPANET
presented extrapolation these measurements
used anticipate overhead heavily loaded network.
Similar results derived recently
proposed network protocol compared those current system.
.B
CACM January, 1976
.A
Kleinrock, L.
Naylor, W. E.
Opderbeck, H.
.K
ARPANET, computer communication networks, interprocess
communication, measurement, packet switching,
performance evaluation efficiency, resource sharing
.C
3.81 4.39 4.6 4.9
.N
CA760101 JB January 5, 1978 10:49 AM
.X
2892 5 2892
2892 5 2892
2892 5 2892
.I 2893
.T
Computers Innovation American Local Governments
.W
Computers electronic data processing
major technological innovation operations
American local government. paper establishes
there substantial variation among larger
local governments rate which they adopt computer
technology, level financial support
they provide EDP, extensiveness sophistication
their automated applications.
central question addressed is: might explain
differences between governments extent
which they adopt use computers? Hypotheses
tested several streams explanatory factors,
using data more than 500 city county governments.
findings identify certain local government
milieus which particularly conducive higher levels
computer innovation. Somewhat unexpected
findings reveal significant impact distribution
control over EDP decisions dominant
political values within government. Other important
factors include measured need computer
applications presence external funding support
computing. Finally, paper suggests
framework identifying key determinants
other technological innovations.
.B
CACM December, 1977
.A
Danziger, J. N.
Dutton, W. H.
.K
innovation, technological innovation, computer utilization,
computer adoption, American local government,
city government computers, county government computers.
.C
2.0 2.45 2.49 2.9
.N
CA771207 JB December 22, 1977 12:17 PM
.X
2893 5 2893
2893 5 2893
2893 5 2893
.I 2894
.T
Methodology Interactive Computer Service Measurement
.W
measurement methodology applicable teractive
computer service described. Its primary
purpose enable external, user-oriented assessment
computer performance, instead more
frequently used ternal system measurement techniques.
NBS Network Measurement System employed
external measurement tool. Example data have
been collected analyzed. demonstration
methodology, leading pragmatic figure-of-merit
evaluation results, included.
.B
CACM December, 1977
.A
Adrams, M. D.
.K
teractive system, computer service, measurement,
performance, external measurement, methodology,
measurement model,network measurement system, measures, figure-of-merit.
.C
2.4 4.6 6.2
.N
CA771206 JB December 22, 1977 12:32 PM
.X
2193 4 2894
2319 4 2894
2373 4 2894
2894 4 2894
2894 4 2894
1951 5 2894
2016 5 2894
2894 5 2894
2894 5 2894
2894 5 2894
.I 2895
.T
Language Formal Problem Specification
.W
language specifying tended behavior
communicating parallel processes described.
specifications constrain ts order which
events computation can occur. language
used write specifications readers/writers
problem writer priority second
readers/writers problem.
.B
CACM December, 1977
.A
Greif, I.
.K
formal specifications,program correctness, parallel
processing, synchronization, readers/writers
problem
.C
4.22 4.32 5.24
.N
CA771205 DMM December 22, 1977 12:44 PM
.X
2320 4 2895
2597 4 2895
2777 4 2895
2851 4 2895
2895 4 2895
2895 4 2895
2912 4 2895
2946 4 2895
3128 4 2895
2150 5 2895
2618 5 2895
2895 5 2895
2895 5 2895
2895 5 2895
.I 2896
.T
Exercise Proving Parallel Programs Correct
.W
parallel program, Dijkstra's on-the-fly garbage
collector, proved correct using proof
method developed Owicki. fine degree terleaving
program makes especially difficult
understand, complicates proof greatly. Difficulties
proving such parallel programs correct
discussed.
.B
CACM December, 1977
.A
Gries, D.
.K
garbage collection, multiprocessing, program
correctness multiprocessing tasks
.C
4.32 4.34 4.35 4.39 5.24
.N
CA771204 JB February 1, 1980 3:37 AM
.X
2021 4 2896
2222 4 2896
2227 4 2896
2315 4 2896
2326 4 2896
2470 4 2896
2732 4 2896
2838 4 2896
2865 4 2896
2896 4 2896
2896 4 2896
2896 4 2896
2943 4 2896
2972 4 2896
3014 4 2896
3037 4 2896
3039 4 2896
3039 4 2896
3043 4 2896
3068 4 2896
3073 4 2896
3074 4 2896
3077 4 2896
3112 4 2896
3143 4 2896
1834 5 2896
2723 5 2896
2732 5 2896
2896 5 2896
2896 5 2896
2896 5 2896
3039 5 2896
2723 6 2896
2732 6 2896
2896 6 2896
.I 2897
.T
Case Study New Code Generation Technique Compilers
.W
Recent developments optimizing techniques
have allowed new design compilers emerge.
Such compiler translates parsed source code into
lower level code sequence steps. Each
step expands higher level statements into blocks
lower level code then performs optimizations
result. Each statement has only one possible
expansion-the task tailoring code take
advantage any special cases done optimizations.
paper provides evidence
strategy can indeed result good object code.
traditionally difficult PL/I concatenate statement
investigated detailed example. set fairly
simple optimizations identified which allow
compiler produce good code. More elaborate optimizations
can further improve object code.
most contexts concatenate statement, code
produced compiler using expansion-optimization
strategy described above compares favorably
code produced conventional PL/I optimizing
compiler.
.B
CACM December, 1977
.A
Carter, J. L.
.K
compiler structure, optimizing compiler, code
generation, PL/I compiler, concatenation, program
optimization, optimization techniques, data flow analysis
.C
4.12 4.13 4.22
.N
CA771203 JB February 1, 1980 3:54 AM
.X
2897 5 2897
2897 5 2897
2897 5 2897
.I 2898
.T
Conceptual Framework Nonprocedural Programming Language
.W
sequential programming language forces
programmer prescribe explicitly order
which operations his program have executed,
even if order not relevant solution
his problem. requirement indicate irrelevant
sequencing can removed if language provides
facilities specifying task nonprocedural
manner. general, program specified
way allow concurrent evaluation. paper describes
conceptual framework high level programming
language providing both nonprocedural sequential
facilities. Within program, nonprocedural
sequential program modules may nested freely.
.B
CACM December, 1977
.A
Kessels, J. L. W.
.K
parallel programming, descriptive programming,
nonprocedural programming, definitional language,
data flow programming, applicative programming
.C
4.20
.N
CA771202 JB February 1, 1980 4:05 AM
.X
2865 4 2898
2866 4 2898
2898 4 2898
2898 4 2898
2972 4 2898
3043 4 2898
3128 4 2898
3144 4 2898
2597 5 2898
2898 5 2898
2898 5 2898
2898 5 2898
2946 5 2898
.I 2899
.T
Survey Computer Science Offerings Small Liberal Arts Colleges.
.W
Recent curricular development computer science
together student terest pursuing
topics computer science beyond usual programming
courses have encouraged small liberal arts colleges
expand their offerings. paper summarizes
results survey taken determine type
computer science programs being offered these
colleges. results indicate over half
these colleges either have no computer science
program offer only programming courses.
.B
CACM December, 1977
.A
Lopez, A. A.
Raymond, R.
Tardiff, R.
.K
computer science, education, curricula, small colleges
.C
1.5
.N
CA771201 JB December 22, 1977 5:53 PM
.X
1720 4 2899
1927 4 2899
2147 4 2899
2163 4 2899
2345 4 2899
2478 4 2899
2594 4 2899
2852 4 2899
2899 4 2899
2899 4 2899
3003 4 2899
3130 4 2899
1771 5 2899
2538 5 2899
2899 5 2899
2899 5 2899
2899 5 2899
.I 2900
.T
Some Theorems Aid Solving File Allocation Problem
.W
file allocation problem-i.e. problem
finding optimal set network sites
which locate copies file-is known be, general,
polynomial complete. Heuristics other
aids finding optimal, near-optimal, solutions
therefore much needed. paper we present
three theorems which can applied priori indicate
certain sites should (or should not)
included optimal allocation.
.B
CACM November, 1977
.A
Grapa, E.
Belford, G. G.
.K
File allocation, computer networks, distributed data management
.C
4.33
.N
CA771116 JB December 27, 1977 8:45 AM
.X
2900 5 2900
2900 5 2900
2900 5 2900
.I 2901
.T
Encoding Method Multifield Sorting Indexing
.W
Sequences character strings order
relation imposed between sequences considered.
encoding scheme described which produces single,
order-preserving string sequence
strings. original sequence can recovered
encoded string, one sequence strings
precedes another if only if encoding first
precedes encoding second. strings
may variable length, without maximum length restriction,
no symbols need reserved control
purposes. Hence any symbol may occur any string.
scheme useful multifield sorting, multifield
indexing, other applications ordering
more than one field important.
.B
CACM November, 1977
.A
Blasgen, M. W.
Casey, R. G.
Eswaran, K. P.
.K
Sorting multifield indexes, lexicographic order, searching, encoding
.C
3.74 4.19 4.33 4.40 5.31
.N
CA771115 JB December 27, 1977 5:55 AM
.X
2140 4 2901
2155 4 2901
2406 4 2901
2452 4 2901
2710 4 2901
2710 4 2901
2715 4 2901
2716 4 2901
2716 4 2901
2717 4 2901
2718 4 2901
2765 4 2901
2765 4 2901
2817 4 2901
2888 4 2901
2901 4 2901
2901 4 2901
2901 4 2901
2957 4 2901
2959 4 2901
2965 4 2901
3087 4 2901
3134 4 2901
3154 4 2901
1976 5 2901
2046 5 2901
2715 5 2901
2901 5 2901
2901 5 2901
2901 5 2901
.I 2902
.T
Dynamic Memory Allocation Computer Simulation
.W
paper investigates performance
35 dynamic memory allocation algorithms used
service simulation programs represented 18
test cases. Algorithm performance measured
terms processing time, memory usage, external memory
fragmentation. Algorithms main taining separate
free space lists each size memory block used
tended perform quite well compared other
algorithms. Simple algorithms operating memory ordered
lists (without any free list) performed surprisingly
well. Algorithms employing power-of-two block sizes
had favorable processing requirements but generally
unfavorable memory usage. Algorithms employing LIFO, FIFO,
memory ordered free lists generally performed
poorly compared others.
.B
CACM November, 1977
.A
Nielsen, N. R.
.K
algorithm performance,dynamic memory allocation, dynamic
memory management, dynamic storage allocation,
garbage collection, list processing, memory allocation,
memory management, programming techniques, simulation,
simulation memory management, simulation techniques,
space allocation, storage allocation
.C
3.74 4.49 5.25 8.1
.N
CA771114 JB December 27, 1977 6:09 AM
.X
1211 4 2902
1211 4 2902
1389 4 2902
1549 4 2902
1552 4 2902
1906 4 2902
2095 4 2902
2162 4 2902
2218 4 2902
2435 4 2902
2498 4 2902
2596 4 2902
2596 4 2902
2596 4 2902
2704 4 2902
2734 4 2902
2747 4 2902
2768 4 2902
2768 4 2902
2773 4 2902
2845 4 2902
2845 4 2902
2845 4 2902
2845 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2902 4 2902
2911 4 2902
2911 4 2902
2911 4 2902
2955 4 2902
2955 4 2902
2955 4 2902
2955 4 2902
2983 4 2902
3000 4 2902
1051 5 2902
1062 5 2902
1184 5 2902
1211 5 2902
1552 5 2902
1879 5 2902
2435 5 2902
2596 5 2902
2734 5 2902
2747 5 2902
2768 5 2902
2902 5 2902
2902 5 2902
2902 5 2902
.I 2903
.T
Improving Programs Introduction Recursion
.W
new technique program transformation,
called "recursion troduction," described
applied two algorithms which solve pattern matching problems.
using recursion troduction, algorithms
which manipulate stack first translated into
recursive algorithms which no stack operations
occur. These algorithms then subjected second
transformation, method recursion elimination
called "tabulation," produce programs very
efficient running time. particular, shown
fast linear pattern matching algorithm Knuth,
Morris, Pratt can derived few steps
simple nonlinear stack algorithm.
.B
CACM November, 1977
.A
Bird, R. S.
.K
program transformation, optimization programs,
recursion elimination, pattern matching algorithms,
stacks, computational induction
.C
4.0 4.2 5.20 5.24 5.25
.N
CA771113 JB December 27, 1977 6:29 AM
.X
2326 4 2903
2457 4 2903
2842 4 2903
2903 4 2903
2192 5 2903
2903 5 2903
2903 5 2903
2903 5 2903
.I 2904
.T
Algorithm Reduction Operator Strength
.W
simple algorithm which uses indexed temporary
table perform reduction operator strength
strongly connected regions presented. Several extensions,
including linear function test replacement,
discussed. These algorithms should fit well into
integrated package local optimization algorithms.
.B
CACM November, 1977
.A
Cocke, J.
.K
compilers, optimization compiled code, program analysis,
operator strength reduction, test replacement,
strongly connected region
.C
4.12 5.24 5.32
.N
CA771112 JB December 27, 1977 6:34 AM
.X
2904 5 2904
2904 5 2904
2904 5 2904
.I 2905
.T
Perfect Hashing Functions: Single
Probe Retrieving Method Static Sets
.W
refinement hashing which allows retrieval
item static table single probe
considered. Given set identifiers, two methods
presented building, mechanical
way, perfect hashing functions, i.e. functions transforming
elements into unique addresses.
first method, "quotient reduction" method,
shown complete sense every
set smallest table which elements
can stored which they can retrieved
using perfect hashing function constructed
method can found. However, nonuniformly
distributed sets, method can give rather sparse tables.
second method, "remainder reduction"
method, not complete above sense, but seems
give minimal (or almost minimal) tables
every kind set. two techniques applicable
directly small sets. Some methods extend
these results larger sets also presented. rough
comparison ordinary hashing given which
shows method can used conveniently
several practical applications.
.B
CACM November, 1977
.A
Sprugnoli, R.
.K
hashing, hashing methods, hash coding, direct addressing,
identifier-to-address transformations,
perfect hashing functions, perfect hash coding, reduction, scatter storage
.C
3.7 3.74 4.34
.N
CA771111 JB December 27, 1977 6:45 AM
.X
2905 4 2905
2905 5 2905
2905 5 2905
2905 5 2905
3041 5 2905
3126 5 2905
3176 5 2905
829 5 2905
2846 6 2905
2905 6 2905
2905 6 2905
2905 6 2905
.I 2906
.T
Very High Level Programming Language Data Processing Applications
.W
Application development today too labor-in tensive.
recent years, very high-level languages
have been increasingly explored solution
problem. Business Definition Language (BDL)
such language, one aimed business data processing
problems. concepts BDL mimic those
which have evolved through years businesses using
manual methods. results three different
sublanguages components: one defining business
forms, one describing business organization,
one writing calculations.
.B
CACM November, 1977
.A
Hammer, M.
owe, W. G.
Kruskal, V. J.
Wladawsky, I.
.K
very high level language, nonprocedural language,
data flow language, business application, business
data processing, structured programming, modular programming,
format specification, design methodology
.C
3.50 4.22 4.32
.N
CA771110 JB December 27, 1977 7:06 AM
.X
1135 4 2906
1136 4 2906
493 4 2906
2710 4 2906
2765 4 2906
2888 4 2906
2906 4 2906
729 4 2906
2906 5 2906
2906 5 2906
2906 5 2906
616 5 2906
.I 2907
.T
Optimal Approach Recursive Programs
.W
classical fixed poin t approach toward recursive
programs suggests choosing "least defined
fixed poin t" most appropriate solution recursive
program. new approach described which
troduction " optimal fixed point," which, contrast
least defined fixed poin t, embodies
maximal amount valuable information embedded
program. practical implications approach
discussed techniques proving properties
optimal fixed poin t given. presentation
informal, emphasis examples.
.B
CACM November, 1977
.A
Manna, Z.
Shamir, A.
.K
recursive programs, fixed poin ts, least fixedpoints,
optimal fixed poin ts, proof techniques
.C
5.24
.N
CA771109 JB December 27, 1977 7:13 AM
.X
2907 5 2907
2907 5 2907
2907 5 2907
.I 2908
.T
Note Reflection-Free Permutation Enumeration
.B
CACM November, 1977
.A
Roy, M. K.
.K
permutations, reflection-free generation
.C
5.30
.N
CA771108 JB December 27, 1977 7:17 AM
.X
2044 4 2908
2189 4 2908
2417 4 2908
2505 4 2908
2874 4 2908
2908 4 2908
2908 4 2908
2908 4 2908
3115 4 2908
2505 5 2908
2884 5 2908
2908 5 2908
2908 5 2908
2908 5 2908
521 5 2908
.I 2909
.T
Can We Do Unnecessary Diversity
Notation Syntactic Definitions?
.B
CACM November, 1977
.A
Wirth, N.
.K
syntactic description language, extended BNF
.C
4.20
.N
CA771107 JB December 27, 1977 7:20 AM
.X
2909 5 2909
2909 5 2909
2909 5 2909
.I 2910
.T
Equivalence Hough Curve Detection Template Matching
.B
CACM November, 1977
.A
Stockman, G. C.
.K
picture processing, pattern recognition, curve
detection, Hough transformation, template matching
.C
3.63 6.9
.N
CA771106 JB December 27, 1977 7:23 AM
.X
2788 4 2910
2910 4 2910
2910 4 2910
2400 5 2910
2788 5 2910
2910 5 2910
2910 5 2910
2910 5 2910
.I 2911
.T
Anomalous Behavior Fifty-Percent
Rule Dynamic Memory Allocation
.W
paper reports simulation data showing
that, dynamic memory allocation, average
free-to-allocated-block ratio can differ considerably
both directions predictions
50 percent rule. new derivation given,
shown previous derivations make assumption
may violated frequently. basis simulation
data derivation, hypothesized
anomalous behavior results combined
effects systematic placement statistics
release process. Additional simulations support
hypothesis. Systematic placement, which
refers natural convention always allocating
storage requests against same end free
block selected allocation strategy, tends
order blocks within contiguous groups according
their allocation time. degree anomalous behavior
depends extent which allocated blocks
released order their allocation.
non-Markovian release processes, extent
correlation between allocation order release order
varies approximately inversely coefficient
variation memory residence time distribution.
simulations show allocation efficiency
depends strongly residence time distribution; efficiency
decreases distribution's coefficient
variation increases. Some practical implications briefly discussed.
.B
CACM November, 1977
.A
Shore, J. E.
.K
dynamic memory allocation, storage fragmentation,
fifty-percent rule, first-fit, simulation
.C
3.73 4.32 4.34 4.35
.N
CA771105 JB December 27, 1977 7:37 AM
.X
2095 4 2911
2218 4 2911
2498 4 2911
2596 4 2911
2596 4 2911
2734 4 2911
2747 4 2911
2768 4 2911
2845 4 2911
2902 4 2911
2902 4 2911
2902 4 2911
2911 4 2911
2911 4 2911
2911 4 2911
2911 4 2911
2911 4 2911
2911 4 2911
2911 4 2911
2955 4 2911
2955 4 2911
2983 4 2911
3000 4 2911
972 4 2911
273 5 2911
1879 5 2911
2435 5 2911
2498 5 2911
2734 5 2911
2773 5 2911
2911 5 2911
2911 5 2911
2911 5 2911
2983 5 2911
.I 2912
.T
Concurrent Reading Writing
.W
problem sharing data among asynchronous
process considered. assumed only
one process time can modify data, but concurrent
reading writing permitted. Two general
theorems proved, some algorithms presented
illustrate their use. These include solution
general problem which read repeated if
might have obtained incorrect result,
two techniques transmitting messages between processes.
These solutions do not assume any synchronizing
mechanism other than data which can written
one process read other processes.
.B
CACM November, 1977
.A
Lamport, L.
.K
asynchronous multiprocessing, multiprocess synchronization,
readers/writers problem, shared data
.C
4.32 5.24
.N
CA771104 JB December 27, 1977 7:47 AM
.X
2320 4 2912
2597 4 2912
2777 4 2912
2851 4 2912
2895 4 2912
2912 4 2912
2946 4 2912
3128 4 2912
2150 5 2912
2912 5 2912
2912 5 2912
2912 5 2912
3128 5 2912
2150 6 2912
2376 6 2912
2436 6 2912
2597 6 2912
2865 6 2912
2866 6 2912
2870 6 2912
2912 6 2912
3082 6 2912
.I 2913
.T
Aliasing Problem Computer-Generated Shaded Images
.W
Certain defects, such jagged edges
disappearing detail, have long been annoyance
digitally generated shaded images. Although increasing
resolution defocusing display can
attenuate them, understanding these defects leads
more effective methods. paper explains
observed defects terms aliasing phenomenon
inherent sampled signals discusses prefiltering
recognized cure. method evaluating filters
presented, application prefiltering
hidden-surface algorithms discussed, implementation
filtering tiler shown accompanied
examples its effectiveness.
.B
CACM November, 1977
.A
Crow, F. C.
.K
aliasing, computer graphics, convolutional
filtering, hidden-surface removal, sampling
.C
8.2
.N
CA771103 JB December 27, 1977 7:56 AM
.X
2816 4 2913
2828 4 2913
2827 4 2913
2913 4 2913
3047 4 2913
2751 5 2913
2913 5 2913
2913 5 2913
2913 5 2913
.I 2914
.T
Use LRU Stack Depth Distribution
Simulation Paging Behavior
.W
Two families probability distributions were
needed use virtual memory simulation
model: headway between page fault distributions,
working set size distributions. All members
both families can derived LRU stack depth distribution.
Simple expressions computation
both kinds distributions given. Finally, examples
given both families distributions
computed published stack depth distribution.
.B
CACM November, 1977
.A
Turner, R.
Strecker, B.
.K
virtual memory, paging, LRU stack, working set, headway
between page faults, computer system simulation
.C
4.35 4.6 8.1
.N
CA771102 JB December 27, 1977 8:04 AM
.X
2914 5 2914
2914 5 2914
2914 5 2914
.I 2915
.T
Considerations Future Programming Language Standards Activities
.W
paper reviews current state programming
language standards activities respect
anomalies which exist between various published
proposed standards Fortran, Cobol,
PL/I, Basic. Proposals made inclusion
formalisms within future standards
extension standards include additional items
such error conditions documentation.
.B
CACM November, 1977
.A
Lee, J. A. N.
.K
programming languages, standards, formalisms,
formal descriptions, Fortran, Cobol, PL/I, Basic,
Vienna Definition Language (VDL)
.C
2.4 4.2 4.29 4.6 5.23
.N
CA771101 JB December 27, 1977 8:10 AM
.X
2154 4 2915
2299 4 2915
2501 4 2915
2629 4 2915
2915 4 2915
2915 4 2915
3060 4 2915
3114 4 2915
1502 5 2915
1900 5 2915
2915 5 2915
2915 5 2915
2915 5 2915
.I 2916
.T
Fast String Searching Algorithm
.W
algorithm presented searches
location, "i," first occurrence
character string, "pat," another string, "string."
During search operation, characters
pat matched starting last character
pat. information gained starting match
end pattern often allows algorithm
proceed large jumps through text being
searched. Thus algorithm has unusual property that,
most cases, not all first characters
string inspected. number characters actually
inspected (on average) decreases
function length pat. random English
pattern length 5, algorithm typically
inspect i/4 characters string before finding match
i. Furthermore, algorithm has been implemented
so (on average) fewer than i+patlen machine
instructions executed. These conclusions
supported empirical evidence theoretical
analysis average behavior algorithm.
worst case behavior algorithm linear
i+patlen, assuming availability array space
tables linear patlen plus size alphabet.
.B
CACM October, 1977
.A
Boyer, R. S.
.K
bibliographic search, computational complexity,
information retrieval, linear time bound, pattern
matching, text editing
.C
3.74 4.40 5.25
.N
CA771010 JB December 27, 1977 9:43 AM
.X
2916 4 2916
2746 5 2916
2916 5 2916
2916 5 2916
2916 5 2916
3162 5 2916
2916 6 2916
.I 2917
.T
SITAR: Interactive Text Processing
System Small Computers (Corrigendum)
.B
CACM October, 1977
.A
Schneider, B. R. Jr.
Watts, R. M.
.N
CA771009 JB December 28, 1977 5:58 AM
.X
2917 5 2917
2917 5 2917
2917 5 2917
.I 2918
.T
Multiprocessor Memory Organization Memory Interference
.W
structure shared memory multiprocessor
computer system examined particular
attention nonin terleaved memory. Alternative memory
organizations compared shown
home memory organization, which each processor
associated one more memories which
its address space concentrated, quite effective
reducing memory terference. Home memory organization
shown particularly suited certain specialized
computation problems well possess
advantages terms terference reliability
general purpose computation. Results terleaved
memory drawn previous work used
comparison. Trace-driven simulations used
verify conclusions analysis.
.B
CACM October, 1977
.A
Smith, A. J.
.K
memory terference, interleaving, multiprocessing,
trace-driven simulation, queueing theory, shared
memory
.C
4.30 4.32 6.34
.N
CA771008 JB December 27, 1977 10:28 AM
.X
2918 4 2918
3119 4 2918
2859 5 2918
2918 5 2918
2918 5 2918
2918 5 2918
.I 2919
.T
Programmer's Workbench-A Machine Software Development
.W
almost all software development projects
assumption made program development
function done same machine which
eventual system run. only
production machine unavailable its programming
environment totally inadequate alternatives
considered. paper suggested
there many other situations would
advantageous separate program development
main tenance function onto specialized computer
which dedicated purpose. Such computer
here called Programmer's Workbench. four
basic sections paper troduce subject,outline
general concept, discuss areas such
approach may prove beneficial, describe
operational system utilizing concept.
.B
CACM October, 1977
.A
Ivie, E. L.
.K
computer configurations, computer networks, software
development, software engineering, software
main tenance, UNIX
.C
3.2 3.5 3.7 3.8 4.0
.N
CA771007 JB December 27, 1977 10:37 AM
.X
2626 4 2919
2786 4 2919
2840 4 2919
2919 4 2919
2919 4 2919
2919 4 2919
3017 4 2919
3110 4 2919
3174 4 2919
2536 5 2919
2593 5 2919
2629 5 2919
2919 5 2919
2919 5 2919
2919 5 2919
.I 2920
.T
Game Interpretation Deadlock Avoidance Problem
.W
deadlock avoidance problem may defined
informally determination, some
priori information processes, resources, operating
system, etc., "safe situations" which
may realized without endangering smooth running
system. each process specifies its
future needs flowchart need-defined steps, global
approach phenomenon its terpretation
game between operating system processes
allows formalization risk safety concepts.
bipartite graph representation game may
then used construct explicitly set safe
states study their properties.
.B
CACM October, 1977
.A
Devillers, R.
.K
operating system, multiprogramming, time-sharing,
resource allocation, deadlock, terlock, deadly
embrace, deadlock avoidance, flowchart
.C
4.30 4.32
.N
CA771006 JB December 27, 1977 10:50 AM
.X
2228 4 2920
2280 4 2920
2379 4 2920
2482 4 2920
2740 4 2920
2851 4 2920
2920 4 2920
1877 5 2920
2920 5 2920
2920 5 2920
2920 5 2920
.I 2921
.T
Regular Right Part Grammars Their Parsers
.W
paper troduces alternative context-free
grammars called regular right part (RRP)
grammars, which resemble PASCAL syntax diagrams. Formally,
RRP grammars have production right parts,
which nondeterministic finite state machines (FSMs),
and, special case, regular expressions,
since these can converted FSMs. RRP grammars
describe syntax programming languages more
concisely more understandably than possible
CF grammars. Also troduced class parsers,
RRP LR(m, k) parsers, which includes CF LR(k) parsers
provides same advantages. Informally,
RRP LR(m, k) parser can determine right end
each handle considering most k symbols
right handle left end, after
right end has been found, considering most
m symbols left handle. mechanism
determining left end required because there
no bound length handle.
.B
CACM October, 1977
.A
LaLonde, W. R.
.K
finite state machines (automata), regular expressions,
syntax diagrams,LR(k) grammars, parser construction,
parsing, programming languages, language generation,
formal definition, compilers, translators, scanners
.C
4.2 5.21 5.23
.N
CA771005 JB December 27, 1977 11:01 AM
.X
1989 4 2921
2060 4 2921
2179 4 2921
2581 4 2921
2698 4 2921
2739 4 2921
2795 4 2921
2921 4 2921
2921 4 2921
3087 4 2921
3154 4 2921
1989 5 2921
2110 5 2921
2921 5 2921
2921 5 2921
2921 5 2921
.I 2922
.T
Two-Level Control Structure Nondeterministic Programming
.W
basic ideas nondeterministic programming
critically reconsidered single out
proper attitude programming style language allowing
direct control nondeterministic features.
proposed attitude aims retaining purity
nondeterministic formulation search processes
one level (the attempt level), deferring coordination
problem solving efforts another (the
choice level). feasibility recognizing these two
levels discussed, stressing structure
managed choice level free contexts.
leaves computational environments,
each holding alternative under inspection, while
other nodes associated choice poin ts.
According proposed programming style, generative
function associated each choice poin t,
which expresses desired choice strategy. main
advantage approach localization
search strategies: Each nonterminal node
tree keeps track state computation
choice poin t last interrogated,
holding same time strategy coordinate
available alternatives. Examples given
term ND-Lisp, extension Lisp designed
implemented according these guidelines.
.B
CACM October, 1977
.A
Montangero, C.
Pacini, G.
Turini, F.
.K
nondeterministic programming, artificial telligence,
control structures, backtracking, search
strategy planning, context tree
.C
3.64 4.22
.N
CA771004 JB December 27, 1977 11:30 AM
.X
2625 4 2922
2922 4 2922
3081 4 2922
3101 4 2922
3112 4 2922
2438 5 2922
2922 5 2922
2922 5 2922
2922 5 2922
.I 2923
.T
High-Level Data Flow Analysis
.W
contrast predominant use low-level
termediate text, high-level data flow analysis
deals programs essentially source level
exploits control flow information implicit
parse tree. need high-level flow analysis
arises several aspects recent work
advanced methods program certification optimization.
paper proposes simple general method
high-level data flow analysis allows free use
escape jump statements, avoids large graphs
compiling large programs, facilitates updating
data flow information reflect program changes,
derives new global information helpful solving
many familiar global flow analysis problems.
illustrative application live variable analysis presented.
Many graphs involved constructed
analyzed before any programs compiled, thus avoiding
certain costs low-level methods incur
repeatedly compile time.
.B
CACM October, 1977
.A
Rosen, B. K.
.K
data flow analysis, high-level language, control
flow graph, structured programming, escapes, exits,
jumps, goto statements
.C
5.24 4.12 4.22
.N
CA771003 JB December 27, 1977 11:41 AM
.X
1807 4 2923
2034 4 2923
2290 4 2923
2579 4 2923
2579 4 2923
2923 4 2923
2923 4 2923
2945 4 2923
1807 5 2923
1947 5 2923
2923 5 2923
2923 5 2923
2923 5 2923
.I 2924
.T
Interactive Computer Graphics Approach Surface Representation
.W
teractive computer graphics method has been
developed rapid generation arbitrary
shaped three-dimensional surfaces. method synthesis
spline theory algorithms, teractive
means man-machine communication, software
static dynamic graphics display. basic
technique employed modified lofting method
which sectional curves represented uniform
B-splines surface terpolated between sections
Cardinal splines. Among features
method algorithms which enable teractive
modification B-spline representation
sectional curves. all stages process,
spatial information graphically displayed
user. Complex surfaces can created combination
number shapes have been separately
generated automatically joined. system has been
successfully terfaced variety analytical
routines structural, medical graphical applications.
.B
CACM October, 1977
.A
Wu, Sheng-Chuan
Abel, J. F.
Greenberg, D. P.
.K
computer graphics, three-dimensional surface representation,
splines, lofting,finite element input
methods
.C
3.20 3.23 3.34 8.1 8.2
.N
CA771002 JB December 27, 1977 11:53 AM
.X
2924 5 2924
2924 5 2924
2924 5 2924
.I 2925
.T
Optimal Surface Reconstruction Planar Contours
.W
many scientific technical endeavors,
three-dimensional solid must reconstructed
serial sections, either aid comprehension
object's structure facilitate its
automatic manipulation analysis. paper presents
general solution problem constructing
surface over set cross-sectional contours.
surface, composed triangular tiles,
constructed separately determining optimal
surface between each pair consecutive contours.
Determining such surface reduced problem
finding certain minimum cost cycles directed
toroidal graph. new fast algorithm finding such
cycles utilized. Also developed closed-form
expression, term number contour poin ts,
upper bound number operations required
execute algorithm. illustrated example which
involves construction minimum area surface
describing human head included.
.B
CACM October, 1977
.A
Fuchs, H.
Kedem,Z. M.
Uselton, S. P.
.K
surface reconstruction, contour data, serial sections,
three-dimensional computer graphics, minimum
cost paths, continuous tone displays
.C
5.25 5.32 8.2
.N
CA771001 JB December 27, 1977 12:40 PM
.X
2925 5 2925
2925 5 2925
2925 5 2925
.I 2926
.T
Pagination B*-Trees Variable-Length Records
.W
strategy presented pagination B*-trees
variable-length records. If records
each length uniformly distributed within
file, if wide distribution record lengths
exists within file, then strategy results shallow
trees fast access times. performance
strategy application presented, compared
another strategy, analyzed.
.B
CACM September, 1977
.A
McCreight, E. M.
.K
B-tree, index, database, tree storage structure, searching
.C
3.73 4.33 4.34
.N
CA770908 JB December 27, 1977 12:46 PM
.X
2926 5 2926
2926 5 2926
2926 5 2926
.I 2927
.T
Some New Upper Bounds Generation Prime Numbers
.W
Given integer N, computational
complexity finding all primes less than
N? modified sieve Eratosthenes using doubly linked
lists yields algorithm O(N) arithmetic
complexity. upper bound shown equivalent
theoretical lower bound sieve methods
without preprocessing. Use preprocessing techniques
involving space-time additive-multiplicative
tradeoffs reduces upper bound O(N/log logN)
bit complexity O(N logN log log logN).
storage requirement described using O(N logN/log logN) bits well.
.B
CACM September, 1977
.A
Mairson, H. G.
.K
computational complexity, sieve, prime number generation,
number theory, linked list, preprocessing,
balancing
.C
5.25 5.39
.N
CA770907 JB December 27, 1977 12:55 PM
.X
1841 4 2927
1841 4 2927
1967 4 2927
2120 4 2927
2120 4 2927
2927 4 2927
2927 4 2927
2927 4 2927
2927 4 2927
2927 4 2927
1537 5 2927
1538 5 2927
1539 5 2927
1841 5 2927
1840 5 2927
2927 5 2927
2927 5 2927
2927 5 2927
3037 5 2927
2732 6 2927
2927 6 2927
.I 2928
.T
Hardware Estimation Process' Primary Memory Requirements
.W
minor hardware extension Honeywell
6180 processor demonstrated allow primary
memory requirements process Multics approximated.
additional hardware required
estimate computed consists program accessible
register containing miss rate
associative memory used page table words.
primary memory requirement estimate employed
experimental version Multics control
level multiprogramming system bill
memory usage. resulting system's tuning parameters
display configuration insensitivity,
conjectured system would also track shifts
referencing characteristics its workload
keep system tune.
.B
CACM September, 1977
.A
Giffor, D. K.
.K
primary memory requirement, virtual memory, level
multiprogramming, associative memory, working
set, resource allocation, LRU stack model, referencing characteristics
.C
4.32 4.35 4.6 6.36
.N
CA770906 JB December 27, 1977 1:05 PM
.X
1892 4 2928
1901 4 2928
2085 4 2928
2095 4 2928
2218 4 2928
2277 4 2928
2319 4 2928
2329 4 2928
2358 4 2928
2373 4 2928
2380 4 2928
2434 4 2928
2499 4 2928
2501 4 2928
2582 4 2928
2629 4 2928
2669 4 2928
2828 4 2928
2847 4 2928
2863 4 2928
2868 4 2928
2881 4 2928
2928 4 2928
2928 4 2928
2928 4 2928
2928 4 2928
2928 4 2928
2951 4 2928
2996 4 2928
3006 4 2928
3046 4 2928
3067 4 2928
3098 4 2928
3107 4 2928
3127 4 2928
1751 5 2928
2277 5 2928
2380 5 2928
2522 5 2928
2569 5 2928
2928 5 2928
2928 5 2928
2928 5 2928
.I 2929
.T
Analysis Inline Substitution Structured Programming Language
.W
optimization technique known inline substitution
analyzed. optimization consists
replacing procedure invocation modified copy
procedure body. general problem
using inline substitution minimize execution time
subject size constrain ts formulated,
approximate algorithmic solution proposed. algorithm
depends run-time statistics
program optimized. Preliminary results
CLU structured programming language indicate that,
programs low degree recursion, over 90
percent all procedure calls can eliminated,
little increase size compiled code
small savings execution time. Other conclusions
based these results also presented.
.B
CACM September, 1977
.A
Scheifler, R. W.
.K
inline substitution, open coding, open compilation,
program optimization, compilers, structured
programming languages, run-time statistics
.C
4.12
.N
CA770905 JB December 27, 1977 1:23 PM
.X
1086 4 2929
1132 4 2929
1234 4 2929
1263 4 2929
1265 4 2929
1270 4 2929
1323 4 2929
1358 4 2929
1379 4 2929
1380 4 2929
1453 4 2929
1464 4 2929
1484 4 2929
1491 4 2929
1498 4 2929
1613 4 2929
1614 4 2929
1781 4 2929
1825 4 2929
1860 4 2929
2083 4 2929
2178 4 2929
2179 4 2929
2252 4 2929
2325 4 2929
2341 4 2929
2546 4 2929
2645 4 2929
2652 4 2929
2684 4 2929
2842 4 2929
2929 4 2929
2934 4 2929
3069 4 2929
669 4 2929
679 4 2929
691 4 2929
761 4 2929
949 4 2929
989 4 2929
2929 5 2929
2929 5 2929
2929 5 2929
3184 5 2929
.I 2930
.T
GRE Advanced Test Computer Science
.W
report describes Advanced Test
Computer Science which recently troduced
Graduate Record Examination Program. GRE program
described general, and, events leading
establishment Advanced Computer Science
Test discussed. Content specifications
their rationale given. set sample questions included.
.B
CACM September, 1977
.A
Austing, R. H.
.K
education, computer science, graduate school
admissions, test development examinations
.C
1.5
.N
CA770903 JB December 27, 1977 1:32 PM
.X
2930 5 2930
2930 5 2930
2930 5 2930
.I 2931
.T
Logic Programming Languages
.W
Logic has been long terested whether answers
certain questions computable principle,
since outcome puts bounds possibilities
formalization. More recently, precise comparisons
efficiency decision methods have become available
through developments complexity theory.
These, however, applications logic, big question
whether methods logic have significance
other direction more applied parts
computability theory. Programming languages offer
obvious opportunity their syntactic formalization
well advanced; however, semantical theory
can hardly said complete. Though we have
many examples, we have still give wide-ranging
mathematical answers these queries: machine?
computable process? (or
well) does machine simulate process? Programs naturally
enter giving descriptions processes.
definition precise meaning program
then requires us explain objects
computation (in way, statics problem)
they transformed (the dynamics).
So far theories automata nets, though
most teresting dynamics, have formalized only
portion field, there has been perhaps too
much concentration finite-state algebraic
aspects. would seem understanding higher-level
program features involves us infinite
objects forces us pass through several levels
explanation go conceptual ideas
final simulation real machine. These levels
can made mathematically exact if we can find
right abstractions represent necessary structures.
experience many independent workers
method data types lattices (or partial
orderings) under information content ordering,
their continuous mappings, has demonstrated
flexibility approach providing definitions
proofs, which clean without undue dependence
implementations. Nevertheless much remains
done showing abstract conceptualizations
can (or cannot) actualized before we can say
we have unified theory.
.B
CACM September, 1977
.A
Scott, D. S.
.K
logic, programming languages, automata, denotational
semantics, a-calculus models, computability,
partial functions, approximation, function spaces
.C
1.2 4.20 5.21 5.24 5.27
.N
CA770902 JB December 28, 1977 6:49 AM
.X
2931 5 2931
2931 5 2931
2931 5 2931
.I 2932
.T
Complexity Computations
.W
framework research theory complexity
computations described, emphasizing
terrelation between seemingly diverse problems
methods. Illustrative examples practical
theoretical significance given. Directions
new research discussed.
.B
CACM September, 1977
.A
Rabin, M. O.
.K
complexity computations, algebraic complexity,
tractable problems, probabilistic algorithms
.C
5.25
.N
CA770901 JB December 28, 1977 6:54 AM
.X
2932 5 2932
2932 5 2932
2932 5 2932
.I 2933
.T
Another Advantage Keyword Notation
Parameter Communication Subprograms
.B
CACM August, 1977
.A
Francez, N.
.K
Keyword notation, positional notation, parameters,
transmission, subprograms, readability, call
value, call reference, call name, compile-time errors
.C
4.2 4.20 4.22
.N
CA770810 JB December 28, 1977 6:57 AM
.X
2757 4 2933
2933 4 2933
2933 4 2933
2630 5 2933
2757 5 2933
2933 5 2933
2933 5 2933
2933 5 2933
.I 2934
.T
Comment Computing k Shortest Paths Graph
.B
CACM August, 1977
.A
Lawler, E. L.
.K
graph, network, shortest path, algorithm, ranking
.C
5.32
.N
CA770809 JB December 28, 1977 7:00 AM
.X
1086 4 2934
1132 4 2934
1234 4 2934
1263 4 2934
1265 4 2934
1270 4 2934
1323 4 2934
1358 4 2934
1379 4 2934
1380 4 2934
1453 4 2934
1464 4 2934
1484 4 2934
1491 4 2934
1498 4 2934
1613 4 2934
1614 4 2934
1781 4 2934
1825 4 2934
1860 4 2934
2083 4 2934
2178 4 2934
2179 4 2934
2252 4 2934
2325 4 2934
2341 4 2934
2546 4 2934
2645 4 2934
2652 4 2934
2684 4 2934
2842 4 2934
2929 4 2934
2934 4 2934
3069 4 2934
669 4 2934
679 4 2934
691 4 2934
761 4 2934
949 4 2934
989 4 2934
2934 5 2934
2934 5 2934
2934 5 2934
3184 5 2934
.I 2935
.T
Production Employment Ph.D.'s
Computer Science-1976 (Corrigendum)
.B
CACM August, 1977
.A
Taulbee, O. E.
Conte, S. D.
.N
CA770808 JB December 28, 1977 7:04 AM
.X
2935 5 2935
2935 5 2935
2935 5 2935
.I 2936
.T
Efficient Data Structure Simulation Event Set
.W
Recently algorithms have been presented
realization event scheduling routines suitable
general purpose discrete event simulation systems.
Several exhibited performance superior
commonly used simple linked list algorithms.
paper new event scheduling algorithm presented
which improves two aspects best previously
published algorithms. First, new algorithm's
performance quite insensitive skewed distributions,
second, its worst-case complexity O(
n), n number events set. Furthermore,
tests conducted estimate average
complexity showed nearly independent n.
.B
CACM August, 1977
.A
Franta, W. R.
Maly, K.
.K
simulation, time flow mechanisms, event
scanning mechanisms, multilinked lists
.C
3.34 4.22 5.5 8.1
.N
CA770807 JB December 28, 1977 7:15 AM
.X
2844 4 2936
2844 4 2936
2936 4 2936
2936 4 2936
3051 4 2936
3064 4 2936
3064 4 2936
3109 4 2936
2742 5 2936
2767 5 2936
2936 5 2936
2936 5 2936
2936 5 2936
3064 5 2936
1846 6 2936
1939 6 2936
2742 6 2936
2767 6 2936
2936 6 2936
.I 2937
.T
Experimental Evaluation Data Type Conventions
.W
language which programs written
can have substantial effect reliability
resulting programs. paper discusses experiment
compares programming reliability
subjects using statically typed language "typeless"
language. Analysis number errors
number runs containing errors shows that,
least one environment, use statically
typed language can increase programming reliability.
Detailed analysis errors made subjects
programming solutions reasonably small problems
shows subjects had difficulty manipulating
representation data.
.B
CACM August, 1977
.A
Gannon, J. D.
.K
data types, experimentation, language
design, redundancy, reliable software
.C
4.22
.N
CA770806JB December 28, 1977 7:32 AM
.X
2411 4 2937
2709 4 2937
2889 4 2937
2937 4 2937
2989 4 2937
3005 4 2937
3025 4 2937
3101 4 2937
2138 5 2937
2937 5 2937
2937 5 2937
2937 5 2937
.I 2938
.T
Toward Discipline Real-Time Programming
.W
Programming divided into three major categories
increasing complexity reasoning
program validation: sequential programming, multiprogramming,
real-time programming. adhering
strict programming discipline using suitable
high-level language molded after discipline,
complexity reasoning concurrency execution
time constrain ts may drastically reduced.
may only practical way make real-time
systems analytically verifiable ultimately
reliable. possible discipline outlined
expressed terms language Modula.
.B
CACM August, 1977
.A
Wirth, N.
.K
multiprogramming, real-time programming, process synchronization,
processor sharing, program validation,
Modula
.C
3.80 4.22
.N
CA770805 JB December 28, 19777:39 AM
.X
2938 4 2938
2946 4 2938
3128 4 2938
2866 5 2938
2938 5 2938
2938 5 2938
2938 5 2938
.I 2939
.T
Abstraction Mechanisms CLU
.W
CLU new programming language designed support
use abstractions program construction.
Work programming methodology has led realization
three kinds abstractions-procedural,
control, especially data abstractions-are useful
programming process. these, only
procedural abstraction supported well conventional
languages, through procedure subroutine.
CLU provides, addition procedures, novel linguistic
mechanisms support use data
control abstractions. paper provides troduction
abstraction mechanisms CLU.
means programming examples, utility three
kinds abstractions program construction
illustrated, shown CLU programs may
written use implement abstractions.
CLU library, which permits incremental program development
complete type checking performed compile
time, also discussed.
.B
CACM August, 1977
.A
Liskov, B.
Snyder, A.
Atkinson, R.
Schaffert, C.
.K
programming languages, data types, data abstractions,
control abstractions, programming methodology,
separate compilation
.C
4.0 4.12 4.20 4.22
.N
CA770804 JB December 28, 1977 7:49 AM
.X
2319 4 2939
2480 4 2939
2594 4 2939
2709 4 2939
2868 4 2939
2939 4 2939
2939 4 2939
2941 4 2939
2972 4 2939
3155 4 2939
2204 5 2939
2558 5 2939
2939 5 2939
2939 5 2939
2939 5 2939
3031 5 2939
3105 5 2939
3148 5 2939
3150 5 2939
1471 6 2939
1860 6 2939
2060 6 2939
2625 6 2939
2632 6 2939
2704 6 2939
2817 6 2939
2842 6 2939
2865 6 2939
2868 6 2939
2939 6 2939
2939 6 2939
2939 6 2939
2939 6 2939
2940 6 2939
2941 6 2939
2943 6 2939
2958 6 2939
3068 6 2939
3073 6 2939
3073 6 2939
3148 6 2939
.I 2940
.T
Abstraction Verification Alphard: Defining
Specifying Iteration Generators
.W
Alphard "form" provides programmer
great deal control over implementation
abstract data types. paper abstraction techniques
extended simple data representation
function definition iteration statement,
most important poin t interaction between data
control structure language itself.
means specializing Alphard's loops operate
abstract entities without explicit dependence
representation those entities troduced.
Specification verification techniques allow
properties generators such iterations
expressed form proof rules developed.
Results obtained common special
cases these loops essentially identical
corresponding constructs other languages.
means showing generator terminate also provided.
.B
CACM August, 1977
.A
Shaw, M.
Wulf, W. A.
.K
abstraction representation, abstract data types,
assertions, control specialization, correctness,
generators,invariants, iteration statements, modular
decomposition, program specifications, programming
languages, programming methodology, proofs correctness, types, verification
.C
4.20 5.24
.N
CA770803 JB December 28, 1977 7:59 AM
.X
2940 5 2940
2940 5 2940
2940 5 2940
3150 5 2940
2060 6 2940
2704 6 2940
2842 6 2940
2939 6 2940
2940 6 2940
2941 6 2940
2943 6 2940
3073 6 2940
3148 6 2940
.I 2941
.T
Early Experience Mesa
.W
experiences Mesa's first users-primarily
its implementers-are discussed, some implications
Mesa similar programming languages suggested.
specific topics addressed are: module structure
its use defining abstractions, data-structuring
facilities Mesa, equivalence algorithm
types type coercions, benefits type system
why breached occasionally,
difficulty making treatment variant records safe.
.B
CACM August, 1977
.A
Geschke, C. M.
Morris, J. H. Jr.
Satterthwaite, E. H.
.K
programming languages, types, modules,
data structures, systems programming
.C
4.22
.N
CA770802 JB December 28, 1977 8:07 AM
.X
1458 4 2941
1523 4 2941
1603 4 2941
1698 4 2941
1747 4 2941
1748 4 2941
1854 4 2941
1877 4 2941
1960 4 2941
2377 4 2941
2378 4 2941
2497 4 2941
2558 4 2941
2625 4 2941
2632 4 2941
2704 4 2941
2723 4 2941
2738 4 2941
2840 4 2941
2866 4 2941
2868 4 2941
2869 4 2941
2939 4 2941
2941 4 2941
2941 4 2941
2941 4 2941
2941 4 2941
2956 4 2941
2958 4 2941
3004 4 2941
3030 4 2941
3030 4 2941
3105 4 2941
3144 4 2941
1471 5 2941
2356 5 2941
2558 5 2941
2651 5 2941
2941 5 2941
2941 5 2941
2941 5 2941
3150 5 2941
2060 6 2941
2704 6 2941
2842 6 2941
2939 6 2941
2940 6 2941
2941 6 2941
2943 6 2941
3073 6 2941
3148 6 2941
.I 2942
.T
Algol-Based Implementation SNOBOL 4 Patterns
.B
CACM July, 1977
.A
Brownlee, J. N.
.K
patterns SNOBOL 4, pattern matching, string processing,
pattern implementation, algorithms Pascal
.C
4.29
.N
CA770710 JB December 28, 1977 8:15 AM
.X
2942 5 2942
2942 5 2942
2942 5 2942
.I 2943
.T
Lucid, Nonprocedural Language Iteration
.W
Lucid formal system which programs
can written proofs programs carried out.
proofs particularly easy follow straightforward
produce because statements
Lucid program simply axioms which proof
proceeds (almost) conventional logical reasoning,
help few axioms rules inference
special Lucid functions. programming
language, Lucid unconventional because, among other
things, order statements irrelevant
assignment statements equations. Nevertheless,
Lucid programs need not look much different than
iterative programs conventional structured programming
language using assignment conditional
statements loops.
.B
CACM July, 1977
.A
Ashcrof, E. A.
Wadge, W. W.
.K
program proving, formal systems, semantics,
iteration, structured programming
.C
5.21 5.24
.N
CA770709 JB December 28, 1977 8:30 AM
.X
2021 4 2943
2222 4 2943
2227 4 2943
2315 4 2943
2326 4 2943
2470 4 2943
2732 4 2943
2865 4 2943
2896 4 2943
2943 4 2943
3014 4 2943
3068 4 2943
3077 4 2943
3143 4 2943
1834 5 2943
2943 5 2943
2943 5 2943
2943 5 2943
3150 5 2943
2060 6 2943
2704 6 2943
2842 6 2943
2939 6 2943
2940 6 2943
2941 6 2943
2943 6 2943
3073 6 2943
3148 6 2943
.I 2944
.T
Shifting Garbage Collection Overhead Compile Time
.W
paper discusses techniques which enable automatic
storage reclamation overhead partially
shifted compile time. paper assumes transaction
oriented collection scheme, proposed
Deutsch Bobrow, necessary features which
summarized. Implementing described optimizations
requires global flow analysis performed
source program. shown compile time
certain program actions affect reference counts
cells can deduced. information
used find actions cancel code executed
those can grouped achieve improved
efficiency.
.B
CACM July, 1977
.A
Barth, J. M.
.K
garbage collection, global flow analysis, list processing,
optimization, reference counts, storage
management
.C
3.80 4.12 4.20 4.34
.N
CA770708 JB December 28, 1977 8:38 AM
.X
2855 4 2944
2855 4 2944
2944 4 2944
2944 4 2944
3106 4 2944
3112 4 2944
2833 5 2944
2944 5 2944
2944 5 2944
2944 5 2944
2998 5 2944
.I 2945
.T
Certification Programs Secure Information Flow
.W
paper presents certification mechanism
verifying secure flow information
through program. Because exploits properties
lattice structure among security classes,
procedure sufficiently simple can easily
included analysis phase most existing
compilers. Appropriate semantics presented
proved correct. important application
confinement problem: mechanism can prove program
cannot cause supposedly nonconfidential results
depend confidential input data.
.B
CACM July, 1977
.A
Denning, D. E.
Denning, P. J.
.K
protection, security, information flow, program certification,
lattice, confinement, security classes
.C
4.3 4.35 5.24
.N
CA770707 JB December 28, 1977 8:48 AM
.X
1807 4 2945
2034 4 2945
2290 4 2945
2579 4 2945
2923 4 2945
2945 4 2945
2945 4 2945
2945 4 2945
3128 4 2945
3150 4 2945
1947 5 2945
2704 5 2945
2870 5 2945
2945 5 2945
2945 5 2945
2945 5 2945
.I 2946
.T
Alternative Event Queues Synchronization Monitors
.W
monitor concept, proposed Brinch
Hansen Hoare, event used synchronization.
paper describes another synchronizing primitive
which nearly expressive conditional
wait, but can implemented more efficiently. implementation
primitive terms P
V operations given together correctness proof.
Two examples presented: readers
writers problem problem information
streams sharing finite buffer pool.
.B
CACM July, 1977
.A
Kessels, J. L. W.
.K
monitor, operating system, mutual exclusion, synchronization,
conditional critical region, structuring
concept
.C
4.31
.N
CA770706 JB December 28, 1977 10:10 AM
.X
2320 4 2946
2597 4 2946
2777 4 2946
2851 4 2946
2895 4 2946
2912 4 2946
2938 4 2946
2946 4 2946
2946 4 2946
3128 4 2946
3128 4 2946
2150 5 2946
2866 5 2946
2898 5 2946
2946 5 2946
2946 5 2946
2946 5 2946
2597 6 2946
2946 6 2946
.I 2947
.T
SITAR: Interactive Text Processing System Small Computers
.W
SITAR, low-cost teractive text handling
text analysis system nontechnical users,
many ways comparable teractive bibliographical
search retrieval systems, but has several
additional features. implemented PDP/11 time-sharing
computer invoked CRT microprogrammed
editing functions. uses simple command language designating
function, file, search template
consisting textual string desired strings
delimiting context which hit
delivered. Extensive experience SITAR shows
combined powers simple commands, string
orientation, circular file structure, CRT local
memory, conversational computing produce
system much more powerful than sum its parts.
.B
CACM July, 1977
.A
Schneider, B. R. Jr.
Watts, R. M.
.K
information retrieval, text editing, minicomputers,
CRTs,time sharing, bibliographic search
retrieval, literary analysis, linguistic analysis, command languages
.C
3.4 3.7
.N
CA770705 JB December 28, 1977 10:20 AM
.X
2947 5 2947
2947 5 2947
2947 5 2947
.I 2948
.T
Terminal-Oriented Communication System
.W
paper describes system full-duplex
communication between time-shared computer
its terminals. system consists communications
computer directly connected time-shared
system, number small remote computers which
terminals attached, connecting medium
speed telephone lines. can service large number
terminals various types. overall system
design presented along algorithms used
solve three specific problems: local echoing, error
detection correction telephone lines,
multiplexing character output.
.B
CACM July, 1977
.A
Heckel, P. G.
Lampson, B. W.
.K
terminal system, error correction, multiplexing,
local echoing, communication system, network
.C
3.81 4.31
.N
CA770704 JB December 28, 1977 11:49 AM
.X
2948 5 2948
2948 5 2948
2948 5 2948
.I 2949
.T
Correctness Proof Topology Information
Main tenance Protocol Distributed Computer
Network
.W
order nodes distributed computer
network communicate, each node must have
information network's topology. Since nodes
links sometimes crash, scheme needed
update information. One major constrain ts
such topology information scheme
may not involve central controller. Topology
Information Protocol implemented
MERIT Computer Network presented explained;
protocol quite general could implemented
any computer network. based Baran's "Hot
Potato Heuristic Routing Doctrine." correctness
proof Topology Information Protocol also presented.
.B
CACM July, 1977
.A
Tajibnapis, W. D.
.K
distributed computer network, correctness proofs,
computer networks, distributed control, network
topology, routing problem networks, distributed operating
system, store forward packet switching,
store forward message switching, traffic control
.C
3.81 4.32
.N
CA770703 JB December 28, 1977 11:59 AM
.X
2949 5 2949
2949 5 2949
2949 5 2949
.I 2950
.T
Unifying Approach Scheduling
.W
paper presents scheme classifying
scheduling algorithms based abstract model
scheduling system which formalizes notion
priority. Various classes scheduling algorithms
defined related existing algorithms.
criterion implementation efficiency
algorithm developed results definition
time-invariant algorithms, which include most
commonly implemented ones. time-invariant
algorithms, dependence processing rates
priorities derived. abstract model provides
framework implementing flexible schedulers
real operating systems. policy-driven scheduler
Bernstein Sharp discussed example
such implementation
.B
CACM July, 1977
.A
Ruschitzka, M.
Fabry, R. S.
.K
scheduling algorithms, scheduling models, priority,
operating systems,processor sharing, implementation
efficiency
.C
4.31 4.32 4.34 4.35 8.1
.N
CA770702 JB December 28, 1977 12:32 PM
.X
2950 4 2950
3072 4 2950
2219 5 2950
2950 5 2950
2950 5 2950
2950 5 2950
.I 2951
.T
Dynamic Response Time Prediction Computer Networks
.W
If ultimate aim computing network
resource sharing, then human component
well technical component networking must
fully investigated achieve goal.
research first step toward assisting user participating
vast store resources available
network. Analytical, simulation, statistical performance
evaluation tools employed investigate
feasibility dynamic response time monitor
capable providing comparative response
time information users wishing process various
computing applications some network computing
node. research clearly reveals sufficient
system data currently obtainable, least
five diverse ARPA network systems studied detail,
describe predict response time
network time-sharing systems depends some
measure system activity load level.
.B
CACM July, 1977
.A
Mamrak, S. A.
.K
response time monitor, computer networks, time-sharing
systems, comparative response time, ARPA
network, anlytic modeling, simulation, benchmark jobs, system measurement
.C
4.6 6.20 8.1
.N
CA770701 JB December 28, 1977 12:42 PM
.X
2629 4 2951
2868 4 2951
2928 4 2951
2951 4 2951
2380 5 2951
2951 5 2951
2951 5 2951
2951 5 2951
.I 2952
.T
Functions Realizable Word-Parallel Logical
Two's-Complement Addition Instructions
.B
CACM June, 1977
.A
Warren, H. S. Jr.
.K
Boolean functions, two's-complement, sign propagation
.C
4.0 6.32
.N
CA770611 JB December 28, 1977 12:45 PM
.X
362 4 2952
2296 4 2952
2952 4 2952
2952 4 2952
2952 4 2952
2952 4 2952
2952 4 2952
2952 4 2952
142 4 2952
142 4 2952
142 4 2952
142 5 2952
162 5 2952
163 5 2952
192 5 2952
2185 5 2952
2727 5 2952
2952 5 2952
2952 5 2952
2952 5 2952
.I 2953
.T
Notes Recursion Elimination
.W
Various methods recursion elimination
applied schematic recursive procedure:
proc S(x); px then N(x); S(fx); S(gx); M(x) fi. Procedures
general form arise connection
tree traversal sorting algorithms. Each method
recursion removal involves use one
more stacks, solutions compared
basis their running time.
.B
CACM June, 1977
.A
Bird, R. S.
.K
recursion elimination, optimization programs,
stacks, trees, sorting algorithms, computational
induction
.C
4.0 4.2 5.20 5.24 5.25 5.31
.N
CA770610 JB December 28, 1977 12:50 PM
.X
2953 5 2953
2953 5 2953
2953 5 2953
3020 5 2953
2953 6 2953
.I 2954
.T
Bounded Storage Algorithm Copying Cyclic Structures
.W
new algorithm presented which copies cyclic
list structures using bounded workspace
linear time. Unlike previous similar algorithm,
one makes no assumptions storage allocation
system use uses only operations likely available
high-level language. distinctive
feature algorithm technique traversing
structure twice, using same spanning
tree each case, first left right then right left.
.B
CACM June, 1977
.A
Robson J. M.
.K
copying, shared subtrees, cyclic structures
.C
4.49 5.25
.N
CA770609 JB December 28, 1977 12:56 PM
.X
2766 4 2954
2855 4 2954
2954 4 2954
2954 4 2954
3106 4 2954
3106 4 2954
2665 5 2954
2766 5 2954
2954 5 2954
2954 5 2954
2954 5 2954
3106 5 2954
1549 6 2954
210 6 2954
1972 6 2954
2665 6 2954
2766 6 2954
2855 6 2954
2954 6 2954
2998 6 2954
.I 2955
.T
Buddy Systems
.W
Two algorithms presented implementing
any class buddy systems dynamic storage
allocation. Each buddy system corresponds set
recurrence relations which relate block sizes
provided each other. Analyses ternal fragmentation
binary buddy system, Fibonacci
buddy system, weighted buddy system given.
Comparative simulation results also presented
ternal, external, total fragmentation.
.B
CACM June, 1977
.A
Peterson, J. L.
Norman, T. A.
.K
dynamic storage allocation, buddy system, fragmentation,
Fibonacci buddy system, weighted buddy
system
.C
3.89 4.32 4.39
.N
CA770608 JB December 28, 1977 1:20 PM
.X
1389 4 2955
1552 4 2955
2162 4 2955
2435 4 2955
2596 4 2955
2596 4 2955
2747 4 2955
2768 4 2955
2768 4 2955
2773 4 2955
2845 4 2955
2845 4 2955
2845 4 2955
2902 4 2955
2902 4 2955
2902 4 2955
2902 4 2955
2911 4 2955
2911 4 2955
2955 4 2955
2955 4 2955
2955 4 2955
2955 4 2955
2955 4 2955
1184 5 2955
2435 5 2955
2596 5 2955
2747 5 2955
2773 5 2955
2955 5 2955
2955 5 2955
2955 5 2955
.I 2956
.T
Some Ideas Data Types High-Level Languages
.W
number issues explored concerning
notion data type set values together
set primitive operations those values. Among
these need notation iterating
over elements any finite set (instead
more narrow i:= 1 n notation), use
domain array data type, need
simple notation allowing types parameters
themselves parameters (but restrictive fashion),
resulting problems conversion
values one type another.
.B
CACM June, 1977
.A
Gries, D.
Gehani, N.
.K
data types, generic procedures, programming languages
.C
4.12 4.20 4.22
.N
CA770607 JB December 28, 1977 1:27 PM
.X
2167 4 2956
2723 4 2956
2941 4 2956
2956 4 2956
2956 4 2956
3030 4 2956
1379 5 2956
2651 5 2956
2956 5 2956
2956 5 2956
2956 5 2956
3049 5 2956
2956 6 2956
2958 6 2956
2957 6 2956
2960 6 2956
.I 2957
.T
Database Abstractions: Aggregation
.W
Aggregation troduced abstraction
which important conceptualizing real
world. Aggregation transforms relationship between
objects into higher-level object. new data
type, called aggregation, developed which, under
certain criteria "well-definedness," specifies
aggregation abstractions. Relational databases defined
collections aggregates structured
hierarchy n-ary relations. main tain well-definedness,
update operations such databases must
preserve two invariants. Well-defined relations
distinct relations third normal form.
shown these notions complementary both
important database design. top-down
methodology database design described which separates
decisions concerning aggregate structure
decisions concerning key identification.
suggested aggregate types, other types
which support real-world abstractions without troducing
implementation detail, should incorporated
into programming languages.
.B
CACM June, 1977
.A
Smith, J. M.
Smith, D. C. P.
.K
data abstraction, relational database, data type,
aggregation, database design, data structure,
knowledge representation, data definition language
.C
3.65 3.69 3.79 4.29 4.33 4.34
.N
CA770606 JB December 29, 1977 12:33 AM
.X
2155 4 2957
2406 4 2957
2710 4 2957
2715 4 2957
2716 4 2957
2717 4 2957
2718 4 2957
2765 4 2957
2817 4 2957
2888 4 2957
2901 4 2957
2957 4 2957
2959 4 2957
2965 4 2957
3087 4 2957
3154 4 2957
2046 5 2957
2957 5 2957
2957 5 2957
2957 5 2957
3049 5 2957
2956 6 2957
2958 6 2957
2957 6 2957
2960 6 2957
.I 2958
.T
Abstract Data Types Development Data Structures
.W
Abstract data types can play significant role
development software reliable,
efficient, flexible. paper presents discusses
application algebraic technique
specification abstract data types. Among
examples presented top-down development
symbol table block structured language; discussion
proof its correctness given.
paper also contains brief discussion problems
involved constructing algebraic specifications
both consistent complete.
.B
CACM June, 1977
.A
Guttag, J.
.K
abstract data type, correctness proof, data type,
data structure, specification, software specification
.C
4.34 5.24
.N
CA770605 JB December 29, 1977 1:17 AM
.X
2704 4 2958
2738 4 2958
2866 4 2958
2869 4 2958
2941 4 2958
2958 4 2958
3004 4 2958
3030 4 2958
2356 5 2958
2958 5 2958
2958 5 2958
2958 5 2958
3030 5 2958
3031 5 2958
3049 5 2958
2247 6 2958
2356 6 2958
2457 6 2958
2651 6 2958
2939 6 2958
2956 6 2958
2958 6 2958
2958 6 2958
2958 6 2958
2957 6 2958
2960 6 2958
2972 6 2958
.I 2959
.T
System Business Automation (SBA): Programming Language
.W
system business automation (SBA) system
within which application experts-nonprogrammers-can
describe execute their applications computer.
user SBA views his application manipulation
information two-dimensional pictures tables,
business forms, reports display terminal.
He can gradually automate application giving "examples"
system he manually manipulates
information. Query-by-Example database language
subset SBA programming language.
.B
CACM June, 1977
.A
Zloof, M. M.
de Jong, S. P.
.K
programming language, graphics, user terface,
data flow, forms flow, data abstraction, database,
query, data processing, business system specification, application programming
.C
3.73 3.74 4.22 4.33 4.34
.N
CA770604 JB December 29, 1977 1:25 AM
.X
2155 4 2959
2406 4 2959
2710 4 2959
2715 4 2959
2716 4 2959
2717 4 2959
2718 4 2959
2765 4 2959
2817 4 2959
2888 4 2959
2901 4 2959
2957 4 2959
2959 4 2959
2965 4 2959
3087 4 2959
3154 4 2959
2046 5 2959
2959 5 2959
2959 5 2959
2959 5 2959
.I 2960
.T
Two Views Data Abstraction
.B
CACM June, 1977
.A
Ledgard, H. F.
Taylor, R. W.
.N
CA770603 JB December 29, 1977 1:28 AM
.X
2960 5 2960
2960 5 2960
2960 5 2960
3049 5 2960
2956 6 2960
2958 6 2960
2957 6 2960
2960 6 2960
.I 2961
.T
Experimental Investigations Utility
Detailed Flowcharts Programming
.W
paper describes previous research
flowcharts series controlled experiments
test utility detailed flowcharts aid
program composition, comprehension, debugging,
modification. No statistically significant difference
between flowchart nonflowchart groups
has been shown, thereby calling into question utility
detailed flowcharting. program further
research suggested.
.B
CACM June, 1977
.A
Shneiderman, B.
Mayer, R.
McKay, D.
Heller, P.
.K
flowcharts, program composition, program comprehension,
debugging, modification, experimental testing,
human factors
.C
1.5 4.0
.N
CA770602 JB December 29, 1977 1:33 AM
.X
2961 4 2961
2961 5 2961
2961 5 2961
2961 5 2961
721 5 2961
.I 2962
.T
Production Employment Ph.D.'s Computer Science-1976
.W
Statistics presented production
employment Ph.D.'s computer science
calendar year 1975-76. Data include profiles graduate
students faculty 60 Ph.D.-producing
departments well breakdown degrees granted
specialty areas. Significant trends noted
comparisons comparable data gathered
1974-75 calendar year made.
.B
CACM June, 1977
.A
Taulbee, O. E.
Conte, S. D.
.K
computer science, production Ph.D.'s, employment, students
.C
1.3 1.52 1.53 1.59
.N
CA770601 JB December 29, 1977 1:39 AM
.X
2962 4 2962
3122 4 2962
3123 4 2962
2861 5 2962
2962 5 2962
2962 5 2962
2962 5 2962
3123 5 2962
3122 5 2962
2823 6 2962
2861 6 2962
2861 6 2962
2962 6 2962
2962 6 2962
3022 6 2962
.I 2963
.T
Fast Algorithm Computing Longest Common Subsequences
.W
Previously published algorithms finding
longest common subsequence two sequences
length n have had best-case running time O(n^2).
algorithm problem presented
which has running time O((r + n)log n), r
total number ordered pairs positions
which two sequences match. Thus worst
case algorithm has running time O(n^2 log
n). However, those applications most positions
one sequence match relatively few positions
other sequence, running time O(n log n) can expected.
.B
CACM May, 1977
.A
Hunt, J. W.
Szymanski, T. G.
.K
Longest common subsequence, efficient algorithms
.C
3.73 3.63 5.25
.N
CA770509 JB December 29, 1977 1:46 AM
.X
2963 4 2963
3114 4 2963
2745 5 2963
2963 5 2963
2963 5 2963
2963 5 2963
.I 2964
.T
Approach Optimal Design Storage Parameters Databases
.B
CACM May, 1977
.A
Milman, Y.
.K
database organization, storage parameter
optimization, resident, overflow storage
.C
3.73 3.74
.N
CA770508 JB December 29, 1977 1:48 AM
.X
2964 5 2964
2964 5 2964
2964 5 2964
.I 2965
.T
Optimal Evaluation Boolean Expressions Online Query System
.B
CACM May, 1977
.A
Hanani, M. Z.
.K
query, Boolean expression, information retrieval, file organization
.C
3.5 3.70 3.74
.N
CA770507 JB December 29, 1977 1:51 AM
.X
2155 4 2965
2406 4 2965
2710 4 2965
2715 4 2965
2716 4 2965
2717 4 2965
2718 4 2965
2765 4 2965
2765 4 2965
2817 4 2965
2888 4 2965
2901 4 2965
2957 4 2965
2959 4 2965
2965 4 2965
2965 4 2965
3087 4 2965
3154 4 2965
2046 5 2965
2451 5 2965
2965 5 2965
2965 5 2965
2965 5 2965
3168 5 2965
3169 5 2965
2965 6 2965
2965 6 2965
3002 6 2965
.I 2966
.T
Choice Reference Poin ts Best-Match File Searching
.W
Improvements exhaustive search method
best-match file searching have previously been
achieved doing preprocessing step involving
calculation distances reference poin t.
paper discusses proper choice reference
poin ts extends previous algorithm use
more than one reference poin t. shown reference
poin ts should located outside data clusters.
results computer simulations presented which
show large improvements can achieved
proper choice location multiple reference poin ts.
.B
CACM May, 1977
.A
Shapiro, M.
.K
matching, file searching, best match, nearest-neighbor classification
.C
3.73 3.74
.N
CA770506 JB December 29, 1977 1:57 AM
.X
2575 4 2966
2966 4 2966
3134 4 2966
2524 5 2966
2966 5 2966
2966 5 2966
2966 5 2966
.I 2967
.T
Comparison Hardware Software Associative
Memories Context Computer Graphics
.W
Associative Processing Line Drawings (APLD)
System utilizes hardware associative memory
creates, modifies, deletes, stores, retrieves
two-dimensional line drawings consisting poin ts,
lines, rectangles, triangles. APLD functions
were duplicated TX-2 computer M.I.T.'s
Lincoln Laboratory under LEAP Language Data
Structure, comparison hardware approach
software simulation illustrates advantages
hardware associative memory three areas:
(1) processing speed, (2) storage requirements, (3)
flexibility. major problem areas hardware
associative memory technology, namely input/output
cost effectiveness, also addressed.
.B
CACM May, 1977
.A
Stillman, N. J.
Berra, P. B.
.K
associative memory, associative processor, content-addressable
memory, graphics, information retrieval,
data structures, software evaluation, hardware evaluation,
parallel processing, database management
.C
3.71 3.72 3.73 3.74 4.34 4.6 6.22 8.2
.N
CA770505 JB December 29, 1977 2:07 AM
.X
2719 4 2967
2967 4 2967
2151 5 2967
2967 5 2967
2967 5 2967
2967 5 2967
.I 2968
.T
Comparison Tree-Balancing Algorithms
.W
Several algorithms-height-balance (i.e. AVL
extensions), weight-balance (i.e. BB WB),
total restructuring-for building balanced binary search
trees compared. criteria comparison
encompass theoretical aspects (e.g. path lengths) implementation
independent machine/algorithm-dependent
measures (e.g. run time). detailed analysis code
also presented level believed language-and
compiler-independent. quality resulting
trees overhead spent building them
analyzed, some guidelines given efficient
use methods. If insertion subsequent
queries only operations terest, then "pure"
AVL trees present overall best qualities.
.B
CACM May, 1977
.A
Baer, J. L.
Schwab, B.
.K
binary search trees, AVL trees, weight-balanced trees,
path length, analysis algorithms, information
storage retrieval
.C
3.7 3.72 3.74 5.31
.N
CA770504 JB December 29, 1977 2:16 AM
.X
2455 4 2968
2493 4 2968
2889 4 2968
2889 4 2968
2968 4 2968
2968 4 2968
3042 4 2968
2388 5 2968
2455 5 2968
2968 5 2968
2968 5 2968
2968 5 2968
3042 5 2968
2455 6 2968
2839 6 2968
2889 6 2968
2968 6 2968
.I 2969
.T
Optimal Program Data Locations Computer Networks
.W
optimization procedure allocation
program data files computer network
presented. algorithm takes into account
dependencies between files programs such
occur real heterogeneous computer networks. Insights
into whether not convert programs
one computer another can also gained
model. search procedure file location
problem described, along example
possible application model.
.B
CACM May, 1977
.A
Morgan, H. L.
Levin, K. D.
.K
computer networks, databases, distributed
databases, optimal file location
.C
3.81 3.51 4.33
.N
CA770503 JB December 29, 1977 2:22 AM
.X
2969 5 2969
2969 5 2969
2969 5 2969
.I 2970
.T
Achieving Specific Accuracy Simulation Output Analysis
.W
paper extends use regenerative
property queueing systems analysis
simulation output. particular, describes
sequential estimation method which used
regenerative property allows results obtained
specified statistical accuracy. method
includes test check normality assumption
which sequential procedure relies. paper
illustrates method using empty idle state
regenerative state. second example then
describes using most frequently entered state
regenerative state reduces chance
making costly error preliminary simulation run.
paper also described variance reduction
method due Page [9] can used obtain specified
accuracy considerably fewer job completions
than required no variance reduction technique applied.
.B
CACM May, 1977
.A
Fishman, G. S.
.K
confidence terval, ratio estimator, regenerative
property, sequential estimator, simulation,
stopping rule, variance reduction
.C
5.5 8.1
.N
CA770502 JB December 29, 1977 2:43 AM
.X
2970 5 2970
2970 5 2970
2970 5 2970
.I 2971
.T
SP/k: System Teaching Computer Programming
.W
SP/k compatible subset PL/I language
has been designed teaching programming.
features SP/k language were chosen encourage
structured problem solving computers,
make language easy learn use, eliminate
confusing redundant constructs, make
language easy compile. resulting language
suitable troducing programming concepts
used various applications, including business data
processing, scientific calculations non-numeric
computation. SP/k actually sequence language
subsets called SP/1, SP/2,...SP/8. Each subset
troduces new programming language constructs while
retaining all constructs preceding subsets.
Each subset precisely defined can learned
implemented without following subsets.
.B
CACM May, 1977
.A
Holt, R. C.
Wortman, D. B.
Barnard, D. T.
Cordy, J. R.
.K
programmer education, universities, community colleges,
high schools, PL/I, SP/k, minicomputers,
programming language design, teaching programming, troductory computing
.C
1.5 4.2 4.12 4.13
.N
CA770501 JB December 29, 1977 4:40 AM
.X
2708 4 2971
2820 4 2971
2971 4 2971
2971 4 2971
2971 4 2971
3045 4 2971
1835 5 2971
1974 5 2971
2534 5 2971
2971 5 2971
2971 5 2971
2971 5 2971
.I 2972
.T
Proof Techniques Hierarchically Structured Programs
.W
method describing structuring programs
simplifies proofs their correctness
presented. method formally represents program
terms levels abstraction, each level
which can described self-contained nonprocedural
specification. proofs, like programs,
structured levels. Although only manual proofs
described paper, method also
applicable semi-automatic automatic proofs. Preliminary
results encouraging, indicating
method can applied large programs, such operating systems.
.B
CACM April, 1977
.A
Robinson, L.
Levitt, K. N.
.K
hierarchical structure, program verification, structured
programming, formal specification, abstraction,
programming methodology
.C
4.0 4.29 4.9 5.24
.N
CA770410 JB December 29, 1977 4:53 AM
.X
2042 4 2972
2222 4 2972
2319 4 2972
2356 4 2972
2480 4 2972
2594 4 2972
2679 4 2972
2709 4 2972
2844 4 2972
2865 4 2972
2866 4 2972
2896 4 2972
2898 4 2972
2939 4 2972
2972 4 2972
2972 4 2972
2972 4 2972
2972 4 2972
2972 4 2972
3037 4 2972
3039 4 2972
3043 4 2972
3043 4 2972
3073 4 2972
3128 4 2972
3144 4 2972
3155 4 2972
970 5 2972
2204 5 2972
2597 5 2972
2732 5 2972
2738 5 2972
2972 5 2972
2972 5 2972
2972 5 2972
3030 5 2972
2247 6 2972
2356 6 2972
2457 6 2972
2651 6 2972
2958 6 2972
2972 6 2972
.I 2973
.T
Sorting Mesh-Connected Parallel Computer
.W
Two algorithms presented sorting n^2
elements n X n mesh-connected processor
array require O(n) routing comparison steps.
best previous algorithm takes time O(n log
n). algorithms paper shown optimal
time within small constant factors. Extensions
higher-dimensional arrays also given.
.B
CACM April, 1977
.A
Thompson, C. D.
Kung, H. T.
.K
parallel computer, parallel sorting, parallel merge,
routing comparison steps, perfect shuffle.
processor terconnection pattern
.C
4.32 5.25 5.31
.N
CA770409 JB December 29, 1977 4:58 AM
.X
2973 5 2973
2973 5 2973
2973 5 2973
3156 5 2973
2289 6 2973
2973 6 2973
3075 6 2973
.I 2974
.T
Comment Weighted Increment Linear Search Scatter Tables
.B
CACM April, 1977
.A
Bandyopadhyay, S. K.
.K
hash address, primary clustering, index,
sequence, complementary relation, search
.C
3.73 3.74 4.9 4.11 4.12
.N
CA770408 JB December 29, 1977 5:02 AM
.X
1973 4 2974
2018 4 2974
2203 4 2974
2251 4 2974
2543 4 2974
2770 4 2974
2974 4 2974
2974 4 2974
3053 4 2974
2109 5 2974
2251 5 2974
2974 5 2974
2974 5 2974
2974 5 2974
.I 2975
.T
Remark Uniform Insertion Structured Data Structures
.B
CACM April, 1977
.A
Hollander, C.R.
.K
data structures, directed graphs, uniform insertion
.C
4.34
.N
CA770407 JB December 29, 1977 5:04 AM
.X
2975 4 2975
2594 5 2975
2975 5 2975
2975 5 2975
2975 5 2975
.I 2976
.T
Approximating Block Accesses Database Organizations
.B
CACM April, 1977
.A
Yao, S. B.
.K
database, inverted file organization, database performance
measurement, information retrieval,
query answering
.C
3.70 3.72 4.33
.N
CA770406 JB December 29, 1977 5:06 AM
.X
2976 4 2976
2976 4 2976
2976 4 2976
2688 5 2976
2765 5 2976
2882 5 2976
2976 5 2976
2976 5 2976
2976 5 2976
.I 2977
.T
Stage Hypothesis S-Curve: Some Contradictory Evidence
.W
paper presents results study
testing s-shaped budget curve Nolan's stage
model computer development organization. Research
data processing budgets California
counties fails support s-shaped curve use
budgets basis stage model. However,
results do not invalidate concept stage
model. analysis suggests alternative model
budget growth separation between models budgeting
growth growth stages development
computer resource.
.B
CACM April, 1977
.A
Lucac, H. C. Jr.
Sutton, J. A.
.K
budgets, stage theories, stage hypothesis
.C
3.50 3.59
.N
CA770405 JB December 29, 1977 5:12 AM
.X
2977 4 2977
2985 4 2977
3011 4 2977
3035 4 2977
2485 5 2977
2977 5 2977
2977 5 2977
2977 5 2977
.I 2978
.T
Analysis Design Alternatives Virtual Memory Indexes
.W
class index structures use virtual
memory environment described. Design alternatives
within class index structures analyzed. These
alternatives include choice search strategy,
whether not pages index structured,
whether not keys compressed. average
cost retrieving entries these indexes expressed
wieghted sum cost basic key
comparison cost crossing page boundary
index structure. Formulas retrieval
costs possible combinations design alternatives
given. These used numerical case studies
which compare retrieval costs alternatives.
Qualitative comparisons main tenance costs
(insertion, deletion, reorganization)
design alternatives also included.
.B
CACM April, 1977
.A
Maruyama, K.
Smith, S. E.
.K
index, index structure, pages, virtual memory,
files, retrieval, main tenance, search strategy,
key compression
.C
3.50 3.51 3.02 3.73 3.74
.N
CA770404 JB December 29, 1977 5:22 AM
.X
2451 4 2978
2556 4 2978
2978 4 2978
1935 5 2978
2978 5 2978
2978 5 2978
2978 5 2978
3058 5 2978
3063 5 2978
2978 6 2978
2978 6 2978
.I 2979
.T
Studies Machine Cognition Using Game Poker
.W
progress report presented on-going
research efforts concerning human decision making
under uncertainly risk human problem solving
learning processes one hand, machine
learning, large scale programming systems, novel
programming techniques other. There has
also been terest humans make deductive inductive
inferences form optimize heuristic
rules, machines can reach similar results.
Although vehicle these investigations has
been game poker, conceptual framework has been
provided should have fairly wide range
applicability. models human judgment, choice,
decision making incorporated large
scale complex program. They represent both descriptive
normative theories behavior. teractive
game environment has been recently established which,
besides its usefulness experiments game
playing, enables humans construct machine strategies
"on-line" question answering, advice taking
mode.
.B
CACM April, 1977
.A
Findler, N. V.
.K
machine learning, game playing programs, decision
making under uncertain ty risk, automatic
forming optimizing heuristic rules, automatic
inductive deductive inference making, models
game learning, poker, gambling bluffing
.C
3.36 3.62 3.61 3.64 3.65 3.66
.N
CA770403 JB December 29, 1977 5:34 AM
.X
2979 5 2979
2979 5 2979
2979 5 2979
.I 2980
.T
Editing Picture Segmentations Using Local Analysis Graphs
.W
major problem picture processing
elimination large number spurious regions
result initial segmentation region growing
techniques. Such regions have been eliminated
either basis semantic information
basis size contrast. scheme presented
which performs eliminations basis local properties
region adjacency graph. scheme
based definitions graph properties which
satisfied spurious region present; then
editing equivalent fast graph operations. number examples shown.
.B
CACM April, 1977
.A
Tanimoto, S. L.
Pavlidis, T.
.K
picture processing, pattern recognition, segmentation, region editing
.C
3.63
.N
CA770402 JB December 29, 1977 6:22 AM
.X
2980 4 2980
2523 5 2980
2980 5 2980
2980 5 2980
2980 5 2980
.I 2981
.T
Subgoal Induction
.W
proof method, subgoal induction, presented
alternative supplement commonly
used inductive assertion method. Its major virtue
can often used prove loop's correctness
directly its input-output specification without
use invariant. relation between subgoal
induction other commonly used induction rules explored
and, particular, shown subgoal
induction can viewed specialized form computation
induction. set sufficient conditions
presented which guarantee input-output specification
strong enough induction steps
proof subgoal induction valid.
.B
CACM April, 1977
.A
Morris, J. H. Jr.
Wegbreit, B.
.K
program verification, proving programs correct,
induction rule, computation induction, inductive
assertions, structural induction, proof rule,
recursive programs, iterative programs
.C
4.19 4.22 5.21 5.24
.N
CA770401 JB December 29, 1977 6:31 AM
.X
2981 4 2981
3030 4 2981
3077 4 2981
3104 4 2981
2457 5 2981
2981 5 2981
2981 5 2981
2981 5 2981
3014 5 2981
1834 6 2981
2981 6 2981
.I 2982
.T
Storage Requirement Precedence Parsing
.B
CACM March, 1977
.A
Bertsch, E.
.K
precedence parsing, storage requirement, value table
.C
4.12 5.22
.N
CA770310JB December 29, 1977 6:34 AM
.X
1542 4 2982
1683 4 2982
1693 4 2982
1781 4 2982
1787 4 2982
1836 4 2982
1945 4 2982
2060 4 2982
2061 4 2982
2082 4 2982
2091 4 2982
2152 4 2982
2179 4 2982
2340 4 2982
2340 4 2982
2356 4 2982
2546 4 2982
2603 4 2982
2698 4 2982
2708 4 2982
2824 4 2982
2824 4 2982
2982 4 2982
2982 4 2982
2982 4 2982
2986 4 2982
2986 4 2982
2986 4 2982
3045 4 2982
3093 4 2982
1491 5 2982
1836 5 2982
2340 5 2982
2982 5 2982
2982 5 2982
2982 5 2982
.I 2983
.T
Comparison Next-fit, First-fit, Best-fit
.B
CACM March, 1977
.A
Bays, C.
.K
memory allocation, first-fit, best-fit, next-fit
.C
4.32 4.35
.N
CA770309 JB December 29, 1977 6:36 AM
.X
2902 4 2983
2911 4 2983
2983 4 2983
2734 5 2983
2911 5 2983
2983 5 2983
2983 5 2983
2983 5 2983
1879 6 2983
273 6 2983
2435 6 2983
2498 6 2983
2734 6 2983
2773 6 2983
2983 6 2983
.I 2984
.T
Cost/Utilization: Measure System Performance
.W
method presented evaluating computer
system performance terms cost/utilization
factor measure imbalance. These coefficients
indicate extent which total system
cost effectively utilized. method includes
technique visual representation system
performance.
.B
CACM March, 1977
.A
Borovits, I.
Ein-Dor, P.
.K
computer system, performance evaluation, cost/utilization, system balance
.C
2.44
.N
CA770308 JB December 29, 1977 6:41 AM
.X
2705 4 2984
2984 4 2984
1908 5 2984
2984 5 2984
2984 5 2984
2984 5 2984
.I 2985
.T
Effects Chargeout User/Manager Attitudes
.W
relationship ternal pricing systems
computer services (chargeout systems)
user management attitudes their computer-based
information systems investigated. Evidence
provided relationship conforms general
pattern would expected hypothesis
four stages EDP growth [15]. results also
indicate chargeout systems characteristic
advanced EDP stage environments associated
relatively high levels positive user attitudes
marked increases EDP training users. Both factors
important user/manager involvement
necessary effective control computer-based systems.
Development main tenance computer-based
systems asserted category organizational
change. "felt need" change part
user/manager prerequisite any change taking
place. research methods behavioral science
applied investigate user/manager
environment effects chargeout.
.B
CACM March, 1977
.A
Nolan, R. L.
.K
computer management, computer budget,
chargeout, stage hypothesis, control
.C
2.41 2.43 3.50
.N
CA770307 JB December 29, 1977 6:43 AM
.X
2977 4 2985
2985 4 2985
3011 4 2985
3035 4 2985
2485 5 2985
2985 5 2985
2985 5 2985
2985 5 2985
.I 2986
.T
Operations Sparse Relations
.W
Various computations relations, Boolean matrices,
directed graphs, such computation
precedence relations context-free grammar, can
done practical algorithm asymptotically
faster than those common use. example, compute
operator precedence Wirth-Weber precedence
relations O(n^2) steps shown, well
compute linear precedence functions O(n^2) steps
shown, well compute linear precedence
functions O(n) steps, n size
grammer. heart algorithms general
theorem giving sufficient conditions under which
expression whose operands sparse relations
whose operators composition, transitive closure,
union, inverse, can computed efficiently.
.B
CACM March, 1977
.A
Hunt, H. B. III
Szymanski, T. G.
Ullman, J. D.
.K
computational complexity, sparse relation, Boolean
matrix, directed graph, Wirth-Weber precedence
relation, linear precedence function, SLR
grammar, T-canonical precedence relation
.C
4.12 5.23 5.25
.N
CA770306 JB December 29, 1977 8:05 AM
.X
1542 4 2986
1683 4 2986
1693 4 2986
1781 4 2986
1787 4 2986
1836 4 2986
1945 4 2986
2060 4 2986
2061 4 2986
2082 4 2986
2091 4 2986
2152 4 2986
2179 4 2986
2221 4 2986
2340 4 2986
2340 4 2986
2340 4 2986
2356 4 2986
2546 4 2986
2603 4 2986
2698 4 2986
2708 4 2986
2733 4 2986
2824 4 2986
2824 4 2986
2824 4 2986
2982 4 2986
2982 4 2986
2982 4 2986
2986 4 2986
2986 4 2986
2986 4 2986
2986 4 2986
2986 4 2986
3045 4 2986
3093 4 2986
3093 4 2986
3094 4 2986
1491 5 2986
1683 5 2986
1836 5 2986
2179 5 2986
2340 5 2986
2986 5 2986
2986 5 2986
2986 5 2986
.I 2987
.T
Representation Many-Sided Polygons
Polygonal Lines Rapid Processing
.W
representation polygons polygonal
lines described which allows sets consecutive
sides collectively examined. set sides
arranged binary tree hierarchy inclusion.
fast algorithm testing inclusion poin t
many-sided polygon given. speed
algorithm discussed both ideal practical
examples. shown poin ts intersection
two polygonal lines can located essentially
binary tree search. algorithm
practical example discussed. representation
overcomes many disadvantages associated
various fixed-grid methods representing curves regions
.B
CACM March, 1977
.A
Burton W.
.K
boundary line representation, cartography, computer
graphics computer-searchable structures, contour
representation, geographic information processing, graphic
data retrieval, tersection curves, line-drawing
processing, poin ts polygons, regional boundary
representation, spatial information
.C
3.14 3.23 3.30 3.79 8.2
.N
CA770305 JB December 30, 1977 12:44 AM
.X
1630 4 2987
1804 4 2987
1804 4 2987
2547 4 2987
2987 4 2987
2987 4 2987
2987 4 2987
2987 4 2987
2987 4 2987
2987 4 2987
2987 4 2987
3165 4 2987
1326 5 2987
1630 5 2987
2125 5 2987
2547 5 2987
2633 5 2987
2987 5 2987
2987 5 2987
2987 5 2987
421 5 2987
524 5 2987
3165 5 2987
1326 6 2987
2987 6 2987
.I 2988
.T
Memory Management Response Time
.W
paper presents computationally tractable
methodology including accurately effects
finite memory size workload memory requirements
queueing network models computer systems.
Empirical analyses analytic studies based applying
methodology actual multiaccess
teractive system reported. Relations between workload
variables such memory requirement distribution
job swap time, performance measures such response
time memory utilization graphically
displayed. multiphase, analytically soluble model
proposed being broadly applicable analysis
teractive computer systems which use nonpaged memories.
.B
CACM March, 1977
.A
Brown, R. M.
Browne, J. C.
Chandy, K. M.
.K
memory management, system performance, queueing
network models, teractive computer systems
.C
4.32
.N
CA770304 JB December 30, 1977 12:51 AM
.X
2988 4 2988
1750 5 2988
2988 5 2988
2988 5 2988
2988 5 2988
3059 5 2988
3070 5 2988
1805 6 2988
2454 6 2988
2741 6 2988
2988 6 2988
2988 6 2988
.I 2989
.T
Empirical Evaluation Some Features
Instruction Set Processor Architectures
.W
paper presents methods empirical evaluation
features Instruction Set Processors
(ISPs). ISP features evaluated terms time
used saved having not having feature.
methods based analysis traces program
executions. concept register life
troduced, used answer questions like: many
registers used simultaneously? many would
sufficient all time? Most time?
would overhead if number registers
were reduced? registers used during their
lives? paper also discusses problem
detecting desirable but non-existing instructions. Other
problems briefly discussed. Experimental
results presented, obtained analyzing 41
programs running DEC system 10 ISP.
.B
CACM March, 1977
.A
Lunde, A.
.K
computer architecture, program behavior, instruction
sets, op code utilization, register structures,
register utilization, simultaneous register
lives, instruction tracing, execution time
.C
6.20 6.21 6.33
.N
CA770303 JB December 30, 1977 1:00 AM
.X
1653 4 2989
2411 4 2989
2709 4 2989
2889 4 2989
2937 4 2989
2989 4 2989
2989 4 2989
3005 4 2989
3025 4 2989
3101 4 2989
1069 5 2989
2138 5 2989
2989 5 2989
2989 5 2989
2989 5 2989
3025 5 2989
2138 6 2989
2989 6 2989
.I 2990
.T
Effective Information Retrieval Using Term Accuracy
.W
performance information retrieval systems
can evaluated number different
ways. Much published evaluation work based
measuring retrieval performance average
user query. Unfortunately, formal proofs difficult
construct average case. present
study, retrieval evaluation based optimizing
performance specific user query. concept
query term accuracy troduced probability
occurrence query term documents
relevant query. relating term accuracy
frequency occurrence term
documents collection possible give formal
proofs effectiveness respect
given user query number automatic indexing systems
have been used successfully experimental
situations. Among these inverse document frequency
weighting, thesaurus construction, phrase
generation.
.B
CACM March, 1977
.A
Yu, C. T.
Salton, G.
.K
information retrieval, automatic indexing, content
analysis, term accuracy, frequency weighting,
thesaurus phrase transformations
.C
3.71 3.72 3.75
.N
CA770302 JB December 30, 1977 1:52 AM
.X
2990 5 2990
2990 5 2990
2990 5 2990
3134 5 2990
1976 6 2990
2160 6 2990
2524 6 2990
2990 6 2990
.I 2991
.T
Improving Access Time Random Access Files
.W
Clustering key set decreased
smoothing key-to-address transformation,
adding shadow buckets open chaining file.
keys pre-hashed before address division,
remove effect sequential properties
key set. Shadow buckets key search sequence
reduce effect nonuniformity file loading,
decrease number maximum probes needed
locate record. combined effects these techniques
lead improved file performance secondary
storage devices, shown empirical studies.
.B
CACM March, 1977
.A
Clapson, P.
.K
hashing, hashing techniques, hashing methods, hash
coding, keys, key transformation, key-to-address
transformation, direct addressing, direct access, direct
access method, randomizing, random access, file
addressing, file organizations, file structures, scatter
storage, search method, collisions, synonyms,
clustering, information retrieval, open addressing, open
chaining, buckets, bucket size, shadow buckets,
combinatorics
.C
3.7 3.72 3.73 3.74 4.9 5.39
.N
CA770301 JB December 30, 1977 2:00 AM
.X
1676 4 2991
1682 4 2991
1728 4 2991
1860 4 2991
1973 4 2991
1973 4 2991
1992 4 2991
2018 4 2991
2032 4 2991
2033 4 2991
2107 4 2991
2109 4 2991
2138 4 2991
2203 4 2991
2203 4 2991
2251 4 2991
2251 4 2991
2258 4 2991
2319 4 2991
2313 4 2991
2359 4 2991
2359 4 2991
2437 4 2991
2524 4 2991
2530 4 2991
2537 4 2991
2543 4 2991
2543 4 2991
2552 4 2991
2552 4 2991
2559 4 2991
2559 4 2991
2573 4 2991
2781 4 2991
2860 4 2991
2991 4 2991
2991 4 2991
2991 4 2991
3053 4 2991
3053 4 2991
3083 4 2991
1785 5 2991
2107 5 2991
2203 5 2991
2991 5 2991
2991 5 2991
2991 5 2991
.I 2992
.T
Numbering System Binary Trees
.B
CACM February, 1977
.A
Knott, G. D.
.K
binary trees, permutations, binary search trees, ranking function
.C
3.79 5.39
.N
CA770209 JB December 30, 1977 2:04 AM
.X
2992 5 2992
2992 5 2992
2992 5 2992
.I 2993
.T
Occurrences Cycling Other Phenomena
Arising Class Linear Programming Models
.W
investigation into average queue size
certain class queues has resulted
formulation linear programming problems which
ill-conditioned some cases. attempting
solve these linear programming models, using IBM's
MPS package, instances cycling were encountered.
Small perturbations input data resulted problems
which did not cycle. fact, plus several
other observed phenomena suggest primary reason
cycling not known occur more frequently
round-off errors computations perturb
problem sufficiently prevent cycling (or
least prevent indefinite cycling). one case maximizing
minimizing objective function subject
same constrain t set attempted, but MPS solved
only one these while giving indication
infeasibility other.
.B
CACM February, 1977
.A
Kotiah, T. C. T.
Steinberg, D. I.
.K
linear programming, cycling, queueing models
.C
5.41 5.9
.N
CA770208 JB December 30, 1977 2:11 AM
.X
2993 5 2993
2993 5 2993
2993 5 2993
.I 2994
.T
Linear Algorithm Incremental Digital Display Circular Arcs
.W
Circular arcs can drawn incremental
display device such cathode ray tube, digital
plotter, matrix prin ter using only sign testing
elementary addition subtraction. paper
describes methodology producing dot
step patterns closet true circle.
.B
CACM February, 1977
.A
Bresenham, J.
.K
graphics, circle drawing, step generation, dot
generation, incremental digital plotting, raster
display, integer arithmetic, circle algorithm
.C
4.41 8.2
.N
CA770207 JB December 30, 1977 2:16 AM
.X
2994 5 2994
2994 5 2994
2994 5 2994
.I 2995
.T
Decomposability, Instabilities, Saturation
Multiprogramming Systems (Corrigendum)
.B
CACM February, 1977
.A
Courtois, P. J.
.N
CA770205 JB December 30, 1977 2:20 AM
.X
2995 5 2995
2995 5 2995
2995 5 2995
.I 2996
.T
Transient-Free Working-Set Statistics
.W
Transient-free average working set size transient-free
missing-page rate finite sample
reference string defined. Use these statistics
appropriate if contents working
set start recorded string unknown.
If certain stationarity condition holds, these
statistics provide unbiased estimates expected working-set
sizes, missing-page probabilities,
terreference distance probabilities. Two other pairs
estimators shown biased. Expressions
transient-free statistics obtained terms
terval statistics. Several methods computation
discussed, usefulness each depending length
sample, number distinct references,
amount main storage available computer
performing calculations. particular,
methods described handling long strings
containing many distinct page names.
.B
CACM February, 1977
.A
Easton, M. C.
Bennett, B. T.
.K
working set, estimation program behavior
.C
4.3 4.6 5.5
.N
CA770204 JB December 30, 1977 2:40 AM
.X
1892 4 2996
1901 4 2996
2085 4 2996
2095 4 2996
2218 4 2996
2277 4 2996
2319 4 2996
2329 4 2996
2358 4 2996
2373 4 2996
2374 4 2996
2380 4 2996
2380 4 2996
2434 4 2996
2499 4 2996
2450 4 2996
2501 4 2996
2582 4 2996
2595 4 2996
2669 4 2996
2828 4 2996
2863 4 2996
2881 4 2996
2928 4 2996
2996 4 2996
2996 4 2996
2996 4 2996
3006 4 2996
3006 4 2996
3006 4 2996
3067 4 2996
3067 4 2996
3067 4 2996
1751 5 2996
2373 5 2996
2595 5 2996
2996 5 2996
2996 5 2996
2996 5 2996
.I 2997
.T
Convex Hulls Finite Sets Poin ts Two Three Dimensions
.W
convex hulls sets n poin ts two
three dimensions can determined O(n
log n) operations. presented algorithms use "divide
conquer" technique recursively apply
merge procedure two nonin tersecting convex hulls.
Since any convex hull algorithm requires
least O(n log n) operations, time complexity
proposed algorithms optimal within multiplicative
constant.
.B
CACM February, 1977
.A
Preparata, F. P.
Hong, S. J.
.K
computational complexity, convex hull, optimal algorithms,
planar set poin ts, spatial set
poin ts
.C
4.49 5.25 5.32
.N
CA770203 JB December 30, 1977 2:47 AM
.X
2997 4 2997
2737 5 2997
2997 5 2997
2997 5 2997
2997 5 2997
3151 5 2997
2997 6 2997
.I 2998
.T
Empirical Study List Structure Lisp
.W
Static measurements list structure
five large Lisp programs reported analyzed
paper. These measurements reveal substantial
regularity, predictability, among poin ters
atoms especially among poin ters lists. Pointers
atoms found obey, roughly, Zipf's law,
which governs word frequencies natural languages; poin ters
lists usually poin t location physically
nearby memory. use such regularities
space-efficient representation list structure
discussed. Linearization lists, whereby successive
cdrs (or cars) placed consecutive memory
locations whenever possible, greatly strengthens
observed regularity list structure. shown
under some reasonable assumptions, entropy
information content car-cdr pair programs
measured 10 15 bits before linearization,
7 12 bits after.
.B
CACM February, 1977
.A
Clark, D. W.
Green, C. C.
.K
list structure measurement, Lisp, list structure
regularity, poin ter compression, Zipf's law, list
linearization, poin ter entropy
.C
3.69 4.29 4.34 4.6 5.6
.N
CA770202 JB December 30, 1977 2:55 AM
.X
2855 5 2998
2944 5 2998
2998 5 2998
2998 5 2998
2998 5 2998
3106 5 2998
1549 6 2998
1549 6 2998
1826 6 2998
210 6 2998
210 6 2998
1972 6 2998
1972 6 2998
2513 6 2998
2665 6 2998
2766 6 2998
2766 6 2998
2833 6 2998
2833 6 2998
2855 6 2998
2954 6 2998
2998 6 2998
2998 6 2998
2998 6 2998
.I 2999
.T
Approach Multidimensional Data Array Processing Computer
.W
Some recent work development general-purpose
computer-based statistical data
processing capabilities handling multidimensional
arrays data presented. Attention first
given some general problems multidimensional
table array processing. followed
summary some recent developments array processing
capabilities World Bank, particular,
system identified WRAPS(World Bank
Retrieval Array Processing System).
.B
CACM February, 1977
.A
Muller, M. E.
.K
array processing, table processing, statistical
analysis, data retrieval, data processing, syntax
data structures, computing techniques, time series, cross tabulation
.C
3.10 3.20 3.30 3.70 4.0
.N
CA770201 JB December 30, 1977 3:12 AM
.X
2999 5 2999
2999 5 2999
2999 5 2999
.I 3000
.T
Segment Sizes Lifetimes Algol 60 Programs
.W
characteristics virtual memory requirements
sample Algol 60 programs have
been measured. Distributions presented thesizes
memory requests their holding times
(lifetimes). results presented terms Johnston's
contour model simple abstract machine.
They provide new empirical evidence certain aspects
construction behavior real programs,
some their implications design virtual
memory systems presented discussed.
.B
CACM January, 1977
.A
Batson, A. P.
Brundage, R. E.
.K
virtual memory, program behavior, segmentation,
storage allocation, Algol 60, contour model
.C
4.22 4.34 4.45 6.21
.N
CA770105 JB January 3, 1978 12:05 AM
.X
2095 4 3000
2218 4 3000
2218 4 3000
2498 4 3000
2596 4 3000
2734 4 3000
2734 4 3000
2902 4 3000
2911 4 3000
3000 4 3000
3000 4 3000
3000 4 3000
3067 4 3000
1879 5 3000
2095 5 3000
2864 5 3000
3000 5 3000
3000 5 3000
3000 5 3000
.I 3001
.T
Detection Combined Occurrences
.W
paper supposed variables
X1,...,Xn each have finite range variable
Xi taking Pi possible values values
variables changing time. supposed
further desired detect occurrences which
some subset variables achieve particular
values. Finally, supposed problem involves
detection large number combined
occurrences large number changes values
variables. Two efficient solutions problem
described. Both methods have unusual property
being faster systems sum P1 + ...
+ Pn larger. first solution error-free
suitable most cases. second solution
slightly more elegant allows negation well
conjunction, but subject possibility
errors. error analysis given second
method empirical study reported.
.B
CACM January, 1977
.A
Zobrist, A. L.
Carlson, F. R. Jr.
.K
coding, hash coding, retrieval, secondary keys, pattern
recognition, artificial telligence, demons,
n-tuples, sorting, chess
.C
3.63 5.31
.N
CA770104JB January 3, 1978 12:15 AM
.X
2532 4 3001
2631 4 3001
2746 4 3001
3001 4 3001
3001 4 3001
2033 5 3001
2139 5 3001
3001 5 3001
3001 5 3001
3001 5 3001
.I 3002
.T
Record File Partitioning Model
.W
One main objectives design
file system reduction storage data
transfer costs. paper presents model which
several requests access file system, each
request requires information one more variable
length data-items. probabilities access
distribution each data-item's length assumed
known, mutually independent.
file system uses one more storage devices,
each record may partitioned into subrecords
stored different devices. One subrecords
designated primary record;
request record made, primary record
first accessed, other subrecords accessed
only if pertinent information not stored
primary record. model presented
paper, both nonlinear programming model
mixed integer programming model, very general
one; several types file systems may derived
appropriate selection its parameters.
model has already been used optimization
library routines' storage large scale operating
system.
.B
CACM January, 1977
.A
Babad, J. M.
.K
file system, file design, file partitioning, record partitioning
.C
3.73
.N
CA770103 JB January 3, 1978 12:28 AM
.X
3002 5 3002
3002 5 3002
3002 5 3002
3168 5 3002
2965 6 3002
3002 6 3002
.I 3003
.T
Survey Literature Computer
Science Education Since Curriculum '68
.W
bibliography approximately two hundred
references computer science education appearing
literature since publication "Curriculum
'68" presented. bibliography itself
preceded brief descriptive materials organizing
references into categories survey reports,
activities professional organizations, philosophy
programs, description programs, description
courses other materials.
.B
CACM January, 1977
.A
Austing, R. H.
Barnes, B. H.
.K
education, computer science, curricula
.C
1.5
.N
CA770102 JB January 3, 1978 12:34 AM
.X
1927 4 3003
2153 4 3003
2163 4 3003
2407 4 3003
2407 4 3003
2478 4 3003
2852 4 3003
2852 4 3003
2899 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3003 4 3003
3011 4 3003
3050 4 3003
1659 5 3003
1678 5 3003
1927 5 3003
1945 5 3003
2097 5 3003
2147 5 3003
2163 5 3003
2187 5 3003
2329 5 3003
2345 5 3003
2367 5 3003
2407 5 3003
2478 5 3003
2479 5 3003
2480 5 3003
2538 5 3003
3003 5 3003
3003 5 3003
3003 5 3003
3130 5 3003
1771 6 3003
3003 6 3003
.I 3004
.T
Structured Programming Cobol: Approach Application Programmers
.W
Techniques designing writing Cobol programs
presented. Previous work structured
programming drawn upon adapted. presentation
informal: terminology nonmathematical
far possible, no theorems proved, examples
used frequently. Top-down program design
implemented through use structured flowcharts,
disciplined specifications, step step
verification. well-formed Cobol program defined.
proper use GO other Cobol coding
practices discussed.
.B
CACM January, 1977
.A
Van Gelder, A.
.K
structured programming, top-down, well-formed program,
GO statement, repeat statement, flowchart,
application programming, Cobol, software reliability, program verification
.C
4.0 4.22 5.24
.N
CA770101 JB January 3, 1978 12:44 AM
.X
2193 4 3004
2326 4 3004
2477 4 3004
2480 4 3004
2541 4 3004
2594 4 3004
2704 4 3004
2709 4 3004
2709 4 3004
2738 4 3004
2738 4 3004
2802 4 3004
2866 4 3004
2867 4 3004
2869 4 3004
2941 4 3004
2958 4 3004
3004 4 3004
3004 4 3004
3004 4 3004
3004 4 3004
3004 4 3004
3030 4 3004
3030 4 3004
3121 4 3004
3155 4 3004
1425 5 3004
2247 5 3004
2356 5 3004
2456 5 3004
3004 5 3004
3004 5 3004
3004 5 3004
3186 5 3004
.I 3005
.T
Implications Structured Programming Machine Architecture
.W
Based empirical study more than 10,000
lines program text written GOTO-less
language, machine architecture specifically designed
structured programs proposed. Since assignment,
CALL, RETURN, IF statements together account
93 percent all executable statements, special
care given ensure these statements can implemented
efficiently. highly compact instruction
encoding scheme presented, which can reduce program
size factor 3. Unlike Huffman code,
which utilizes variable length fields, method uses
only fixed length (1-byte) op code address
fields. most frequent instructions consist
single 1-byte field. consequence, instruction
decoding time minimized, machine
efficient respect both space time.
.B
CACM March, 1978
.A
Tanenbaum, A.S.
.K
machine architecture, computer architecture, computer
organization, instruction set design, program
characteristics
.C
4.12 4.22 4.9 6.21
.N
CA780308 JB March 28, 1978 12:55 PM
.X
2411 4 3005
2709 4 3005
2889 4 3005
2937 4 3005
2989 4 3005
3005 4 3005
3025 4 3005
3101 4 3005
2138 5 3005
3005 5 3005
3005 5 3005
3005 5 3005
.I 3006
.T
Anomalies Variable Partition Paging Algorithms
.W
Five types anomalous behavior which may
occur paged virtual memory operating systems
redefined. One type anomaly, example, concerns
fact that, certain reference strings
paging algorithms, increase mean memory allocation
may result increase fault rate.
Two paging algorithms, examined terms their
anomaly potential, reference string examples
various anomalies presented. Two paging algorithm
properties, inclusion property
generalized inclusion property, discussed
anomaly implications these properties presented.
.B
CACM March, 1978
.A
Franklin, M.A.
Graham, G.S.
Gupta, R.K.
.K
anomaly, memory management, program behavior, stack
algorithms, virtual memory, working set, page
fault frequency, paging algorithms
.C
4.32 4.35 4.6 8.1
.N
CA780307 JB March 28,1978 1:01 PM
.X
1892 4 3006
1901 4 3006
2022 4 3006
2085 4 3006
2085 4 3006
2095 4 3006
2218 4 3006
2277 4 3006
2319 4 3006
2329 4 3006
2358 4 3006
2373 4 3006
2373 4 3006
2374 4 3006
2380 4 3006
2380 4 3006
2434 4 3006
2499 4 3006
2450 4 3006
2450 4 3006
2501 4 3006
2582 4 3006
2595 4 3006
2669 4 3006
2828 4 3006
2863 4 3006
2881 4 3006
2928 4 3006
2996 4 3006
2996 4 3006
2996 4 3006
3006 4 3006
3006 4 3006
3006 4 3006
3006 4 3006
3006 4 3006
3067 4 3006
3067 4 3006
3067 4 3006
3067 4 3006
1751 5 3006
1884 5 3006
2373 5 3006
2374 5 3006
2595 5 3006
3006 5 3006
3006 5 3006
3006 5 3006
3067 5 3006
1751 6 3006
2374 6 3006
2373 6 3006
2595 6 3006
2682 6 3006
2863 6 3006
2864 6 3006
3006 6 3006
.I 3007
.T
Complexity Computations (Corrigendum)
.B
CACM March, 1978
.A
Rabin, M.O.
.N
CA780306 JB March 28, 1978 1:02 PM
.X
3007 5 3007
3007 5 3007
3007 5 3007
.I 3008
.T
Preserving Average Proximity Arrays
.W
Programmers data structure designers often
forced choose between alternative structures.
storing these structures, preserving logical adjacencies
"proximity" usually important consideration.
combinatorial problem storing arrays various
kinds list structures examined. Embeddings
graphs used model loss proximity involved
such storage schemes, elementary
proof arrays cannot stored linear lists
bounded loss proximity presented. Average
loss proximity then considered, shown
arrays cannot stored linear lists
only bounded loss average proximity, but can so
stored binary trees. former result implies,
instance, row major order asymptotically
optimal storage strategy arrays.
.B
CACM March, 1978
.A
DeMillo, R.A.
Eisenstat, S.C.
Lipton, R.J.
.K
arrays, graph embedding, linear lists,
proximity, average proximity, trees
.C
4.34 5.24 5.25 5.32
.N
CA780305 JB March 28, 1978 1:07 PM
.X
1050 4 3008
1102 4 3008
378 4 3008
3008 4 3008
731 4 3008
798 4 3008
209 5 3008
3008 5 3008
3008 5 3008
3008 5 3008
.I 3009
.T
Insertions Deletions One-Sided Height-Balanced Trees
.W
Recently Hirschberg has established insertions
into one-sided height-balanced trees can
done 0(log^2N) steps. proved here deletions
can also performed 0(log^2N) steps,
which answers open problem posed Hirschberg.
.B
CACM March, 1978
.A
Kosaraju, S.R.
.K
AVL trees, balanced trees, binary search, dynamic balancing
.C
3.73 3.74 4.34 5.25 5.31
.N
CA780304 JB March 28, 1978 1:12 PM
.X
3009 4 3009
3042 4 3009
3065 4 3009
3096 4 3009
3163 4 3009
2839 5 3009
3009 5 3009
3009 5 3009
3009 5 3009
3096 5 3009
3163 5 3009
2839 6 3009
2839 6 3009
2889 6 3009
2889 6 3009
3009 6 3009
3009 6 3009
3065 6 3009
3096 6 3009
.I 3010
.T
Value Orientation Computer Science Students
.W
Technological nontechnological value orientations
investigated special attention
complexity value structures. Computer science
students, closely associated technology,
contrast social science students, often
technologically aloof. confirmed
value ratings 313 students University Minnesota
1972. Computer science majors were found
have more complex value structure than social science majors.
.B
CACM March, 1978
.A
Anderson, R.E.
.K
values, attitudes, students, public, social effects
.C
2.11 2.12
.N
CA780303 JB March 28, 1978 1:21 PM
.X
3010 5 3010
3010 5 3010
3010 5 3010
.I 3011
.T
Management Utilization Computers American Local Governments
.W
Traditional concepts management information
systems (MIS) bear little relation information
systems currently use top management most US local
governments. exists management-oriented
computing, involving use relatively unsophisticated
applications. Despite unsophisticated
nature these systems, management use computing
surprisingly common, but also varied its extent
among local governments. Management computing most
prevalent those governments professional
management practices top management supportive
computing tends control computing decisions
department users have less control over design
implementation activities. Finally, management
computing clearly has impacts top managers, mostly
involving improvements decision information.
.B
CACM March, 1978
.A
Dutton, W.H.
Kraemer, K.L.
.K
computer utilization, management information system,
American local government, city government
computers, county government computers, computer impacts, management computing
.C
2.0 2.1 2.11 2.19 2.4 2.45 2.9 3.5 3.53
.N
CA780302 JB March 28, 1978 1:46 PM
.X
2407 4 3011
2852 4 3011
2977 4 3011
2985 4 3011
3003 4 3011
3011 4 3011
3011 4 3011
3011 4 3011
3011 4 3011
3035 4 3011
3050 4 3011
2075 5 3011
2302 5 3011
2345 5 3011
2485 5 3011
3011 5 3011
3011 5 3011
3011 5 3011
.I 3012
.T
Use Interactive Information Storage
Retrieval System Medical Research
.W
paper presents results study
use interactive computerized storage
retrieval system. monitor built into computer
system provided usage data study. Additional
data user reactions were gathe red questionnaire.
results show important role played
frequently chosen laboratory reference leaders influencing
use system. implications
study design similar systems discussed.
.B
CACM March, 1978
.A
Lucas, H.C.Jr.
.K
implementation, system use, information storage retrieval system
.C
2.10 3.50 3.72
.N
CA780301 JB March 28, 1978 1:51 PM
.X
3012 5 3012
3012 5 3012
3012 5 3012
.I 3013
.T
Some New Methods Detecting Step Edges Digital Pictures
.W
note describes two operators respond
step edges, but not ramps. first
similar digital Laplacian, but uses max, rather
than sum, x y second differences.
second uses difference between mean
median gray levels neighborhood. outputs
obtained these operators applied set test
pictures compared each other
standard digital Laplacian gradient. third
operator, which uses distance between center
centroid neighborhood edge value, also
briefly considered; turns out equivalent
one standard digital approximations gradient.
.B
CACM February,1978
.A
Schachter, B.J.
Rosenfeld, A.
.K
image processing, pattern recognition, edge detection
.C
3.63
.N
CA780210 JB March 28, 1978 1:56 PM
.X
3013 5 3013
3013 5 3013
3013 5 3013
.I 3014
.T
"Sometime" Sometimes Better than "Always"? (Intermittent
Assertions Proving Program Correctness)
.W
paper explores technique proving
correctness termination programs simultaneously.
approach, intermittent-assertion method, involves
documenting program assertions
must true some time control passes through
corresponding point, but need not true
every time. method, introduced Burstall, promises
provide valuable complement more
conventional methods. intermittent-assertion method
presented number examples correctness
termination proofs. Some these proofs markedly
simpler than their conventional counterparts.
other hand, shown proof correctness
termination any conventional
techniques can rephrased directly proof using
intermittent assertions. Finally, shown
intermittent-assertion method can applied
prove validity program transformations
correctness continuously operating programs.
.B
CACM February, 1978
.A
Manna, Z.
Waldinger, R.
.K
intermittent assertions, correctness programs,
termination programs, program verification,
program transformation, continuously operating programs.
.C
5.24
.N
CA780209 JB March 28, 1978 2:04 PM
.X
2021 4 3014
2222 4 3014
2227 4 3014
2315 4 3014
2326 4 3014
2470 4 3014
2732 4 3014
2865 4 3014
2896 4 3014
2943 4 3014
3014 4 3014
3014 4 3014
3068 4 3014
3077 4 3014
3143 4 3014
1834 5 3014
2981 5 3014
3014 5 3014
3014 5 3014
3014 5 3014
3157 5 3014
3014 6 3014
.I 3015
.T
Relaxation Methods Image Reconstruction
.W
problem recovering image (a function
two variables) experimentally available
integrals its grayness over thin strips great
importance large number scientific areas.
important version problem medicine
obtaining exact density distribution
within human body X-ray projections.One approach
has been taken solve problem
consists translating available information into
system linear inequalities. size
sparsity resulting system (typically, 25,000
inequalities fewer than 1 percent
coefficients nonzero) makes methods using successive
relaxations computationally attractive, compared
other ways solving systems inequalities.
paper, shown that, consistent
system linear inequalities, any sequence relaxarion parameters
lying strictly between 0 2 generates
sequence vectors which converges solution.
Under same assumptions, system linear
equations, relaxation method converges minimum
norm solution. Previously proposed techniques
shown special cases our procedure
different choices relaxation parameters.
practical consequences image reconstruction
choice relaxation parameters discussed.
.B
CACM February, 1978
.A
Herman, G.T.
Lent, A.
Lutz, P.H.
.K
biomedical image processing, image reconstruction,
X-ray tomography, mathematical programming,
linear inequalities, relaxation techniques
.C
3.12 3.17 3.34 3.63 5.14 5.18 5.41
.N
CA780208 JB March 28, 1978 2:13 PM
.X
3015 5 3015
3015 5 3015
3015 5 3015
.I 3016
.T
Comparison Numerical Techniques Markov Modeling
.W
paper presents several numerical methods which
may used obtain stationary probability
vectors Markovian models. example nearly
decomposable system considered, results
obtained different methods examined. post
mortem reveals why standard techniques often fail
yield correct results. Finally, means estimating
error inherent decomposition
certain models presented.
.B
CACM February, 1978
.A
Stewart, W.J.
.K
Markov models, numerical techniques, simultaneous
iteration, near-decomposability
.C
4.6 5.14 8.1
.N
CA780207 JB March 28, 1978 3:43 PM
.X
2374 4 3016
2481 4 3016
2669 4 3016
2863 4 3016
3016 4 3016
3016 4 3016
3052 4 3016
3070 4 3016
3153 4 3016
1901 5 3016
2741 5 3016
3016 5 3016
3016 5 3016
3016 5 3016
.I 3017
.T
B-trees Re-examined
.W
B-tree its variants have, increasing
frequency, been proposed basic storage
structure multiuser database applications. Here,
three potential problems which must dealt
such structure do not arise more traditional
static directory structures indicated.
One problem possible performance penalty.
.B
CACM February, 1978
.A
Held, G.
Stonebraker, M.
.K
B-tree, directory, static directory, dynamic
directory, index sequential access method
.C
3.70 3.73 3.74 4.33 4.34
.N
CA780206 JB March 28, 1978 3:46 PM
.X
2626 4 3017
2786 4 3017
2840 4 3017
2919 4 3017
3017 4 3017
3110 4 3017
3174 4 3017
2629 5 3017
3017 5 3017
3017 5 3017
3017 5 3017
.I 3018
.T
Covering Edges Cliques Regard
Keyword Conflicts Intersection Graphs
.W
Kellerman has presented method determining
keyword conflicts described heuristic
algorithm which solves certain combinatorial optimization
problem connection method.
optimization problem here shown equivalent
problem covering edges graph
complete subgraphs objective minimizing
number complete subgraphs. relationship
between edge-clique-cover problem graph coloring
problem established which allows algorithms
either one these problems constructed
algorithm other. consequences
relationship, keyword conflict problem
edge-clique-cover problem shown NP-complete,
if P=/NP then they do not admit polynomial-time approximation
algorithms which always produce solutions
within factor less than 2 optimum.
.B
CACM February, 1978
.A
Kou, L.T.
Stockmeyer, L.J.
Wong, C.K.
Watson, T.J.
.K
keyword conflicts, intersection graphs, node clique
cover, edge clique cover, computational complexity,
NP-complete problems, polynomial-time heuristics
.C
4.12 5.25 5.32
.N
CA780205 JB March 28, 1978 4:18 PM
.X
3018 5 3018
3018 5 3018
3018 5 3018
.I 3019
.T
GRE Advanced Test Computer Science
.B
CACM February, 1978
.A
Austing, R.H.
.N
CA780204 JB March 28, 1978 4:19 PM
.X
3019 5 3019
3019 5 3019
3019 5 3019
.I 3020
.T
Systematic Recursion Removal
.W
recursion removal algorithm presented
Strong Walker amplified applied
relatively complex PL/I program. aim demonstrate
systematic recursion-removal techniques
something more complex than Knuth's "sturdy toddler"
obtain measurements cost procedure
linkage PL/I savings achievable via procedure
integration presence recursion. First,
paper describes recursion-removal process
example which illustrated. Recursion
removal then applied two major parts
example final result process
displayed. Our performance comparison results presented
our conclusions briefly discussed.
.B
CACM February, 1978
.A
Auslander, M.A.
Strong, H.R.
.K
recursion removal, recursion elimination, optimization,
procedure linkage, procedure integration
.C
4.19 4.49 4.9 5.24
.N
CA780203 JB March 28, 1978 4:26 PM
.X
3020 4 3020
2953 5 3020
3020 5 3020
3020 5 3020
3020 5 3020
.I 3021
.T
Method Obtaining Digital Signatures Public-Key Cryptosystems
.W
encryption method presented novel
property publicly revealing encryption
key does not thereby reveal corresponding decryption
key. has two important consequences: (1)
Couriers other secure means not needed transmit
keys, since message can enciphered using
encryption key publicly revealed intended recipient.
Only he can decipher message, since
only he knows corresponding decryption key. (2)
message can "signed" using privately held
decryption key. Anyone can verify signature using
corresponding publicly revealed encryption
key. Signatures cannot forged, signer cannot
later deny validity his signature.
has obvious applications "electronic mail" "electronic
funds transfer" systems. message
encrypted representing number M, raising
M publicly specified power e, then taking
remainder result divided publicly
specified product, n, two large secret prime
numbers p q. Decryption similar;only different,
secret, power d used, e * d = 1 (mod(p-1)
* (q-1)). security system rests part
difficulty factoring published divisor,
n.
.B
CACM February, 1978
.A
Rivest, R.L.
Shamir, A.
Adleman, L.
.K
digital signatures, public-key cryptosystems,
privacy, authentication, security, factorization,
prime number, electronic mail, message-passing,
electronic funds transfer, cryptography.
.C
2.12 3.15 3.50 3.81 5.25
.N
CA780202 JB March 28, 1978 4:40 PM
.X
3021 4 3021
3158 4 3021
3021 5 3021
3021 5 3021
3021 5 3021
3038 5 3021
3111 5 3021
3177 5 3021
3021 6 3021
3021 6 3021
3021 6 3021
.I 3022
.T
Computer Science Faculties: Current Status Minorities Women
.W
results survey conducted fall
1975 determine status women
minority faculty members academic computer science
presented. Faculty members were compared
respect professional background, salaries, teaching
load, publication records, research grants.
Analysis data indicated over-all verdict
one general equality among women, minorities,
men.
.B
CACM February, 1978
.A
Mamrak, S.A.
Montanelli, R.G.Jr.
.K
discrimination against women, discrimination against
minorities, faculty, computer science degree
programs, affirmative action, teaching loads, salaries, publications
.C
1.52 1.53 2.2 2.3
.N
CA780201 JB March 28, 1978 5:11 PM
.X
3022 4 3022
3123 4 3022
2823 5 3022
3022 5 3022
3022 5 3022
3022 5 3022
3123 5 3022
2823 6 3022
2861 6 3022
2962 6 3022
3022 6 3022
.I 3023
.T
Architecture IBM System/370
.W
paper discusses design considerations
architectural extensions distinguish
System/370 System/360. comments some experiences
original objectives System/360
efforts achieve them, describes
reasons objectives extending architecture.
covers virtual storage, program control, data-manipulation
instructions, timing facilities, multiprocessing,
debugging monitoring, error handling, input/output
operations. final section tabulates some
important parameters various IBM
machines which implement architecture.
.B
CACM January, 1978
.A
Case, R.P.
Padges, A.
.K
computer systems, architecture, instruction
sets, virtual storage, error handling
.C
6.0 6.21
.N
CA780107 JB March 28, 1978 5:16 PM
.X
3023 5 3023
3023 5 3023
3023 5 3023
.I 3024
.T
CRAY-1 Computer System
.W
paper describes CRAY-1, discusses
evolution its architecture, gives
account some problems were overcome during
its manufacture. CRAY-1 only computer
have been built date satisfies ERDA's Class
VI requirement (a computer capable processing
20 60 million floating point operations per
second) [1]. CRAY-1's Fortran compiler (CFT)
designed give scientific user immediate access
benefits CRAY-1's vector processing
architecture. optimizing compiler, CFT, "vectorizes"
innermost DO loops. Compatible ANSI
1966 Fortran Standard many commonly supported
Fortran extensions, CFT does not require any source
program modifications use additional nonstandard
Fortran statements achieve vectorization.
Thus user's investment hundreds man months
effort develop Fortran programs other
contemporary computers protected.
.B
CACM January, 1978
.A
Russell, R.M.
.K
architecture, computer systems
.C
1.2 6.2 6.3
.N
CA780106 JB March 28, 1978 5:24 PM
.X
3024 5 3024
3024 5 3024
3024 5 3024
.I 3025
.T
Evolution DEC system 10
.W
DEC system 10, also known PDP-10, evolved
PDP-6 (circa 1963) over five generations
implementations presently include systems covering
price range five one. origin
evolution hardware, operating system, languages
described terms technological change,
user requirements, user developments. PDP-10's
contributions computing technology include:
accelerating transition batch oriented time
sharing computing systems; transferring hardware
technology within DEC (and elsewhere) minicomputer
design manufacturing; supporting minicomputer
hardware software development; serving
model single user timeshared interactive
minicomputer/microcomputer systems.
.B
CACM January, 1978
.A
Bell, C.G.
Kotok, A.
Hastings, T.N.
Hill, R.
.K
computer structures, architecture, operating system, timesharing
.C
4.32 6.21 6.3
.N
CA780105 JB March 28, 1978 5:31 PM
.X
2411 4 3025
2709 4 3025
2889 4 3025
2937 4 3025
2989 4 3025
3005 4 3025
3025 4 3025
3025 4 3025
3101 4 3025
2138 5 3025
2989 5 3025
3025 5 3025
3025 5 3025
3025 5 3025
.I 3026
.T
Evolution Sperry Univac 1100
Series: His tory, Analysis, Projection
.W
1100 series systems Sperry Univac's
large-scale main frame computer systems. Beginning
1107 1962, 1100 series has progressed
through succession eight compatible computer
models latest system, 1100/80, introduced
1977. 1100 series hardware architecture
based 36-bit word, ones complement structure
which obtains one operand storage one
high-speed register, two operands high-speed
registers. 1100 Operating System designed
support symmetrical multiprocessor configuration
simultaneously providing multiprogrammed batch,
timesharing, transaction environments.
.B
CACM January, 1978
.A
Borgherson, B.R.
Hanson, M.L.
Hartley, P.A.
.K
1100 computer series, computer architecture, multiprocessing
languages, data management systems,
end user facilities, executive control software
.C
1.3 4.0 4.20 4.30 4.32 4.33 4.35 6.0 6.21 6.30
.N
CA780104 JB March 28, 1978 5:38 PM
.X
3026 5 3026
3026 5 3026
3026 5 3026
.I 3027
.T
Development MU5 Computer System
.W
Following brief outline background
MU5 project, aims ideas MU5
discussed. description then given instruction
set, which includes number features
conducive production efficient compiled code
high-level language source programs.
design processor then traced initial
ideas associatively addressed "name store"
final multistage pipeline structure involving
prediction mechanism instruction prefetching
function queue array element accessing.
overall view complete MU5 complex presented
together brief indication its performance.
.B
CACM January, 1978
.A
Ibbett, R.N.
Capon, P.C.
.K
architecture, naming, virtual storage, instruction
set, descriptor, pipeline, instruction buffering,
associative storage, function queue, computer complex
.C
4.10 4.12 6.21 6.33
.N
CA780103 JB March 28, 1978 5:44 PM
.X
3027 4 3027
3027 5 3027
3027 5 3027
3027 5 3027
3028 5 3027
3027 6 3027
.I 3028
.T
Manchester Mark Atlas: His torical Perspective
.W
30 years computer design Manchester University
two systems stand out: Mark (developed
over period 1946-49) Atlas (1955-62).
paper places each computer its his torical
context then describes architecture system
software present-day terminology. Several
design concepts such address-generation store
management have evolved progression
Mark Atlas. wider impact Manchester innovations
these other areas discussed,
contemporary performance Mark Atlas evaluated.
.B
CACM January, 1978
.A
Lavington, S.H.
.K
architecture, index registers, paging, virtual
storage, extra codes, compilers, operating systems,
Ferranti, Manchester Mark I, Atlas, ICL
.C
1.2 4.22 4.32 6.21 6.30
.N
CA780102 JB March 28,1978 5:50 PM
.X
3028 4 3028
3027 5 3028
3028 5 3028
3028 5 3028
3028 5 3028
3028 6 3028
.I 3029
.T
Foreword Special Issue Computer Architecture
.B
CACM January, 1978
.A
Fuller,S.H.
.N
CA780101 JB March 28, 1978 5:52 PM
.X
3029 5 3029
3029 5 3029
3029 5 3029
.I 3030
.T
Example Hierarchical Design Proof
.W
Hierarchical programming being increasingly
recognized helpful construction
large programs. Users hierarchical techniques claim
predict substantial increases productivity
reliability programs produced.
paper we describe formal method hierarchical
program specification, implementation, proof. We
apply method significant list processing
problem also discuss number extensions current
programming languages ease hierarchical
program design proof.
.B
CACM December, 1978
.A
Spitzen, J.M.
Levitt, K.N.
Robinson, L.
.K
Program verification, specification, data abstraction,
software modules, hierarchical structures
.C
4.0 4.6 5.21 5.24
.N
CA781209 DH January 16, 19794:43 PM
.X
2480 4 3030
2704 4 3030
2723 4 3030
2738 4 3030
2738 4 3030
2866 4 3030
2867 4 3030
2869 4 3030
2941 4 3030
2941 4 3030
2956 4 3030
2958 4 3030
2981 4 3030
3004 4 3030
3004 4 3030
3030 4 3030
3030 4 3030
3030 4 3030
3030 4 3030
3030 4 3030
3030 4 3030
3031 4 3030
3049 4 3030
3077 4 3030
3104 4 3030
3155 4 3030
2247 5 3030
2356 5 3030
2457 5 3030
2651 5 3030
2958 5 3030
2972 5 3030
3030 5 3030
3030 5 3030
3030 5 3030
.I 3031
.T
Abstract Data Types Software Validation
.W
data abstraction can naturally specified
using algebraic axioms. virtue these
axioms they permit representation-independent
formal specification data type. example
given which shows employ algebraic axioms
successive levels implementation. major
thrust paper twofold. First, shown
use algebraic axiomatizations can simplify
process proving correctness implementation
abstract data type. Second, semi-automatic
tools described which can used both automate
such proofs correctness derive immediate
implementation axioms. implementation
allows limited testing programs design
time, before conventional implementation accomplished.
.B
CACM December, 1978
.A
Guttag, J.V.
Horowitz, E.
Musser, D.R.
.K
Abstract data type, correctness proof,
data type, data structure, specification
.C
4.34 5.24
.N
CA781208 DH January 18, 1979 2:51 PM
.X
3030 4 3031
3031 4 3031
3031 4 3031
3049 4 3031
3105 4 3031
3148 4 3031
3150 4 3031
2939 5 3031
2958 5 3031
3031 5 3031
3031 5 3031
3031 5 3031
.I 3032
.T
Reverse Path Forwarding Broadcast Packets
.W
broadcast packet delivery all
nodes network. Algorithms accomplishing
delivery through store-and-forward packet switching
computer network include (1) transmission
separately addressed packets. (2) multidestination
addressing, (3) hot potato forwarding,(4) spanning
tree forwarding, (5) source based forwarding.
list algorithms we add (6) reverse path
forwarding, broadcast routing method which exploits
routing procedures data structures already
available packet switching. Reverse path forwarding
practical algorithm broadcast routing
store-and-forward packet switching computer networks.
algorithm described being practical
because not optimal according metrics developed
its analysis paper, also because
can implemented existing networks less complexity
than required known alternatives.
.B
CACM December, 1978
.A
Dalal, Y.K.
Metcalfe, R.M.
.K
Reverse path forwarding, broadcast packets, routing,
computer networks, store-and-forward packet
switching, broadcast protocols
.C
3.81 4.32 5.32
.N
CA781207 DH January 18, 1979 3:10 PM
.X
3032 4 3032
3119 4 3032
2849 5 3032
3032 5 3032
3032 5 3032
3032 5 3032
.I 3033
.T
Optimizing Decision Trees Through Heuristically Guided Search
.W
Optimal decision table conversion has been
tackled literature using two approaches,
dynamic programming branch-and-bound. former
technique quite effective, but its time
space requirements independent "easy"
given table is. Furthermore, cannot used
produce good, quasi optimal solutions. branch-and-bound
technique uses good heuristic direct
search, but cluttered up enormous search
space, since number solutions increases
number test variables according double
exponential. paper we suggest heuristically
guided top-down search algorithm which, like dynamic
programming, recognizes identical subproblems but
which can used find both optimal quasi optimal
solutions. heuristic search method introduced
paper combines positive aspects above
two techniques. Compressed tables large
number variables can handled without deriving expanded tables first.
.B
CACM December, 1978
.A
Martelli, A.
Montanari, U.
.K
Decision table, optimal decision table conversion,
decision tree, heuristic search, AND/OR graphs,
dynamic programming, branch-and-bound
.C
3.59 3.66 5.42 8.3
.N
CA781206 DH January 18, 1979 3:56 PM
.X
3033 4 3033
3113 4 3033
2856 5 3033
3033 5 3033
3033 5 3033
3033 5 3033
.I 3034
.T
Detection Logical Errors Decision Table Programs
.W
paper algorithm detect logical
errors limited-entry decision table
loop-free programs embedded decision tables developed.
All conditions decision tables
assumed inequalities equalities relating
linear expressions. also assumed actions
decision table linear variables which occur
condition stub decision table (or
tables) which control transferred table.
algorithm based determining whether
set linear inequalities has does not have
solution. algorithm described paper
implemented Fortran IV.
.B
CACM December, 1978
.A
Ibramsha, M.
Rajaraman, V.
.K
Error diagnostics, decision tables
.C
3.5 4.1 4.42 5.24
.N
CA781205 DH January 18, 1979 4:06 PM
.X
2053 4 3034
2221 4 3034
2273 4 3034
2453 4 3034
2517 4 3034
2517 4 3034
2518 4 3034
2616 4 3034
2616 4 3034
2856 4 3034
3034 4 3034
3034 4 3034
3034 4 3034
1684 5 3034
2053 5 3034
2517 5 3034
3034 5 3034
3034 5 3034
3034 5 3034
.I 3035
.T
Strategic Planning Methodology Computing
Effort Higher Education: Empirical Evaluation
.W
findings study designed address
pressing problems associated strategic
planning computing effort higher education
presented here. planning methodology
developed tested through implementation university.
Two years after methodology implemented,
effectiveness planning methodology assessed
terms improvement delivery
computing services major institutional roles
instruction, research, administration.
Two control institutions were employed contrast
improvements test institution. results
research indicate planning methodology significantly
enhanced delivery computing services.
.B
CACM December, 1978
.A
Wetherbe, J.C.
Dock, V.T.
.K
Computer management, computer budget,
university computing, computer planning
.C
2.41 3.51
.N
CA781204 DH January 18, 1979 4:26 PM
.X
2977 4 3035
2985 4 3035
3011 4 3035
3035 4 3035
2485 5 3035
3035 5 3035
3035 5 3035
3035 5 3035
.I 3036
.T
Selection Optimal Tab Settings
.W
new generation computer terminals allows
tab settings selected set computer.
feature can used reduce number characters
needed represent document
transmission printing. note, algorithm
given selecting optimal set
tab stops minimizing number characters transmitted.
implementation algorithm has
reduced number characters transmitted
7 30 percent, but requires prepass through
document compute matrix used determining
optimal set tab stops. use fixed tab
stops, heuristic alternative, can achieve
80 percent optimal no prepass.
.B
CACM December, 1978
.A
Peterson, J.L.
Bitner, J.R.
Howard, J.H.
.K
Tabs, word processing, dynamic programming
.C
3.9 4.4
.N
CA781203 DH January 18, 1979 4:34 PM
.X
3036 5 3036
3036 5 3036
3036 5 3036
.I 3037
.T
Linear Sieve Algorithm Finding Prime Numbers
.W
new algorithm presented finding all
primes between 2 n. algorithm executes
time proportional n (assuming multiplication
integers not larger than n can performed
unit time). method has same arithmetic complexity
algorithm presented Mairson [6];
however, our version perhaps simpler more elegant.
also easily extended find prime
factorization all integers between 2 n time proportional n.
.B
CACM December, 1978
.A
Gries, D.
Misra, J.
.K
Primes, algorithms, data structures
.C
5.25 5.24 5.29
.N
CA781202 DH January 22, 1979 11:12 AM
.X
2896 4 3037
2972 4 3037
3037 4 3037
3037 4 3037
3039 4 3037
3043 4 3037
3073 4 3037
2732 5 3037
2927 5 3037
3037 5 3037
3037 5 3037
3037 5 3037
.I 3038
.T
Using Encryption Authentication Large Networks Computers
.W
Use encryption achieve authenticated
communication computer networks discussed.
Example protocols presented establishment
authenticated connections, management
authenticated mail, signature verification
document integrity guarantee. Both conventional
public-key encryption algorithms considered basis protocols.
.B
CACM December, 1978
.A
Needham, R.M.
Schroeder, M.D.
.K
Encryption, security, authentication, networks, protocols,
public-key cryptosystems, data encryption
standard
.C
3.81 4.31 4.35
.N
CA781201 DH January 22, 1979 11:18 AM
.X
3038 4 3038
3111 4 3038
3177 4 3038
3021 5 3038
3038 5 3038
3038 5 3038
3038 5 3038
3158 5 3038
2436 6 3038
3038 6 3038
3111 6 3038
.I 3039
.T
On-the-Fly Garbage Collection: Exercise Cooperation
.W
example cooperation between sequential
processes very little mutual interference
despite frequent manipulations large shared data
space, technique developed which allows nearly
all activity needed garbage detection collection
performed additional processor
operating con-currently processor devoted
computation proper. Exclusion synchronization
constraints have been kept weak could achieved;
severe complexities engendered doing
so illustrated.
.B
CACM November, 1978
.A
Dijkstra, E.W.
Lamport, L.
Martin, A.J.
Scholten, C.S.
Steffens, E.F.M.
.K
Multiprocessing, fine-grained interleaving, cooperation
between sequential processes minimized
mutual exclusion, program correctness multiprogramming
tasks, garbage collection
.C
4.32 4.34 4.35 4.39 5.24
.N
CA781112 DH January 22, 1979 3:24 PM
.X
2838 4 3039
2896 4 3039
2896 4 3039
2972 4 3039
3037 4 3039
3039 4 3039
3039 4 3039
3039 4 3039
3043 4 3039
3073 4 3039
3074 4 3039
3112 4 3039
2723 5 3039
2732 5 3039
2896 5 3039
3039 5 3039
3039 5 3039
3039 5 3039
.I 3040
.T
Synthesizing Constraint Expressions
.W
constraint network representation presented
combinatorial search problem: finding
values set variables subject set constraints.
theory consistency levels such
networks formulated, which related problems
backtrack tree search efficiency. algorithm
developed can achieve any level consistency
desired, order preprocess problem
subsequent backtrack search, function alternative
backtrack search explicitly determining
all solutions.
.B
CACM November, 1978
.A
Freuder, E.C.
.K
Backtrack, combinatorial algorithms, constraint
networks, constraint satisfaction, graph coloring,
network consistency, relaxation, scene labeling, search
.C
3.63 3.64 5.25 5.30 5.32
.N
CA781111 DH January 22, 1979 3:43 PM
.X
1504 4 3040
3040 4 3040
1145 5 3040
3040 5 3040
3040 5 3040
3040 5 3040
.I 3041
.T
Median Split Trees: Fast Lookup Technique Frequently Occuring Keys
.W
Split trees new technique searching sets
keys highly skewed frequency distributions.
split tree binary search tree each node which
contains two key values-a node value which
maximally frequent key subtree, split
value which partitions remaining keys (with
respect their lexical ordering) between left
right subtrees. median split tree (MST) uses
lexical median node's descendents its split
value force search tree perfectly
balanced, achieving both space efficient representation
tree high search speed. Unlike
frequency ordered binary search trees, cost
successful search MST log n bounded
very stable around minimal values. Further, MST
can built given key ordering set
frequencies time n log n, opposed n2
optimum binary search tree. discussion
application MST's dictionary lookup English
presented, performance obtained contrasted
other techniques.
.B
CACM November, 1978
.A
Sheil, B.A.
.K
Tree search, dictionary lookup, binary search, heaps,
balanced trees, Zipf's Law, information retrieval
.C
3.74 5.25 5.39
.N
CA781110 DH January 25, 1979 9:49 AM
.X
3041 4 3041
3041 4 3041
3126 4 3041
3176 4 3041
2846 5 3041
2905 5 3041
3041 5 3041
3041 5 3041
3041 5 3041
.I 3042
.T
Power Trees
.W
new class Pk trees presented,
height balance maintained nodes Iying
particular paths. number nodes Pk tree
asymptotically grows power height,
worst case. procedure node insertion given,
class trees considered restricted
IPk trees, which buildable such procedure.
average behavior such trees, studied
extensive set simulation runs, close
AVL trees. particular, family IPO
trees whose main advantage reduced number
restructurings required after node insertion,
analyzed.
.B
CACM November, 1978
.A
Luccio, F.
Pagli, L.
.K
Binary search trees, Pk trees, IPk trees, search
length, node insertion, subtree rotation
.C
3.73 3.74 4.34 5.25 5.31
.N
CA781109 DH January 25, 1979 4:29 PM
.X
2839 4 3042
2889 4 3042
2968 4 3042
3009 4 3042
3042 4 3042
3042 4 3042
3042 4 3042
3042 4 3042
3065 4 3042
3096 4 3042
3096 4 3042
3163 4 3042
3163 4 3042
2455 5 3042
2839 5 3042
2889 5 3042
2968 5 3042
3042 5 3042
3042 5 3042
3042 5 3042
.I 3043
.T
Distributed Processes: Concurrent Programming Concept
.W
language concept concurrent processes
without common variables introduced. These
processes communicate synchronize means procedure
calls guarded regions. concept
proposed real-time applications controlled
microcomputer networks distributed storage.
paper gives several examples distributed processes
shows they include procedures, coroutines,
classes, monitors, processes, semaphores, buffers, path
expressions, input/output special cases.
.B
CACM November, 1978
.A
Hansen, P.
.K
Concurrent programming, distributed processes,
microprocessor networks, nondeterminism, guarded
regions, programming languages, process communication
scheduling, sorting arrays, coroutines, classes,
monitors, processes, semaphores, buffers, path expressions, input/output
.C
3.8 4.2 4.22 4.32 5.24
.N
CA781108 DH January 26, 1979 10:40 AM
.X
2865 4 3043
2866 4 3043
2896 4 3043
2898 4 3043
2972 4 3043
2972 4 3043
3037 4 3043
3039 4 3043
3043 4 3043
3043 4 3043
3073 4 3043
3128 4 3043
3144 4 3043
2597 5 3043
2732 5 3043
3043 5 3043
3043 5 3043
3043 5 3043
.I 3044
.T
Note Conditional Expressions
.W
Evaluation conditional expression may succeed
even "deciding predicate" diverges
alternatives records (or nodes) whose fields have different content.
.B
CACM November, 1978
.A
Friedman, D.P.
Wise, D.S.
.K
Parallel evaluation, suspending cons, Lisp, conditional
forms, if-then-else, ambiguous function,
infinite structures
.C
4.2 4.13 4.32 5.24
.N
CA781107 DH January 26, 1979 10:44 AM
.X
1469 4 3044
1486 4 3044
1491 4 3044
1781 4 3044
2178 4 3044
2326 4 3044
2470 4 3044
2684 4 3044
3044 4 3044
1303 5 3044
3044 5 3044
3044 5 3044
3044 5 3044
.I 3045
.T
Simple Recovery-Only Procedure SImple Precedence Parsers
.W
simple method described enabling simple
precedence parsers recover syntax errors.
No attempt repair errors made, yet parsing
most semantic processing can continue. result
good "first approximation" syntax error handling
negligible increase parsing time, space,
complexity both parser its table generator.
.B
CACM November, 1978
.A
Ripley, D.G.
.K
Syntax errors, error recovery, parsing,
simple precedence, compilers, debugging
.C
4.12 4.42 5.23
.N
CA781106 DH January 26, 1979 10:52 AM
.X
1379 4 3045
1542 4 3045
1683 4 3045
1693 4 3045
1693 4 3045
1781 4 3045
1781 4 3045
1787 4 3045
1836 4 3045
1836 4 3045
1945 4 3045
1945 4 3045
2015 4 3045
2060 4 3045
2060 4 3045
2061 4 3045
2061 4 3045
2082 4 3045
2091 4 3045
2091 4 3045
2152 4 3045
2179 4 3045
2179 4 3045
2340 4 3045
2356 4 3045
2546 4 3045
2546 4 3045
2603 4 3045
2698 4 3045
2698 4 3045
2708 4 3045
2708 4 3045
2708 4 3045
2820 4 3045
2824 4 3045
2971 4 3045
2982 4 3045
2986 4 3045
3045 4 3045
3045 4 3045
3045 4 3045
3093 4 3045
1477 5 3045
1491 5 3045
2534 5 3045
3045 5 3045
3045 5 3045
3045 5 3045
.I 3046
.T
Computer Generation Gamma Random Variables - II
.W
rejection method proposed generating
gamma variates nonintegral shape parameter
a, > 1. method similar other methods given
Fishman, Wallace, Tadikamalla faster
than these methods a> 2. core storage requirements
programming effort proposed
method similar those Wallace's Tadikamalla's
methods. computational times proposed
method remain fairly constant medium large
values superior times obtained
Ahrens Dieter's method all values a.
proposed method simpler than Ahrens Dieter's
method.
.B
CACM November, 1978
.A
Tadikamalla, P.R.
.K
Gamma variables, rejection method, computer methods
.C
5.5 8.1
.N
CA781105 DH January 26, 1979 11:02 AM
.X
2847 4 3046
2928 4 3046
3046 4 3046
3046 4 3046
3046 4 3046
3098 4 3046
3098 4 3046
3107 4 3046
2569 5 3046
2847 5 3046
3046 5 3046
3046 5 3046
3046 5 3046
3098 5 3046
.I 3047
.T
Using Synthetic Images Register Real Images Surface Models
.W
number image analysis tasks can benefit
registration image model
surface being imaged. Automatic navigation using visible
light radar images requires exact alignment
such images digital terrain models. addition,
automatic classification terrain, using
satellite imagery, requires such alignment deal correctly
effects varying sun angle
surface slope. Even inspection techniques certain
industrial parts may improved means.
We achieve required alignment matching real
image synthetic image obtained surface
model known positions light sources.
synthetic image intensity calculated using
reflectance map, convenient way describing surface reflection
function surface gradient.
We illustrate technique using LANDSAT images digital terrain models.
.B
CACM November, 1978
.A
Horn, B.K.P.
Bachman, B.L.
.K
Image registration, synthetic images, surface models,
automatic hill shading, digital terrain models,
image transformation, image matching, shaded images
.C
3.63 3.11 3.14 8.2 3.83
.N
CA781104 DH January 26, 1979 11:16 AM
.X
2816 4 3047
2816 4 3047
2828 4 3047
2827 4 3047
2913 4 3047
3047 4 3047
3047 4 3047
2751 5 3047
2829 5 3047
3047 5 3047
3047 5 3047
3047 5 3047
.I 3048
.T
Performance Evaluation Highly Concurrent
Computers Deterministic Simulation
.W
Simulation presented practical technique
performance evaluation alternative
configurations highly concurrent computers. technique
described constructing detailed
deterministic simulation model system. model
control stream replaces instruction
data streams real system. Simulation
system model yields timing resource usage
statistics needed performance evaluation, without
necessity emulating system. case
study, implementation simulator model
CPU-memory subsystem IBM 360/91
described. results evaluating some alternative
system designs discussed. experiments
reveal that, case study, major bottlenecks
system memory unit fixed
point unit. Further, appears many sophisticated
pipelining buffering technique simplemented
architecture IBM 360/91 little
value high-speed (cache) memory used,
IBM 360/195.
.B
CACM November, 1978
.A
Kumar, B.
Davidson, E.S.
.K
Performance evaluation, deterministic simulation,
control stream, concurrent computers
.C
6.20 8.1
.N
CA781103 DH January 26, 1979 11:26 AM
.X
3048 5 3048
3048 5 3048
3048 5 3048
.I 3049
.T
Simply Extended Modified Batch
Environment Graphical System (SEMBEGS)
.W
SEMBEGS complete batch environment graphical
system containing components handling
graphical data files, displaying contents
these files variety graphical hardware,
performing graphical batch input operations.
SEMBEGS easy extend modify meet
growing needs large batch environment, even
extendable fully interactive system.
paper presents conceptual view graphics leading
design SEMBEGS outlines major
components system. design SEMBEGS founded
upon basic assumption true aim
computer graphics describe graphical entities,
rather than, commonly held, provide graphical
input output functional capabilities. SEMBEGS
built around Basic Graphical Data Management
System (BAGDAMS) which provides common means communicating
descriptions graphical entities
between various components SEMBEGS. BAGDAMS
provides facilities storing, retrieving,
manipulating descriptions graphical entities
provided by, received application programs,
graphics packages, graphical devices.
.B
CACM November, 1978
.A
Wendorf, J.W.
.K
Computer graphics, data structures, graphic display,
graphic input, graphical database, device
independent graphics
.C
4.33 4.34 8.2
.N
CA781102 DH January 26, 1979 1:30 PM
.X
3030 4 3049
3031 4 3049
3049 4 3049
3049 4 3049
3049 4 3049
3049 4 3049
2956 5 3049
2957 5 3049
2958 5 3049
2960 5 3049
3049 5 3049
3049 5 3049
3049 5 3049
.I 3050
.T
Systems Design Education: Gaming Approach
.W
One problems facing managers computer
installations problem configuring
computer system meet demands made
mix jobs computer center must service.
paper presents management game allows
player configure computer system meet
hypothetical job mix under control game administrator
can varied simulate variety
real-world situations (I/O bound jobs, compute bound
jobs, etc.). player game receives
set detailed reports cost his choices
simulated run center operating under
his choices.
.B
CACM November, 1978
.A
Lyons, N.R.
.K
System design, configuration, management game
.C
2.43 2.44
.N
CA781101 DH January 29, 1979 11:43 AM
.X
2407 4 3050
2852 4 3050
2852 4 3050
3003 4 3050
3011 4 3050
3050 4 3050
3050 4 3050
2345 5 3050
2387 5 3050
3050 5 3050
3050 5 3050
3050 5 3050
.I 3051
.T
Comparison Heaps TL Structure SImulation Event Set
.W
None
.B
CACM October, 1978
.A
Franta, W.R.
Maly, K.
.K
Simulation,event set, heaps, TL structure
.C
3.34 4.22 5.5 8.1
.N
CA781010 DH January 29, 1979 11:51 AM
.X
2844 4 3051
2936 4 3051
3051 4 3051
3051 4 3051
3064 4 3051
3109 4 3051
3109 4 3051
2767 5 3051
2844 5 3051
3051 5 3051
3051 5 3051
3051 5 3051
.I 3052
.T
Cold-Start vs. Warm-Start Miss Ratios
.W
two-level computer storage hierarchy, miss
ratio measurements often made "cold
start," made first-level store initially
empty. large capacities effect
measured miss ratio misses incurred while
filling first-level store can significant,
even long reference strings. Use "warm-start"
rather than "cold-start" miss ratios cast doubt
widespread belief observed "S-shape"
lifetime (reciprocal miss ratio) versus capacity
curve indicates property behavior programs
maintain constant number pages main storage.
other hand, if cold-start miss ratios measured
function capacity measurement
length, then they useful studying systems which
operation program periodically interrupted
task switches. shown obtain, under simple
assumptions, cache miss ratio multiprogramming
cold-start miss ratio values obtain
approximate cold-start miss ratios warm-start
miss ratios.
.B
CACM October, 1978
.A
Easton, M.C.
Fagin, R.
.K
Miss ratio, cold start, warm start, storage hierarchy,
lifetime function, multiprogramming, S-shape
.C
3.70 4.32 9.35
.N
CA781009 DH January 29, 1979 5:16 PM
.X
2374 4 3052
2481 4 3052
2669 4 3052
2863 4 3052
3016 4 3052
3052 4 3052
1901 5 3052
3052 5 3052
3052 5 3052
3052 5 3052
.I 3053
.T
Packed Scatter Tables
.W
Scatter tables open addressing benefit
recursive entry displacements, cutoffs
unsuccessful searches, auxiliary cost functions. Compared
conventional methods, new techniques
provide substantially improved tables resemble exact-solution
optimal packings. displacements
depth-limited approximations enumerative
(exhaustive) optimization, although packing costs
remain linear-O(n)-with table size n. techniques
primarily suited important fixed (but possibly
quite large) tables which reference frequencies may
known: op-code tables,spelling dictionaries,
access arrays. Introduction frequency weights further
improves retrievals, but enhancement may
degrade cutoffs.
.B
CACM October, 1978
.A
Lyon, G.
.K
Assignment problem, backtrack programming, hashing, open
addressing, recursion, scatter table rearrangements
.C
3.74 4.0
.N
CA781008 DH January 29, 1979 5:30 PM
.X
1207 4 3053
1208 4 3053
1676 4 3053
1682 4 3053
1728 4 3053
1860 4 3053
1973 4 3053
1973 4 3053
1973 4 3053
1992 4 3053
2018 4 3053
2018 4 3053
2032 4 3053
2033 4 3053
2107 4 3053
2109 4 3053
2138 4 3053
2203 4 3053
2203 4 3053
2203 4 3053
2251 4 3053
2251 4 3053
2251 4 3053
2251 4 3053
2359 4 3053
2412 4 3053
2524 4 3053
2530 4 3053
2534 4 3053
2537 4 3053
2543 4 3053
2543 4 3053
2543 4 3053
2543 4 3053
2552 4 3053
2559 4 3053
2559 4 3053
2559 4 3053
2573 4 3053
2704 4 3053
2770 4 3053
2770 4 3053
2770 4 3053
2770 4 3053
2974 4 3053
2991 4 3053
2991 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3053 4 3053
3083 4 3053
3083 4 3053
3083 4 3053
1329 5 3053
1785 5 3053
1973 5 3053
1992 5 3053
2107 5 3053
2109 5 3053
2412 5 3053
2543 5 3053
2673 5 3053
2707 5 3053
2770 5 3053
3053 5 3053
3053 5 3053
3053 5 3053
.I 3054
.T
Implementing Quicksort Programs
.W
paper practical study
implement Quicksort sorting algorithm its
best variants real computers, including apply
various code optimization techniques. detailed
implementation combining most effective improvements
Quicksort given, along discussion
implement assembly language. Analytic
results describing performance programs
summarized. variety special situations considered
practical standpoint illustrate
Quicksort's wide applicability internal sorting
method which requires negligible extra storage.
.B
CACM October, 1978
.A
Sedgewick, R.
.K
Quicksort, analysis algorithms, code optimization, sorting
.C
4.0 4.6 5.25 5.31 5.5
.N
CA781007 DH January 29, 1979 5:40 PM
.X
1175 4 3054
1919 4 3054
1919 4 3054
1919 4 3054
1969 4 3054
1969 4 3054
1997 4 3054
1997 4 3054
2118 4 3054
2191 4 3054
2191 4 3054
2216 4 3054
2216 4 3054
2216 4 3054
2227 4 3054
2319 4 3054
2388 4 3054
2388 4 3054
2348 4 3054
2582 4 3054
2669 4 3054
2679 4 3054
2679 4 3054
2679 4 3054
2679 4 3054
2783 4 3054
2783 4 3054
2784 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3054 4 3054
3121 4 3054
3121 4 3054
864 4 3054
1175 5 3054
1880 5 3054
1919 5 3054
1969 5 3054
1980 5 3054
1997 5 3054
307 5 3054
308 5 3054
309 5 3054
2017 5 3054
2679 5 3054
3054 5 3054
3054 5 3054
3054 5 3054
776 5 3054
.I 3055
.T
Analysis Algorithms Dutch National Flag Problem
.W
Solutions Dutch National Flag Problem
have been given Dijkstra [1] Meyer [3].
Dijkstra starts simple program arrives
improved program refinement. Both
algorithms given Dijkstra shown have expected number
swaps which 2/3N + 0(1)
these values differ most 1/3 swap asymptotically
1/4 swap. algorithm Meyer
shown have expected swap complexity 5/9N.
.B
CACM October, 1978
.A
McMaster, C.L.
.K
Algorithmic analysis, Dutch National Flag
Problem, refinement, structured programming
.C
4.0 5.24 5.25 5.3
.N
CA781006 DH January 29, 1979 5:47 PM
.X
3055 5 3055
3055 5 3055
3055 5 3055
3170 5 3055
3055 6 3055
3104 6 3055
.I 3056
.T
Counting Large Numbers Events Small Registers
.W
possible use small counter keep
approximate counts large numbers. resulting
expected error can rather precisely controlled.
example given which 8-bit counters (bytes)
used keep track many 130,000 events
relative error which substantially independent
number n events. relative error can
expected 24 percent less 95 percent
time (i.e.o = n/8). techniques could used
advantage multichannel counting hardware
software used monitoring experiments processes.
.B
CACM October, 1978
.A
Morris, R.
.K
Counting
.C
5.11
.N
CA781005 DH January 29, 1979 5:52 PM
.X
3056 5 3056
3056 5 3056
3056 5 3056
.I 3057
.T
Optimal His togram Matching Monotone Gray Level Transformation
.W
paper investigates problem optimal
his togram matching using monotone gray level
transformation, which always assigns all picture points
given gray level another gray level
T(i) such if > j, then T(i) > T(j). objective
find transformed digital picture
given picture such sum absolute errors
between gray level his togram transformed
picture reference picture minimized.
equivalent placing k1 linearly ordered
objects different sized one one into k2 linearly ordered
boxes assorted sizes, such
accumulated error space under packed overpacked
boxes minimized; placement function
monotonic, which ensures polynomial time solution
problem. tree search algorithm
optimal his togram matching presented which has time
complexity O(k1 x k2). If monotone property
dropped, then problem becomes NP-complete,
even if restricted k2 = 2.
.B
CACM October, 1978
.A
Chang, S.K.
Wong, Y.W.
.K
Optimal his togram matching, gray level transformation,
packing problem, tree searching algorithm,
picture processing
.C
3.24 5.25 5.42
.N
CA781004 DH January 29, 1979 6:08 PM
.X
3057 5 3057
3057 5 3057
3057 5 3057
.I 3058
.T
Jump Searching: Fast Sequential Search Technique
.W
sequential file structures must used
binary searching not feasible, jump searching
becomes appealing alternative. paper explores
variants classic jump searching scheme
optimum jump size square root
number records. Multiple level variable
size jump strategies explored, appropriate applications
discussed performance evaluated.
.B
CACM October, 1978
.A
Shneiderman, B.
.K
Jump searching, sequential files, file management,
search strategies, database structures, index
searching
.C
3.74 4.34
.N
CA781003 DH January 29, 1979 6:15 PM
.X
3058 4 3058
3063 4 3058
2978 5 3058
3058 5 3058
3058 5 3058
3058 5 3058
.I 3059
.T
Models Parallel Processing WIthin Programs:
Application CPU:I/O I/O:I/O Overlap
.W
Approximate queueing models internal parallel
processing individual programs multiprogrammed
system developed paper. solution technique
developed network decomposition.
models formulated terms CPU:I/O I/O:I/O overlap
applied analysis these problems.
percentage performance improvement CPU:I/O
overlap found greatest systems which
approximate CPU:I/O utilization balance
low degrees multiprogramming. percentage
improvement I/O:I/O overlap found greatest
systemtems which I/O system more
utilized than CPU.
.B
CACM October, 1978
.A
Towsley, D.
Chandy, K.M.
Browne, J.C.
.K
Multiprogramming, parallel processing, queueing
network models, multiprocessing computation
I/O
.C
4.32 8.1
.N
CA781002 DH January 29, 1979 6:23 PM
.X
3059 4 3059
3070 4 3059
1685 5 3059
2988 5 3059
3059 5 3059
3059 5 3059
3059 5 3059
3059 6 3059
.I 3060
.T
Fortran 77
.W
There new standard Fortran. official
title "American National Standard Programming
Language Fortran, X3.9-1978," but more commonly
referred "Fortran 77," since its development
completed 1977. replaces Fortran standard
designated X3.9-1966. paper describes
many features Fortran 77 also provides
some information why standard
developed.
.B
CACM October, 1978
.A
Brainerd, W.
.K
None
.C
None
.N
CA781001 DH January 29, 1979 6:28 PM
.X
1613 4 3060
1646 4 3060
1900 4 3060
1955 4 3060
2025 4 3060
2154 4 3060
2154 4 3060
2365 4 3060
2506 4 3060
2915 4 3060
3060 4 3060
3060 4 3060
3060 4 3060
987 5 3060
1900 5 3060
2154 5 3060
3060 5 3060
3060 5 3060
3060 5 3060
.I 3061
.T
Simulations Dynamic Sequential Search Algorithms
.W
None
.B
CACM September, 1978
.A
Tenenbaum, A.
.K
Searching, list processing, sequential
searching, dynamic reordering, simulation
.C
3.74 8.1
.N
CA780911 DH January 29, 1979 6:30 PM
.X
3061 4 3061
2885 5 3061
3061 5 3061
3061 5 3061
3061 5 3061
.I 3062
.T
Real Time Plotting Approximate Contour Maps
.W
None
.B
CACM September, 1978
.A
Ward, S.A.
.K
Contour map, digital plotting, graphical characters
.C
3.10 3.20 4.41 8.2
.N
CA780910 DH January 29, 1979 6:33 PM
.X
2287 4 3062
2547 4 3062
3062 4 3062
3062 4 3062
1871 5 3062
1925 5 3062
3062 5 3062
3062 5 3062
3062 5 3062
.I 3063
.T
Note Virtual Memory Indexes
.W
None
.B
CACM September, 1978
.A
Maly, K.
.K
Index, B-tree, pages, file organization,
linked representation, maintenance costs
.C
3.02 3.50 3.51 3.73 3.74
.N
CA780909 DH January 29, 1979 6:36 PM
.X
3058 4 3063
3063 4 3063
2978 5 3063
3063 5 3063
3063 5 3063
3063 5 3063
.I 3064
.T
Event Manipulation Discrete Simulations
Requiring Large Numbers Events
.W
event-manipulation system presented here consists
two major parts. first part addresses
familiar problem event scheduling efficiency
number scheduled events grows large.
second part deals less apparent problem
providing efficiency flexibility scheduled
events accessed executed. Additional features
problems dealt include proper handling
simultaneous events; certain events must created,
scheduled, executed same points
simulated time; infinite loops caused concatenation
such "zero-time" events possible
must diagnosed; maintaining various event
counts practical economical;
capability handling "time-displaceable" events desirable possible.
.B
CACM September, 1978
.A
Ulrich, E.G.
.K
Simulation, discrete systems simulation, discrete
event simulation, time-flow mechanisms
.C
3.65 3.74 4.22 8.1
.N
CA780908 DH January 29, 1979 6:46 PM
.X
2767 4 3064
2844 4 3064
2844 4 3064
2936 4 3064
2936 4 3064
3051 4 3064
3064 4 3064
3064 4 3064
3064 4 3064
3064 4 3064
3064 4 3064
3109 4 3064
1846 5 3064
1939 5 3064
2742 5 3064
2767 5 3064
2936 5 3064
3064 5 3064
3064 5 3064
3064 5 3064
.I 3065
.T
Right Brother Trees
.W
Insertion deletion provided
class right (or one-sided) brother trees which
have O (log n) performance. importance these
results stems close relationship right
brother trees which have insertion algorithm operating
O (log2 n). Further, although both insertion
deletion can carried out O (log n) time
right brother trees, appears insertion
algorithm inherently much more difficult than
deletion algorithm-the reverse one usually
obtains.
.B
CACM September, 1978
.A
Ottmann, T.T.
Six, H.W.
Wood, D.
.K
Dictionary problem, search trees, AVL trees, brother
trees, right-balanced trees,one-sided height-balanced
trees, insertion deletion algorithms
.C
3.73 3.74 5.31
.N
CA780807 DH January 29, 1979 7:08 PM
.X
3009 4 3065
3042 4 3065
3065 4 3065
3065 4 3065
3096 4 3065
3163 4 3065
3163 4 3065
2839 5 3065
3065 5 3065
3065 5 3065
3065 5 3065
3096 5 3065
3163 5 3065
2839 6 3065
2889 6 3065
3009 6 3065
3065 6 3065
3096 6 3065
.I 3066
.T
Controlled Experiment Program Testing
Code Walkthroughs/Inspections
.W
paper describes experiment program
testing, employing 59 highly experienced data
processing professionals using seven methods test
small PL/I program. results show
popular code walk through/inspection method effective
other computer-based methods finding
errors most effective methods (in terms
errors found cost) employed pairs subjects
tested program independently then pooled
their findings. study also shows there
tremendous amount variability among subjects
ability detect certain types
errors varies method method.
.B
CACM September, 1978
.A
Myers, G.J.
.K
Software reliability, program verification, debugging,
testing, code walkthroughs, code inspections,
personnel selection
.C
4.6
.N
CA780906 DH February 5, 1979 10:47 AM
.X
3066 5 3066
3066 5 3066
3066 5 3066
.I 3067
.T
Generalized Working Sets Segment Reference Strings
.W
working-set concept extended programs
reference segments different sizes.
generalized working-set policy (GWS) keeps its
resident set those segments whose retention costs
do not exceed their retrieval costs. GWS model
entire class demand-fetching memory
policies satisfy resident-set inclusion property.
generalized optimal policy (GOPT) also
defined; its operating points minimizes aggregated
retention swapping costs. Special cases
cost structure allow GWS GOPT simulate
any known stack algorithm, working set,
VMIN. Efficient procedures computing demand curves
showing swapping load function memory
usage developed GWS GOPT policies. Empirical
data actual system included.
.B
CACM September, 1978
.A
Denning, P.J.
Slutz, D.R.
.K
Database referencing, memory management, optimal
memory policies, paging, program behavior, program
measurement, segmentation, working sets
.C
4.30 8.10
.N
CA780905 DH February 5, 1979 11:20 AM
.X
1892 4 3067
1901 4 3067
2085 4 3067
2095 4 3067
2218 4 3067
2277 4 3067
2319 4 3067
2329 4 3067
2358 4 3067
2373 4 3067
2373 4 3067
2374 4 3067
2380 4 3067
2380 4 3067
2434 4 3067
2499 4 3067
2450 4 3067
2450 4 3067
2501 4 3067
2582 4 3067
2595 4 3067
2669 4 3067
2828 4 3067
2863 4 3067
2863 4 3067
2881 4 3067
2928 4 3067
2996 4 3067
2996 4 3067
2996 4 3067
3000 4 3067
3006 4 3067
3006 4 3067
3006 4 3067
3006 4 3067
3067 4 3067
3067 4 3067
3067 4 3067
3067 4 3067
3067 4 3067
3067 4 3067
3067 4 3067
3067 4 3067
1751 5 3067
2373 5 3067
2374 5 3067
2595 5 3067
2682 5 3067
2863 5 3067
2864 5 3067
3006 5 3067
3067 5 3067
3067 5 3067
3067 5 3067
.I 3068
.T
Model Verification Data Security Operating Systems
.W
Program verification applied kernel architectures
forms promising method providing
uncircumventably secure, shared computer systems.
precise definition data security developed
here terms general model operating systems.
model suitable basis verifying
many those properties operating system which
necessary assure reliable enforcement
security. application approach
UCLA secure operating system also discussed.
.B
CACM September, 1978
.A
Popek, G.J..
Farber, D.A.
.K
Operating systems, security, protection, program verification
.C
4.35 5.24
.N
CA780904 DH February 5, 1979 2:40 PM
.X
2021 4 3068
2222 4 3068
2227 4 3068
2315 4 3068
2326 4 3068
2470 4 3068
2732 4 3068
2865 4 3068
2896 4 3068
2943 4 3068
3014 4 3068
3068 4 3068
3068 4 3068
3077 4 3068
3143 4 3068
1834 5 3068
2869 5 3068
3068 5 3068
3068 5 3068
3068 5 3068
3105 5 3068
1471 6 3068
2625 6 3068
2632 6 3068
2868 6 3068
2939 6 3068
3068 6 3068
.I 3069
.T
Practical Interprocedural Data Flow Analysis Algorithm
.W
new interprocedural data flow analysis algorithm
presented analyzed. algorithm
associates each procedure program information
which variables may modified, which
may used, which possibly preserved call
procedure, all its subcalls.
algorithm sufficiently powerful used recursive
programs deal sharing variables
which arises through reference parameters. algorithm
unique can compute all
information single pass, not requiring prepass
compute calling relationships sharing patterns.
algorithm asymptotically optimal time complexity.
has been implemented practical
even programs which quite large.
.B
CACM September, 1978
.A
Barth, J.M.
.K
Data flow analysis, global flow analysis, optimization,
side effects, relations, reference parameters,
incarnations
.C
4.12 4.20
.N
CA780903 DH February 5, 1979 3:07 PM
.X
1086 4 3069
1132 4 3069
1234 4 3069
1263 4 3069
1265 4 3069
1270 4 3069
1323 4 3069
1358 4 3069
1379 4 3069
1380 4 3069
1453 4 3069
1464 4 3069
1484 4 3069
1491 4 3069
1498 4 3069
1613 4 3069
1614 4 3069
1781 4 3069
1825 4 3069
1860 4 3069
2083 4 3069
2178 4 3069
2179 4 3069
2252 4 3069
2325 4 3069
2341 4 3069
2546 4 3069
2645 4 3069
2652 4 3069
2684 4 3069
2842 4 3069
2929 4 3069
2934 4 3069
3069 4 3069
669 4 3069
679 4 3069
691 4 3069
761 4 3069
949 4 3069
989 4 3069
3069 5 3069
3069 5 3069
3069 5 3069
3184 5 3069
.I 3070
.T
Hybrid Simulation Models Computer Systems
.W
paper describes structure operation
hybrid simulation model which both
discrete-event simulation analytic techniques
combined produce efficient yet accurate system
models. example based simple hypothetical
computer system, discrete-event simulation used
model arrival activation jobs,
central-server queueing network models use
system processors. accuracy efficiency
hybrid technique demonstrated comparing
result computational costs hybrid model
example those equivalent simulation-only
model.
.B
CACM September, 1978
.A
Schwetman, H.D.
.K
Performance evaluation, simulation, queueing
network models, central server model
.C
4.32 4.35 8.1
.N
CA780902 DH February 5, 1979 3:32 PM
.X
2712 4 3070
2741 4 3070
3016 4 3070
3059 4 3070
3070 4 3070
3070 4 3070
3070 4 3070
3070 4 3070
3153 4 3070
1805 5 3070
2454 5 3070
2741 5 3070
2988 5 3070
3070 5 3070
3070 5 3070
3070 5 3070
.I 3071
.T
Algorithm Using Symbolic Techniques
Bel-Petrov Classification Gravitational Fields
.W
note, algorithm presented
symbolic calculation certain algebraic invariants
Weyl tensor which permits determination
Bel-Petrov types gravitational field.
algorithm, although more specialized than
D'Inverno Russell-Clark, requires neither
use special coordinate system nor spin coefficient
formalism. algorithm has been implemented
FORMAC designed complete classification
scheme proposed Petrov his book. appendix
contains examples illustrating use algorithm.
.B
CACM September, 1978
.A
Harris, R.A.
Zund, J.D.
.K
General relativity, Bel-Petrov types,
FORMAC, symbolic manipulation, tensors
.C
3.11 3.15 3.17
.N
CA780901 DH February 5, 1979 3:43 PM
.X
2170 4 3071
3071 4 3071
2165 5 3071
3071 5 3071
3071 5 3071
3071 5 3071
.I 3072
.T
Feedback Coupled Resource Allocation Policies
Multiprogramming- Multiprocessor Computer
System
.W
Model studies some integrated, feedback-driven
scheduling systems multiprogrammed- multiprocessor
computer systems presented. basic control variables
used data-flow rates processes
executing CPU. model systems feature simulated
continuous-flow preempt-resume scheduling
input-output activity. Attention given
amount memory resource required effective
processing I/O activity (buffer space assignment).
model studies used both distribution-driven
trace-driven techniques. Even relatively simple dynamic
schedulers shown improve system performance
(as measured user CPU time) over given optimal
near-optimal static schedulers imbeded
identical system structures workload environments.
improvement greatest under heavy
I/O demand workload.
.B
CACM August, 1978
.A
Brice, R.S.
Browne, J.C.
.K
Integrated schedulers, feedback scheduling,
multiprogramming systems, I/O system scheduling
.C
4.32 4.35
.N
CA780806 DH February 5, 1979 4:01 PM
.X
2571 4 3072
2628 4 3072
2891 4 3072
2950 4 3072
3072 4 3072
3072 4 3072
3072 4 3072
3072 4 3072
3119 4 3072
1713 5 3072
2219 5 3072
2245 5 3072
2375 5 3072
3072 5 3072
3072 5 3072
3072 5 3072
.I 3073
.T
Communicating Sequential Processes
.W
paper suggests input output
basic primitives programming parallel
composition communicating sequential processes
fundamental program structuring method.
combined development Dijkstra's guarded command,
these concepts surprisingly versatile.
Their use illustrated sample solutions
variety familiar programming exercises.
.B
CACM August, 1978
.A
Hoare, C.A.R.
.K
Programming, programming languages, programming primitives,
program structures, parallel programming,
concurrency, input, output, guarded commands, nondeterminacy,
coroutines, procedures, multiple entries,
multiple exits, classes, data representations, recursion,
conditional critical regions, monitors, iterative
arrays
.C
4.20 4.22 4.32
.N
CA780805 DH February 7, 1979 10:07 AM
.X
249 4 3073
254 4 3073
272 4 3073
1102 4 3073
1109 4 3073
1140 4 3073
1188 4 3073
1306 4 3073
1323 4 3073
1358 4 3073
1380 4 3073
1464 4 3073
1491 4 3073
1665 4 3073
1767 4 3073
1781 4 3073
1781 4 3073
1787 4 3073
1787 4 3073
1949 4 3073
1989 4 3073
321 4 3073
2059 4 3073
2112 4 3073
2126 4 3073
2534 4 3073
2541 4 3073
435 4 3073
437 4 3073
463 4 3073
483 4 3073
491 4 3073
2698 4 3073
2732 4 3073
2733 4 3073
2820 4 3073
2896 4 3073
2972 4 3073
560 4 3073
583 4 3073
3037 4 3073
3039 4 3073
3043 4 3073
3073 4 3073
3073 4 3073
3073 4 3073
3155 4 3073
627 4 3073
631 4 3073
632 4 3073
642 4 3073
644 4 3073
653 4 3073
680 4 3073
761 4 3073
762 4 3073
763 4 3073
123 4 3073
140 4 3073
919 4 3073
989 4 3073
196 5 3073
2732 5 3073
3073 5 3073
3073 5 3073
3073 5 3073
3148 5 3073
3150 5 3073
3155 5 3073
799 5 3073
1860 6 3073
2060 6 3073
2204 6 3073
2247 6 3073
2704 6 3073
2817 6 3073
2842 6 3073
2865 6 3073
2939 6 3073
2939 6 3073
2940 6 3073
2941 6 3073
2943 6 3073
3073 6 3073
3073 6 3073
3073 6 3073
3148 6 3073
799 6 3073
.I 3074
.T
Time- Space- Efficient Garbage Compaction Algorithm
.W
Given area storage containing scattered,
marked nodes differing sizes, one may wish
rearrange them into compact mass one end
area while revising all pointers marked nodes
show their new locations. algorithm described
here which accomplishes task linear time
relative size storage area, space
order one bit each pointer.
algorithm operates reversibly encoding situation
(that collection locations point single
location) linear list, emanating pointed-to
location, passing through pointing locations,
terminating pointed-to location's transplanted contents.
.B
CACM August, 1978
.A
Morris, F.L.
.K
Garbage collection, compaction, compact ification,
storage reclamation, storage allocation, record
structures, relocation, list processing, free storage, pointers, data structures
.C
4.34 4.49 5.32
.N
CA780804 DH February 7, 1979 10:16 AM
.X
1972 4 3074
1972 4 3074
2156 4 3074
2156 4 3074
2168 4 3074
2249 4 3074
2361 4 3074
2438 4 3074
2513 4 3074
2723 4 3074
2736 4 3074
2736 4 3074
2736 4 3074
2833 4 3074
2838 4 3074
2855 4 3074
2855 4 3074
2896 4 3074
3039 4 3074
3074 4 3074
3074 4 3074
3074 4 3074
3074 4 3074
3106 4 3074
3112 4 3074
3112 4 3074
3112 4 3074
1826 5 3074
1853 5 3074
1972 5 3074
2723 5 3074
3074 5 3074
3074 5 3074
3074 5 3074
.I 3075
.T
Fast Parallel Sorting Algorithms
.W
parallel bucket-sort algorithm presented
requires time O(log n) use n
processors. algorithm makes use technique
requires more space than product processors
time. realistic model used model used which
no memory contention permitted. procedure
also presented sort n numbers time O(k log
n) using n 1 + 1/k processors, k arbitrary
integer. model computation procedure
permits simultaneous fetches same memory
location.
.B
CACM August, 1978
.A
Hirschberg, D.S.
.K
Parallel processing, sorting, algorithms, bucket sort
.C
3.74 4.34 5.25 5.31
.N
CA780803 DH February 7, 1979 10:25 AM
.X
2714 4 3075
3075 4 3075
3075 4 3075
3075 4 3075
3075 4 3075
3085 4 3075
3156 4 3075
2289 5 3075
2557 5 3075
2664 5 3075
2714 5 3075
3075 5 3075
3075 5 3075
3075 5 3075
3156 5 3075
2289 6 3075
2973 6 3075
3075 6 3075
.I 3076
.T
Value Conflicts Social Choice Electronic
Funds Transfer System Developments
.W
During last few years, computer-based
systems which automate transfer recording
debits credits have begun implemented
large scale. These systems promise both financial
benefits institutions use them potential
conveniences their customers. However,
they also raise significant social, legal, technical
questions must resolved if full scale
systems Electronic Funds Transfer (EFT) not
cause more problems larger public than
they solve. paper examines incentives EFT
developments social problems they raise
context conflicts between five different value
positions often implicit analyses
proposed EFT arrangements. These conflicts reflect
relative importance certain problems
specific groups. value positions implicit EFT proposals
help organize analyses market arrangements,
system reliability, privacy transactions. These
topics analyzed article related
value positions held concerned parties. Last,
ways which public can learn
social qualities different EFT arrangements
pace EFT developments both discussed
context social choice.
.B
CACM August, 1978
.A
Kling, R.
.K
Electronic funds transfer systems, social impacts
computing, privacy, social choice, computer
networks, network reliability, security, social values
.C
2.11 2.12 2.3 3.52 3.53 3.55
.N
CA780802 DH February 7, 1979 2:25 PM
.X
2756 4 3076
3076 4 3076
3076 4 3076
3179 4 3076
2607 5 3076
2840 5 3076
3076 5 3076
3076 5 3076
3076 5 3076
3142 5 3076
3179 5 3076
3178 5 3076
3182 5 3076
3183 5 3076
2572 6 3076
2583 6 3076
2607 6 3076
3076 6 3076
3076 6 3076
3076 6 3076
3076 6 3076
3076 6 3076
3140 6 3076
3142 6 3076
3179 6 3076
3180 6 3076
3181 6 3076
3182 6 3076
.I 3077
.T
Can Programming Liberated von Neumann
Style? Functional Style Its Algebra
Programs
.W
Conventional programming languages growing
ever more enormous, but not stronger. Inherent
defects most basic level cause them both
fat weak: their primitive word-at-a-time style
programming inherited their common ancestor-the
von Neumann computer, their close coupling off
semantics state transitions, their division programming
into world expressions world
statements, their inability effectively use powerful
combining forms building new programs
existing ones, their lack useful mathematical
properties reasoning programs.
alternative functional style programming founded
use combining forms creating programs.
Functional programs deal structured data, often
nonrepetitive nonrecursive, hierarchically
constructed, do not name their arguments, do not require
complex machinery procedure declarations
become generally applicable. Combining forms can
use high level programs build still higher level
ones style not possible conventional languages.
Associated functional style programming
algebra programs whose variables range over
programs whose operations combining forms.
algebra can used transform programs
solve equations whose "unknowns" programs
much same way one transforms equations high
school algebra. These transformations given
algebraic laws carried out same language
which programs written. Combining
forms chosen not only their programming power
but also power their associated algebraic
laws. General theorems algebra give detailed
behavior termination conditions large
classes programs. new class computing systems
uses functional programming style both
its programming language its state transition
rules. Unlike von Neumann languages, these systems
have semantics loosely coupled states-only one
state transition occurs per major computation.
.B
CACM August, 1978
.A
Backus, J.
.K
Functional programming, algebra programs, combining
forms, functional forms, programming languages,
von Neumann computers, von Neumann languages, models
computing systems, applicative computing systems,
applicative state transition systems, program transformation,
program correctness, program termination,
metacomposition
.C
4.20 4.29 5.20 5.24 5.26
.N
CA780801 DH February 7, 1979 3:13 PM
.X
1024 4 3077
1051 4 3077
1102 4 3077
1132 4 3077
1390 4 3077
1486 4 3077
1549 4 3077
1706 4 3077
1826 4 3077
1878 4 3077
378 4 3077
2021 4 3077
2060 4 3077
2155 4 3077
2155 4 3077
2168 4 3077
2222 4 3077
2227 4 3077
2294 4 3077
2315 4 3077
2326 4 3077
2470 4 3077
2558 4 3077
2719 4 3077
2723 4 3077
2732 4 3077
2838 4 3077
2842 4 3077
2842 4 3077
2855 4 3077
2865 4 3077
2879 4 3077
2896 4 3077
2943 4 3077
2981 4 3077
3014 4 3077
3030 4 3077
3068 4 3077
3077 4 3077
3077 4 3077
3077 4 3077
3077 4 3077
3080 4 3077
3104 4 3077
3106 4 3077
3143 4 3077
3150 4 3077
627 4 3077
106 4 3077
210 5 3077
1834 5 3077
2060 5 3077
2457 5 3077
3077 5 3077
3077 5 3077
3077 5 3077
.I 3078
.T
Analysis Availability Computer
Systems Using Computer- Aided Algebra
.W
Analytical results, related availability
computer system constructed unreliable
processors, presented paper. These results
obtained using various computer-aided
algebraic manipulation techniques. major purpose
paper demonstrate difficulties
obtaining analytical solutions Markov processes
can considerably reduced application
symbol manipulation programs. Since many physical
systems can modeled Markov semi-Markov
processes, potential range application these techniques
much wider than problem availability
analyzed here.
.B
CACM July, 1978
.A
Chattergy, R.
Pooch, U.W.
.K
Computer-aided algebra, symbol manipulation, Markov
process, reliability, redundant structures,
on-line computer system.
.C
3.82 5.5 5.7 8.1 8.3
.N
CA780710 DH February 7, 1979 3:37 PM
.X
3078 5 3078
3078 5 3078
3078 5 3078
.I 3079
.T
Algorithm Reasoning Equality
.W
simple technique reasoning equalities
fast complete ground formulas
function symbols equality presented.
proof correctness given well.
.B
CACM July, 1978
.A
Shostak, R.E.
.K
Theorem proving, deduction, program verification, equality
.C
3.64 3.66 5.21
.N
CA780709 DH February 7, 1979 3:41 PM
.X
3079 5 3079
3079 5 3079
3079 5 3079
.I 3080
.T
Proving Correctness Heuristically Optimized Code
.W
system proving programs written
high level language correctly translated
low level language described. primary use
system post optimization step code
generation. low level language programs need not
generated compiler fact could
hand coded. Examples usefulness such system
given. Some interesting results
ability handle programs implement recursion
bypassing start program, detection
pinpointing wide class errors low
level language programs. examples demonstrate
optimization genre paper can result
substantially faster operation saving
memory terms program stack sizes.
.B
CACM July, 1978
.A
Samet, H.
.K
Compilers, correctness, code optimization,
debugging, program verification, Lisp
.C
4.12 4.21 4.22 5.24
.N
CA780708 DH February 7, 1979 3:53 PM
.X
1024 4 3080
1051 4 3080
1102 4 3080
1132 4 3080
1390 4 3080
1486 4 3080
1549 4 3080
1706 4 3080
1826 4 3080
1878 4 3080
378 4 3080
2060 4 3080
2155 4 3080
2168 4 3080
2719 4 3080
2723 4 3080
2838 4 3080
2842 4 3080
2855 4 3080
2879 4 3080
3077 4 3080
3080 4 3080
3080 4 3080
3106 4 3080
627 4 3080
106 4 3080
210 5 3080
2850 5 3080
3080 5 3080
3080 5 3080
3080 5 3080
.I 3081
.T
Shallow Binding Lisp 1.5
.W
Shallow binding scheme which allows
value variable accessed bounded
amount computation. elegant model shallow binding
Lisp 1.5 presented which context-switching
environment tree transformation called rerooting.
Rerooting completely general reversible,
optional sense Lisp 1.5 interpreter
operate correctly whether not rerooting
invoked one very context change. Since rerooting
leaves assoc [v, a] invariant, all variables
v all environments a, programmer can have access
rerooting primitive, shallow[], which gives
him dynamic control over whether accesses shallow
deep, which affects only speed execution
program, not its semantics. addition, multiple
processes can active same environment
structure, so long rerooting indivisible operation.
Finally, concept rerooting shown
combine concept shallow binding Lisp
Dijkstra's display Algol hence general
model shallow binding.
.B
CACM July, 1978
.A
Baker, H.G. Jr.
.K
Lisp 1.5, environment trees, FUNARG'S, shallow binding,
deep binding, multiprogramming, Algol display
.C
4.13 4.22 4.32
.N
CA780707 DH February 7, 1979 4:14 PM
.X
2625 4 3081
2922 4 3081
3081 4 3081
3101 4 3081
3112 4 3081
2438 5 3081
3081 5 3081
3081 5 3081
3081 5 3081
.I 3082
.T
Time, Clocks, Ordering Events Distributed System
.W
concept one event happening before
another distributed system examined,
shown define partial ordering events.
distributed algorithm given synchronizing
system logical clocks which can used totally
order events. use total ordering
illustrated method solving synchronization
problems. algorithm then specialized
synchronizing physical clocks, bound derived
far out synchrony clocks can
become.
.B
CACM July, 1978
.A
Lamport, L.
.K
Distributed systems, computer networks,
clock synchronization, multiprocess systems
.C
4.32 5.29
.N
CA780706 DH February 7, 1979 4:30 PM
.X
3082 5 3082
3082 5 3082
3082 5 3082
3128 5 3082
2150 6 3082
2376 6 3082
2436 6 3082
2597 6 3082
2865 6 3082
2866 6 3082
2870 6 3082
2912 6 3082
3082 6 3082
.I 3083
.T
Pseudochaining Hash Tables
.W
paper presents pseudochaining new
collision-resolution method. Pseudochaining
half way between open addressing chaining. owes
its name fact link fields present
each cell hash table which permits "chaining"
first overflow items table.
efficiency method derived tradeoff analysis given.
.B
CACM July, 1978
.A
Halatsis, C.
Philokyprou, G.
.K
Hash code, scatter storage, open addressing, chaining,
pseudochaining, collision resolution, searching,
uniform probing.
.C
3.7 3.73 3.74 4.9
.N
CA780705 DH February 7, 1979 4:37 PM
.X
1973 4 3083
1992 4 3083
2138 4 3083
2203 4 3083
2251 4 3083
2251 4 3083
2282 4 3083
2412 4 3083
2530 4 3083
2534 4 3083
2537 4 3083
2543 4 3083
2543 4 3083
2559 4 3083
2559 4 3083
2573 4 3083
2770 4 3083
2860 4 3083
2991 4 3083
3053 4 3083
3053 4 3083
3053 4 3083
3083 4 3083
3083 4 3083
3083 4 3083
3083 4 3083
3083 4 3083
1328 5 3083
1973 5 3083
2107 5 3083
2543 5 3083
2552 5 3083
3083 5 3083
3083 5 3083
3083 5 3083
.I 3084
.T
Interpolation Search -A Log LogN Search
.W
Interpolation search method retrieving
desired record key ordered file
using value key statistical distribution
keys. shown average
log logN file accesses required retrieve key,
assuming N keys uniformly distributed.
number extra accesses also estimated shown
very low. same holds if cumulative
distribution function keys known. Computational
experiments confirm these results.
.B
CACM July, 1978
.A
Perl, Y.
Itai, A.
Avni, H.
.K
Average number accesses, binary search, database,
interpolation search, retrieval, searching,
uniform distribution
.C
4.4 4.6 5.25
.N
CA780704 DH February 7, 1979 4:50 PM
.X
3084 5 3084
3084 5 3084
3084 5 3084
.I 3085
.T
O(n) Algorithm Determining Near-Optimal
Computation Order Matrix Chain Products
.W
paper discusses computation matrix
chain products form M1 x M2 x ... x Mn
Mi's matrices. order which matrices
computed affects number operations.
sufficient condition association
matrices optimal order presented.
O(n) algorithm find order computation which
takes less than 25 percent longer than optimal
time Topt also presented. most cases, algorithm
yields optimal order order which
takes only few percent longer than Topt (less than 1 percent average).
.B
CACM July, 1978
.A
Chin, F.Y.
.K
Approximate algorithm, heuristic algorithm,
matrix multiplication, matrix chain product
.C
5.14
.N
CA780703 DH February 8, 1979 2:46 PM
.X
3075 4 3085
3085 4 3085
2557 5 3085
3085 5 3085
3085 5 3085
3085 5 3085
.I 3086
.T
Complexity Computing Measure U[ai, bi]
.W
decision tree complexity computing
measure union n (possibly overlapping)
intervals shown (n log n), even if comparisons
between linear functions interval endpoints
allowed. existence (n log n) lower bound
determine whether any two n real numbers
within each other also demonstrated. These
problems provide excellent opportunity
discussing effects computational model
ease analysis results produced.
.B
CACM July, 1978
.A
Fredman, M.L.
Weide, B.
.K
Analysis algorithms, combinatorial problems,
computational complexity, computational models,
decision tree programs, lower bounds
.C
5.25 5.26 5.30 5.39
.N
CA780702 DH February 8, 1979 3:46 PM
.X
3086 5 3086
3086 5 3086
3086 5 3086
.I 3087
.T
English Language Question Answering System
Large Relational Database
.W
typing requests English, casual users
able obtain explicit answers
large relational database aircraft flight maintenance
data using system called PLANES.
design implementation system described
illustrated detailed examples operation
system components examples overall system
operation. language processing portion
system uses number augmented transition networks,
each which matches phrases specific
meaning, along context registers (his tory keepers)
concept case frames; these used judging
meaningfulness questions, generating dialogue clarifying
partially understood questions, resolving
ellipsis pronoun reference problems. Other system components
construct formal query relational
database, optimize order searching relations.
Methods discussed handling vague
complex questions providing browsing ability.
Also included discussions important issues
programming natural language systems limited domains,
relationship system others.
.B
CACM July, 1978
.A
Waltz, D.L.
.K
Question answering, relational database, natural language,
database front end, artificial intelligence,
dialogue, query generation, information retrieval, natural language programming
.C
3.42 3.60 3.69 3.74 3.79
.N
CA780701 DH February 8, 1979 4:26 PM
.X
2155 4 3087
2406 4 3087
2581 4 3087
2710 4 3087
2715 4 3087
2716 4 3087
2717 4 3087
2718 4 3087
2739 4 3087
2765 4 3087
2795 4 3087
2817 4 3087
2888 4 3087
2901 4 3087
2921 4 3087
2957 4 3087
2959 4 3087
2965 4 3087
3087 4 3087
3087 4 3087
3154 4 3087
1989 5 3087
2046 5 3087
3087 5 3087
3087 5 3087
3087 5 3087
.I 3088
.T
General Equations Idealized CPU-I/O Overlap Configurations
.W
General equations derived estimating
maximum possible utilization main storage
partitions, CPU I/O devices under different conditions
idealized CPU-I/O overlap model multiprogrammed
computer systems. equations directly applicable
any configuration consisting sets
identical CPU's I/O processors, main storage partitions
user tasks. Examples provided illustrate
use equations compute effective processing
time per record expected timesharing response
time under both balanced unbalanced resource utilization conditions.
.B
CACM June, 1978
.A
Teory, T.J.
.K
Blocking, buffering, input/output, overlap, performance,
resource allocation, throughput, timesharing
.C
3.72 4.30 4.41 8.1
.N
CA780609 DH February 8, 1979 4:35 PM
.X
3088 5 3088
3088 5 3088
3088 5 3088
.I 3089
.T
Performance Rollback Recovery Systems under Intermittent Failures
.W
mathematical model transaction-oriented
system under intermittent failures proposed.
system assumed operate checkpointing
rollback/recovery method ensure reliable
information processing. model used derive
principal performance measures, including availability,
response time, system saturation point.
.B
CACM June, 1978
.A
Gelenbe, E.
Derochette, D.
.K
Database reliability, file systems, checkpoints, recovery
procedures, checking techniques, reliability
system performance evaluation
.C
3.72 3.73 4.33 4.35 4.6 5.5 8.1
.N
CA780608 DH February 9, 1979 10:26 AM
.X
3089 4 3089
2599 5 3089
3089 5 3089
3089 5 3089
3089 5 3089
.I 3090
.T
Automated Welfare Client-Tracking Service
Integration: Political Economy Computing
.W
impacts automated client-tracking
system clients, caseworkers, administrators,
operations welfare agencies use
reported. major impact system
enhance administrative attractiveness
using agencies eyes funders rather than
increase their internal administrative efficiency.
impact joint product both technical
features computer-based system organizational
demands placed upon different agencies,
administrators, caseworkers. illustrates
way "successful" automated information systems fit
political economies groups use them.
.B
CACM June, 1978
.A
Kling, R.
.K
Social impacts computing, organizational impacts
computing, management information systems,
sociology computing, information systems
service integration, urban information systems
.C
2.11 3.53
.N
CA780607 DH February 12, 1979 11:01 AM
.X
3090 5 3090
3090 5 3090
3090 5 3090
3117 5 3090
3090 6 3090
.I 3091
.T
Some Basic Determinants Computer Programming Productivity
.W
propose research examine
relationship between processing characteristics
programs experience characteristics programmers
program development time. ultimate
objective develop technique predicting
amount time necessary create computer
program. fifteen program characteristics hypothesized
being associated increase programming
time required objectively measurable preprogramming
specifications. five programmer characteristics
experience-related also measurable before programming
task begun. Nine program characteristics
emerged major influences program development time,
each associated increased program development
time. All five programmer characteristics were found
related reduced program development time.
multiple regression equation which contained one programmer
characteristic four program characteristics
gave evidence good predictive power
forecasting program development time.
.B
CACM June, 1978
.A
Chrysler, E.
.K
Programmer performance standards, predicting program
development time, program estimation techniques,
program development equation, value programming experience,
programmer evaluation, programmer scheduling,
programmer productivity, programming management, Cobol programming
.C
2.40 4.20
.N
CA780606 DH February 26, 1979 11:42 AM
.X
3091 4 3091
1792 5 3091
3091 5 3091
3091 5 3091
3091 5 3091
.I 3092
.T
Characteristics Application Software Maintenance
.W
Maintenance enhancement application
software consume major portion total life
cycle cost system. Rough estimates total
systems programming resources consumed range
high 75-80 percent each category. However,
area has been given little attention
literature. analyze problems area
questionnaire developed pretested.
then submitted 120 organizations. Respondents totaled
69. Responses were analyzed SPSS
statistical package. results analysis indicate
that: (1) maintenance enhancement do consume
much total resources systems programming
groups; (2) maintenance enhancement tend
viewed management least somewhat more important
than new application software development;
(3) maintenance enhancement, problems management
orientation tend more significant
than those technical orientation; (4) user
demands enhancements extension constitute
most important management problem area.
.B
CACM June, 1978
.A
Lientz, B.P.
Swanson, E.B.
Tompkins, G.E.
.K
Software maintenance, use productivity
aids, management technical issues
.C
3.50 4.6
.N
CA780605 DH February 26, 1979 11:59 AM
.X
3092 5 3092
3092 5 3092
3092 5 3092
.I 3093
.T
Automatic Error Recovery LR Parsers
.W
paper we present scheme detecting
recovering syntax errors programs.
scheme, which based LR parsing, driven
information which directly automatically
obtainable information already present
LR parser. approach, which patterned
after Levy Graham Rhodes, appears
provide error recovery which both simple
powerful.
.B
CACM June, 1978
.A
Mickunas, M.D.
Modry, J.A.
.K
Programming languages, error correction, automatic
correction, parsing, LR, syntax errors, compilers
.C
4.12 4.42 5.23
.N
CA780604 DH February 26, 1979 12:22 PM
.X
1225 4 3093
1350 4 3093
1542 4 3093
1646 4 3093
1683 4 3093
1693 4 3093
1781 4 3093
1781 4 3093
1787 4 3093
1836 4 3093
1945 4 3093
1945 4 3093
2060 4 3093
2061 4 3093
2082 4 3093
2091 4 3093
2152 4 3093
2179 4 3093
2340 4 3093
2356 4 3093
2546 4 3093
2603 4 3093
2650 4 3093
2698 4 3093
2698 4 3093
2708 4 3093
2708 4 3093
2733 4 3093
2824 4 3093
2982 4 3093
2986 4 3093
2986 4 3093
3045 4 3093
3093 4 3093
3093 4 3093
3093 4 3093
3093 4 3093
3094 4 3093
1491 5 3093
2179 5 3093
2708 5 3093
3093 5 3093
3093 5 3093
3093 5 3093
680 5 3093
.I 3094
.T
Analyses Deterministic Parsing Algorithms
.W
paper describes approach determining
minimum, maximum, average times
parse sentences acceptable deterministic parser.
These quantities presented form
symbolic formulas, called time-formulas. variables
these formulas represent not only length
input string but also time perform elementary
operations such pushing, popping, subscripting,
iterating, etc. binding variables actual numerical
values corresponding given compiler-machine
configuration, one can determine execution time
configuration. Time-formulas derived
examining grammar rules program representing
algorithm one wishes analyze.
approach described using specific grammar defines
simple arithmetic expressions. Two deterministic
parsers analyzed: top-down recursive descent
LL(1) parser, bottom-up SLR(1) parser.
paper provides estimates relative efficiencies
two parsers. estimates applicable
specific machine, PDP-10, presented
substantiated buy benchmarks. Finally, paper
illustrates proposed approach applying
analyses parsers simple programming
language.
.B
CACM June, 1978
.A
Cohen, J.
Roth, M.S.
.K
Syntactic analysis, analysis algorithms,top-down
bottom-up parsing, relative efficiencies.
.C
4.12 5.23 5.24 5.25 5.7
.N
CA780603 DH February 26, 1979 12:32 PM
.X
1350 4 3094
1399 4 3094
1659 4 3094
1768 4 3094
1781 4 3094
1945 4 3094
2110 4 3094
2719 4 3094
2733 4 3094
2986 4 3094
3093 4 3094
3094 4 3094
3094 4 3094
3094 4 3094
1265 5 3094
2179 5 3094
2645 5 3094
3094 5 3094
3094 5 3094
3094 5 3094
.I 3095
.T
Selective Traversal Algorithm Binary Search Trees
.W
problem selecting data items
binary search tree according list range
conditions considered. process visiting
minimal number nodes retrieve data satisfying
range conditions called selective traversal. Presented
paper algorithm selective
traversal which uses tag field each node
tree. algorithm particularly useful
efficient examination data more time
consuming than examination tag field.
.B
CACM June, 1978
.A
Driscoll, J.R.
Lien, Y.E.
.K
Data retrieval, range conditions, binary search
tree, tree traversal, selective traversal
.C
3.74 5.24 5.25
.N
CA780602 DH February 26, 1979 12:40 PM
.X
3095 5 3095
3095 5 3095
3095 5 3095
.I 3096
.T
Optimal Method Deletion One-Sided Height-Balanced Trees
.W
one-sided height-balanced tree binary
tree which every node's right subtree has
height which equal exactly one greater than
height its left subtree. has advantage
over more general AVL tree only one bit
balancing information required (two bits
required ACL tree). shown deletion
arbitrary node such tree can accomplished
O(logn) operations, n number nodes
tree. Moreover method optimal
sense its complexity cannot reduced order
magnitude. result, coupled earlier
results Hirschberg, indicates that, three basic
problems insertion, deletion, retrieval,
only insertion adversely affected modification AVL tree.
.B
CACM June, 1978
.A
Zweben, S.H.
McDonald, M.A.
.K
Balanced, binary, search, trees
.C
3.73 3.74 4.34 5.25 5.31
.N
CA780601 DH February 26, 1979 12:48 PM
.X
2839 4 3096
3009 4 3096
3042 4 3096
3042 4 3096
3065 4 3096
3096 4 3096
3096 4 3096
3096 4 3096
3163 4 3096
3163 4 3096
3163 4 3096
2839 5 3096
2889 5 3096
3009 5 3096
3065 5 3096
3096 5 3096
3096 5 3096
3096 5 3096
3163 5 3096
2839 6 3096
2839 6 3096
2889 6 3096
3009 6 3096
3065 6 3096
3096 6 3096
3096 6 3096
.I 3097
.T
Optimal Shift Strategy Block-Transfer CCD Memory
.W
purposes paper, block-transfer
CCD memory composed serial shift registers
whose shift rate can vary, but which have definite minimum
shift rate (the refresh rate) definite
maximum shift rate. bits iin shift registers
numbered 0 N - 1, blocks N bits
always transferred, always starting bit 0.
best shift strategy so block transfer
request occurring random time have wait
minimal amount time before bit 0 can reached?
minimum shift rate requirement does not allow one
simply "park" bit 0 wait transfer
request. optimal strategy involves shifting slowly
possible until bit 0 passed, then shifting
quickly possible until critical boundary
reached, shortly before bit 0 comes around again.
called "hurry up wait" strategy well
known outside computer field. block-transfer
CCD memory can also viewed paging drum
variable (bounded) rotation speed.
.B
CACM May,1978
.A
Sites, R.L.
.K
Paging drum, charge coupled devices, shift register
memory, memory hierarchy, electronic drum,
latency
.C
3.72 5.39 6.34 6.35
.N
CA780510 DH February 26, 1979 1:05 PM
.X
2628 4 3097
3097 4 3097
2496 5 3097
3097 5 3097
3097 5 3097
3097 5 3097
.I 3098
.T
Computer Generation Gamma Random Variables
.W
new method generating random variables
gamma distribution nonintegral shape
parameter proposed. method similar two
other methods recently given Wallace Fishman.
compared Fishman's Ahrens Dieter's methods.
core storage requirements programming
effort method similar those Fishman's
method. proposed method same
Fishman's method 1 < < 2 faster than Fishman's
method 3 < < 19. Also, proposed
method much simpler than Ahrens Dieter's method faster < 8.
.B
CACM May, 1978
.A
Tadikamalla, P.R.
.K
Gamma variables, rejection method, computer methods
.C
5.5 8.1
.N
CA780509 DH February 26, 1979 1:10 PM
.X
2847 4 3098
2928 4 3098
3046 4 3098
3046 4 3098
3098 4 3098
3098 4 3098
3107 4 3098
2569 5 3098
2847 5 3098
3046 5 3098
3098 5 3098
3098 5 3098
3098 5 3098
2569 6 3098
2847 6 3098
3098 6 3098
.I 3099
.T
New Sufficient Optimality Conditions
Integer Programming their Application
.W
purpose report present
new class sufficient optimality conditions
pure mixed integer programming problems. Some
sets sufficient conditions presented can
thought generalizations optimality conditions
based primal-dual complementarity linear
programming. These sufficient conditions particularly
useful construction difficult integer
programming problems known optimal solutions. These
problems may then used test and/or "benchmark"
integer programming codes.
.B
CACM May, 1978
.A
Fleisher, J.M.
Meyer, R.R.
.K
Integer programming, optimality conditions, test
problem construction, Kuhn-Tucker conditions,
greatest common divisor
.C
3.15 5.39 5.49
.N
CA780508 DH February 26, 1979 1:19 PM
.X
2028 4 3099
2521 4 3099
3099 4 3099
3099 4 3099
3138 4 3099
1313 5 3099
2031 5 3099
3099 5 3099
3099 5 3099
3099 5 3099
.I 3100
.T
Interference Matching Technique Inducing Abstractions
.W
method inducing knowledge abstraction
sequence training examples described.
proposed method, interference matching, induces abstractions
finding relational properties common
two more exemplars. Three tasks solved program
uses interference-matching algorithm
presented. Several problems concerning description
training examples adequacy
interference matching discussed, directions
future research considered.
.B
CACM May, 1978
.A
Hayes-Roth, F.
McDermott, J.
.K
Rule induction, knowledge acquisition, partial
matching, interference, graph matching, learning,
induction, knowledge representation, informal retrieval,
abstraction, generalization, language learning,
complexity, predicate discovery.
.C
3.36 3.61 3.62 3.66 3.70 5.32
.N
CA780507 DH February 26, 1979 1:26 PM
.X
3100 5 3100
3100 5 3100
3100 5 3100
.I 3101
.T
SL5 Procedure Mechanism
.W
paper describes integrated procedure
mechanism permits procedures used
recursive functions coroutines. integration
accomplished treating procedures their
activation records (called environments) data objects
decomposing procedure invocation into
three separate components source-language level.
addition, argument binding under control
programmer, permitting definition various
methods argument transmission source
language itself. resulting procedure mechanism,which
part SL5 programming language,
well suited goal-oriented problems other problems
more readily programmed using
coroutines. Several examples given.
.B
CACM May, 1978
.A
Hanson, D.
Griswold, R.E.
.K
Procedures, coroutines, programming languages,
interpreters, SNOBOL 4, backtracking
.C
4.2 4.20 4.22 4.13
.N
CA780506 DH February 26, 1979 1:36 PM
.X
2411 4 3101
2625 4 3101
2705 4 3101
2709 4 3101
2889 4 3101
2922 4 3101
2937 4 3101
2989 4 3101
3005 4 3101
3025 4 3101
3081 4 3101
3101 4 3101
3101 4 3101
3101 4 3101
3101 4 3101
3112 4 3101
2138 5 3101
2193 5 3101
2438 5 3101
3101 5 3101
3101 5 3101
3101 5 3101
3185 5 3101
.I 3102
.T
Incorporation Units into Programming Languages
.W
issues programming language might
aid keeping track physical units (feet,
sec, etc.) discussed. method given
introduction relationships among units (a watt
volts*amps, yard three feet) subsequent automatic
conversion based upon these relationships.
Various proposals syntax considered.
.B
CACM May, 1978
.A
Karr, M.
Loveman III, D.B.
.K
Units, language design, compiler construction, language syntax
.C
4.12 4.22
.N
CA780505 DH February 26, 1979 1:43 PM
.X
3102 5 3102
3102 5 3102
3102 5 3102
.I 3103
.T
Automatic Data Structure Selection: Example Overview
.W
use several levels abstraction has
proved very helpful constructing
maintaining programs. programs designed abstract
data types such sets lists, programmer
time can saved automating process filling
low-level implementation details. past,
programming systems have provided only single general
purpose implementation abstract type.
Thus programs produced using abstract types were
then inefficient space time. paper
system automatically choosing efficient implementations
abstract types library implementations
discussed. process discussed detail
example program. General issues data structure
selection also reviewed.
.B
CACM May, 1978
.A
Low, J.R.
.K
Abstract data types, automatic programming, data
structures, optimizing compilers, sets, lists
.C
4.12 4.22 4.6
.N
CA780504 DH February 26, 1979 1:51 PM
.X
1957 4 3103
2151 4 3103
3103 4 3103
3103 4 3103
3148 4 3103
1860 5 3103
2877 5 3103
3103 5 3103
3103 5 3103
3103 5 3103
.I 3104
.T
Test Data Aid Proving Program Correctness
.W
Proofs program correctness tend long
tedious, whereas testing, though useful
detecting errors, usually does not guarantee correctness.
paper introduces techniques whereby
test data can used proving program correctness.
addition simplifying process proving
correctness, method simplifies process providing
accurate specification program.
applicability technique procedures
recursive programs demonstrated.
.B
CACM May, 1978
.A
Geller, M.
.K
Program verification, program testing, recursive programs
.C
4.22 4.6 5.24
.N
CA780503 DH February 26, 1979 2:10 PM
.X
2874 4 3104
2981 4 3104
3030 4 3104
3077 4 3104
3104 4 3104
3104 4 3104
2457 5 3104
2683 5 3104
3104 5 3104
3104 5 3104
3104 5 3104
3170 5 3104
3055 6 3104
3104 6 3104
.I 3105
.T
Language Extension Expressing Constraints Data Access
.W
Controlled sharing information needed
desirable many applications supported
operating systems access control mechanisms.
paper shows extend programming languages
provide controlled sharing. extension permits
expression access constraints shared data.
Access constraints can apply both simple objects,
objects components larger objects,
such bank account records bank's data base.
constraints stated declaratively, can
enforced static checking similar type checking.
approach can used extend any strongly-typed
language, but particularly suitable extending
languages support notion abstract data
types.
.B
CACM May, 1978
.A
Jones, A.K.
Liskov,B.H.
.K
Programming languages, access control, data types,
abstract data types, type checking, capabilities
.C
4.20 4.35
.N
CA780502 DH February 26, 1979 3:19 PM
.X
1458 4 3105
1523 4 3105
1603 4 3105
1698 4 3105
1747 4 3105
1748 4 3105
1854 4 3105
1877 4 3105
1960 4 3105
2377 4 3105
2378 4 3105
2497 4 3105
2558 4 3105
2625 4 3105
2626 4 3105
2632 4 3105
2840 4 3105
2868 4 3105
2868 4 3105
2870 4 3105
2876 4 3105
2941 4 3105
3031 4 3105
3105 4 3105
3105 4 3105
3105 4 3105
3105 4 3105
3105 4 3105
3105 4 3105
3144 4 3105
3144 4 3105
3144 4 3105
3148 4 3105
3150 4 3105
1471 5 3105
2625 5 3105
2632 5 3105
2868 5 3105
2939 5 3105
3068 5 3105
3105 5 3105
3105 5 3105
3105 5 3105
.I 3106
.T
Fast Algorithm Copying List Structures
.W
algorithm presented copying arbitrarily
linked list structure into block
contiguous storage locations without destroying original
list. Apart fixed number program
variables, no auxiliary storage, such stack, used.
algorithm needs no mark bits operates
linear time. shown significantly faster
than Fisher's algorithm, fastest previous
linear-time algorithm same problem. Its speed
comes mainly its efficient list-traversal
technique, which folds processing stack into
structure being built, its classification
list cells into nine types, which enables processing
operations optimized each type.
.B
CACM May, 1978
.A
Clark, D.W.
.K
List copying, Lisp, space complexity, constant workspace
.C
4.34 4.49 5.25
.N
CA780501 DH February 26, 1979 3:25 PM
.X
1024 4 3106
1051 4 3106
1102 4 3106
1132 4 3106
1390 4 3106
1486 4 3106
1549 4 3106
1706 4 3106
1826 4 3106
1869 4 3106
1878 4 3106
378 4 3106
2060 4 3106
2155 4 3106
2156 4 3106
2168 4 3106
2361 4 3106
2513 4 3106
2513 4 3106
2665 4 3106
2719 4 3106
2723 4 3106
2723 4 3106
2736 4 3106
2766 4 3106
2838 4 3106
2842 4 3106
2855 4 3106
2855 4 3106
2855 4 3106
2855 4 3106
2855 4 3106
2879 4 3106
2944 4 3106
2954 4 3106
2954 4 3106
3074 4 3106
3077 4 3106
3080 4 3106
3106 4 3106
3106 4 3106
3106 4 3106
3106 4 3106
3106 4 3106
3106 4 3106
3106 4 3106
3106 4 3106
3112 4 3106
627 4 3106
106 4 3106
210 5 3106
1549 5 3106
1972 5 3106
2665 5 3106
2766 5 3106
2855 5 3106
2954 5 3106
2998 5 3106
3106 5 3106
3106 5 3106
3106 5 3106
.I 3107
.T
Generating Beta Variates Nonintegrel Shape Parameters
.W
new rejection method described generating
beta variates. method compared
previously published methods both theoretically through
computer timings. suggested
method has advantages both speed programming
simplicity over previous methods, especially
"difficult" combinations parameter values.
.B
CACM April, 1978
.A
Cheng, R.C.H.
.K
Beta variates, random numbers, simulation
.C
5.5 8.1
.N
CA780409 DH February 26, 1979 3:32 PM
.X
2847 4 3107
2928 4 3107
3046 4 3107
3098 4 3107
3107 4 3107
2569 5 3107
3107 5 3107
3107 5 3107
3107 5 3107
.I 3108
.T
Economical Encoding Commas Between Strings
.W
method insertion delimiters between
strings without using new symbols presented.
lengths strings increase, extra cost,
terms prolongation, becomes vanishingly
small compared lengths strings.
.B
CACM April, 1978
.A
Even, S.
Rodeh, M.
.K
String transmission, delimiters, commas, encoding integers
.C
3.57 3.81 5.6
.N
CA780408 DH February 26, 1979 3:36 PM
.X
3108 5 3108
3108 5 3108
3108 5 3108
.I 3109
.T
Data Structure Manipulating Priority Queues
.W
data structure described which can used
representing collection priority queues.
primitive operations insertion, deletion,
union, update, search item earliest
priority.
.B
CACM April, 1978
.A
Vuillemin, J.
.K
Data structures, implementation set operations,priority
queues, mergeable heaps, binary trees
.C
4.34 5.24 5.25 5.32 8.1
.N
CA780407 DH February 26, 1979 3:39 PM
.X
2844 4 3109
2936 4 3109
3051 4 3109
3051 4 3109
3064 4 3109
3109 4 3109
3109 4 3109
2767 5 3109
2844 5 3109
3109 5 3109
3109 5 3109
3109 5 3109
.I 3110
.T
Assembling Code Machines Span-Dependent Instructions
.W
Many modern computers contain instructions
whose lengths depend distance given
instance such instruction operand
instruction. paper considers problem
minimizing lengths programs such machines.
efficient solution presented
case which operand every such "span-dependent"
instruction either label assembly-time
expression certain restricted form.If restriction
relaxed allowing these operands
more general assembly-time expressions, then
problem shown NP-complete.
.B
CACM April, 1978
.A
Szymanski, T.G.
.K
Span-dependent instructions, variable-length addressing,
code generation, assemblers, compilers,
NP-complete, computational complexity.
.C
4.11 4.12 5.25
.N
CA780406 DH February 26, 1979 3:49 PM
.X
2626 4 3110
2786 4 3110
2840 4 3110
2858 4 3110
2919 4 3110
3017 4 3110
3110 4 3110
3110 4 3110
3110 4 3110
3174 4 3110
2194 5 3110
2629 5 3110
2858 5 3110
3110 5 3110
3110 5 3110
3110 5 3110
.I 3111
.T
Secure Communications Over Insecure Channels
.W
According traditional conceptions cryptographic
security, necessary transmit
key, secret means, before encrypted messages can
sent securely. paper shows
possible select key over open communications channels
such fashion communications security
can maintained. method described which forces
any enemy expend amount work which increases
square work required two communicants
select key. method provides
logically new kind protection against passive
eaves dropper. suggests further research
topic highly rewarding, both
theoretical practical sense.
.B
CACM April, 1978
.A
Merkle, R.C.
.K
Security, cryptography, cryptology, communications
security, wiretap, computer network security,
passive eavesdropping, key distribution, public key cryptosystem
.C
3.56 3.81
.N
CA780405 DH February 26, 1979 4:18 PM
.X
3038 4 3111
3111 4 3111
3177 4 3111
3021 5 3111
3111 5 3111
3111 5 3111
3111 5 3111
3158 5 3111
2436 6 3111
3038 6 3111
3111 6 3111
3111 6 3111
.I 3112
.T
List Processing Real Time Serial Computer
.W
real-time list processing system one
which time required elementary list
operations (e.g. CONS, CAR, CDR, RPLACA, REPLACD, EQ,
ATOM LISP) bounded (small) constant.
Classical implementations list processing systems
lack property because allocating list cell
heap may cause garbage collection, which process
requires time proportional heap size
finish. real-time list processing system presented
which continuously reclaims garbage, including
directed cycles, while linearizing compacting
accessible cells into contiguous locations avoid
fragmenting free storage pool. program small
requires no time-sharing interrupts, making
suitable microcode. Finally, system requires
same average time, not more than twice
space, classical implementation, those
space requirements can reduced approximately
classical proportions compact list representation.
Arrays different sizes, program stack,
hash linking simple extensions our system,
reference counting found inferior
many applications.
.B
CACM April, 1978
.A
Baker, H.G.
.K
Real-time, compacting,garbage collection, list processing,
virtual memory, file database management,
storage management, storage allocation, LISP, CDR-coding, reference counting.
.C
3.50 3.60 3.73 3.80 4.13 4.22 4.32 4.33 4.35 4.49
.N
CA780404 DH February 26,1979 4:32 PM
.X
1024 4 3112
1050 4 3112
1051 4 3112
1098 4 3112
1214 4 3112
1380 4 3112
1388 4 3112
1393 4 3112
1393 4 3112
1485 4 3112
1487 4 3112
1541 4 3112
1549 4 3112
1549 4 3112
1570 4 3112
1846 4 3112
1878 4 3112
1946 4 3112
1957 4 3112
1972 4 3112
2023 4 3112
2060 4 3112
2156 4 3112
2156 4 3112
2168 4 3112
2168 4 3112
2218 4 3112
2361 4 3112
2438 4 3112
2513 4 3112
2625 4 3112
2723 4 3112
2723 4 3112
2736 4 3112
2736 4 3112
2833 4 3112
2833 4 3112
2838 4 3112
2845 4 3112
2855 4 3112
2855 4 3112
2855 4 3112
2857 4 3112
2896 4 3112
2922 4 3112
2944 4 3112
3039 4 3112
3074 4 3112
3074 4 3112
3074 4 3112
3081 4 3112
3101 4 3112
3106 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
3112 4 3112
627 4 3112
106 5 3112
1380 5 3112
1826 5 3112
1972 5 3112
2438 5 3112
2723 5 3112
2736 5 3112
2833 5 3112
2838 5 3112
3112 5 3112
3112 5 3112
3112 5 3112
731 5 3112
.I 3113
.T
Optimal Conversion Extended-Entry
Decision Tables General Cost Criteria
.W
general dynamic programming algorithm converting
limited, extended, mixed entry decision
tables optimal decision trees presented which can
take into account rule frequencies probabilities,
minimum time and/or space cost criteria, common action
sets, compressed rules ELSE rules, sequencing
constraints condition tests, excludable combinations
conditions, certain ambiguities, interrupted
rule masking.
.B
CACM April, 1978
.A
Lew, A.
.K
Decision table, optimal programs, dynamic programming
.C
3.59 4.19 4.29 4.49 5.39 5.42 8.3
.N
CA780403 DH February 26, 1979 4:37 PM
.X
1684 4 3113
2053 4 3113
2220 4 3113
2273 4 3113
2453 4 3113
2598 4 3113
2598 4 3113
2691 4 3113
2726 4 3113
2726 4 3113
2845 4 3113
2856 4 3113
2856 4 3113
3033 4 3113
3113 4 3113
3113 4 3113
3113 4 3113
3113 4 3113
3113 4 3113
1354 5 3113
2263 5 3113
2598 5 3113
2691 5 3113
2856 5 3113
3113 5 3113
3113 5 3113
3113 5 3113
.I 3114
.T
Technique Isolating Differences Between Files
.W
simple algorithm described isolating
differences between two files. One application
comparing two versions source program
other file order display all differences.
algorithm isolates differences way corresponds
closely our intuitive notion difference,
easy implement, computationally efficient,
time linear file length. most
applications algorithm isolates differences similar
those isolated longest common subsequence.
Another application algorithm merges files
containing independently generated changes into
single file. algorithm can also used generate
efficient encodings file form
differences between itself given "datum" file,
permitting reconstruction original file
difference datum files.
.B
CACM April, 1978
.A
Heckel, P.
.K
Difference isolation, word processing, text editing,
program maintenance, hash coding, file compression,
bandwidth compression, longest common subsequence,
file comparison, molecular evolution
.C
3.63 3.73 3.81 4.43
.N
CA780402 DH February 27, 1979 10:52 AM
.X
2299 4 3114
2501 4 3114
2629 4 3114
2915 4 3114
2963 4 3114
3114 4 3114
3114 4 3114
3114 4 3114
1502 5 3114
2499 5 3114
2745 5 3114
3114 5 3114
3114 5 3114
3114 5 3114
.I 3115
.T
Orderly Enumeration Nonsingular Binary
Matrices Applied Text Encryption
.W
Nonsingular binary matrices order N, i.e.,
nonsingular over field {0, 1}, initial
segment natural numbers placed one-to-one
correspondence. Each natural number corresponds
two intermediate vectors. These vectors mapped into
nonsingular binary matrix. Examples
complete enumeration all 2 x 2 3 x 3 nonsingular
binary matrices were produced mapping
intermediate vectors matrices. mapping
has application Vernam encipherment method
using pseudorandom number sequences. bit string formed
form bytes text data encryption key
can used representation natural number.
natural number transformed nonsingular
binary matrix. key leverage obtained using
matrix a"seed" shift register sequence
pseudorandom number generator.
.B
CACM April, 1978
.A
Payne, W.H.
McMillen, K.L.
.K
Binary matrices, combinatorics, combinations, nonsingular
matrices, encryption, Vernam, pseudorandom
numbers, feedback shiftregister sequences, random numbers.
.C
3.7 5.3
.N
CA780401 DH February 27, 1979 11:05 AM
.X
2269 4 3115
2466 4 3115
2690 4 3115
2834 4 3115
2834 4 3115
2834 4 3115
2853 4 3115
2884 4 3115
2908 4 3115
3115 4 3115
3115 4 3115
3115 4 3115
3115 4 3115
3115 4 3115
3115 4 3115
3115 4 3115
907 5 3115
2045 5 3115
2417 5 3115
2466 5 3115
2884 5 3115
579 5 3115
3115 5 3115
3115 5 3115
3115 5 3115
785 5 3115
.I 3116
.T
Interference Detection Among Solids Surfaces
.W
many industrial environments necessary determine whether
r there interference among components. There many potential
interference problems products made up assemblies components
product manufacturing testing. Typically, drawings
used attempt detect such unwanted interferences,
but two-dimensional, static drafting medium does not always show
interferences among three-dimensional, moving parts. paper
presents computer representation solids surfaces algorithms
which carry out interference checking among objects so represented.
Objects represented polyhedra piecewise planar
surfaces. Two types interference checking discussed:
detection intersections among objects fixed positions detection
collisions among objects moving along specified trajectories.
.B
CACM January, 1979
.A
Boyse, J.W.
.K
Interference checking, intersection detection, collision detection, solid
representation, polyhedral representation, graphics, polygons, surfaces
.C
3.2 8.2
.N
CA790101 DH April 10, 1979 10:50 AM
.X
2827 4 3116
3116 4 3116
2771 5 3116
3116 5 3116
3116 5 3116
3116 5 3116
3172 5 3116
3116 6 3116
.I 3117
.T
Impact Use Computer Technology Police
.W
Over past decade there has been significant growth
use computer technology U.S. police departments.
growth, however, has been slower rate than predicted
early 1970's. Further, computer applications extend
beyond "routine" uses "nonroutine" efforts, such resource allocation
computer-aided-dispatch systems machine begins become
tool decision making, strategic planning person/machine
interaction, results technology date have been
mixed. paper reports case studies surveys which provinsights
implementation impact police computer technology
relationship technology law enforcement society.
.B
CACM January, 1979
.A
Colton, K.W.
.K
Computer technology, innovation, police resource allocation, police command
control, computer aided dispatch,
law enforcement, technology transfer
.C
2.1 2.11 2.12 2.45 3.33 3.39
.N
CA790102 DH April 10, 1979 11:32 AM
.X
3117 4 3117
3090 5 3117
3117 5 3117
3117 5 3117
3117 5 3117
.I 3118
.T
Permutation Data Blocks Bubble Memory
.W
common internal organization bubble memories consists set (minor)
loops, connected through another (major) loop. problem obtaining any
give n permutation minor loop contents minimum time studied
paper. lower bound number steps required buy
permutation algorithm derived, class optimum algorithms
identified.
.B
CACM January, 1979
.A
Bongiovanni, G.C.
Luccio, F.
.K
Bubble memory, memory loops, permutation algorithm, data block shift
.C
4.34 5.30 6.34
.N
CA790103 DH April 10, 1979 12:04 PM
.X
3118 5 3118
3118 5 3118
3118 5 3118
.I 3119
.T
Impact Distributions Disciplines
Multiple Processor Systems
.W
Simple queueing models used study performance tradeoffs
multiple processor systems. Issues considered include impact CPU
service disciplines distributions, level multiprogramming,
multitasking, job priorities.
.B
CACM January, 1979
.A
Sauer, C.H.
Chandy, K.M.
.K
Multiprogramming, multiprocessing, scheduling disciplines,
performance evaluation, queueing models
.C
4.32 4.6 6.2 8.1
.N
CA790104 DH April 10, 1979 12:10 PM
.X
2571 4 3119
2918 4 3119
3032 4 3119
3072 4 3119
3119 4 3119
3119 4 3119
3119 4 3119
3119 4 3119
2245 5 3119
2798 5 3119
2849 5 3119
2859 5 3119
3119 5 3119
3119 5 3119
3119 5 3119
.I 3120
.T
Event-Driven Compiling Technique
.W
Due linear structure source text, difficulties may arise
one-pass compilation process. These difficulties occur entity
cannot processed because forward reference information
only obtainable subsequent entities. Classic solutions
ask data structures appropriate each case. technique
presented here which uses instead control structures, namely events
processes. work compiler-writer becomes easier both
conceptually practice because he can forget these problems
outset he avoids special processing each problem.
technique has been applied construction Algol
68 compiler. Three examples implementation
described discussed here.
.B
CACM January, 1979
.A
Banatre, J.P.
Routeau, J.P.
Trilling, L.
.K
Compiling technique, one-pass compilation, semantic
analysis, event, process, parallelism
categories--4.12
.N
CA790105 DH April 10, 1979 12:26 PM
.X
3120 5 3120
3120 5 3120
3120 5 3120
.I 3121
.T
Syntactic Source Source Transforms Program Manipulation
.W
Syntactic transforms source source program transformations
which preserve history computation, thus do not
modify execution time. Combined small number primitive
semantic transforms, they provide powerful tool program
manipulation. catalogue syntactic transforms, its use
solution system program equations, given. Examples
derivation more complex source source transformations also
presented. Two case studies illustrate way which syntactic
semantic source source transformations may used
development clear, simple, reasonably efficient programs.
.B
CACM January, 1979
.A
Arsac, J.J.
.K
Structured programming, program transforms, control structures
.C
4.2 5.24 5.25
.N
CA790106 DH April 10, 1979 1:57 PM
.X
1175 4 3121
1919 4 3121
1919 4 3121
1969 4 3121
1997 4 3121
2191 4 3121
2191 4 3121
2388 4 3121
2388 4 3121
2679 4 3121
2709 4 3121
2783 4 3121
2784 4 3121
2821 4 3121
3004 4 3121
3054 4 3121
3054 4 3121
3121 4 3121
3121 4 3121
3121 4 3121
3121 4 3121
3121 4 3121
864 4 3121
1312 5 3121
308 5 3121
309 5 3121
2456 5 3121
2709 5 3121
3121 5 3121
3121 5 3121
3121 5 3121
.I 3122
.T
Production Employment Ph.D.'s Computer Science - 1977 1978
.B
CACM February, 1979
.A
Taulbee, O.E.
Conte, S.D.
.K
Computer science, production Ph.D.'s, employment, students
.C
1.3 1.52 1.53 1.59
.N
CA790201 DH April 10, 1979 2:09 PM
.X
2962 4 3122
3122 4 3122
3122 4 3122
3123 4 3122
3123 4 3122
2861 5 3122
2962 5 3122
3122 5 3122
3122 5 3122
3122 5 3122
.I 3123
.T
Employment Characteristics Doctoral Level Computer Scientists
.B
CACM February, 1979
.A
Fairley, R.E.
.K
Employment characteristics, manpower utilization,occupational trends
.C
1.5 2.1 2.2
.N
CA790202 DH April 10, 1979 2:13 PM
.X
2962 4 3123
3022 4 3123
3122 4 3123
3122 4 3123
3123 4 3123
3123 4 3123
3123 4 3123
3123 4 3123
2823 5 3123
2861 5 3123
2962 5 3123
3022 5 3123
3123 5 3123
3123 5 3123
3123 5 3123
.I 3124
.T
Recursive Data Structures APL
.W
mathematical study three approaches defining nested
arrays APL presented. Theorems exhibiting relationships
between definitional systems given illustrated through graph
representations. One approaches used define
APL array recursive data structure equivalent tree structure
which all data stored leaves homogeneous
arrays numbers characters. extension APL proposed
includes new primitive functions manipulate nesting
level arrays new operators assist
construction data-driven algorithms.
.B
CACM February, 1979
.A
Gull,W.E.
Jenkins, M.A.
.K
Nested arrays, APL arrays, recursive data structures,
trees, data-driven algorithms, theory arrays
.C
4.22 5.29
.N
CA790203 DH April 10, 1979 3:41 PM
.X
2060 4 3124
2294 4 3124
2470 4 3124
3124 4 3124
1469 5 3124
3124 5 3124
3124 5 3124
3124 5 3124
.I 3125
.T
Global Optimization Suppression Partial Redundancies
.W
elimination redundant computations moving invariant
computations out loops often done separately, invariants
moved outward loop loop. We propose do both once
move each expression directly entrance outermost
loop which invariant. done solving more
general problem, i.e. elimination computations performed
twice given execution path. Such computations termed partially
redundant. Moreover, algorithm does not require any graphical
information restrictions shape program graph.
Testing algorithm has shown its execution cost nearly
linear size program, leads
smaller optimizer requires less execution time.
.B
CACM February, 1979
.A
Morel, E.
Renvoise, C.
.K
Optimizer, optimization, compiler, compilation,
redundancy elimination, invariant
computation elimination, partial redundancy,
data flow analysis, Boolean systems
.C
4.12 5.21 5.24
.N
CA790204 DH April 10, 1979 4:19 PM
.X
3125 5 3125
3125 5 3125
3125 5 3125
.I 3126
.T
Comments Perfect Hashing Functions: Single
Probe Retrieving Method Static Sets
.B
CACM February, 1979
.A
Anderson, M.G.
.K
Hashing, hashing methods, hash coding, direct addressing, identifier-
to-address transformations, perfect hashing functions, perfect
hash coding, reduction, retrieving, scatter storage, searching
.C
3.7 3.74 4.34
.N
CA790205 DH April 10, 1979 4:25 PM
.X
3041 4 3126
3126 4 3126
3176 4 3126
2905 5 3126
3126 5 3126
3126 5 3126
3126 5 3126
.I 3127
.T
Thoth, Portable Real-Time Operating System
.W
Thoth isa real-time operating system which designed portable
over large set machines. currently running two minicomputers
quite different architectures. Both system application
programs which use written high-level language.
Because system implemented same software different
hardware, has same interface user programs. Hence,
application programs which use Thoth highly portable. Thoth
encourages structuring programs networks communicating processes
providing efficient interprocess communication primitives.
.B
CACM February, 1979
.A
Cheriton, D.R.
Malcolm, M.A.
Melen, L.A.
Sager, G.R.
.K
Portability, real time, operating systems, minicomputer
.C
3.80 4.30 4.35
.N
CA790206 DH April 12, 1979 9:10 AM
.X
2319 4 3127
2378 4 3127
2320 4 3127
2632 4 3127
2738 4 3127
2740 4 3127
2868 4 3127
2928 4 3127
3127 4 3127
3127 4 3127
2080 5 3127
2277 5 3127
3127 5 3127
3127 5 3127
3127 5 3127
.I 3128
.T
Synchronization Eventcounts Sequencers
.W
Synchronization concurrent processes requires controlling relative
ordering events processes.
new synchronization mechanism proposed, using
abstract objects called eventcounts sequencers, allows processes
control ordering events directly, rather than using mutual
exclusion protect manipulations shared variables control
ordering events. Direct control ordering seems simplify
correctness arguments also simplifies implementation distributed
systems. mechanism defined formally, then several
examples its use given. relationship mechanism
protection mechanisms system explained; particular,
eventcounts shown applicable situations confinement
information matters. implementation eventcount
s sequencers system shared memory described.
.B
CACM February, 1979
.A
Reed, D.P.
Kanodia, R.K.
.K
Process synchronization, interprocess communication, distributed
systems, security models, mutual exclusion, semaphores
.C
4.30 4.32
.N
CA790207 DH April 12, 1979 10:03 AM
.X
2320 4 3128
2597 4 3128
2700 4 3128
2777 4 3128
2840 4 3128
2851 4 3128
2865 4 3128
2866 4 3128
2869 4 3128
2895 4 3128
2898 4 3128
2912 4 3128
2938 4 3128
2945 4 3128
2946 4 3128
2946 4 3128
2972 4 3128
3043 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3128 4 3128
3144 4 3128
3148 4 3128
3158 4 3128
2150 5 3128
2376 5 3128
2436 5 3128
2597 5 3128
2865 5 3128
2866 5 3128
2870 5 3128
2912 5 3128
3082 5 3128
3128 5 3128
3128 5 3128
3128 5 3128
.I 3129
.T
Optimal Storage Allocation Serial Files
.W
computer system uses several serial files. files reside
direct-access storage device which storage space limited. Records
added files either jobs batch processing mode, on-line
transactions. Each transaction (or job) generates demand vector which
designates space required each file record addition. Whenever one
file runs out space, system must reorganized. paper considers
several criteria best allocating storage space files.
.B
CACM February, 1979
.A
Mendelson, H.
Pliskin, J.S.
Yechiali, U.
.K
Serial files, storage allocation, reorganization, partitioned dataset
.C
3.5 3.7 4.33 4.6
.N
CA790208 DH April 12, 1979 10:34 AM
.X
2816 4 3129
3129 4 3129
3129 4 3129
2493 5 3129
2816 5 3129
3129 5 3129
3129 5 3129
3129 5 3129
.I 3130
.T
CURRICULUM '78 - Recommendations
Undergraduate Program Computer Science
.W
Contained report recommendations
undergraduate degree program Computer Science
Curriculum Committee Computer Science (C3S) Association
Computing Machinery (ACM). core curriculum common all
computer science undergraduate programs presented terms
elementary level topics courses, intermediate level courses.
Elective courses, used round out undergraduate program,
then discussed, entire program including computer
science component other material presented. Issues related
undergraduate computer science education, such service
courses, supporting areas, continuing education, facilities,
staff, articulation presented.
.B
CACM March, 1979
.A
Austing, R.H.
Barnes, B.H.
Bonnette, D.T.
Engel, G.L.
Stokes, G.
.K
Computer sciences courses, computer science curriculum, computer
science education, computer science undergraduate degree
programs, service courses, continuing education
.C
1.52
.N
CA790301 DH April 12, 1979 11:02 AM
.X
1720 4 3130
1927 4 3130
2147 4 3130
2163 4 3130
2345 4 3130
2478 4 3130
2594 4 3130
2852 4 3130
2899 4 3130
3130 4 3130
3130 4 3130
1771 5 3130
3003 5 3130
3130 5 3130
3130 5 3130
3130 5 3130
.I 3131
.T
FOCUS Microcomputer Number System
.W
FOCUS number system supporting computational
algorithms especially useful microcomputer control other
signal processing applications. FOCUS has wide-ranging
character floating-point numbers uniformity state distributions
give FOCUS better than twofold accuracy advantage
over equal word length floating-point system. FOCUS computations
typically five times faster than single precision fixed-point
integer arithmetic mixture operations, comparable
speed hardware arithmetic many applications. Algorithms
8-bit 16-bit implementations FOCUS included.
.B
CACM March, 1979
.A
Edgar, A.D.
Lee, S.C.
.K
Number representation, logarithmic arithmetic, computational
speed, computational accuracy, microcomputer applications
.C
3.24 3.80 4.0 4.22 5.11
.N
CA790302 DH April 12, 1979 11:12 AM
.X
3131 4 3131
3131 4 3131
1148 5 3131
3131 5 3131
3131 5 3131
3131 5 3131
893 5 3131
.I 3132
.T
Experiments Some Algorithms Find
Central Solutions Pattern Classification
.W
two-class pattern recognition, standard
technique have algorithm finding hyperplanes
which separates two classes linearly separable training
set. traditional methods find hyperplane which separates all
points other, but such hyperplane not necessarily centered
empty space between two classes. Since central
hyperplane does not favor one class other, should have
lower error rate classifying new points therefore better
than noncentral hyperplane. Six algorithms finding central
hyperplanes tested three data sets. Although frequently
used practice, modified relaxation algorithm very poor.
Three algorithms which defined paper found
quite good.
.B
CACM March, 1979
.A
Slagle, J.
.K
Pattern recognition, pattern classification, linear discriminants, central
hyperplanes, centering, centrality criteria, dead zone, hyperplane,
linearly separable, relaxation algorithm, accelerated relaxation
.C
3.62 3.63
.N
CA790303 DH April 12, 1979 3:20 PM
.X
3132 4 3132
2215 5 3132
3132 5 3132
3132 5 3132
3132 5 3132
.I 3133
.T
Logic Semantic Networks
.W
extended form semantic network defined, which can
regarded syntactic variant clausal form logic.
virtue its relationship logic, extended
semantic network provided precise semantics,
inference rules, procedural interpretation.
other hand, regarding semantic networks
abstract data structure representation clauses, we provide
theorem-prover potentially useful indexing scheme path-following
strategy guiding search proof.
.B
CACM March, 1979
.A
Deliyanni, A.
Kowalski, R.A.
.K
Logic, semantic networks, theorem-proving, indexing, resolution, deduction,
logic programming
.C
3.42 3.64 5.21
.N
CA790304 DH April 12, 1979 3:53 PM
.X
3133 4 3133
3133 5 3133
3133 5 3133
3133 5 3133
3154 5 3133
2046 6 3133
2110 6 3133
3133 6 3133
.I 3134
.T
Use Normal Multiplication Tables
Information Storage Retrieval
.W
paper describes method organization retrieval attribute
based information systems, using normal multiplication table directory
information system. Algorithms organization
d retrieval information described. method particularly
suitable queries requesting group information items,
all which possess particular set attributes (and possibly
some other attributes well). Several examples given;
results respect number disk accesses disk space
compared other common approaches. Algorithms evaluating
appropriateness above approach given information system
described. certain class information systems,
normal multiplication table method yields far more rapid retrieval
more economical space requirement than conventional systems.
Moreover method incorporates improved modification inverted
file technique.
.B
CACM March, 1979
.A
Motzkin, D.
.K
Information retrieval, inverted files, multiattribute retrieval,
multilist file, normal multiplication table, queries,
rapid retrieval, space economy
.C
3.70 3.73 3.79
.N
CA790305 DH May 21, 1979 9:46 AM
.X
2140 4 3134
2452 4 3134
2575 4 3134
2765 4 3134
2901 4 3134
2966 4 3134
3134 4 3134
3134 4 3134
3134 4 3134
3134 4 3134
1976 5 3134
2160 5 3134
2524 5 3134
2990 5 3134
3134 5 3134
3134 5 3134
3134 5 3134
.I 3135
.T
Detection Three-Dimensional Patterns Atoms Chemical Structures
.W
algorithm detecting occurrences three-dimensional pattern
objects within larger structure presented. search technique
presented uses geometric structure pattern define
characteristics demanded candidates matching. useful
cases properties each atom, considered individually,
do not adequately limit number sets possible matchings.
Several applications technique field chemistry
are: (1) pharmacology: searching common constellation
atoms molecules possessing similar biological activities;
(2) X-ray crystallography: fitting structure structural fragment
set peaks electron-density distribution
Fourier map; (3) chemical documentation; retrieving
file structures containing specified substructures.
.B
CACM April, 1979
.A
Lesk, A.M.
.K
Three-dimensional pattern recognition, chemical
structure search, information retrieval, crystal
-structure analysis, drug analysis design
.C
3.13 3.63 3.74
.N
CA790401 DH May 21, 1979 10:50 AM
.X
2521 5 3135
3135 5 3135
3135 5 3135
3135 5 3135
2028 6 3135
2031 6 3135
3135 6 3135
.I 3136
.T
Price/Performance Patterns U.S. Computer Systems
.W
Econometric models U.S. computer market have been developed study
relationships between system price hardware performance. Single
measures price/performance such "Grosch's Law" shown
so over simplified meaningless. Multiple-regression models
predicting system cost function several hardware
characteristics do, however, reveal market dichotomy. one hand there
exists stable, price predictable market larger, general
purpose computer systems. other market developing one
small business computer systems, market which relatively
unstable low price predictability.
.B
CACM April, 1979
.A
Cale, E.G.
Gremillion, L.L.
McKenney, J.L.
.K
Price/performance, Grosch's law, U.S. computer market
.C
2.0 2.11 6.21
.N
CA790402 DH May 21, 1979 1:09 PM
.X
3136 5 3136
3136 5 3136
3136 5 3136
.I 3137
.T
Methodology Design Distributed Information Systems
.W
macro model distributed information system presented. model
describes major costs using information
system perspective end-user. making evident effect
various design operating parameters overall cost per transaction.
technique illustrated application design
interactive transaction processing system.
.B
CACM April, 1979
.A
Bucci, G.
Streeter, D.N.
.K
Distributed processing, system design, cost minimization, distributed
database, interactive computing, economic modeling, transaction processing
.C
4.32 4.33 6.2 8.1
.N
CA790403 DH May 21, 1979 1:25 PM
.X
3137 5 3137
3137 5 3137
3137 5 3137
.I 3138
.T
Mathematical Programming Updating Method Using Modified
Givens Transformations Applied LP Problems
.W
efficient numerically stable method presented problem
updating orthogonal decomposition matrix column (or row) vectors.
fundamental idea add column (or row) analogous
adding additional row data linear least squares problem.
column (or row) dropped formal scaling
imaginary unit, -1, followed least squares addition column
(or row). elimination process procedure successive
ssive application Givens transformation modified (more efficient)
form. These ideas illustrated implementation
revised simplex method. algorithm general purpose
one does not account any particular structure sparsity
equations. Some suggested computational tests determining
signs various controlling parameters revised simplex
algorithm mentioned. simple means constructing
test cases some sample computing times presented.
.B
CACM April, 1979
.A
Hanson, R.J.
Wisniewski, J.A.
.K
Linear programming, numerical linear algebra, modified Givens transformations,
linear programming test cases
.C
5 5.4 5.41 5.1 5.14
.N
CA790404 DH May 21, 1979 2:06 PM
.X
3099 4 3138
3138 4 3138
1313 5 3138
3138 5 3138
3138 5 3138
3138 5 3138
.I 3139
.T
New Methods Color Vertices Graph
.W
paper describes efficient new heuristic
methods color vertices graph which rely
upon comparison degrees structure graph. method
developed which exact bipartite graphs
important part heuristic procedures find maximal cliques general
graphs. Finally exact method given which performs better
than Randall-Brown algorithm able color larger
graphs, new heuristic methods, classical methods,
exact method compared.
.B
CACM April, 1979
.A
Brelaz, D.
.K
NP-complete, graph structure, balancing, graph
coloring, scheduling, comparison methods
.C
5.25 5.32
.N
CA790405 DH June 5, 1979 2:05 PM
.X
3139 5 3139
3139 5 3139
3139 5 3139
.I 3140
.T
Social Processes Proofs Theorems Programs
.W
argued formal verifications
programs, no matter obtained, not play
same key role development computer science software
engineering proofs do mathematics. Furthermore absence
continuity, inevitability change, complexity
specification significantly many real programs make form
al verification process difficult justify manage. felt
ease formal verification should not dominate program
language design.
.B
CACM May, 1979
.A
De Millo, R.A.
Lipton, R.J.
Perlis, A.J.
.K
Formal mathematics, mathematical proofs,
program verification, program specification
.C
2.10 4.6 5.24
.N
CA790501 DH June 5, 1979 2:23 PM
.X
3140 5 3140
3140 5 3140
3140 5 3140
3178 5 3140
3076 6 3140
3140 6 3140
3142 6 3140
3179 6 3140
3180 6 3140
3181 6 3140
3182 6 3140
.I 3141
.T
Improved Algorithm Decentralized Extrema-Finding
Circular Configurations Processes
.W
note presents improvement LeLann's
algorithm finding largest (or smallest) set uniquely
numbered processes arranged circle, which no central
controller exists number processes not known priori.
decentralized algorithm uses technique selective
message extinction order achieve average number
message passes order (n log n) rather than O(n2).
.B
CACM May, 1979
.A
Chang, E.
Roberts, R.
.K
Decentralized algorithms, distributed systems, operating systems
.C
4.32 4.35 5.25 5.32
.N
CA790502 DH June 5, 1979 2:35 PM
.X
3141 5 3141
3141 5 3141
3141 5 3141
.I 3142
.T
Consumer Difficulties Computerized Transactions:
Empirical Investigation
.W
prevalence which errors may encountered
end targets computerized process assessed. many
type errors occur? easily they corrected?
reaction consumers errors-to failure correct
them? can learned designers large management packages
such data? Results show present state
art, approximately 40 percent individuals (or households) having
average contacts different types accounts experience one
more errors per year. Eighty percent relate billing. Attempts
correct errors often turned out difficult not always
successful. There appears some conflict between computer-using
organizations their public. Also role poor man
agement packages including poor software indicated. While most
management systems may adequate, results survey raise
concerns timeliness number designs very
large linked program packages (as EFT instance).
.B
CACM May, 1979
.A
Sterling, T.D.
.K
Errors, systems errors, billing errors, management systems, consumers
.C
2.0 2.1 2.12 2.2 3.50 3.52 3.55 4.19 4.6
.N
CA790503 DH June 5, 1979 3:21 PM
.X
3142 4 3142
3142 4 3142
3179 4 3142
3178 4 3142
3182 4 3142
3183 4 3142
2583 5 3142
3076 5 3142
3142 5 3142
3142 5 3142
3142 5 3142
3178 5 3142
3076 6 3142
3140 6 3142
3142 6 3142
3179 6 3142
3180 6 3142
3181 6 3142
3182 6 3142
.I 3143
.T
Reasoning Arrays
.W
variety concepts, laws, notations presented which facilitate
reasoning arrays. basic concepts include intervals their
partitions, functional restriction, images, pointwise extension relations,
ordering, single-point variation functions, various equivalence relations
array values, concatenation. effectiveness
these ideas illustrated informal descriptions
algorithms binary search merging, short formal proof.
.B
CACM May, 1979
.A
Reynolds, J.C.
.K
Arrays, assertions, program proving, intervals, partitions, pointwise
extension, ordering, concatenation, binary search, merging
.C
4.0 4.22 5.21 5.24
.N
CA790504 DH June 5, 1979 3:33 PM
.X
2021 4 3143
2222 4 3143
2227 4 3143
2315 4 3143
2326 4 3143
2356 4 3143
2420 4 3143
2470 4 3143
2732 4 3143
2865 4 3143
2874 4 3143
2896 4 3143
2943 4 3143
3014 4 3143
3068 4 3143
3077 4 3143
3143 4 3143
3143 4 3143
1834 5 3143
2227 5 3143
3143 5 3143
3143 5 3143
3143 5 3143
.I 3144
.T
Model DIscussion Multi-Interpreter Systems
.W
multi-interpreter system system which programs execute
virtue being interpreted other programs, which themselves may
either interpreted (i.e. nested interpreters) run directly
host machine. model reveals anatomy interpreters
these differ procedures, exhibits links
protection domains multiprocessor architectures.
.B
CACM May, 1979
.A
Manthey, M.J.
.K
Interpreters, transfer-of-control, hierarchies
.C
4.13 3.65
.N
CA790505 DH August 21, 19791:14 PM
.X
1458 4 3144
1523 4 3144
1603 4 3144
1698 4 3144
1747 4 3144
1748 4 3144
1854 4 3144
1877 4 3144
1960 4 3144
2377 4 3144
2378 4 3144
2497 4 3144
2558 4 3144
2625 4 3144
2626 4 3144
2632 4 3144
2748 4 3144
2840 4 3144
2865 4 3144
2866 4 3144
2868 4 3144
2868 4 3144
2870 4 3144
2876 4 3144
2898 4 3144
2941 4 3144
2972 4 3144
3043 4 3144
3105 4 3144
3105 4 3144
3105 4 3144
3128 4 3144
3144 4 3144
3144 4 3144
3144 4 3144
3144 4 3144
3144 4 3144
3144 4 3144
3144 4 3144
1471 5 3144
2298 5 3144
2491 5 3144
2597 5 3144
2624 5 3144
2625 5 3144
2632 5 3144
3144 5 3144
3144 5 3144
3144 5 3144
.I 3145
.T
Implementation Structured Walk-Throughs
Teaching Cobol Programming
.W
effectiveness structured
walk-throughs teaching introductory Cobol programming empirically
assessed sample 215 under-graduate business administration
majors. Cobol proficiency measured final examination
testing (a) knowledge language rules, (b) ability read
debug program, (c) ability write program. Analysis
multiple covariance used statistically adjust test
scores age conditional reasoning scores. findings provide
empirical support incorporating structured walk-throughs
into programming learning process more effectively
develop student proficiency writing Cobol programs.
.B
CACM June, 1979
.A
Lemos, R.S.
.K
Structured walk-throughs, Cobol programming, teaching
programming, testing programming proficiency
.C
3.51 1.52 2.42 4.22
.N
CA790601 DH August 21, 1979 3:19 PM
.X
3145 4 3145
2887 5 3145
3145 5 3145
3145 5 3145
3145 5 3145
.I 3146
.T
Academic Program Providing Realistic Training Software Engineering
.W
academic program Harvey Mudd College, called
Clinic program, brings projects industry
campus studied solved student teams. objective
Clinic provide students, working small teams under
careful faculty supervision, opportunity work real world
problems sufficient magnitude complexity. Under program,
students can acquire essential skills software engineering,
such team work, software project management, software design
methodology, communication skills, realistic environment.
Sample software projects undertaken Clinic described.
Experience so far has shown program viable
transition academic industrial world.
.B
CACM June, 1979
.A
Busenberg, S.N.
Tam, W.C.
.K
Software engineering, software engineering education, software
projects, student teams, software engineering skills
.C
1.52 4.0
.N
CA790602 DH August 21, 1979 4:04 PM
.X
3146 5 3146
3146 5 3146
3146 5 3146
.I 3147
.T
Model Automating File Program Design Business Application Systems
.W
paper discusses model finding efficient implementation
business application system whose logical specifications have been determined
advance. model views file program design problem
systematically coordinating configurations datasets
computations. uses straight forward search technique
determine aggregations computations, aggregations datasets, device,
organization, key order each data set, key order
each computation, access method each dataset-computation
pair. Although computational results presented sample
problem involving 54 computations 49 datasets, main point
paper underlying model works computationally
d simple enough adapted many file design situations.
.B
CACM June, 1979
.A
Alter, S.
.K
System design, automatic programming, search
methods, system configurations, design choices
.C
4.12 4.22 4.6
.N
CA790603 DH August 21, 1979 4:25 PM
.X
3147 4 3147
2718 5 3147
3147 5 3147
3147 5 3147
3147 5 3147
.I 3148
.T
High Level Programming Distributed Computing
.W
Programming distributed other loosely coupled systems
problem growing interest. paper describes approach
distributed computing level general purpose programming
languages. Based primitive notions module, message,
transaction key, methodology shown independent
particular languages machines. appears useful
programming wide range tasks. part ambitious
program development advanced programming languages, relations
other aspects project also discussed.
.B
CACM June, 1979
.A
Feldman, J.A.
.K
Distributed computing, modules, messages, assertions
.C
4.22 4.32
.N
CA790604 DH August 21, 1979 4:31 PM
.X
1957 4 3148
2151 4 3148
3031 4 3148
3103 4 3148
3105 4 3148
3128 4 3148
3148 4 3148
3148 4 3148
3148 4 3148
3148 4 3148
3148 4 3148
3150 4 3148
3150 4 3148
3155 4 3148
1860 5 3148
2817 5 3148
2865 5 3148
2939 5 3148
3073 5 3148
3148 5 3148
3148 5 3148
3148 5 3148
3150 5 3148
2060 6 3148
2704 6 3148
2842 6 3148
2939 6 3148
2940 6 3148
2941 6 3148
2943 6 3148
3073 6 3148
3148 6 3148
.I 3149
.T
Cyclic Order Property Vertices Aid Scene Analysis
.W
cyclic-order property defined bodies bounded smooth-curved faces.
property shown useful analyzing pictures such bodies,
particularly line data extracted pictures imperfect.
property augments previously known grammatical rules
determine existence three-dimensional bodies corresponding
given two-dimensional line-structure data.
.B
CACM June, 1979
.A
Shapira, R.
Freeman, H.
.K
Scene analysis, cyclic order, artificial intelligence,
three-dimensional reconstruction
, picture processing, computer graphics, pattern recognition.
.C
3.2 3.6 8.2
.N
CA790605 DH August 22, 1979 1:36 PM
.X
3149 5 3149
3149 5 3149
3149 5 3149
.I 3150
.T
Beyond Programming Languages
.W
computer technology matures, our growing ability create large systems
leading basic changes nature programming. Current programming
language concepts not adequate building maintaining
systems complexity called tasks we attempt. Just
high level languages enabled programmer escape
intricacies machine's order code, higher level programming systems
can provide means understand manipulate complex
systems components. order develop such systems, we need
shift our attention away detailed specification
algorithms, towards description properties packages
objects which we build. paper analyzes some
shortcomings programming languages they now exist,
lays out some possible directions future research.
.B
CACM July, 1979
.A
Winograd, T.
.K
Programming, programming languages, programming systems, systems development
.C
4.0 4.20 4.22 4.40
.N
CA790701 DH August 22, 1979 2:00 PM
.X
2155 4 3150
2294 4 3150
2558 4 3150
2837 4 3150
2842 4 3150
2945 4 3150
3031 4 3150
3077 4 3150
3105 4 3150
3148 4 3150
3148 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3150 4 3150
3155 4 3150
2060 5 3150
2704 5 3150
2842 5 3150
2939 5 3150
2941 5 3150
2943 5 3150
2940 5 3150
3073 5 3150
3148 5 3150
3150 5 3150
3150 5 3150
3150 5 3150
.I 3151
.T
Optimal Real-Time Algorithm Planar Convex Hulls
.W
algorithm described construction real-time
convex hull set n points plane. Using appropriate data
structure, algorithm constructs convex hull successive
updates, each taking time O(log n), thereby achieving total
processing time O(n log n).
.B
CACM July, 1979
.A
Preparata, F.P.
.K
Computational geometry, convex hull, planar set
points, real-time algorithms, on-line algorithms.
.C
4.49 5.25 5.32
.N
CA790702 DH August 22, 1979 2:07 PM
.X
3151 4 3151
2997 5 3151
3151 5 3151
3151 5 3151
3151 5 3151
.I 3152
.T
Storage Reorganization Techniques
Matrix Computation Paging Environment
.W
order multiply matrices while minimizing
number page fetches required, often more efficient
reorganize data into submatrix form use block multiplication
rather than use best known algorithms which leave
matrices stored row-(or column-)oriented form. efficient
method accomplishing reorganization given. also
makes possible derivation asymptotically better bound
multiplication matrices given row-oriented form adapting
technique Strassen reorganized data. reorganization/block
multiplication scheme shown advantageous
matrices pages realistic size; Strassen adaptation
not. former scheme also shown advantageous even if
transpose one matrices available no additional cost.
.B
CACM July, 1979
.A
Fischer, P.C.
Probert, R.L.
.K
Matrix multiplication, paging, virtual memory,
data reorganization, pagination, transpose.
.C
4.34 5.14 5.25
.N
CA790703 DH August 22, 1979 2:29 PM
.X
2365 4 3152
2362 4 3152
2582 4 3152
3152 4 3152
3152 4 3152
1924 5 3152
2365 5 3152
3152 5 3152
3152 5 3152
3152 5 3152
.I 3153
.T
Control Response Times Multi-Class
Systems Memory Allocations
.W
possibility giving different quality service jobs different
classes regulating their memory allocation examined
context paged computer system. Two parameterized algorithms
which partition main memory between two classes jobs
considered. Initially, closed system consisting process
paging file devices, fixed numbers jobs, studied
determine optimal degrees multiprogramming proportion
processor time devoted each class. Applying decomposition
approach treating closed system single server,
response times open system external arrivals
studied. object investigate effect memory
alocation parameters expected response times under two algorithms.
Numerical solutions economical lower bounds
expected response times functions control parameters
obtained. way applying results systems more
than two job classes indicated.
.B
CACM July, 1979
.A
Hine, J.H.
Mitrani, I.
Tsur, S.
.K
Queueing networks, paging, virtual memory, performance control
.C
4.32 8.1
.N
CA790704 DH August 22, 1979 3:32 PM
.X
3016 4 3153
3070 4 3153
3153 4 3153
3153 4 3153
2741 5 3153
2891 5 3153
3153 5 3153
3153 5 3153
3153 5 3153
.I 3154
.T
Algorithm = Logic + Control
.W
algorithm can regarded consisting logic component,
which specifies knowledge used solving problems,
control component, which determines problem-solving
strategies means which knowledge used. logic component
determines meaning algorithm whereas control
component only affects its efficiency. efficiency
algorithm can often improving control component without changing
logic algorithm. We argue computer programs would
more often correct more easily improved modified if
their logic control aspects were identified separated
program text.
.B
CACM July, 1979
.A
Kowalski, R.
.K
Control language, logic programming, nonprocedural language, programming
methodology, program specification, relational data structures
.C
3.64 4.20 4.30 5.21 5.24
.N
CA790705 DH September 24, 1979 5:08 PM
.X
1989 4 3154
2060 4 3154
2155 4 3154
2179 4 3154
2406 4 3154
2698 4 3154
2710 4 3154
2715 4 3154
2716 4 3154
2717 4 3154
2718 4 3154
2765 4 3154
2817 4 3154
2888 4 3154
2901 4 3154
2921 4 3154
2957 4 3154
2959 4 3154
2965 4 3154
3087 4 3154
3154 4 3154
3154 4 3154
3154 4 3154
2046 5 3154
2110 5 3154
3133 5 3154
3154 5 3154
3154 5 3154
3154 5 3154
3154 6 3154
.I 3155
.T
Paradigms Programming
.B
CACM August, 1979
.A
Floyd, R.W.
.N
CA790801 DB January 4, 1980 11:44 AM
.X
1323 4 3155
1358 4 3155
1380 4 3155
1665 4 3155
1781 4 3155
1787 4 3155
1989 4 3155
2112 4 3155
2319 4 3155
2480 4 3155
2480 4 3155
2534 4 3155
2541 4 3155
2594 4 3155
2698 4 3155
2709 4 3155
2733 4 3155
2738 4 3155
2820 4 3155
2867 4 3155
2939 4 3155
2972 4 3155
3004 4 3155
3030 4 3155
3073 4 3155
3148 4 3155
3150 4 3155
3155 4 3155
3155 4 3155
3155 4 3155
3155 4 3155
2204 5 3155
2247 5 3155
3073 5 3155
3155 5 3155
3155 5 3155
3155 5 3155
799 5 3155
.I 3156
.T
Computing Connected Components Parallel Computers
.W
We present parallel algorithm which uses n2 processors find connected
components undirected graph n vertices time O(log2n).
O(log2n) time bound also can achieved using only n$n/$log2n)) processors.
algorithm can used find transitive closure
symmetric Boolean matrix. We assume processors have
access common memory. Simultaneous access same location
permitted fetch instructions but not store instructions.
.B
CACM August, 1979
.A
Hirschberg, D.S.
Chandra, A.K.
Sarwate, D.V.
.K
Graph theory, parallel processing, algorithms,
transitive closure, connected component
.C
5.25 5.32 6.22
.N
CA790802 DB January 4, 1980 12:18 PM
.X
3075 4 3156
3156 4 3156
3156 4 3156
3156 4 3156
2289 5 3156
2973 5 3156
3075 5 3156
3156 5 3156
3156 5 3156
3156 5 3156
.I 3157
.T
Proving Termination Multiset Orderings
.W
common tool proving termination programs well-founded
set, set ordered such way admit no infinite descending sequences.
basic approach find termination function maps
values program variables into some well-founded set,
such value termination function repeatedly reduced
throughout computation. All too often, termination functions required
difficult find complexity out
proportion program under consideration. Multisets (bags)
over given well-founded set S sets admit multiple occurrences
elements taken S. given ordering S induces
ordering finite multisets over S. multiset ordering
shown well-founded. multiset ordering enables
use relatively simple intuitive termination functions otherwise
difficult termination proofs. particular, multiset
ordering used prove termination production systems,
programs defined terms sets rewriting rules.
.B
CACM August, 1979
.A
Dershowitz, N.
Manna, Z.
.K
Program correctness, program termination, program verification, well-founded
orderings, well-founded sets, multisets, bags, production systems,
term rewriting systems, tree replacement systems, reduction rules
.C
5.24 5.7
.N
CA790803 DB January 4, 1980 3:44 PM
.X
3157 4 3157
3014 5 3157
3157 5 3157
3157 5 3157
3157 5 3157
.I 3158
.T
Secure Personal Computing Insecure Network
.W
method implementing secure personal computing network
one more central facilities proposed. method employs
public-key encryption device hardware keys. Each user responsible
his own security need not rely security
central facility communication links. user can safely
store confidential files central facility transmit confidential
data other users network.
.B
CACM August, 1979
.A
Denning, D.E.
.K
Personal computing, security, privacy, networks, public-key encryption
.C
2.12 6.20
.N
CA790804 DB January 14, 1980 9:26 AM
.X
2840 4 3158
2869 4 3158
3021 4 3158
3128 4 3158
3158 4 3158
3158 4 3158
3158 4 3158
2436 5 3158
3038 5 3158
3111 5 3158
3158 5 3158
3158 5 3158
3158 5 3158
.I 3159
.T
Further Remark Stably Updating Mean Standard Deviation Estimates
.B
CACM August, 1979
.A
Nelson, L.S.
.K
Mean, standard deviation
.C
5.5 5.19
.N
CA790805 DB January 14, 1980 9:38 AM
.X
2731 4 3159
3159 4 3159
3159 4 3159
3166 4 3159
3166 4 3159
3167 4 3159
3167 4 3159
2731 5 3159
2799 5 3159
3159 5 3159
3159 5 3159
3159 5 3159
3166 5 3159
1411 6 3159
2731 6 3159
2799 6 3159
3159 6 3159
3167 6 3159
.I 3160
.T
Rejuvenating Experimental Computer Science
.W
report based results NSF sponsored
workshop held Wasington, D.C. November 2, 1978. co-authors
report are: Gordon Bell, Digital Equipment Corporation; Bernard A. Galler,
University Michigan; Patricia Goldberg, IBM Corporation; John
Hamblen, University Missouri Rolla; Elliot Pinson, Bell Telephone
Laboratories; Ivan Sutherland, California Institute
Technology. Also participating workshop were representatives
NSF other government agencies. addition authors,
number other people have contributed contents
report. preparation original workshop, all doctorate-granting
computer science departments nation were asked
comments suggestions problems experimental computer science.
version current report dated January 15 circulated these
departments number industrial government groups criticism.
editors authors final version gratefully acknowledge
contribution large number other people all stages preparation
report.
$Note: Following presentation report, there
position paper crisis experimental computer
science written ACM Executive Committee.)
.B
CACM September, 1979
.A
Feldman, J.A.
Sutherland, W.R.
.N
CA790901 DB January 14, 1980 10:05 AM
.X
3160 5 3160
3160 5 3160
3160 5 3160
.I 3161
.T
ACM Executive Committee Position Crisis
Experimental Computer Science
.B
CACM September, 1979
.A
McCracken, D.D., CCP
Denning, P.J.
Brandin, D.H.
.N
CA790902 DB January 14, 1980 10:19 AM
.X
3161 5 3161
3161 5 3161
3161 5 3161
.I 3162
.T
Improving Worst Case Running Time
Boyer-Moore String Matching Algorithm
.W
shown modify Boyer-Moore string matching algorithm so
its worst case running time linear even multiple occurrences
pattern present text.
.B
CACM September, 1979
.A
Galil, Z.
.K
Computational complexity, linear time, worst case, string matching, periodicity
.C
3.74 4.40 5.25
.N
CA790903 DB January 14, 1980 10:27 AM
.X
3162 4 3162
2916 5 3162
3162 5 3162
3162 5 3162
3162 5 3162
.I 3163
.T
Optimal Insertion Algorithm One-Sided
Height-Balanced BInary Search Trees
.W
algorithm inserting element into one-sided height-balanced
(OSHB) binary search tree presented. algorithm operates time
O(log n), n number nodes
tree. represents improvement over best previous
ly known insertion algorithms Hirschberg Kosaraju, which require
time O(log 2n). Moreover, O(log n) complexity optimal. Earlier
results have shown deletion such structure can
also performed O(log n) time. Thus result paper
gives negative answer question whether such trees should
first examples their kind, deletion has smaller time
complexity than insertion. Furthermore, can now concluded
insertion, deletion, retrieval OSHB trees can
performed same time corresponding operations
more general AVL trees, within constant factor. However,
insertion deletion algorithms OSHB trees appear much
more complicated than corresponding algorithms AVL trees.
.B
CACM September, 1979
.A
Raiha,K.J.
Zweben, S.H.
.K
Insertion, one-sided height-balanced trees, height-balanced
trees, binary trees, search trees.
.C
3.73. 3.74 4.34 5.25 5.31
.N
CA790904 DB January 14, 1980 11:47 AM
.X
2839 4 3163
3009 4 3163
3042 4 3163
3042 4 3163
3065 4 3163
3065 4 3163
3096 4 3163
3096 4 3163
3096 4 3163
3163 4 3163
3163 4 3163
3163 4 3163
3163 4 3163
3163 4 3163
2839 5 3163
2889 5 3163
3009 5 3163
3065 5 3163
3096 5 3163
3163 5 3163
3163 5 3163
3163 5 3163
.I 3164
.T
Progressive Acyclic Digraphs-A Tool Database Integrity
.W
progressive acyclic digraph (PAD) algorithm accepts requests
maintains graph acyclic state. request creates cycle,
nodes are, "detached" until new can entered acyclically
process important certain areas database implementation
which there constraints permissible sequences
actions. Two PAD algorithms presented; one uses simple
path matrix representation other uses list
"artificial gradient." Experiments suggest large N second
considerably faster, though both asymptotically O(NR),
N number nodes R expected number
nodes reachable along paths any given node.
.B
CACM September, 1979
.A
Hansen, W.J.
.K
List processing, data structures, topological sort,
acyclic digraph, database integrity, network, deadlock
.C
4.34 5.32 4.33
.N
CA790905 DB January 14, 1980 11:56 AM
.X
3164 4 3164
1712 5 3164
3164 5 3164
3164 5 3164
3164 5 3164
.I 3165
.T
Approximation Polygonal Maps Cellular Maps
.W
approximation polygonal thematic maps cellular
maps, important operation geographical data processing,
analyzed. data organization used representing polygonal
maps widely used segment-based data structure, class
labels identify regions bordering each segment either side.
approximation algorithm presented operates such
organization, eliminating need recognition region boundaries.
Each segment examined only once. versatility
new organization further illustrated outline algorithms
area computation point inclusion. algorithm
applied set soil maps converted computer-readable
form means coordinate digitizer.
.B
CACM September, 1979
.A
Nagy, G.
Wagle, S.G.
.K
Polygon maps, cellularization, gridding, geographic data structures,
computational geometry, computer cartography, automated cartography
.C
3.14 4.34 8.2
.N
CA790906 DB January 14, 1980 12:04 PM
.X
1630 4 3165
2547 4 3165
2987 4 3165
3165 4 3165
3165 4 3165
1326 5 3165
2987 5 3165
3165 5 3165
3165 5 3165
3165 5 3165
.I 3166
.T
Computing Standard Deviations: Accuracy
.W
Four algorithms numerical computation
standard deviation (unweighted) sampled data
analyzed. Two algorithms well-known statistical
computational literature; other two new algorithms
specifically intended automatic computation. Our discussion
expository, emphasis reaching suitable definition
"accuracy." Each four algorithms analyzed conditions
under which accurate. We conclude all four
algorithms provide accurate answers many problems, but two
algorithms, one new, one old, substantially more accurate
difficult problems than other two.
.B
CACM September, 1979
.A
Chan, T.F.
Lewis, J.G.
.K
Mean, standard deviation, least squares, updating
estimates, rounding error analysis, condition number.
.C
5.5 5.11 5.19
.N
CA790907 DB January 16, 1980 4:23 PM
.X
1619 4 3166
2731 4 3166
3159 4 3166
3159 4 3166
3166 4 3166
3166 4 3166
3166 4 3166
3166 4 3166
3166 4 3166
3167 4 3166
3167 4 3166
1411 5 3166
2731 5 3166
2799 5 3166
3159 5 3166
3166 5 3166
3166 5 3166
3166 5 3166
3167 5 3166
2731 6 3166
2799 6 3166
3166 6 3166
.I 3167
.T
Updating Mean Variance Estimates: Improved Method
.W
method improved efficiency
given updating mean variance weighted sampled data
additional data value included set. Evidence
presented method stable least
accurate best existing updating method.
.B
CACM September, 1979
.A
West, D.H.D.
.K
Mean, standard deviation, variance, updating estimates, removing data
.C
5.5 5.19
.N
CA790908 DB January 16, 1980 4:47 PM
.X
2731 4 3167
3159 4 3167
3159 4 3167
3166 4 3167
3166 4 3167
3167 4 3167
3167 4 3167
3167 4 3167
2731 5 3167
2799 5 3167
3166 5 3167
3167 5 3167
3167 5 3167
3167 5 3167
1411 6 3167
2731 6 3167
2799 6 3167
3159 6 3167
3167 6 3167
.I 3168
.T
Comment "An Optimal Evaluation Boolean
Expressions Online Query System."
.B
CACM October, 1979
.A
Laird, P.D.
.K
Query, Boolean expression, information retrieval, file organization
.C
3.53.70 3.73 3.74
.N
CA791001 DB January 16, 1980 4:50 PM
.X
3168 4 3168
3168 4 3168
3169 4 3168
2965 5 3168
3002 5 3168
3168 5 3168
3168 5 3168
3168 5 3168
.I 3169
.T
Note "An Optimal Evaluation Boolean Expressions
Online Query System."
.B
CACM October, 1979
.A
Gudes, E.
Hoffman, A.
.K
Query, Boolean expression, optimal evaluation, information retrieval
.C
3.50 3.70 3.74
.N
CA791002 DB January 16, 1980 4:52 PM
.X
3168 4 3169
3169 4 3169
2965 5 3169
3169 5 3169
3169 5 3169
3169 5 3169
.I 3170
.T
Proof Correctness Calendar Program
.W
formal specification given simple calendar
program, derivation proof correctness program
sketched. specification easy understand, its correctness
manifest humans.
.B
CACM October,1979
.A
Lamport, L.
.K
Program specification, program verification, inductive assertions
.C
5.24
.N
CA791003 DB January 16, 1980 5:02 PM
.X
3170 4 3170
3170 4 3170
3055 5 3170
3104 5 3170
3170 5 3170
3170 5 3170
3170 5 3170
.I 3171
.T
Line Numbers Made Cheap
.W
technique described run-time line number administration
used implementations high level languages. Under suitable
circumstances, method requires absolutely no overhead,
either time space, during execution program.
.B
CACM October, 1979
.A
Klint, P.
.K
Line number administration, diagnostic messages, abstract machine code
.C
4.12 4.13 4.20 4.42
.N
CA791004 DB January 17, 1980 9:57 AM
.X
3171 5 3171
3171 5 3171
3171 5 3171
.I 3172
.T
Algorithm Planning Collision-Free
Paths Among Polyhedral Obstacles
.W
paper describes collision avoidance algorithm
planning safe path polyhedral object moving among
known polyhedral objects. algorithm transforms obstacles
so they represent locus forbidden positions arbitrary
reference point moving object. trajectory
reference point which avoids all forbidden regions free collisions.
Trajectories found searching network which indicates, each vertex
transformed obstacles, which other vertices can reached safely.
.B
CACM October, 1979
.A
Lozano-Perez, T.
Wesley, M.A.
.K
Path finding, collision-free paths, polyhedral objects,
polyhedral obstacles, graph searching, growing objects
.C
3.15 3.64 3.66 8.1
.N
CA791005 DB January 17, 1980 10:13 AM
.X
3172 4 3172
3116 5 3172
3172 5 3172
3172 5 3172
3172 5 3172
.I 3173
.T
Psychology Learning BASIC
.W
paper addresses question: does person know
following learning BASIC programming? Several underlying conceptual
structures identified: (1) transaction event
occurs computer involves some operation some object
some location, (2) prestatement set transactions corresponding
line code, (3) chunks frequently occurring
configurations prestatements corresponding several lines code.
.B
CACM November, 1979
.A
Mayer, R.E.
.K
BASIC, Learning, instruction
.C
1.50 3.36 4.22
.N
CA791101 DB January 17, 1980 10:38 AM
.X
3173 5 3173
3173 5 3173
3173 5 3173
.I 3174
.T
Password Security: Case History
.W
paper describes history design password
security scheme remotely accessed time-sharing system.
present design result countering observed attempts
penetrate system. result compromise between
extreme security ease use.
.B
CACM November, 1979
.A
Morris, R.
Thompson, K.
.K
Operating systems, passwords, computer security
.C
2.41 4.35
.N
CA791102 DB January 18, 1980 10:03 AM
.X
2626 4 3174
2786 4 3174
2840 4 3174
2919 4 3174
3017 4 3174
3110 4 3174
3174 4 3174
2629 5 3174
3174 5 3174
3174 5 3174
3174 5 3174
.I 3175
.T
Breaking Substitution Ciphers Using Relaxation Algorithm
.W
Substitution ciphers codes which each letter
alphabet has one fixed substitute, word divisions
do not change. paper problem breaking substitution
ciphers represented probabilistic labeling problem.
Every code letter assigned probabilities representing plain text
letters. These probabilities updated parallel all
code letters, using joint letter probabilities. Iterating updating
scheme results improved estimates finally lead
breaking cipher. method applies successfully two examples.
.B
CACM November, 1979
.A
Peleg, S.
Rosenfeld, A.
.K
Cryptography, substitution ciphers,
probabilistic classification, relaxation
.C
3.42 3.63
.N
CA791103 DB January 23, 1980 11:15 AM
.X
3175 5 3175
3175 5 3175
3175 5 3175
.I 3176
.T
Storing Sparse Table
.W
problem storing searching large sparse tables ubiquitous
computer science. standard technique storing such tables
hashing, but hashing has poor worst-case performance. We propose
good worst-case method storing static table n entries,
each integer between 0 N - 1. method requires 0(n) w
words storage allows O(logn N) access time. Although our method
little complicated use practice, our analysis shows
why simpler algorithm used compressing LR parsing tables works so well.
.B
CACM November, 1979
.A
Tarjan, R.E.
Yao, A.C.C.
.K
Gaussian elimination, parsing, searching,
sparse matrix, table compression, table lookup
.C
3.74 4.12 4.34 5.25
.N
CA791104 DB January 23, 1980 11:24 AM
.X
3041 4 3176
3126 4 3176
3176 4 3176
2905 5 3176
3176 5 3176
3176 5 3176
3176 5 3176
.I 3177
.T
Share Secret
.W
paper we show divide data D into
n pieces such way D easily reconstructable any
k pieces, but even complete knowledge k - 1 pieces reveals
olutely no information D. technique enables construction
robust key management schemes cryptographic systems
can function securely reliably even misfortunes destroy
half pieces security breaches expose all but one
remaining pieces.
.B
CACM November, 1979
.A
Shamir, A.
.K
Cryptography, key management, interpolation
.C
5.39 5.6
.N
CA791105 DB January 23, 1980 11:48 AM
.X
3038 4 3177
3111 4 3177
3177 4 3177
3021 5 3177
3177 5 3177
3177 5 3177
3177 5 3177
.I 3178
.T
Introduction EFT Symposium
.B
CACM December, 1979
.A
Kling, R.
.N
CA791201 DB February 21, 1980 5:02 PM
.X
3142 4 3178
3179 4 3178
3178 4 3178
3178 4 3178
3178 4 3178
3178 4 3178
3178 4 3178
3178 4 3178
3178 4 3178
3182 4 3178
3183 4 3178
3076 5 3178
3140 5 3178
3142 5 3178
3179 5 3178
3178 5 3178
3178 5 3178
3178 5 3178
3182 5 3178
3180 5 3178
3181 5 3178
.I 3179
.T
Overview EFT Symposium
.W
increasingly recognized large-scale technologies such EFT
have potential aiding solution current societal problems.
Yet, these technologies also generate problems. symposium
presents selected papers conference sought discover
currently known EFT impacts society
research needed future.
.B
CACM December, 1979
.A
Kraemer, K.L.
Colton, K.W.
.K
EFT's, research agenda, conference results, public policy
.C
2.11 3.52 3.53 3.80
.N
CA791202 DB February 25, 1980 11:03 AM
.X
2756 4 3179
3076 4 3179
3142 4 3179
3179 4 3179
3179 4 3179
3179 4 3179
3178 4 3179
3182 4 3179
3183 4 3179
2572 5 3179
2607 5 3179
3076 5 3179
3179 5 3179
3179 5 3179
3179 5 3179
3178 5 3179
3076 6 3179
3140 6 3179
3142 6 3179
3179 6 3179
3180 6 3179
3181 6 3179
3182 6 3179
.I 3180
.T
Costs Current U.S. Payments System
.W
Neither banking industry nor
public policy makers have good information comparative costs
alternative payment systems such cash, checks, credit cards,
EFT transactions. result, EFT systems services
likely implemented without valid assessment whether they
cost-justified, lst alone justified terms other criteria.
.B
CACM December, 1979
.A
Lipis, A.H.
.K
EFT's,payment system costs, payment system volumes
.C
3.52
.N
CA791203 DB February 25, 1980 11:09 AM
.X
3178 5 3180
3180 5 3180
3180 5 3180
3180 5 3180
3076 6 3180
3140 6 3180
3142 6 3180
3179 6 3180
3180 6 3180
3181 6 3180
3182 6 3180
.I 3181
.T
Public Protection Education EFT
.W
Research has revealed existence widespread
misinformation lack knowledge EFT among
business government well consumers. result, any effort
stimulate meaningful public participation decisions
introduction EFT systems require coordinated educational
effort considerable scale. addition, research has revealed
shortcomings present system defining responsibilities,
liabilities, avenues recourse. article presents
several possible alternatives improving current system, but
ongoing research also needed assure actions taken
responsive changing environment consumer needs.
.B
CACM December, 1979
.A
Long, R.H.
.K
Electronic funds transfer systems, consumer education, security
fraud, privacy, system reliability, EFT ombudsman
.C
2.12
.N
CA791204 DB February 25, 1980 11:33 AM
.X
3178 5 3181
3181 5 3181
3181 5 3181
3181 5 3181
3076 6 3181
3140 6 3181
3142 6 3181
3179 6 3181
3180 6 3181
3181 6 3181
3182 6 3181
.I 3182
.T
Vulnerabilities EFTs Intentionally Caused Losses
.W
hypothesis consumers
provided greater accuracy freedom error fraud
electronic funds transfer systems (EFTs) discussed light
technical capabilities potential computer protect
against both accidentally intentionally caused losses.
Although nomenclature business crimes remains same
manual depository other financial service systems - example,
fraud, theft, embezzlement - characteristics crimes
new. changes resulting accelerating use EFTs
its continual technological advances broaden scope security
issues examined. Factors such backup requirements,
regulatory legislative actions, economics give rise
urgency immediate research into solutions emerging
EFTs - related vulnerabilities.
.B
CACM December, 1979
.A
Parker, D.B.
.K
EFTs, computer abuse, crime, security, errors,
losses, positions trust, legislation
.C
2.11 2.3 3.52 3.80
.N
CA791205 DB February 25, 1980 1:56 PM
.X
3142 4 3182
3179 4 3182
3178 4 3182
3182 4 3182
3183 4 3182
3076 5 3182
3178 5 3182
3182 5 3182
3182 5 3182
3182 5 3182
3076 6 3182
3140 6 3182
3142 6 3182
3179 6 3182
3180 6 3182
3181 6 3182
3182 6 3182
.I 3183
.T
Policy, Values, EFT Research: Anatomy Research Agenda
.W
There emerging recognition EFT systems have potential
vastly alter payment fund transfer system American society.
number forces actors involved evolution,
values vary significantly depending individual institutional
perspectives. These value conflicts highlighted
six-part research agenda: technological issues EFT, EFT impacts
people, economic impact EFT, regulation control
EFT, evaluating monitoring EFT systems.
.B
CACM December, 1979
.A
Kraemer, K.L.
Colton, K.W.
.K
EFTs, research agenda, value conflicts, impacts people,
economic impacts, regulation control, monitoring EFT
.C
2.11 2.3 3.52 3.53 3.80
.N
CA791206 DB February 25, 1980 2:10 PM
.X
3142 4 3183
3179 4 3183
3178 4 3183
3182 4 3183
3183 4 3183
3076 5 3183
3183 5 3183
3183 5 3183
3183 5 3183
.I 3184
.T
Revised Report Algorithmic Language ALGOL 60
.W
report gives complete defining description international
algorithmic language ALGOL 60. language suitable expressing
large class numerical processes form sufficiently concise
direct automatic translation into language programmed automatic
computers.
.B
CACM January, 1963
.A
Nuar, P.
.N
CA630117 ES March 17, 1982 10:10 AM
.X
1781 4 3184
1828 4 3184
1854 4 3184
1877 4 3184
1960 4 3184
2150 4 3184
2150 4 3184
2228 4 3184
2256 4 3184
2317 4 3184
2317 4 3184
2319 4 3184
2377 4 3184
2342 4 3184
2342 4 3184
2376 4 3184
2376 4 3184
2379 4 3184
2424 4 3184
2482 4 3184
2618 4 3184
2618 4 3184
2632 4 3184
2704 4 3184
2723 4 3184
2738 4 3184
2740 4 3184
2741 4 3184
2867 4 3184
3184 4 3184
3184 4 3184
3184 4 3184
949 5 3184
989 5 3184
1086 5 3184
1132 5 3184
1198 5 3184
1234 5 3184
1263 5 3184
1265 5 3184
1270 5 3184
1323 5 3184
1358 5 3184
1379 5 3184
1380 5 3184
1453 5 3184
1464 5 3184
1484 5 3184
1491 5 3184
1498 5 3184
1613 5 3184
1614 5 3184
1749 5 3184
1781 5 3184
1825 5 3184
1860 5 3184
2083 5 3184
2178 5 3184
2179 5 3184
2252 5 3184
2325 5 3184
2341 5 3184
2546 5 3184
2645 5 3184
2652 5 3184
2684 5 3184
2842 5 3184
2929 5 3184
2934 5 3184
557 5 3184
3069 5 3184
3184 5 3184
3184 5 3184
3184 5 3184
669 5 3184
679 5 3184
691 5 3184
761 5 3184
1 6 3184
823 6 3184
123 6 3184
145 6 3184
196 6 3184
196 6 3184
196 6 3184
196 6 3184
196 6 3184
919 6 3184
944 6 3184
947 6 3184
987 6 3184
988 6 3184
989 6 3184
989 6 3184
990 6 3184
990 6 3184
1007 6 3184
1046 6 3184
1086 6 3184
1131 6 3184
1134 6 3184
1137 6 3184
1139 6 3184
1140 6 3184
1140 6 3184
1149 6 3184
1198 6 3184
1215 6 3184
1215 6 3184
1223 6 3184
1263 6 3184
1265 6 3184
1303 6 3184
1303 6 3184
1303 6 3184
1303 6 3184
1323 6 3184
1323 6 3184
1323 6 3184
1358 6 3184
1358 6 3184
1366 6 3184
1366 6 3184
1389 6 3184
1421 6 3184
1421 6 3184
1421 6 3184
1453 6 3184
1460 6 3184
1460 6 3184
1462 6 3184
1463 6 3184
1467 6 3184
1468 6 3184
1468 6 3184
1466 6 3184
1477 6 3184
1477 6 3184
1477 6 3184
1477 6 3184
1491 6 3184
1491 6 3184
1491 6 3184
1496 6 3184
1496 6 3184
1496 6 3184
1531 6 3184
1535 6 3184
1565 6 3184
1601 6 3184
1602 6 3184
1613 6 3184
1614 6 3184
1626 6 3184
1626 6 3184
1641 6 3184
1641 6 3184
1781 6 3184
1785 6 3184
1786 6 3184
1787 6 3184
1788 6 3184
205 6 3184
205 6 3184
1825 6 3184
210 6 3184
210 6 3184
224 6 3184
249 6 3184
267 6 3184
288 6 3184
288 6 3184
316 6 3184
321 6 3184
378 6 3184
381 6 3184
385 6 3184
398 6 3184
2015 6 3184
2059 6 3184
2060 6 3184
2110 6 3184
11 6 3184
2126 6 3184
2127 6 3184
2148 6 3184
2155 6 3184
2192 6 3184
21 6 3184
400 6 3184
402 6 3184
404 6 3184
404 6 3184
404 6 3184
404 6 3184
404 6 3184
407 6 3184
410 6 3184
410 6 3184
437 6 3184
463 6 3184
464 6 3184
464 6 3184
483 6 3184
483 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3184 6 3184
3188 6 3184
584 6 3184
584 6 3184
600 6 3184
631 6 3184
635 6 3184
669 6 3184
680 6 3184
691 6 3184
729 6 3184
729 6 3184
729 6 3184
731 6 3184
761 6 3184
763 6 3184
799 6 3184
799 6 3184
799 6 3184
799 6 3184
.I 3185
.T
Humble Programmer
.W
We shall do much better programming job, provided we approach
task full appreciation if its tremendous difficulty, provided we
stick modest elegant programming languages, provided we respect
intrinsic limitations human mind approach task Very
Humble Programmers.
.B
CACM October, 1972
.A
Dijkstra, E. W.
.N
CA721010 ES March 18, 1982 10:00 AM
.X
249 4 3185
1139 4 3185
438 4 3185
3185 4 3185
3185 4 3185
303 5 3185
2705 5 3185
438 5 3185
3101 5 3185
3185 5 3185
3185 5 3185
3185 5 3185
1908 6 3185
2138 6 3185
2193 6 3185
2438 6 3185
3185 6 3185
3185 6 3185
.I 3186
.T
GO Statement Considerd Harmful
.B
CACM March, 1968
.A
Dijkstra, E. W.
.K
go statement, jump instruction, branch instruction, conditional clause,
repetitive clause, program intelligibility, program sequencing
.C
4.22 5.23 5.24
.N
CA680303 ES March 17, 1982 10:10 AM
.X
2193 5 3186
2326 5 3186
2477 5 3186
2541 5 3186
2594 5 3186
3004 5 3186
3186 5 3186
3186 5 3186
3186 5 3186
1303 6 3186
1323 6 3186
1425 6 3186
1771 6 3186
1834 6 3186
2016 6 3186
2155 6 3186
2192 6 3186
2204 6 3186
2247 6 3186
2356 6 3186
2456 6 3186
3186 6 3186
3186 6 3186
3186 6 3186
3186 6 3186
3186 6 3186
3186 6 3186
799 6 3186
.I 3187
.T
Certification Algorithm 271 (QUICKERSORT)
.W
QUICKERSORT compiled run without correction through ALDEP translator
CDC 1604A. Comparison average sorting items other recently
published algorithms demonstrates QUICKERSORT's superior performance.
.B
CACM May, 1966
.A
Blair, C.R.
.N
CA660516 ES March 17, 1982 10:10 AM
.X
1919 5 3187
2679 5 3187
3187 5 3187
3187 5 3187
3187 5 3187
864 6 3187
970 6 3187
1175 6 3187
1175 6 3187
1190 6 3187
1228 6 3187
1969 6 3187
1997 6 3187
308 6 3187
308 6 3187
309 6 3187
2042 6 3187
74 6 3187
3187 6 3187
3187 6 3187
507 6 3187
716 6 3187
783 6 3187
.I 3188
.T
Semiotics Programming Languages
.W
have based my paper semiotics its three dimension. should insert
point language has many aspects pragmatics, semantics
syntactics do not necessary cover all them. One can, however, project most
aspects into three semiotic dimension there seems strong
tendency do so today.
.B
CACM March, 1966
.A
Zemanek, H.
.N
CA660319 ES March 17, 1982 10:10 AM
.X
2087 4 3188
2189 4 3188
3188 4 3188
3188 4 3188
1594 5 3188
1781 5 3188
3188 5 3188
3188 5 3188
3188 5 3188
612 5 3188
123 6 3188
196 6 3188
919 6 3188
990 6 3188
1007 6 3188
1046 6 3188
1131 6 3188
1139 6 3188
1140 6 3188
1149 6 3188
1198 6 3188
1215 6 3188
1223 6 3188
1265 6 3188
1303 6 3188
1323 6 3188
1358 6 3188
1366 6 3188
1421 6 3188
1460 6 3188
1462 6 3188
1463 6 3188
1467 6 3188
1468 6 3188
1477 6 3188
1491 6 3188
1496 6 3188
1531 6 3188
1535 6 3188
1565 6 3188
1601 6 3188
1602 6 3188
1613 6 3188
1614 6 3188
1626 6 3188
1641 6 3188
1787 6 3188
1788 6 3188
205 6 3188
224 6 3188
249 6 3188
288 6 3188
316 6 3188
381 6 3188
398 6 3188
11 6 3188
404 6 3188
410 6 3188
463 6 3188
464 6 3188
483 6 3188
3184 6 3188
3188 6 3188
584 6 3188
600 6 3188
680 6 3188
691 6 3188
763 6 3188
799 6 3188
.I 3189
.T
Algebraic Compiler FORTRAN Assembly Program
.W
algebraic compiler has been written which may added FORTRAN
Assembly Program. compiler expand all algebraic statements
following operations: addition, subtraction, multiplication division.
compile multi-level expressions floating-point arithmetic (this
easily revised fixed-point).
.B
CACM November, 1962
.A
Stiegler, A. D.
.N
CA621124 ES March 17, 1982 10:10 AM
.X
1788 5 3189
3189 5 3189
3189 5 3189
3189 5 3189
1006 6 3189
1007 6 3189
205 6 3189
3189 6 3189
.I 3190
.T
Correction Economies Scale IBM System/360
.W
page 439, "typical" instruction mix id discussed timing computed
outlined page. Through undetected programming error, times
resulting regression equation slightly error.
.B
CACM February, 1967
.A
Solomon, M.B.
.N
CA670214 ES March 17, 1982 10:10 AM
.X
2387 5 3190
3190 5 3190
3190 5 3190
3190 5 3190
1417 6 3190
3190 6 3190
.I 3191
.T
Generating Permutations Nested Cycling
.W
purpose letter two_fold: first give due credit
Tompkins-Paige algorithm, second clarify comment Hill, CR Review
13891 "Programs Permutations".
.B
CACM June, 1968
.A
Langdon, Glen G.
.K
permutations
.C
5.39
.N
CA680617 ES March 18, 1982 10:00 AM
.X
2189 5 3191
3191 5 3191
3191 5 3191
3191 5 3191
1594 6 3191
2087 6 3191
3191 6 3191
521 6 3191
.I 3192
.T
Lincoln Keyboard - Typewriter Keyboard Designed
Computers Input Flexibility
.W
new typewriter keyboard, direct punched paper tape computer input
replace usual commercial keyboard 88 characters chosen
convenience programmers. Lincoln Keyboard expected facilitate
programming algorithmic process should allow considerable
flexibility assembly utility routines.
.B
CACM July, 1958
.A
Vanderburgh, A.
.N
CA580702 ES March 17, 1982 10:10 AM
.X
1083 5 3192
3192 5 3192
3192 5 3192
3192 5 3192
407 6 3192
3192 6 3192
3193 6 3192
730 6 3192
.I 3193
.T
.W
Work progress formula coding technique allowing direct entry
into computer formulae typed 84 character Flexo-writer.
Flexo-writer modified automatic half-line advance retract,
without carriage return, permit completely general sub superscripting.
.B
CACM July, 1958
.N
CA580703 ES March 17, 1982 10:10 AM
.X
3193 4 3193
796 4 3193
1083 5 3193
491 5 3193
3193 5 3193
3193 5 3193
3193 5 3193
407 6 3193
3192 6 3193
3193 6 3193
730 6 3193
.I 3194
.T
Non-heuristic Program Proving Elementary Logical Theorems
.W
paper discusses problems involved designing device capable
distinguishing among speech events normally recognized different
native speakers particular language. Parallels between these problems
those chemical analysis pointed out.
.B
CACM January, 1959
.A
Dunham, B.
Fridshal, R.
Sward, G. L.
.N
CA590102 ES March 17, 1982 10:10 AM
.X
204 5 3194
3194 5 3194
3194 5 3194
3194 5 3194
3194 6 3194
.I 3195
.T
Reiteration ACM Policy Toward Standardization
.W
periodic change officers, chairman editors which usually follows
election occasionally results change policy. case
department there no radical change, but nevertheless proper time
reiterate ans underline ACM's policy respect standardization
computer area.
.B
CACM November, 1962
.A
Gorn, S.
.N
CA621123 ES March 17, 1982 10:10 AM
.X
3195 5 3195
3195 5 3195
3195 5 3195
690 5 3195
890 6 3195
929 6 3195
3195 6 3195
.I 3196
.T
Reactive Typewriter Program
.W
84-character keyboard including alphabetical upper lower case good
readability. If machine restricted only single case, lower case
preferred. reactive typewriter should portable. reactive
typewriter should operate over any commercially used, dial-type telephone
(voice) telegraph (Telex) line over leased (nondial) telegraph lines
interchangeably.
.B
CACM January, 1963
.A
Mooers, C. N.
.N
CA630118 ES March 17, 1982 10:10 AM
.X
1071 5 3196
3196 5 3196
3196 5 3196
3196 5 3196
3196 6 3196
.I 3197
.T
Structures Standards-Processing Organizations Computer Area
.W
line ACM's policy statement [Comm. ACM 5 (Nov. 1962), 547-549],
following organizational descriptions have been provided order
describe standardization activities pertinent computers information
processing.
.B
CACM June, 1966
.A
Gorn, S.
Bemer, R. W.
Green, J.
.N
CA630626 ES March 17, 1982 10:10 AM
.X
3197 5 3197
3197 5 3197
3197 5 3197
689 5 3197
217 6 3197
323 6 3197
3197 6 3197
.I 3198
.T
Microprogramming, Emulators Programming Languages
.W
problem we have been concerned converting language
action - intellectual energy mechanical energy. medium we use
purpose language therefore we preoccupied subject
language. areas language investigation we have concentrated first
formalizing syntax then semantics.
.B
CACM March, 1966
.A
Greem, J.
.N
CA660318 ES March 17, 1982 10:10 AM
.X
1542 5 3198
3198 5 3198
3198 5 3198
3198 5 3198
1491 6 3198
3198 6 3198
.I 3199
.T
ALGEM - Algebraic Manipulator
.W
ALGEM package subprograms written Slip, FORTRAN IV MAP 7094
II manipulate algebraic expressions. Algem's basic algebraic operations
additions, subtractions, multiplications, division exponentiation.
capable handling any number single letter variables, variable exponents,
finding highest common factor two polynomials. Also included
such functions substitution, differentiation, determining coefficients
specified variables, solving linear equation, basic I/O routines plus other
special purpose arithmetic routines. major innovation Algem over
other manipulators assignment types all expressions use
standard ordering procedure.
.B
CACM August, 1966
.A
Gotlieb, C. C.
Novak, R. J.
.N
CA660813 ES March 17, 1982 10:10 AM
.X
1396 5 3199
3199 5 3199
3199 5 3199
3199 5 3199
964 6 3199
1028 6 3199
1029 6 3199
1083 6 3199
1132 6 3199
1214 6 3199
1278 6 3199
1334 6 3199
1365 6 3199
1386 6 3199
1387 6 3199
1388 6 3199
1392 6 3199
1393 6 3199
1394 6 3199
1395 6 3199
1396 6 3199
1397 6 3199
1496 6 3199
284 6 3199
407 6 3199
3199 6 3199
3200 6 3199
3201 6 3199
3202 6 3199
3203 6 3199
3204 6 3199
561 6 3199
730 6 3199
.I 3200
.T
FORMAC Program Solution Linear Boundary Initial Value
Problems
.W
computer program described which has been developed obtaining
approximate solutions linear initial boundary-value problems involving
differential equations. each problem, input program includes:
1. equations (in symbolic form) satisfied - differential
equations, equations describing auxiliary conditions such boundary
conditions, etc.
2. numerical description regions which each equations
satisfied.
3. Sets functions (in symbolic form) used linear combinations
approximate solution functions. Give above input, program
generates approximation solutions specified problemm terms
specified functions which optimum least-squares sense.
.B
CACM August, 1966
.A
Cuthill, E.
.N
CA660814 ES March 17, 1982 10:10 AM
.X
1396 5 3200
3200 5 3200
3200 5 3200
3200 5 3200
964 6 3200
1028 6 3200
1029 6 3200
1083 6 3200
1132 6 3200
1214 6 3200
1278 6 3200
1334 6 3200
1365 6 3200
1386 6 3200
1387 6 3200
1388 6 3200
1392 6 3200
1393 6 3200
1394 6 3200
1395 6 3200
1396 6 3200
1397 6 3200
1496 6 3200
284 6 3200
407 6 3200
3199 6 3200
3200 6 3200
3201 6 3200
3202 6 3200
3203 6 3200
3204 6 3200
561 6 3200
730 6 3200
.I 3201
.T
Symbolic Manipulation Poisson Series
.W
Poisson series three variables manageable symbolically through
set formal subroutines written partially IBM 7094 machine language,
but called FORTRAN language use Fortran programs.
effort has been made supply those operations which most required
celestial mechanics. routines entirely self-contained subroutines
require only standard Fortran input/output units 5 6; they design
avoid waste overflow core storage space.
.B
CACM August, 1966
.A
Danby, J.
Deprit, A.
Rom, A.
.N
CA660815 ES March 17, 1982 10:10 AM
.X
1396 5 3201
3201 5 3201
3201 5 3201
3201 5 3201
964 6 3201
1028 6 3201
1029 6 3201
1083 6 3201
1132 6 3201
1214 6 3201
1278 6 3201
1334 6 3201
1365 6 3201
1386 6 3201
1387 6 3201
1388 6 3201
1392 6 3201
1393 6 3201
1394 6 3201
1395 6 3201
1396 6 3201
1397 6 3201
1496 6 3201
284 6 3201
407 6 3201
3199 6 3201
3200 6 3201
3201 6 3201
3202 6 3201
3203 6 3201
3204 6 3201
561 6 3201
730 6 3201
.I 3202
.T
MANIP: Computer System Algebra Analytic Differentiation
.W
mathematical expression operated upon written FORTRAN-like
notation stored computer string BCD characters all
blanks removed. may complicated desired (parentheses nested without
restriction, etc.) so long entire expression (or any subsequent form)
does not exceed 5000 characters. problemm performing algebraic operations
obtaining analytic derivatives translated into identifying
manipulating character sequences. Programs which resulted were written
FORTRAN IV CDC 3600 discussed detail.
.B
CACM August, 1966
.A
Bender, B.
.N
CA660816 ES March 17, 1982 10:10 AM
.X
1396 5 3202
3202 5 3202
3202 5 3202
3202 5 3202
964 6 3202
1028 6 3202
1029 6 3202
1083 6 3202
1132 6 3202
1214 6 3202
1278 6 3202
1334 6 3202
1365 6 3202
1386 6 3202
1387 6 3202
1388 6 3202
1392 6 3202
1393 6 3202
1394 6 3202
1395 6 3202
1396 6 3202
1397 6 3202
1496 6 3202
284 6 3202
407 6 3202
3199 6 3202
3200 6 3202
3201 6 3202
3202 6 3202
3203 6 3202
3204 6 3202
561 6 3202
730 6 3202
.I 3203
.T
GRAD Assistant - Program Symbolic Algebraic Manipulation
Differentiation
.W
General Recursive Algebra Differentiation Assistant (GRAD Assistant)
now under development set LISP functions which symbolically manipulate
abd differentiate algebraic expressions. designed use problemms
which large amount routine manipulation done program
without human intervention. Thus, GRAD must recognize necessary simplifications
without external guidance. While some complicated expressions (notably ones
involving nested radicals trigonometric functions) do not yield completely
present version, has proved quite useful indeed.
.B
CACM August, 1966
.A
Fletcher, J. G.
.N
CA660817 ES March 17, 1982 10:10 AM
.X
1396 5 3203
3203 5 3203
3203 5 3203
3203 5 3203
964 6 3203
1028 6 3203
1029 6 3203
1083 6 3203
1132 6 3203
1214 6 3203
1278 6 3203
1334 6 3203
1365 6 3203
1386 6 3203
1387 6 3203
1388 6 3203
1392 6 3203
1393 6 3203
1394 6 3203
1395 6 3203
1396 6 3203
1397 6 3203
1496 6 3203
284 6 3203
407 6 3203
3199 6 3203
3200 6 3203
3201 6 3203
3202 6 3203
3203 6 3203
3204 6 3203
561 6 3203
730 6 3203
.I 3204
.T
On-Line Program Non-Numerical Algebra
.W
goal program make step toward te design automated
mathematical assistant. Some requirements such program are: must
easy access, result must obtained reasonably short
time. Accordingly program written time-shared computer. Q-32
computer System Development Corporation, Santa Monica, California,
chosen because also had LISP 1.5 compiler. Programming debugging
done remote teletype console Stanford University.
.B
CACM August, 1966
.A
Korsvold, K.
.N
CA660818 ES March 17, 1982 10:10 AM
.X
1396 5 3204
3204 5 3204
3204 5 3204
3204 5 3204
964 6 3204
1028 6 3204
1029 6 3204
1083 6 3204
1132 6 3204
1214 6 3204
1278 6 3204
1334 6 3204
1365 6 3204
1386 6 3204
1387 6 3204
1388 6 3204
1392 6 3204
1393 6 3204
1394 6 3204
1395 6 3204
1396 6 3204
1397 6 3204
1496 6 3204
284 6 3204
407 6 3204
3199 6 3204
3200 6 3204
3201 6 3204
3202 6 3204
3203 6 3204
3204 6 3204
561 6 3204
730 6 3204
